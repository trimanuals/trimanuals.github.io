var ht=(me,ye,ve)=>{if(!ye.has(me))throw TypeError("Cannot "+ve)};var i=(me,ye,ve)=>(ht(me,ye,"read from private field"),ve?ve.call(me):ye.get(me)),S=(me,ye,ve)=>{if(ye.has(me))throw TypeError("Cannot add the same private member more than once");ye instanceof WeakSet?ye.add(me):ye.set(me,ve)},V=(me,ye,ve,Oe)=>(ht(me,ye,"write to private field"),Oe?Oe.call(me,ve):ye.set(me,ve),ve),Ft=(me,ye,ve,Oe)=>({set _(Pe){V(me,ye,Pe,ve)},get _(){return i(me,ye,Oe)}}),I=(me,ye,ve)=>(ht(me,ye,"access private method"),ve);import{bG as li}from"./index.6def9867.js";function hi(me,ye){return ye.forEach(function(ve){ve&&typeof ve!="string"&&!Array.isArray(ve)&&Object.keys(ve).forEach(function(Oe){if(Oe!=="default"&&!(Oe in me)){var Pe=Object.getOwnPropertyDescriptor(ve,Oe);Object.defineProperty(me,Oe,Pe.get?Pe:{enumerable:!0,get:function(){return ve[Oe]}})}})}),Object.freeze(Object.defineProperty(me,Symbol.toStringTag,{value:"Module"}))}var Nt={exports:{}};(function(me,ye){(function(Oe,Pe){me.exports=Oe.pdfjsViewer=Pe()})(globalThis,()=>(()=>{var ve=[,(J,r,b)=>{var R,P,M,j,Vt,Z,ut,Q,ct,be,Bt,we,Ht,Se,Ut,xe,dt,Me,zt,k,Wt,Y,it,te,Ye,m,Ze,$,jt,ee,ft,ue,gt,ce,nt,pe,$t,Ae,pt,Ie,_t,l,Je;Object.defineProperty(r,"__esModule",{value:!0}),r.PDFFindController=r.FindState=void 0;var s=b(2),n=b(3),F=b(4);const E={FOUND:0,NOT_FOUND:1,WRAPPED:2,PENDING:3};r.FindState=E;const d=250,h=-50,p=-400,L={"\u2010":"-","\u2018":"'","\u2019":"'","\u201A":"'","\u201B":"'","\u201C":'"',"\u201D":'"',"\u201E":'"',"\u201F":'"',"\xBC":"1/4","\xBD":"1/2","\xBE":"3/4"},D=new Set([12441,12442,2381,2509,2637,2765,2893,3021,3149,3277,3387,3388,3405,3530,3642,3770,3972,4153,4154,5908,5940,6098,6752,6980,7082,7083,7154,7155,11647,43014,43052,43204,43347,43456,43766,44013,3158,3953,3954,3962,3963,3964,3965,3968,3956]);let C;const c=/\p{M}+/gu,T=/([.*+?^${}()|[\]\\])|(\p{P})|(\s+)|(\p{M})|(\p{L})/gu,o=/([^\p{M}])\p{M}*$/u,t=/^\p{M}*([^\p{M}])/u,g=/[\uAC00-\uD7AF\uFA6C\uFACF-\uFAD1\uFAD5-\uFAD7]+/g,v=new Map,H="[\\u1100-\\u1112\\ud7a4-\\ud7af\\ud84a\\ud84c\\ud850\\ud854\\ud857\\ud85f]",x=new Map;let B=null,W=null;function ne(A){const a=[];let f;for(;(f=g.exec(A))!==null;){let{index:He}=f;for(const ke of f[0]){let De=v.get(ke);De||(De=ke.normalize("NFD").length,v.set(ke,De)),a.push([De,He++])}}let _;if(a.length===0&&B)_=B;else if(a.length>0&&W)_=W;else{const He=Object.keys(L).join(""),ke=(0,n.getNormalizeWithNFKC)(),Fe=`([${He}])|([${ke}])|((?:\u3099|\u309A)\\n)|(\\p{M}+(?:-\\n)?)|(\\S-\\n)|((?:\\p{Ideographic}|[\u3040-\u30FF])\\n)|(\\n)`;a.length===0?_=B=new RegExp(Fe+"|(\\u0000)","gum"):_=W=new RegExp(Fe+`|(${H})`,"gum")}const y=[];for(;(f=c.exec(A))!==null;)y.push([f[0].length,f.index]);let X=A.normalize("NFD");const K=[[0,0]];let oe=0,he=0,re=0,de=0,ge=0,Re=!1;return X=X.replace(_,(He,ke,De,_e,Fe,Xe,We,lt,Ke,Ce)=>{var Dt,Ot,kt;if(Ce-=de,ke){const Le=L[ke],Ve=Le.length;for(let Be=1;Be<Ve;Be++)K.push([Ce-re+Be,re-Be]);return re-=Ve-1,Le}if(De){let Le=x.get(De);Le||(Le=De.normalize("NFKC"),x.set(De,Le));const Ve=Le.length;for(let Be=1;Be<Ve;Be++)K.push([Ce-re+Be,re-Be]);return re-=Ve-1,Le}if(_e)return Re=!0,Ce+ge===((Dt=y[oe])==null?void 0:Dt[1])?++oe:(K.push([Ce-1-re+1,re-1]),re-=1,de+=1),K.push([Ce-re+1,re]),de+=1,ge+=1,_e.charAt(0);if(Fe){const Le=Fe.endsWith(`
`),Ve=Le?Fe.length-2:Fe.length;Re=!0;let Be=Ve;Ce+ge===((Ot=y[oe])==null?void 0:Ot[1])&&(Be-=y[oe][0],++oe);for(let tt=1;tt<=Be;tt++)K.push([Ce-1-re+tt,re-tt]);return re-=Be,de+=Be,Le?(Ce+=Ve-1,K.push([Ce-re+1,1+re]),re+=1,de+=1,ge+=1,Fe.slice(0,Ve)):Fe}if(Xe){const Le=Xe.length-2;return K.push([Ce-re+Le,1+re]),re+=1,de+=1,ge+=1,Xe.slice(0,-2)}if(We){const Le=We.length-1;return K.push([Ce-re+Le,re]),de+=1,ge+=1,We.slice(0,-1)}if(lt)return K.push([Ce-re+1,re-1]),re-=1,de+=1,ge+=1," ";if(Ce+ge===((kt=a[he])==null?void 0:kt[1])){const Le=a[he][0]-1;++he;for(let Ve=1;Ve<=Le;Ve++)K.push([Ce-(re-Ve),re-Ve]);re-=Le,de+=Le}return Ke}),K.push([X.length,re]),[X,K,Re]}function w(A,a,f){if(!A)return[a,f];const _=a,y=a+f-1;let X=(0,s.binarySearchFirstItem)(A,de=>de[0]>=_);A[X][0]>_&&--X;let K=(0,s.binarySearchFirstItem)(A,de=>de[0]>=y,X);A[K][0]>y&&--K;const oe=_+A[X][1],re=y+A[K][1]+1-oe;return[oe,re]}class z{constructor({linkService:a,eventBus:f,updateMatchesCountOnProgress:_=!0}){S(this,j);S(this,Z);S(this,Q);S(this,be);S(this,we);S(this,Se);S(this,xe);S(this,Me);S(this,k);S(this,Y);S(this,te);S(this,m);S(this,$);S(this,ee);S(this,ue);S(this,ce);S(this,pe);S(this,Ae);S(this,Ie);S(this,l);S(this,R,null);S(this,P,!0);S(this,M,0);this._linkService=a,this._eventBus=f,V(this,P,_),this.onIsPageVisible=null,I(this,Z,ut).call(this),f._on("find",I(this,j,Vt).bind(this)),f._on("findbarclose",I(this,pe,$t).bind(this))}get highlightMatches(){return this._highlightMatches}get pageMatches(){return this._pageMatches}get pageMatchesLength(){return this._pageMatchesLength}get selected(){return this._selected}get state(){return i(this,R)}setDocument(a){this._pdfDocument&&I(this,Z,ut).call(this),a&&(this._pdfDocument=a,this._firstPageCapability.resolve())}scrollMatchIntoView({element:a=null,selectedLeft:f=0,pageIndex:_=-1,matchIndex:y=-1}){if(!this._scrollMatches||!a)return;if(y===-1||y!==this._selected.matchIdx)return;if(_===-1||_!==this._selected.pageIdx)return;this._scrollMatches=!1;const X={top:h,left:f+p};(0,s.scrollIntoView)(a,X,!0)}}R=new WeakMap,P=new WeakMap,M=new WeakMap,j=new WeakSet,Vt=function(a){if(!a)return;a.phraseSearch===!1&&(console.error("The `phraseSearch`-parameter was removed, please provide an Array of strings in the `query`-parameter instead."),typeof a.query=="string"&&(a.query=a.query.match(/\S+/g)));const f=this._pdfDocument,{type:_}=a;(i(this,R)===null||I(this,be,Bt).call(this,a))&&(this._dirtyMatch=!0),V(this,R,a),_!=="highlightallchange"&&I(this,l,Je).call(this,E.PENDING),this._firstPageCapability.promise.then(()=>{if(!this._pdfDocument||f&&this._pdfDocument!==f)return;I(this,k,Wt).call(this);const y=!this._highlightMatches,X=!!this._findTimeout;this._findTimeout&&(clearTimeout(this._findTimeout),this._findTimeout=null),_?this._dirtyMatch?I(this,m,Ze).call(this):_==="again"?(I(this,m,Ze).call(this),y&&i(this,R).highlightAll&&I(this,te,Ye).call(this)):_==="highlightallchange"?(X?I(this,m,Ze).call(this):this._highlightMatches=!0,I(this,te,Ye).call(this)):I(this,m,Ze).call(this):this._findTimeout=setTimeout(()=>{I(this,m,Ze).call(this),this._findTimeout=null},d)})},Z=new WeakSet,ut=function(){this._highlightMatches=!1,this._scrollMatches=!1,this._pdfDocument=null,this._pageMatches=[],this._pageMatchesLength=[],V(this,M,0),V(this,R,null),this._selected={pageIdx:-1,matchIdx:-1},this._offset={pageIdx:null,matchIdx:null,wrapped:!1},this._extractTextPromises=[],this._pageContents=[],this._pageDiffs=[],this._hasDiacritics=[],this._matchesCountTotal=0,this._pagesToSearch=null,this._pendingFindMatches=new Set,this._resumePageIdx=null,this._dirtyMatch=!1,clearTimeout(this._findTimeout),this._findTimeout=null,this._firstPageCapability=new F.PromiseCapability},Q=new WeakSet,ct=function(){const{query:a}=i(this,R);return typeof a=="string"?(a!==this._rawQuery&&(this._rawQuery=a,[this._normalizedQuery]=ne(a)),this._normalizedQuery):(a||[]).filter(f=>!!f).map(f=>ne(f)[0])},be=new WeakSet,Bt=function(a){var K,oe;const f=a.query,_=i(this,R).query,y=typeof f;if(y!==typeof _)return!0;if(y==="string"){if(f!==_)return!0}else if(JSON.stringify(f)!==JSON.stringify(_))return!0;switch(a.type){case"again":const he=this._selected.pageIdx+1,re=this._linkService;return he>=1&&he<=re.pagesCount&&he!==re.page&&!((oe=(K=this.onIsPageVisible)==null?void 0:K.call(this,he))==null||oe);case"highlightallchange":return!1}return!0},we=new WeakSet,Ht=function(a,f,_){let y=a.slice(0,f).match(o);if(y){const X=a.charCodeAt(f),K=y[1].charCodeAt(0);if((0,n.getCharacterType)(X)===(0,n.getCharacterType)(K))return!1}if(y=a.slice(f+_).match(t),y){const X=a.charCodeAt(f+_-1),K=y[1].charCodeAt(0);if((0,n.getCharacterType)(X)===(0,n.getCharacterType)(K))return!1}return!0},Se=new WeakSet,Ut=function(a,f,_,y){const X=this._pageMatches[_]=[],K=this._pageMatchesLength[_]=[];if(!a)return;const oe=this._pageDiffs[_];let he;for(;(he=a.exec(y))!==null;){if(f&&!I(this,we,Ht).call(this,y,he.index,he[0].length))continue;const[re,de]=w(oe,he.index,he[0].length);de&&(X.push(re),K.push(de))}},xe=new WeakSet,dt=function(a,f){const{matchDiacritics:_}=i(this,R);let y=!1;a=a.replaceAll(T,(K,oe,he,re,de,ge)=>oe?`[ ]*\\${oe}[ ]*`:he?`[ ]*${he}[ ]*`:re?"[ ]+":_?de||ge:de?D.has(de.charCodeAt(0))?de:"":f?(y=!0,`${ge}\\p{M}*`):ge);const X="[ ]*";return a.endsWith(X)&&(a=a.slice(0,a.length-X.length)),_&&f&&(C||(C=String.fromCharCode(...D)),y=!0,a=`${a}(?=[${C}]|[^\\p{M}]|$)`),[y,a]},Me=new WeakSet,zt=function(a){let f=i(this,Q,ct);if(f.length===0)return;const{caseSensitive:_,entireWord:y}=i(this,R),X=this._pageContents[a],K=this._hasDiacritics[a];let oe=!1;typeof f=="string"?[oe,f]=I(this,xe,dt).call(this,f,K):f=f.sort().reverse().map(de=>{const[ge,Re]=I(this,xe,dt).call(this,de,K);return oe||(oe=ge),`(${Re})`}).join("|");const he=`g${oe?"u":""}${_?"":"i"}`;f=f?new RegExp(f,he):null,I(this,Se,Ut).call(this,f,y,a,X),i(this,R).highlightAll&&I(this,Y,it).call(this,a),this._resumePageIdx===a&&(this._resumePageIdx=null,I(this,ee,ft).call(this));const re=this._pageMatches[a].length;this._matchesCountTotal+=re,i(this,P)?re>0&&I(this,Ie,_t).call(this):++Ft(this,M)._===this._linkService.pagesCount&&I(this,Ie,_t).call(this)},k=new WeakSet,Wt=function(){if(this._extractTextPromises.length>0)return;let a=Promise.resolve();const f={disableNormalization:!0};for(let _=0,y=this._linkService.pagesCount;_<y;_++){const X=new F.PromiseCapability;this._extractTextPromises[_]=X.promise,a=a.then(()=>this._pdfDocument.getPage(_+1).then(K=>K.getTextContent(f)).then(K=>{const oe=[];for(const he of K.items)oe.push(he.str),he.hasEOL&&oe.push(`
`);[this._pageContents[_],this._pageDiffs[_],this._hasDiacritics[_]]=ne(oe.join("")),X.resolve()},K=>{console.error(`Unable to get text content for page ${_+1}`,K),this._pageContents[_]="",this._pageDiffs[_]=null,this._hasDiacritics[_]=!1,X.resolve()}))}},Y=new WeakSet,it=function(a){this._scrollMatches&&this._selected.pageIdx===a&&(this._linkService.page=a+1),this._eventBus.dispatch("updatetextlayermatches",{source:this,pageIndex:a})},te=new WeakSet,Ye=function(){this._eventBus.dispatch("updatetextlayermatches",{source:this,pageIndex:-1})},m=new WeakSet,Ze=function(){const a=i(this,R).findPrevious,f=this._linkService.page-1,_=this._linkService.pagesCount;if(this._highlightMatches=!0,this._dirtyMatch){this._dirtyMatch=!1,this._selected.pageIdx=this._selected.matchIdx=-1,this._offset.pageIdx=f,this._offset.matchIdx=null,this._offset.wrapped=!1,this._resumePageIdx=null,this._pageMatches.length=0,this._pageMatchesLength.length=0,V(this,M,0),this._matchesCountTotal=0,I(this,te,Ye).call(this);for(let K=0;K<_;K++)this._pendingFindMatches.has(K)||(this._pendingFindMatches.add(K),this._extractTextPromises[K].then(()=>{this._pendingFindMatches.delete(K),I(this,Me,zt).call(this,K)}))}if(i(this,Q,ct).length===0){I(this,l,Je).call(this,E.FOUND);return}if(this._resumePageIdx)return;const X=this._offset;if(this._pagesToSearch=_,X.matchIdx!==null){const K=this._pageMatches[X.pageIdx].length;if(!a&&X.matchIdx+1<K||a&&X.matchIdx>0){X.matchIdx=a?X.matchIdx-1:X.matchIdx+1,I(this,ce,nt).call(this,!0);return}I(this,ue,gt).call(this,a)}I(this,ee,ft).call(this)},$=new WeakSet,jt=function(a){const f=this._offset,_=a.length,y=i(this,R).findPrevious;return _?(f.matchIdx=y?_-1:0,I(this,ce,nt).call(this,!0),!0):(I(this,ue,gt).call(this,y),f.wrapped&&(f.matchIdx=null,this._pagesToSearch<0)?(I(this,ce,nt).call(this,!1),!0):!1)},ee=new WeakSet,ft=function(){this._resumePageIdx!==null&&console.error("There can only be one pending page.");let a=null;do{const f=this._offset.pageIdx;if(a=this._pageMatches[f],!a){this._resumePageIdx=f;break}}while(!I(this,$,jt).call(this,a))},ue=new WeakSet,gt=function(a){const f=this._offset,_=this._linkService.pagesCount;f.pageIdx=a?f.pageIdx-1:f.pageIdx+1,f.matchIdx=null,this._pagesToSearch--,(f.pageIdx>=_||f.pageIdx<0)&&(f.pageIdx=a?_-1:0,f.wrapped=!0)},ce=new WeakSet,nt=function(a=!1){let f=E.NOT_FOUND;const _=this._offset.wrapped;if(this._offset.wrapped=!1,a){const y=this._selected.pageIdx;this._selected.pageIdx=this._offset.pageIdx,this._selected.matchIdx=this._offset.matchIdx,f=_?E.WRAPPED:E.FOUND,y!==-1&&y!==this._selected.pageIdx&&I(this,Y,it).call(this,y)}I(this,l,Je).call(this,f,i(this,R).findPrevious),this._selected.pageIdx!==-1&&(this._scrollMatches=!0,I(this,Y,it).call(this,this._selected.pageIdx))},pe=new WeakSet,$t=function(a){const f=this._pdfDocument;this._firstPageCapability.promise.then(()=>{!this._pdfDocument||f&&this._pdfDocument!==f||(this._findTimeout&&(clearTimeout(this._findTimeout),this._findTimeout=null),this._resumePageIdx&&(this._resumePageIdx=null,this._dirtyMatch=!0),I(this,l,Je).call(this,E.FOUND),this._highlightMatches=!1,I(this,te,Ye).call(this))})},Ae=new WeakSet,pt=function(){var X;const{pageIdx:a,matchIdx:f}=this._selected;let _=0,y=this._matchesCountTotal;if(f!==-1){for(let K=0;K<a;K++)_+=((X=this._pageMatches[K])==null?void 0:X.length)||0;_+=f+1}return(_<1||_>y)&&(_=y=0),{current:_,total:y}},Ie=new WeakSet,_t=function(){this._eventBus.dispatch("updatefindmatchescount",{source:this,matchesCount:I(this,Ae,pt).call(this)})},l=new WeakSet,Je=function(a,f=!1){var _,y;!i(this,P)&&(i(this,M)!==this._linkService.pagesCount||a===E.PENDING)||this._eventBus.dispatch("updatefindcontrolstate",{source:this,state:a,previous:f,matchesCount:I(this,Ae,pt).call(this),rawQuery:(y=(_=i(this,R))==null?void 0:_.query)!=null?y:null})},r.PDFFindController=z},(J,r)=>{var G,Y,ie,te,fe;Object.defineProperty(r,"__esModule",{value:!0}),r.animationStarted=r.VERTICAL_PADDING=r.UNKNOWN_SCALE=r.TextLayerMode=r.SpreadMode=r.SidebarView=r.ScrollMode=r.SCROLLBAR_PADDING=r.RenderingStates=r.ProgressBar=r.PresentationModeState=r.OutputScale=r.MIN_SCALE=r.MAX_SCALE=r.MAX_AUTO_SCALE=r.DEFAULT_SCALE_VALUE=r.DEFAULT_SCALE_DELTA=r.DEFAULT_SCALE=r.CursorTool=r.AutoPrintRegExp=void 0,r.apiPageLayoutToViewerModes=Ue,r.apiPageModeToSidebarView=Me,r.approximateFraction=R,r.backtrackBeforeAllVisibleElements=j,r.binarySearchFirstItem=z,r.docStyle=void 0,r.getActiveOrFocusedElement=xe,r.getPageSizeInches=M,r.getVisibleElements=u,r.isPortraitOrientation=Ee,r.isValidRotation=Q,r.isValidScrollMode=ae,r.isValidSpreadMode=be,r.normalizeWheelEventDelta=q,r.normalizeWheelEventDirection=Z,r.parseQueryString=W,r.removeNullCharacters=w,r.roundToDivide=P,r.scrollIntoView=x,r.toggleCheckedBtn=Qe,r.toggleExpandedBtn=k,r.watchScroll=B;const b="auto";r.DEFAULT_SCALE_VALUE=b;const s=1;r.DEFAULT_SCALE=s;const n=1.1;r.DEFAULT_SCALE_DELTA=n;const F=.1;r.MIN_SCALE=F;const E=10;r.MAX_SCALE=E;const d=0;r.UNKNOWN_SCALE=d;const h=1.25;r.MAX_AUTO_SCALE=h;const p=40;r.SCROLLBAR_PADDING=p;const L=5;r.VERTICAL_PADDING=L;const D={INITIAL:0,RUNNING:1,PAUSED:2,FINISHED:3};r.RenderingStates=D;const C={UNKNOWN:0,NORMAL:1,CHANGING:2,FULLSCREEN:3};r.PresentationModeState=C;const c={UNKNOWN:-1,NONE:0,THUMBS:1,OUTLINE:2,ATTACHMENTS:3,LAYERS:4};r.SidebarView=c;const T={DISABLE:0,ENABLE:1,ENABLE_PERMISSIONS:2};r.TextLayerMode=T;const o={UNKNOWN:-1,VERTICAL:0,HORIZONTAL:1,WRAPPED:2,PAGE:3};r.ScrollMode=o;const t={UNKNOWN:-1,NONE:0,ODD:1,EVEN:2};r.SpreadMode=t;const g={SELECT:0,HAND:1,ZOOM:2};r.CursorTool=g;const v=/\bprint\s*\(/;r.AutoPrintRegExp=v;class H{constructor(){const O=window.devicePixelRatio||1;this.sx=O,this.sy=O}get scaled(){return this.sx!==1||this.sy!==1}}r.OutputScale=H;function x(m,O,$=!1){let U=m.offsetParent;if(!U){console.error("offsetParent is not set -- cannot scroll");return}let ee=m.offsetTop+m.clientTop,se=m.offsetLeft+m.clientLeft;for(;U.clientHeight===U.scrollHeight&&U.clientWidth===U.scrollWidth||$&&(U.classList.contains("markedContent")||getComputedStyle(U).overflow==="hidden");)if(ee+=U.offsetTop,se+=U.offsetLeft,U=U.offsetParent,!U)return;O&&(O.top!==void 0&&(ee+=O.top),O.left!==void 0&&(se+=O.left,U.scrollLeft=se)),U.scrollTop=ee}function B(m,O){const $=function(se){ee||(ee=window.requestAnimationFrame(function(){ee=null;const le=m.scrollLeft,ce=U.lastX;le!==ce&&(U.right=le>ce),U.lastX=le;const Te=m.scrollTop,pe=U.lastY;Te!==pe&&(U.down=Te>pe),U.lastY=Te,O(U)}))},U={right:!0,down:!0,lastX:m.scrollLeft,lastY:m.scrollTop,_eventHandler:$};let ee=null;return m.addEventListener("scroll",$,!0),U}function W(m){const O=new Map;for(const[$,U]of new URLSearchParams(m))O.set($.toLowerCase(),U);return O}const ne=/[\x01-\x1F]/g;function w(m,O=!1){return typeof m!="string"?(console.error("The argument must be a string."),m):(O&&(m=m.replaceAll(ne," ")),m.replaceAll("\0",""))}function z(m,O,$=0){let U=$,ee=m.length-1;if(ee<0||!O(m[ee]))return m.length;if(O(m[U]))return U;for(;U<ee;){const se=U+ee>>1,ue=m[se];O(ue)?ee=se:U=se+1}return U}function R(m){if(Math.floor(m)===m)return[m,1];const O=1/m,$=8;if(O>$)return[1,$];if(Math.floor(O)===O)return[1,O];const U=m>1?O:m;let ee=0,se=1,ue=1,le=1;for(;;){const Te=ee+ue,pe=se+le;if(pe>$)break;U<=Te/pe?(ue=Te,le=pe):(ee=Te,se=pe)}let ce;return U-ee/se<ue/le-U?ce=U===m?[ee,se]:[se,ee]:ce=U===m?[ue,le]:[le,ue],ce}function P(m,O){const $=m%O;return $===0?m:Math.round(m-$+O)}function M({view:m,userUnit:O,rotate:$}){const[U,ee,se,ue]=m,le=$%180!==0,ce=(se-U)/72*O,Te=(ue-ee)/72*O;return{width:le?Te:ce,height:le?ce:Te}}function j(m,O,$){if(m<2)return m;let U=O[m].div,ee=U.offsetTop+U.clientTop;ee>=$&&(U=O[m-1].div,ee=U.offsetTop+U.clientTop);for(let se=m-2;se>=0&&(U=O[se].div,!(U.offsetTop+U.clientTop+U.clientHeight<=ee));--se)m=se;return m}function u({scrollEl:m,views:O,sortByVisibility:$=!1,horizontal:U=!1,rtl:ee=!1}){const se=m.scrollTop,ue=se+m.clientHeight,le=m.scrollLeft,ce=le+m.clientWidth;function Te(A){const a=A.div;return a.offsetTop+a.clientTop+a.clientHeight>se}function pe(A){const a=A.div,f=a.offsetLeft+a.clientLeft,_=f+a.clientWidth;return ee?f<ce:_>le}const ze=[],Ae=new Set,Ge=O.length;let Ie=z(O,U?pe:Te);Ie>0&&Ie<Ge&&!U&&(Ie=j(Ie,O,se));let e=U?ce:-1;for(let A=Ie;A<Ge;A++){const a=O[A],f=a.div,_=f.offsetLeft+f.clientLeft,y=f.offsetTop+f.clientTop,X=f.clientWidth,K=f.clientHeight,oe=_+X,he=y+K;if(e===-1)he>=ue&&(e=he);else if((U?_:y)>e)break;if(he<=se||y>=ue||oe<=le||_>=ce)continue;const re=Math.max(0,se-y)+Math.max(0,he-ue),de=Math.max(0,le-_)+Math.max(0,oe-ce),ge=(K-re)/K,Re=(X-de)/X,He=ge*Re*100|0;ze.push({id:a.id,x:_,y,view:a,percent:He,widthPercent:Re*100|0}),Ae.add(a.id)}const l=ze[0],N=ze.at(-1);return $&&ze.sort(function(A,a){const f=A.percent-a.percent;return Math.abs(f)>.001?-f:A.id-a.id}),{first:l,last:N,views:ze,ids:Ae}}function Z(m){let O=Math.hypot(m.deltaX,m.deltaY);const $=Math.atan2(m.deltaY,m.deltaX);return-.25*Math.PI<$&&$<.75*Math.PI&&(O=-O),O}function q(m){const O=m.deltaMode;let $=Z(m);const U=30,ee=30;return O===WheelEvent.DOM_DELTA_PIXEL?$/=U*ee:O===WheelEvent.DOM_DELTA_LINE&&($/=ee),$}function Q(m){return Number.isInteger(m)&&m%90===0}function ae(m){return Number.isInteger(m)&&Object.values(o).includes(m)&&m!==o.UNKNOWN}function be(m){return Number.isInteger(m)&&Object.values(t).includes(m)&&m!==t.UNKNOWN}function Ee(m){return m.width<=m.height}const we=new Promise(function(m){window.requestAnimationFrame(m)});r.animationStarted=we;const Ne=document.documentElement.style;r.docStyle=Ne;function Se(m,O,$){return Math.min(Math.max(m,O),$)}class $e{constructor(O){S(this,G,null);S(this,Y,null);S(this,ie,0);S(this,te,null);S(this,fe,!0);V(this,G,O.classList),V(this,te,O.style)}get percent(){return i(this,ie)}set percent(O){if(V(this,ie,Se(O,0,100)),isNaN(O)){i(this,G).add("indeterminate");return}i(this,G).remove("indeterminate"),i(this,te).setProperty("--progressBar-percent",`${i(this,ie)}%`)}setWidth(O){if(!O)return;const U=O.parentNode.offsetWidth-O.offsetWidth;U>0&&i(this,te).setProperty("--progressBar-end-offset",`${U}px`)}setDisableAutoFetch(O=5e3){isNaN(i(this,ie))||(i(this,Y)&&clearTimeout(i(this,Y)),this.show(),V(this,Y,setTimeout(()=>{V(this,Y,null),this.hide()},O)))}hide(){!i(this,fe)||(V(this,fe,!1),i(this,G).add("hidden"))}show(){i(this,fe)||(V(this,fe,!0),i(this,G).remove("hidden"))}}G=new WeakMap,Y=new WeakMap,ie=new WeakMap,te=new WeakMap,fe=new WeakMap,r.ProgressBar=$e;function xe(){let m=document,O=m.activeElement||m.querySelector(":focus");for(;O!=null&&O.shadowRoot;)m=O.shadowRoot,O=m.activeElement||m.querySelector(":focus");return O}function Ue(m){let O=o.VERTICAL,$=t.NONE;switch(m){case"SinglePage":O=o.PAGE;break;case"OneColumn":break;case"TwoPageLeft":O=o.PAGE;case"TwoColumnLeft":$=t.ODD;break;case"TwoPageRight":O=o.PAGE;case"TwoColumnRight":$=t.EVEN;break}return{scrollMode:O,spreadMode:$}}function Me(m){switch(m){case"UseNone":return c.NONE;case"UseThumbs":return c.THUMBS;case"UseOutlines":return c.OUTLINE;case"UseAttachments":return c.ATTACHMENTS;case"UseOC":return c.LAYERS}return c.NONE}function Qe(m,O,$=null){m.classList.toggle("toggled",O),m.setAttribute("aria-checked",O),$==null||$.classList.toggle("hidden",!O)}function k(m,O,$=null){m.classList.toggle("toggled",O),m.setAttribute("aria-expanded",O),$==null||$.classList.toggle("hidden",!O)}},(J,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.CharacterType=void 0,r.getCharacterType=c,r.getNormalizeWithNFKC=o;const b={SPACE:0,ALPHA_LETTER:1,PUNCT:2,HAN_LETTER:3,KATAKANA_LETTER:4,HIRAGANA_LETTER:5,HALFWIDTH_KATAKANA_LETTER:6,THAI_LETTER:7};r.CharacterType=b;function s(t){return t<11904}function n(t){return(t&65408)===0}function F(t){return t>=97&&t<=122||t>=65&&t<=90}function E(t){return t>=48&&t<=57}function d(t){return t===32||t===9||t===13||t===10}function h(t){return t>=13312&&t<=40959||t>=63744&&t<=64255}function p(t){return t>=12448&&t<=12543}function L(t){return t>=12352&&t<=12447}function D(t){return t>=65376&&t<=65439}function C(t){return(t&65408)===3584}function c(t){return s(t)?n(t)?d(t)?b.SPACE:F(t)||E(t)||t===95?b.ALPHA_LETTER:b.PUNCT:C(t)?b.THAI_LETTER:t===160?b.SPACE:b.ALPHA_LETTER:h(t)?b.HAN_LETTER:p(t)?b.KATAKANA_LETTER:L(t)?b.HIRAGANA_LETTER:D(t)?b.HALFWIDTH_KATAKANA_LETTER:b.ALPHA_LETTER}let T;function o(){return T||(T="\xA0\xA8\xAA\xAF\xB2-\xB5\xB8-\xBA\xBC-\xBE\u0132-\u0133\u013F-\u0140\u0149\u017F\u01C4-\u01CC\u01F1-\u01F3\u02B0-\u02B8\u02D8-\u02DD\u02E0-\u02E4\u0374\u037A\u037E\u0384-\u0385\u0387\u03D0-\u03D6\u03F0-\u03F2\u03F4-\u03F5\u03F9\u0587\u0675-\u0678\u0958-\u095F\u09DC-\u09DD\u09DF\u0A33\u0A36\u0A59-\u0A5B\u0A5E\u0B5C-\u0B5D\u0E33\u0EB3\u0EDC-\u0EDD\u0F0C\u0F43\u0F4D\u0F52\u0F57\u0F5C\u0F69\u10FC\u1D2C-\u1D2E\u1D30-\u1D3A\u1D3C-\u1D4D\u1D4F-\u1D6A\u1D78\u1D9B-\u1DBF\u1E9A-\u1E9B\u1F71\u1F73\u1F75\u1F77\u1F79\u1F7B\u1F7D\u1FBB\u1FBD-\u1FC1\u1FC9\u1FCB\u1FCD-\u1FCF\u1FD3\u1FDB\u1FDD-\u1FDF\u1FE3\u1FEB\u1FED-\u1FEF\u1FF9\u1FFB\u1FFD-\u1FFE\u2000-\u200A\u2011\u2017\u2024-\u2026\u202F\u2033-\u2034\u2036-\u2037\u203C\u203E\u2047-\u2049\u2057\u205F\u2070-\u2071\u2074-\u208E\u2090-\u209C\u20A8\u2100-\u2103\u2105-\u2107\u2109-\u2113\u2115-\u2116\u2119-\u211D\u2120-\u2122\u2124\u2126\u2128\u212A-\u212D\u212F-\u2131\u2133-\u2139\u213B-\u2140\u2145-\u2149\u2150-\u217F\u2189\u222C-\u222D\u222F-\u2230\u2329-\u232A\u2460-\u24EA\u2A0C\u2A74-\u2A76\u2ADC\u2C7C-\u2C7D\u2D6F\u2E9F\u2EF3\u2F00-\u2FD5\u3000\u3036\u3038-\u303A\u309B-\u309C\u309F\u30FF\u3131-\u318E\u3192-\u319F\u3200-\u321E\u3220-\u3247\u3250-\u327E\u3280-\u33FF\uA69C-\uA69D\uA770\uA7F2-\uA7F4\uA7F8-\uA7F9\uAB5C-\uAB5F\uAB69\uF900-\uFA0D\uFA10\uFA12\uFA15-\uFA1E\uFA20\uFA22\uFA25-\uFA26\uFA2A-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB36\uFB38-\uFB3C\uFB3E\uFB40-\uFB41\uFB43-\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFC\uFE10-\uFE19\uFE30-\uFE44\uFE47-\uFE52\uFE54-\uFE66\uFE68-\uFE6B\uFE70-\uFE72\uFE74\uFE76-\uFEFC\uFF01-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\uFFE0-\uFFE6"),T}},J=>{J.exports=globalThis.pdfjsLib},(J,r,b)=>{var p,L,mt,C,Gt;Object.defineProperty(r,"__esModule",{value:!0}),r.SimpleLinkService=r.PDFLinkService=r.LinkTarget=void 0;var s=b(2);const n="noopener noreferrer nofollow",F={NONE:0,SELF:1,BLANK:2,PARENT:3,TOP:4};r.LinkTarget=F;function E(o,{url:t,target:g,rel:v,enabled:H=!0}={}){if(!t||typeof t!="string")throw new Error('A valid "url" parameter must provided.');H?o.href=o.title=t:(o.href="",o.title=`Disabled: ${t}`,o.onclick=()=>!1);let x="";switch(g){case F.NONE:break;case F.SELF:x="_self";break;case F.BLANK:x="_blank";break;case F.PARENT:x="_parent";break;case F.TOP:x="_top";break}o.target=x,o.rel=typeof v=="string"?v:n}const T=class{constructor({eventBus:t,externalLinkTarget:g=null,externalLinkRel:v=null,ignoreDestinationZoom:H=!1}={}){S(this,L);S(this,p,new Map);this.eventBus=t,this.externalLinkTarget=g,this.externalLinkRel=v,this.externalLinkEnabled=!0,this._ignoreDestinationZoom=H,this.baseUrl=null,this.pdfDocument=null,this.pdfViewer=null,this.pdfHistory=null}setDocument(t,g=null){this.baseUrl=g,this.pdfDocument=t,i(this,p).clear()}setViewer(t){this.pdfViewer=t}setHistory(t){this.pdfHistory=t}get pagesCount(){return this.pdfDocument?this.pdfDocument.numPages:0}get page(){return this.pdfViewer.currentPageNumber}set page(t){this.pdfViewer.currentPageNumber=t}get rotation(){return this.pdfViewer.pagesRotation}set rotation(t){this.pdfViewer.pagesRotation=t}get isInPresentationMode(){return this.pdfViewer.isInPresentationMode}async goToDestination(t){if(!this.pdfDocument)return;let g,v;if(typeof t=="string"?(g=t,v=await this.pdfDocument.getDestination(t)):(g=null,v=await t),!Array.isArray(v)){console.error(`PDFLinkService.goToDestination: "${v}" is not a valid destination array, for dest="${t}".`);return}I(this,L,mt).call(this,t,g,v)}goToPage(t){if(!this.pdfDocument)return;const g=typeof t=="string"&&this.pdfViewer.pageLabelToPageNumber(t)||t|0;if(!(Number.isInteger(g)&&g>0&&g<=this.pagesCount)){console.error(`PDFLinkService.goToPage: "${t}" is not a valid page.`);return}this.pdfHistory&&(this.pdfHistory.pushCurrentPosition(),this.pdfHistory.pushPage(g)),this.pdfViewer.scrollPageIntoView({pageNumber:g})}addLinkAttributes(t,g,v=!1){E(t,{url:g,target:v?F.BLANK:this.externalLinkTarget,rel:this.externalLinkRel,enabled:this.externalLinkEnabled})}getDestinationHash(t){if(typeof t=="string"){if(t.length>0)return this.getAnchorUrl("#"+escape(t))}else if(Array.isArray(t)){const g=JSON.stringify(t);if(g.length>0)return this.getAnchorUrl("#"+escape(g))}return this.getAnchorUrl("")}getAnchorUrl(t){return this.baseUrl?this.baseUrl+t:t}setHash(t){var H;if(!this.pdfDocument)return;let g,v;if(t.includes("=")){const x=(0,s.parseQueryString)(t);if(x.has("search")){const B=x.get("search").replaceAll('"',""),W=x.get("phrase")==="true";this.eventBus.dispatch("findfromurlhash",{source:this,query:W?B:B.match(/\S+/g)})}if(x.has("page")&&(g=x.get("page")|0||1),x.has("zoom")){const B=x.get("zoom").split(","),W=B[0],ne=parseFloat(W);W.includes("Fit")?W==="Fit"||W==="FitB"?v=[null,{name:W}]:W==="FitH"||W==="FitBH"||W==="FitV"||W==="FitBV"?v=[null,{name:W},B.length>1?B[1]|0:null]:W==="FitR"?B.length!==5?console.error('PDFLinkService.setHash: Not enough parameters for "FitR".'):v=[null,{name:W},B[1]|0,B[2]|0,B[3]|0,B[4]|0]:console.error(`PDFLinkService.setHash: "${W}" is not a valid zoom value.`):v=[null,{name:"XYZ"},B.length>1?B[1]|0:null,B.length>2?B[2]|0:null,ne?ne/100:W]}v?this.pdfViewer.scrollPageIntoView({pageNumber:g||this.page,destArray:v,allowNegativeOffset:!0}):g&&(this.page=g),x.has("pagemode")&&this.eventBus.dispatch("pagemode",{source:this,mode:x.get("pagemode")}),x.has("nameddest")&&this.goToDestination(x.get("nameddest"))}else{v=unescape(t);try{v=JSON.parse(v),Array.isArray(v)||(v=v.toString())}catch{}if(typeof v=="string"||I(H=T,C,Gt).call(H,v)){this.goToDestination(v);return}console.error(`PDFLinkService.setHash: "${unescape(t)}" is not a valid destination.`)}}executeNamedAction(t){var g,v;switch(t){case"GoBack":(g=this.pdfHistory)==null||g.back();break;case"GoForward":(v=this.pdfHistory)==null||v.forward();break;case"NextPage":this.pdfViewer.nextPage();break;case"PrevPage":this.pdfViewer.previousPage();break;case"LastPage":this.page=this.pagesCount;break;case"FirstPage":this.page=1;break}this.eventBus.dispatch("namedaction",{source:this,action:t})}async executeSetOCGState(t){const g=this.pdfDocument,v=await this.pdfViewer.optionalContentConfigPromise;if(g!==this.pdfDocument)return;let H;for(const x of t.state){switch(x){case"ON":case"OFF":case"Toggle":H=x;continue}switch(H){case"ON":v.setVisibility(x,!0);break;case"OFF":v.setVisibility(x,!1);break;case"Toggle":const B=v.getGroup(x);B&&v.setVisibility(x,!B.visible);break}}this.pdfViewer.optionalContentConfigPromise=Promise.resolve(v)}cachePageRef(t,g){if(!g)return;const v=g.gen===0?`${g.num}R`:`${g.num}R${g.gen}`;i(this,p).set(v,t)}_cachedPageNumber(t){if(!t)return null;const g=t.gen===0?`${t.num}R`:`${t.num}R${t.gen}`;return i(this,p).get(g)||null}};let d=T;p=new WeakMap,L=new WeakSet,mt=function(t,g=null,v){const H=v[0];let x;if(typeof H=="object"&&H!==null){if(x=this._cachedPageNumber(H),!x){this.pdfDocument.getPageIndex(H).then(B=>{this.cachePageRef(B+1,H),I(this,L,mt).call(this,t,g,v)}).catch(()=>{console.error(`PDFLinkService.#goToDestinationHelper: "${H}" is not a valid page reference, for dest="${t}".`)});return}}else if(Number.isInteger(H))x=H+1;else{console.error(`PDFLinkService.#goToDestinationHelper: "${H}" is not a valid destination reference, for dest="${t}".`);return}if(!x||x<1||x>this.pagesCount){console.error(`PDFLinkService.#goToDestinationHelper: "${x}" is not a valid page number, for dest="${t}".`);return}this.pdfHistory&&(this.pdfHistory.pushCurrentPosition(),this.pdfHistory.push({namedDest:g,explicitDest:v,pageNumber:x})),this.pdfViewer.scrollPageIntoView({pageNumber:x,destArray:v,ignoreDestinationZoom:this._ignoreDestinationZoom})},C=new WeakSet,Gt=function(t){if(!Array.isArray(t))return!1;const g=t.length;if(g<2)return!1;const v=t[0];if(!(typeof v=="object"&&Number.isInteger(v.num)&&Number.isInteger(v.gen))&&!(Number.isInteger(v)&&v>=0))return!1;const H=t[1];if(!(typeof H=="object"&&typeof H.name=="string"))return!1;let x=!0;switch(H.name){case"XYZ":if(g!==5)return!1;break;case"Fit":case"FitB":return g===2;case"FitH":case"FitBH":case"FitV":case"FitBV":if(g!==3)return!1;break;case"FitR":if(g!==6)return!1;x=!1;break;default:return!1}for(let B=2;B<g;B++){const W=t[B];if(!(typeof W=="number"||x&&W===null))return!1}return!0},S(d,C),r.PDFLinkService=d;class h{constructor(){this.externalLinkEnabled=!0}get pagesCount(){return 0}get page(){return 0}set page(t){}get rotation(){return 0}set rotation(t){}get isInPresentationMode(){return!1}async goToDestination(t){}goToPage(t){}addLinkAttributes(t,g,v=!1){E(t,{url:g,enabled:this.externalLinkEnabled})}getDestinationHash(t){return"#"}getAnchorUrl(t){return"#"}setHash(t){}executeNamedAction(t){}executeSetOCGState(t){}cachePageRef(t,g){}}r.SimpleLinkService=h},(J,r,b)=>{var d,h,vt;Object.defineProperty(r,"__esModule",{value:!0}),r.AnnotationLayerBuilder=void 0;var s=b(4),n=b(7),F=b(2);class E{constructor({pageDiv:D,pdfPage:C,linkService:c,downloadManager:T,annotationStorage:o=null,imageResourcesPath:t="",renderForms:g=!0,l10n:v=n.NullL10n,enableScripting:H=!1,hasJSActionsPromise:x=null,fieldObjectsPromise:B=null,annotationCanvasMap:W=null,accessibilityManager:ne=null}){S(this,h);S(this,d,null);this.pageDiv=D,this.pdfPage=C,this.linkService=c,this.downloadManager=T,this.imageResourcesPath=t,this.renderForms=g,this.l10n=v,this.annotationStorage=o,this.enableScripting=H,this._hasJSActionsPromise=x||Promise.resolve(!1),this._fieldObjectsPromise=B||Promise.resolve(null),this._annotationCanvasMap=W,this._accessibilityManager=ne,this.annotationLayer=null,this.div=null,this._cancelled=!1,this._eventBus=c.eventBus}async render(D,C="display"){var g;if(this.div){if(this._cancelled||!this.annotationLayer)return;this.annotationLayer.update({viewport:D.clone({dontFlip:!0})});return}const[c,T,o]=await Promise.all([this.pdfPage.getAnnotations({intent:C}),this._hasJSActionsPromise,this._fieldObjectsPromise]);if(this._cancelled)return;const t=this.div=document.createElement("div");if(t.className="annotationLayer",this.pageDiv.append(t),c.length===0){this.hide();return}this.annotationLayer=new s.AnnotationLayer({div:t,accessibilityManager:this._accessibilityManager,annotationCanvasMap:this._annotationCanvasMap,l10n:this.l10n,page:this.pdfPage,viewport:D.clone({dontFlip:!0})}),await this.annotationLayer.render({annotations:c,imageResourcesPath:this.imageResourcesPath,renderForms:this.renderForms,linkService:this.linkService,downloadManager:this.downloadManager,annotationStorage:this.annotationStorage,enableScripting:this.enableScripting,hasJSActions:T,fieldObjects:o}),this.linkService.isInPresentationMode&&I(this,h,vt).call(this,F.PresentationModeState.FULLSCREEN),i(this,d)||(V(this,d,v=>{I(this,h,vt).call(this,v.state)}),(g=this._eventBus)==null||g._on("presentationmodechanged",i(this,d)))}cancel(){var D;this._cancelled=!0,i(this,d)&&((D=this._eventBus)==null||D._off("presentationmodechanged",i(this,d)),V(this,d,null))}hide(){!this.div||(this.div.hidden=!0)}}d=new WeakMap,h=new WeakSet,vt=function(D){if(!this.div)return;let C=!1;switch(D){case F.PresentationModeState.FULLSCREEN:C=!0;break;case F.PresentationModeState.NORMAL:break;default:return}for(const c of this.div.childNodes)c.hasAttribute("data-internal-link")||(c.inert=C)},r.AnnotationLayerBuilder=E},(J,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.NullL10n=void 0,r.getL10nFallback=s;const b={of_pages:"of {{pagesCount}}",page_of_pages:"({{pageNumber}} of {{pagesCount}})",document_properties_kb:"{{size_kb}} KB ({{size_b}} bytes)",document_properties_mb:"{{size_mb}} MB ({{size_b}} bytes)",document_properties_date_string:"{{date}}, {{time}}",document_properties_page_size_unit_inches:"in",document_properties_page_size_unit_millimeters:"mm",document_properties_page_size_orientation_portrait:"portrait",document_properties_page_size_orientation_landscape:"landscape",document_properties_page_size_name_a3:"A3",document_properties_page_size_name_a4:"A4",document_properties_page_size_name_letter:"Letter",document_properties_page_size_name_legal:"Legal",document_properties_page_size_dimension_string:"{{width}} \xD7 {{height}} {{unit}} ({{orientation}})",document_properties_page_size_dimension_name_string:"{{width}} \xD7 {{height}} {{unit}} ({{name}}, {{orientation}})",document_properties_linearized_yes:"Yes",document_properties_linearized_no:"No",additional_layers:"Additional Layers",page_landmark:"Page {{page}}",thumb_page_title:"Page {{page}}",thumb_page_canvas:"Thumbnail of Page {{page}}",find_reached_top:"Reached top of document, continued from bottom",find_reached_bottom:"Reached end of document, continued from top","find_match_count[one]":"{{current}} of {{total}} match","find_match_count[other]":"{{current}} of {{total}} matches","find_match_count_limit[one]":"More than {{limit}} match","find_match_count_limit[other]":"More than {{limit}} matches",find_not_found:"Phrase not found",page_scale_width:"Page Width",page_scale_fit:"Page Fit",page_scale_auto:"Automatic Zoom",page_scale_actual:"Actual Size",page_scale_percent:"{{scale}}%",loading_error:"An error occurred while loading the PDF.",invalid_file_error:"Invalid or corrupted PDF file.",missing_file_error:"Missing PDF file.",unexpected_response_error:"Unexpected server response.",rendering_error:"An error occurred while rendering the page.",annotation_date_string:"{{date}}, {{time}}",printing_not_supported:"Warning: Printing is not fully supported by this browser.",printing_not_ready:"Warning: The PDF is not fully loaded for printing.",web_fonts_disabled:"Web fonts are disabled: unable to use embedded PDF fonts.",free_text2_default_content:"Start typing\u2026",editor_free_text2_aria_label:"Text Editor",editor_ink2_aria_label:"Draw Editor",editor_ink_canvas_aria_label:"User-created image",editor_alt_text_button_label:"Alt text",editor_alt_text_edit_button_label:"Edit alt text",editor_alt_text_decorative_tooltip:"Marked as decorative"};b.print_progress_percent="{{progress}}%";function s(E,d){switch(E){case"find_match_count":E=`find_match_count[${d.total===1?"one":"other"}]`;break;case"find_match_count_limit":E=`find_match_count_limit[${d.limit===1?"one":"other"}]`;break}return b[E]||""}function n(E,d){return d?E.replaceAll(/\{\{\s*(\w+)\s*\}\}/g,(h,p)=>p in d?d[p]:"{{"+p+"}}"):E}const F={async getLanguage(){return"en-us"},async getDirection(){return"ltr"},async get(E,d=null,h=s(E,d)){return n(h,d)},async translate(E){}};r.NullL10n=F},(J,r,b)=>{var E;Object.defineProperty(r,"__esModule",{value:!0}),r.DownloadManager=void 0;var s=b(4);function n(d,h){const p=document.createElement("a");if(!p.click)throw new Error('DownloadManager: "a.click()" is not supported.');p.href=d,p.target="_parent","download"in p&&(p.download=h),(document.body||document.documentElement).append(p),p.click(),p.remove()}class F{constructor(){S(this,E,new WeakMap)}downloadUrl(h,p,L){if(!(0,s.createValidAbsoluteUrl)(h,"http://example.com")){console.error(`downloadUrl - not a valid URL: ${h}`);return}n(h+"#pdfjs.action=download",p)}downloadData(h,p,L){const D=URL.createObjectURL(new Blob([h],{type:L}));n(D,p)}openOrDownloadData(h,p,L){const C=(0,s.isPdfFile)(L)?"application/pdf":"";return this.downloadData(p,L,C),!1}download(h,p,L,D){const C=URL.createObjectURL(h);n(C,L)}}E=new WeakMap,r.DownloadManager=F},(J,r)=>{var E;Object.defineProperty(r,"__esModule",{value:!0}),r.WaitOnType=r.EventBus=r.AutomationEventBus=void 0,r.waitOnEventOrTimeout=s;const b={EVENT:"event",TIMEOUT:"timeout"};r.WaitOnType=b;function s({target:d,name:h,delay:p=0}){return new Promise(function(L,D){if(typeof d!="object"||!(h&&typeof h=="string")||!(Number.isInteger(p)&&p>=0))throw new Error("waitOnEventOrTimeout - invalid parameters.");function C(t){d instanceof n?d._off(h,c):d.removeEventListener(h,c),o&&clearTimeout(o),L(t)}const c=C.bind(null,b.EVENT);d instanceof n?d._on(h,c):d.addEventListener(h,c);const T=C.bind(null,b.TIMEOUT),o=setTimeout(T,p)})}class n{constructor(){S(this,E,Object.create(null))}on(h,p,L=null){this._on(h,p,{external:!0,once:L==null?void 0:L.once})}off(h,p,L=null){this._off(h,p,{external:!0,once:L==null?void 0:L.once})}dispatch(h,p){const L=i(this,E)[h];if(!L||L.length===0)return;let D;for(const{listener:C,external:c,once:T}of L.slice(0)){if(T&&this._off(h,C),c){(D||(D=[])).push(C);continue}C(p)}if(D){for(const C of D)C(p);D=null}}_on(h,p,L=null){var C;((C=i(this,E))[h]||(C[h]=[])).push({listener:p,external:(L==null?void 0:L.external)===!0,once:(L==null?void 0:L.once)===!0})}_off(h,p,L=null){const D=i(this,E)[h];if(!!D){for(let C=0,c=D.length;C<c;C++)if(D[C].listener===p){D.splice(C,1);return}}}}E=new WeakMap,r.EventBus=n;class F extends n{dispatch(h,p){throw new Error("Not implemented: AutomationEventBus.dispatch")}}r.AutomationEventBus=F},(J,r,b)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.GenericL10n=void 0,b(11);var s=b(7);const n={en:"en-US",es:"es-ES",fy:"fy-NL",ga:"ga-IE",gu:"gu-IN",hi:"hi-IN",hy:"hy-AM",nb:"nb-NO",ne:"ne-NP",nn:"nn-NO",pa:"pa-IN",pt:"pt-PT",sv:"sv-SE",zh:"zh-CN"};function F(d){return n[d==null?void 0:d.toLowerCase()]||d}class E{constructor(h){const{webL10n:p}=document;this._lang=h,this._ready=new Promise((L,D)=>{p.setLanguage(F(h),()=>{L(p)})})}async getLanguage(){return(await this._ready).getLanguage()}async getDirection(){return(await this._ready).getDirection()}async get(h,p=null,L=(0,s.getL10nFallback)(h,p)){return(await this._ready).get(h,p,L)}async translate(h){return(await this._ready).translate(h)}}r.GenericL10n=E},()=>{document.webL10n=function(J,r){var b={},s="",n="textContent",F="",E={},d="loading",h=!0;function p(){return r.querySelectorAll('link[type="application/l10n"]')}function L(){var w=r.querySelector('script[type="application/l10n"]');return w?JSON.parse(w.innerHTML):null}function D(w){return w?w.querySelectorAll("*[data-l10n-id]"):[]}function C(w){if(!w)return{};var z=w.getAttribute("data-l10n-id"),R=w.getAttribute("data-l10n-args"),P={};if(R)try{P=JSON.parse(R)}catch{console.warn("could not parse arguments for #"+z)}return{id:z,args:P}}function c(w,z,R){z=z||function(j){},R=R||function(){};var P=new XMLHttpRequest;P.open("GET",w,h),P.overrideMimeType&&P.overrideMimeType("text/plain; charset=utf-8"),P.onreadystatechange=function(){P.readyState==4&&(P.status==200||P.status===0?z(P.responseText):R())},P.onerror=R,P.ontimeout=R;try{P.send(null)}catch{R()}}function T(w,z,R,P){var M=w.replace(/[^\/]*$/,"")||"./";function j(Z){return Z.lastIndexOf("\\")<0?Z:Z.replace(/\\\\/g,"\\").replace(/\\n/g,`
`).replace(/\\r/g,"\r").replace(/\\t/g,"	").replace(/\\b/g,"\b").replace(/\\f/g,"\f").replace(/\\{/g,"{").replace(/\\}/g,"}").replace(/\\"/g,'"').replace(/\\'/g,"'")}function u(Z,q){var Q={},ae=/^\s*|\s*$/,be=/^\s*#|^\s*$/,Ee=/^\s*\[(.*)\]\s*$/,we=/^\s*@import\s+url\((.*)\)\s*$/i,Ne=/^([^=\s]*)\s*=\s*(.+)$/;function Se(xe,Ue,Me){var Qe=xe.replace(ae,"").split(/[\r\n]+/),k="*",G=z.split("-",1)[0],Y=!1,ie="";function te(){for(;;){if(!Qe.length){Me();return}var fe=Qe.shift();if(!be.test(fe)){if(Ue){if(ie=Ee.exec(fe),ie){k=ie[1].toLowerCase(),Y=k!=="*"&&k!==z&&k!==G;continue}else if(Y)continue;if(ie=we.exec(fe),ie){$e(M+ie[1],te);return}}var m=fe.match(Ne);m&&m.length==3&&(Q[m[1]]=j(m[2]))}}}te()}function $e(xe,Ue){c(xe,function(Me){Se(Me,!1,Ue)},function(){console.warn(xe+" not found."),Ue()})}Se(Z,!0,function(){q(Q)})}c(w,function(Z){s+=Z,u(Z,function(q){for(var Q in q){var ae,be,Ee=Q.lastIndexOf(".");Ee>0?(ae=Q.substring(0,Ee),be=Q.substring(Ee+1)):(ae=Q,be=n),b[ae]||(b[ae]={}),b[ae][be]=q[Q]}R&&R()})},P)}function o(w,z){w&&(w=w.toLowerCase()),z=z||function(){},t(),F=w;var R=p(),P=R.length;if(P===0){var M=L();if(M&&M.locales&&M.default_locale){if(console.log("using the embedded JSON directory, early way out"),b=M.locales[w],!b){var j=M.default_locale.toLowerCase();for(var u in M.locales)if(u=u.toLowerCase(),u===w){b=M.locales[w];break}else u===j&&(b=M.locales[j])}z()}else console.log("no resource to load, early way out");d="complete";return}var Z=null,q=0;Z=function(){q++,q>=P&&(z(),d="complete")};function Q(Ee){var we=Ee.href;this.load=function(Ne,Se){T(we,Ne,Se,function(){console.warn(we+" not found."),console.warn('"'+Ne+'" resource not found'),F="",Se()})}}for(var ae=0;ae<P;ae++){var be=new Q(R[ae]);be.load(w,Z)}}function t(){b={},s="",F=""}function g(w){var z={af:3,ak:4,am:4,ar:1,asa:3,az:0,be:11,bem:3,bez:3,bg:3,bh:4,bm:0,bn:3,bo:0,br:20,brx:3,bs:11,ca:3,cgg:3,chr:3,cs:12,cy:17,da:3,de:3,dv:3,dz:0,ee:3,el:3,en:3,eo:3,es:3,et:3,eu:3,fa:0,ff:5,fi:3,fil:4,fo:3,fr:5,fur:3,fy:3,ga:8,gd:24,gl:3,gsw:3,gu:3,guw:4,gv:23,ha:3,haw:3,he:2,hi:4,hr:11,hu:0,id:0,ig:0,ii:0,is:3,it:3,iu:7,ja:0,jmc:3,jv:0,ka:0,kab:5,kaj:3,kcg:3,kde:0,kea:0,kk:3,kl:3,km:0,kn:0,ko:0,ksb:3,ksh:21,ku:3,kw:7,lag:18,lb:3,lg:3,ln:4,lo:0,lt:10,lv:6,mas:3,mg:4,mk:16,ml:3,mn:3,mo:9,mr:3,ms:0,mt:15,my:0,nah:3,naq:7,nb:3,nd:3,ne:3,nl:3,nn:3,no:3,nr:3,nso:4,ny:3,nyn:3,om:3,or:3,pa:3,pap:3,pl:13,ps:3,pt:3,rm:3,ro:9,rof:3,ru:11,rwk:3,sah:0,saq:3,se:7,seh:3,ses:0,sg:0,sh:11,shi:19,sk:12,sl:14,sma:7,smi:7,smj:7,smn:7,sms:7,sn:3,so:3,sq:3,sr:11,ss:3,ssy:3,st:3,sv:3,sw:3,syr:3,ta:3,te:3,teo:3,th:0,ti:4,tig:3,tk:3,tl:4,tn:3,to:0,tr:0,ts:3,tzm:22,uk:11,ur:3,ve:3,vi:0,vun:3,wa:4,wae:3,wo:0,xh:3,xog:3,yo:0,zh:0,zu:3};function R(u,Z){return Z.indexOf(u)!==-1}function P(u,Z,q){return Z<=u&&u<=q}var M={0:function(u){return"other"},1:function(u){return P(u%100,3,10)?"few":u===0?"zero":P(u%100,11,99)?"many":u==2?"two":u==1?"one":"other"},2:function(u){return u!==0&&u%10===0?"many":u==2?"two":u==1?"one":"other"},3:function(u){return u==1?"one":"other"},4:function(u){return P(u,0,1)?"one":"other"},5:function(u){return P(u,0,2)&&u!=2?"one":"other"},6:function(u){return u===0?"zero":u%10==1&&u%100!=11?"one":"other"},7:function(u){return u==2?"two":u==1?"one":"other"},8:function(u){return P(u,3,6)?"few":P(u,7,10)?"many":u==2?"two":u==1?"one":"other"},9:function(u){return u===0||u!=1&&P(u%100,1,19)?"few":u==1?"one":"other"},10:function(u){return P(u%10,2,9)&&!P(u%100,11,19)?"few":u%10==1&&!P(u%100,11,19)?"one":"other"},11:function(u){return P(u%10,2,4)&&!P(u%100,12,14)?"few":u%10===0||P(u%10,5,9)||P(u%100,11,14)?"many":u%10==1&&u%100!=11?"one":"other"},12:function(u){return P(u,2,4)?"few":u==1?"one":"other"},13:function(u){return P(u%10,2,4)&&!P(u%100,12,14)?"few":u!=1&&P(u%10,0,1)||P(u%10,5,9)||P(u%100,12,14)?"many":u==1?"one":"other"},14:function(u){return P(u%100,3,4)?"few":u%100==2?"two":u%100==1?"one":"other"},15:function(u){return u===0||P(u%100,2,10)?"few":P(u%100,11,19)?"many":u==1?"one":"other"},16:function(u){return u%10==1&&u!=11?"one":"other"},17:function(u){return u==3?"few":u===0?"zero":u==6?"many":u==2?"two":u==1?"one":"other"},18:function(u){return u===0?"zero":P(u,0,2)&&u!==0&&u!=2?"one":"other"},19:function(u){return P(u,2,10)?"few":P(u,0,1)?"one":"other"},20:function(u){return(P(u%10,3,4)||u%10==9)&&!(P(u%100,10,19)||P(u%100,70,79)||P(u%100,90,99))?"few":u%1e6===0&&u!==0?"many":u%10==2&&!R(u%100,[12,72,92])?"two":u%10==1&&!R(u%100,[11,71,91])?"one":"other"},21:function(u){return u===0?"zero":u==1?"one":"other"},22:function(u){return P(u,0,1)||P(u,11,99)?"one":"other"},23:function(u){return P(u%10,1,2)||u%20===0?"one":"other"},24:function(u){return P(u,3,10)||P(u,13,19)?"few":R(u,[2,12])?"two":R(u,[1,11])?"one":"other"}},j=z[w.replace(/-.*$/,"")];return j in M?M[j]:(console.warn("plural form unknown for ["+w+"]"),function(){return"other"})}E.plural=function(w,z,R,P){var M=parseFloat(z);if(isNaN(M)||P!=n)return w;E._pluralRules||(E._pluralRules=g(F));var j="["+E._pluralRules(M)+"]";return M===0&&R+"[zero]"in b?w=b[R+"[zero]"][P]:M==1&&R+"[one]"in b?w=b[R+"[one]"][P]:M==2&&R+"[two]"in b?w=b[R+"[two]"][P]:R+j in b?w=b[R+j][P]:R+"[other]"in b&&(w=b[R+"[other]"][P]),w};function v(w,z,R){var P=b[w];if(!P){if(console.warn("#"+w+" is undefined."),!R)return null;P=R}var M={};for(var j in P){var u=P[j];u=H(u,z,w,j),u=x(u,z,w),M[j]=u}return M}function H(w,z,R,P){var M=/\{\[\s*([a-zA-Z]+)\(([a-zA-Z]+)\)\s*\]\}/,j=M.exec(w);if(!j||!j.length)return w;var u=j[1],Z=j[2],q;if(z&&Z in z?q=z[Z]:Z in b&&(q=b[Z]),u in E){var Q=E[u];w=Q(w,q,R,P)}return w}function x(w,z,R){var P=/\{\{\s*(.+?)\s*\}\}/g;return w.replace(P,function(M,j){return z&&j in z?z[j]:j in b?b[j]:(console.log("argument {{"+j+"}} for #"+R+" is undefined."),M)})}function B(w){var z=C(w);if(!!z.id){var R=v(z.id,z.args);if(!R){console.warn("#"+z.id+" is undefined.");return}if(R[n]){if(W(w)===0)w[n]=R[n];else{for(var P=w.childNodes,M=!1,j=0,u=P.length;j<u;j++)P[j].nodeType===3&&/\S/.test(P[j].nodeValue)&&(M?P[j].nodeValue="":(P[j].nodeValue=R[n],M=!0));if(!M){var Z=r.createTextNode(R[n]);w.prepend(Z)}}delete R[n]}for(var q in R)w[q]=R[q]}}function W(w){if(w.children)return w.children.length;if(typeof w.childElementCount!="undefined")return w.childElementCount;for(var z=0,R=0;R<w.childNodes.length;R++)z+=w.nodeType===1?1:0;return z}function ne(w){w=w||r.documentElement;for(var z=D(w),R=z.length,P=0;P<R;P++)B(z[P]);B(w)}return{get:function(w,z,R){var P=w.lastIndexOf("."),M=n;P>0&&(M=w.substring(P+1),w=w.substring(0,P));var j;R&&(j={},j[M]=R);var u=v(w,z,j);return u&&M in u?u[M]:"{{"+w+"}}"},getData:function(){return b},getText:function(){return s},getLanguage:function(){return F},setLanguage:function(w,z){o(w,function(){z&&z()})},getDirection:function(){var w=["ar","he","fa","ps","ur"],z=F.split("-",1)[0];return w.indexOf(z)>=0?"rtl":"ltr"},translate:ne,getReadyState:function(){return d},ready:function(w){if(w)d=="complete"||d=="interactive"?J.setTimeout(function(){w()}):r.addEventListener&&r.addEventListener("localized",function z(){r.removeEventListener("localized",z),w()});else return}}}(window,document)},(J,r,b)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.PDFHistory=void 0,r.isDestArraysEqual=D,r.isDestHashesEqual=L;var s=b(2),n=b(9);const F=1e3,E=50,d=1e3;function h(){return document.location.hash}class p{constructor({linkService:c,eventBus:T}){this.linkService=c,this.eventBus=T,this._initialized=!1,this._fingerprint="",this.reset(),this._boundEvents=null,this.eventBus._on("pagesinit",()=>{this._isPagesLoaded=!1,this.eventBus._on("pagesloaded",o=>{this._isPagesLoaded=!!o.pagesCount},{once:!0})})}initialize({fingerprint:c,resetHistory:T=!1,updateUrl:o=!1}){if(!c||typeof c!="string"){console.error('PDFHistory.initialize: The "fingerprint" must be a non-empty string.');return}this._initialized&&this.reset();const t=this._fingerprint!==""&&this._fingerprint!==c;this._fingerprint=c,this._updateUrl=o===!0,this._initialized=!0,this._bindEvents();const g=window.history.state;if(this._popStateInProgress=!1,this._blockHashChange=0,this._currentHash=h(),this._numPositionUpdates=0,this._uid=this._maxUid=0,this._destination=null,this._position=null,!this._isValidState(g,!0)||T){const{hash:H,page:x,rotation:B}=this._parseCurrentHash(!0);if(!H||t||T){this._pushOrReplaceState(null,!0);return}this._pushOrReplaceState({hash:H,page:x,rotation:B},!0);return}const v=g.destination;this._updateInternalState(v,g.uid,!0),v.rotation!==void 0&&(this._initialRotation=v.rotation),v.dest?(this._initialBookmark=JSON.stringify(v.dest),this._destination.page=null):v.hash?this._initialBookmark=v.hash:v.page&&(this._initialBookmark=`page=${v.page}`)}reset(){this._initialized&&(this._pageHide(),this._initialized=!1,this._unbindEvents()),this._updateViewareaTimeout&&(clearTimeout(this._updateViewareaTimeout),this._updateViewareaTimeout=null),this._initialBookmark=null,this._initialRotation=null}push({namedDest:c=null,explicitDest:T,pageNumber:o}){if(!this._initialized)return;if(c&&typeof c!="string"){console.error(`PDFHistory.push: "${c}" is not a valid namedDest parameter.`);return}else if(Array.isArray(T)){if(!this._isValidPage(o)&&(o!==null||this._destination)){console.error(`PDFHistory.push: "${o}" is not a valid pageNumber parameter.`);return}}else{console.error(`PDFHistory.push: "${T}" is not a valid explicitDest parameter.`);return}const t=c||JSON.stringify(T);if(!t)return;let g=!1;if(this._destination&&(L(this._destination.hash,t)||D(this._destination.dest,T))){if(this._destination.page)return;g=!0}this._popStateInProgress&&!g||(this._pushOrReplaceState({dest:T,hash:t,page:o,rotation:this.linkService.rotation},g),this._popStateInProgress||(this._popStateInProgress=!0,Promise.resolve().then(()=>{this._popStateInProgress=!1})))}pushPage(c){var T;if(!!this._initialized){if(!this._isValidPage(c)){console.error(`PDFHistory.pushPage: "${c}" is not a valid page number.`);return}((T=this._destination)==null?void 0:T.page)!==c&&(this._popStateInProgress||(this._pushOrReplaceState({dest:null,hash:`page=${c}`,page:c,rotation:this.linkService.rotation}),this._popStateInProgress||(this._popStateInProgress=!0,Promise.resolve().then(()=>{this._popStateInProgress=!1}))))}}pushCurrentPosition(){!this._initialized||this._popStateInProgress||this._tryPushCurrentPosition()}back(){if(!this._initialized||this._popStateInProgress)return;const c=window.history.state;this._isValidState(c)&&c.uid>0&&window.history.back()}forward(){if(!this._initialized||this._popStateInProgress)return;const c=window.history.state;this._isValidState(c)&&c.uid<this._maxUid&&window.history.forward()}get popStateInProgress(){return this._initialized&&(this._popStateInProgress||this._blockHashChange>0)}get initialBookmark(){return this._initialized?this._initialBookmark:null}get initialRotation(){return this._initialized?this._initialRotation:null}_pushOrReplaceState(c,T=!1){const o=T||!this._destination,t={fingerprint:this._fingerprint,uid:o?this._uid:this._uid+1,destination:c};this._updateInternalState(c,t.uid);let g;if(this._updateUrl&&(c==null?void 0:c.hash)){const v=document.location.href.split("#")[0];v.startsWith("file://")||(g=`${v}#${c.hash}`)}o?window.history.replaceState(t,"",g):window.history.pushState(t,"",g)}_tryPushCurrentPosition(c=!1){if(!this._position)return;let T=this._position;if(c&&(T=Object.assign(Object.create(null),this._position),T.temporary=!0),!this._destination){this._pushOrReplaceState(T);return}if(this._destination.temporary){this._pushOrReplaceState(T,!0);return}if(this._destination.hash===T.hash||!this._destination.page&&this._numPositionUpdates<=E)return;let o=!1;if(this._destination.page>=T.first&&this._destination.page<=T.page){if(this._destination.dest!==void 0||!this._destination.first)return;o=!0}this._pushOrReplaceState(T,o)}_isValidPage(c){return Number.isInteger(c)&&c>0&&c<=this.linkService.pagesCount}_isValidState(c,T=!1){if(!c)return!1;if(c.fingerprint!==this._fingerprint)if(T){if(typeof c.fingerprint!="string"||c.fingerprint.length!==this._fingerprint.length)return!1;const[o]=performance.getEntriesByType("navigation");if((o==null?void 0:o.type)!=="reload")return!1}else return!1;return!(!Number.isInteger(c.uid)||c.uid<0||c.destination===null||typeof c.destination!="object")}_updateInternalState(c,T,o=!1){this._updateViewareaTimeout&&(clearTimeout(this._updateViewareaTimeout),this._updateViewareaTimeout=null),o&&(c==null?void 0:c.temporary)&&delete c.temporary,this._destination=c,this._uid=T,this._maxUid=Math.max(this._maxUid,T),this._numPositionUpdates=0}_parseCurrentHash(c=!1){const T=unescape(h()).substring(1),o=(0,s.parseQueryString)(T),t=o.get("nameddest")||"";let g=o.get("page")|0;return(!this._isValidPage(g)||c&&t.length>0)&&(g=null),{hash:T,page:g,rotation:this.linkService.rotation}}_updateViewarea({location:c}){this._updateViewareaTimeout&&(clearTimeout(this._updateViewareaTimeout),this._updateViewareaTimeout=null),this._position={hash:c.pdfOpenParams.substring(1),page:this.linkService.page,first:c.pageNumber,rotation:c.rotation},!this._popStateInProgress&&(this._isPagesLoaded&&this._destination&&!this._destination.page&&this._numPositionUpdates++,this._updateViewareaTimeout=setTimeout(()=>{this._popStateInProgress||this._tryPushCurrentPosition(!0),this._updateViewareaTimeout=null},d))}_popState({state:c}){const T=h(),o=this._currentHash!==T;if(this._currentHash=T,!c){this._uid++;const{hash:g,page:v,rotation:H}=this._parseCurrentHash();this._pushOrReplaceState({hash:g,page:v,rotation:H},!0);return}if(!this._isValidState(c))return;this._popStateInProgress=!0,o&&(this._blockHashChange++,(0,n.waitOnEventOrTimeout)({target:window,name:"hashchange",delay:F}).then(()=>{this._blockHashChange--}));const t=c.destination;this._updateInternalState(t,c.uid,!0),(0,s.isValidRotation)(t.rotation)&&(this.linkService.rotation=t.rotation),t.dest?this.linkService.goToDestination(t.dest):t.hash?this.linkService.setHash(t.hash):t.page&&(this.linkService.page=t.page),Promise.resolve().then(()=>{this._popStateInProgress=!1})}_pageHide(){(!this._destination||this._destination.temporary)&&this._tryPushCurrentPosition()}_bindEvents(){this._boundEvents||(this._boundEvents={updateViewarea:this._updateViewarea.bind(this),popState:this._popState.bind(this),pageHide:this._pageHide.bind(this)},this.eventBus._on("updateviewarea",this._boundEvents.updateViewarea),window.addEventListener("popstate",this._boundEvents.popState),window.addEventListener("pagehide",this._boundEvents.pageHide))}_unbindEvents(){!this._boundEvents||(this.eventBus._off("updateviewarea",this._boundEvents.updateViewarea),window.removeEventListener("popstate",this._boundEvents.popState),window.removeEventListener("pagehide",this._boundEvents.pageHide),this._boundEvents=null)}}r.PDFHistory=p;function L(C,c){return typeof C!="string"||typeof c!="string"?!1:C===c||(0,s.parseQueryString)(C).get("nameddest")===c}function D(C,c){function T(o,t){if(typeof o!=typeof t||Array.isArray(o)||Array.isArray(t))return!1;if(o!==null&&typeof o=="object"&&t!==null){if(Object.keys(o).length!==Object.keys(t).length)return!1;for(const g in o)if(!T(o[g],t[g]))return!1;return!0}return o===t||Number.isNaN(o)&&Number.isNaN(t)}if(!(Array.isArray(C)&&Array.isArray(c))||C.length!==c.length)return!1;for(let o=0,t=C.length;o<t;o++)if(!T(C[o],c[o]))return!1;return!0}},(J,r,b)=>{var v,H,x,B,W,ne,w,z,R,P,M,rt,u,Pt,q,bt,ae,Et,Ee,yt,Ne,Xt,$e,Kt,Ue,St;Object.defineProperty(r,"__esModule",{value:!0}),r.PDFPageView=void 0;var s=b(4),n=b(2),F=b(14),E=b(6),d=b(15),h=b(7),p=b(5),L=b(16),D=b(17),C=b(18),c=b(19),T=b(20);const o=d.compatibilityParams.maxCanvasPixels||16777216,t=()=>({annotationEditorUIManager:null,annotationStorage:null,downloadManager:null,enableScripting:!1,fieldObjectsPromise:null,findController:null,hasJSActionsPromise:null,get linkService(){return new p.SimpleLinkService}});class g{constructor(k){S(this,M);S(this,u);S(this,q);S(this,ae);S(this,Ee);S(this,Ne);S(this,$e);S(this,Ue);S(this,v,s.AnnotationMode.ENABLE_FORMS);S(this,H,!1);S(this,x,null);S(this,B,null);S(this,W,null);S(this,ne,null);S(this,w,n.RenderingStates.INITIAL);S(this,z,n.TextLayerMode.ENABLE);S(this,R,{directDrawing:!0,initialOptionalContent:!0,regularAnnotations:!0});S(this,P,new WeakMap);var te,fe,m,O,$;const G=k.container,Y=k.defaultViewport;this.id=k.id,this.renderingId="page"+this.id,V(this,x,k.layerProperties||t),this.pdfPage=null,this.pageLabel=null,this.rotation=0,this.scale=k.scale||n.DEFAULT_SCALE,this.viewport=Y,this.pdfPageRotate=Y.rotation,this._optionalContentConfigPromise=k.optionalContentConfigPromise||null,V(this,z,(te=k.textLayerMode)!=null?te:n.TextLayerMode.ENABLE),V(this,v,(fe=k.annotationMode)!=null?fe:s.AnnotationMode.ENABLE_FORMS),this.imageResourcesPath=k.imageResourcesPath||"",this.isOffscreenCanvasSupported=(m=k.isOffscreenCanvasSupported)!=null?m:!0,this.maxCanvasPixels=(O=k.maxCanvasPixels)!=null?O:o,this.pageColors=k.pageColors||null,this.eventBus=k.eventBus,this.renderingQueue=k.renderingQueue,this.l10n=k.l10n||h.NullL10n,this.renderTask=null,this.resume=null,this._isStandalone=!(($=this.renderingQueue)!=null&&$.hasViewer()),this._container=G,k.useOnlyCssZoom&&(console.error("useOnlyCssZoom was removed, please use `maxCanvasPixels = 0` instead."),this.maxCanvasPixels=0),this._annotationCanvasMap=null,this.annotationLayer=null,this.annotationEditorLayer=null,this.textLayer=null,this.zoomLayer=null,this.xfaLayer=null,this.structTreeLayer=null;const ie=document.createElement("div");if(ie.className="page",ie.setAttribute("data-page-number",this.id),ie.setAttribute("role","region"),this.l10n.get("page_landmark",{page:this.id}).then(U=>{ie.setAttribute("aria-label",U)}),this.div=ie,I(this,M,rt).call(this),G==null||G.append(ie),this._isStandalone){G==null||G.style.setProperty("--scale-factor",this.scale*s.PixelsPerInch.PDF_TO_CSS_UNITS);const{optionalContentConfigPromise:U}=k;U&&U.then(ee=>{U===this._optionalContentConfigPromise&&(i(this,R).initialOptionalContent=ee.hasInitialVisibility)})}}get renderingState(){return i(this,w)}set renderingState(k){if(k!==i(this,w))switch(V(this,w,k),i(this,B)&&(clearTimeout(i(this,B)),V(this,B,null)),k){case n.RenderingStates.PAUSED:this.div.classList.remove("loading");break;case n.RenderingStates.RUNNING:this.div.classList.add("loadingIcon"),V(this,B,setTimeout(()=>{this.div.classList.add("loading"),V(this,B,null)},0));break;case n.RenderingStates.INITIAL:case n.RenderingStates.FINISHED:this.div.classList.remove("loadingIcon","loading");break}}setPdfPage(k){var Y,ie,te;this._isStandalone&&(((Y=this.pageColors)==null?void 0:Y.foreground)==="CanvasText"||((ie=this.pageColors)==null?void 0:ie.background)==="Canvas")&&((te=this._container)==null||te.style.setProperty("--hcm-highligh-filter",k.filterFactory.addHighlightHCMFilter("CanvasText","Canvas","HighlightText","Highlight"))),this.pdfPage=k,this.pdfPageRotate=k.rotate;const G=(this.rotation+this.pdfPageRotate)%360;this.viewport=k.getViewport({scale:this.scale*s.PixelsPerInch.PDF_TO_CSS_UNITS,rotation:G}),I(this,M,rt).call(this),this.reset()}destroy(){var k;this.reset(),(k=this.pdfPage)==null||k.cleanup()}get _textHighlighter(){return(0,s.shadow)(this,"_textHighlighter",new C.TextHighlighter({pageIndex:this.id-1,eventBus:this.eventBus,findController:i(this,x).call(this).findController}))}_resetZoomLayer(k=!1){if(!this.zoomLayer)return;const G=this.zoomLayer.firstChild;i(this,P).delete(G),G.width=0,G.height=0,k&&this.zoomLayer.remove(),this.zoomLayer=null}reset({keepZoomLayer:k=!1,keepAnnotationLayer:G=!1,keepAnnotationEditorLayer:Y=!1,keepXfaLayer:ie=!1,keepTextLayer:te=!1}={}){var ue,le,ce,Te,pe;this.cancelRendering({keepAnnotationLayer:G,keepAnnotationEditorLayer:Y,keepXfaLayer:ie,keepTextLayer:te}),this.renderingState=n.RenderingStates.INITIAL;const fe=this.div,m=fe.childNodes,O=k&&this.zoomLayer||null,$=G&&((ue=this.annotationLayer)==null?void 0:ue.div)||null,U=Y&&((le=this.annotationEditorLayer)==null?void 0:le.div)||null,ee=ie&&((ce=this.xfaLayer)==null?void 0:ce.div)||null,se=te&&((Te=this.textLayer)==null?void 0:Te.div)||null;for(let ze=m.length-1;ze>=0;ze--){const Ae=m[ze];switch(Ae){case O:case $:case U:case ee:case se:continue}Ae.remove()}fe.removeAttribute("data-loaded"),$&&this.annotationLayer.hide(),U&&this.annotationEditorLayer.hide(),ee&&this.xfaLayer.hide(),se&&this.textLayer.hide(),(pe=this.structTreeLayer)==null||pe.hide(),O||(this.canvas&&(i(this,P).delete(this.canvas),this.canvas.width=0,this.canvas.height=0,delete this.canvas),this._resetZoomLayer())}update({scale:k=0,rotation:G=null,optionalContentConfigPromise:Y=null,drawingDelay:ie=-1}){var fe;this.scale=k||this.scale,typeof G=="number"&&(this.rotation=G),Y instanceof Promise&&(this._optionalContentConfigPromise=Y,Y.then(m=>{Y===this._optionalContentConfigPromise&&(i(this,R).initialOptionalContent=m.hasInitialVisibility)})),i(this,R).directDrawing=!0;const te=(this.rotation+this.pdfPageRotate)%360;if(this.viewport=this.viewport.clone({scale:this.scale*s.PixelsPerInch.PDF_TO_CSS_UNITS,rotation:te}),I(this,M,rt).call(this),this._isStandalone&&((fe=this._container)==null||fe.style.setProperty("--scale-factor",this.viewport.scale)),this.canvas){let m=!1;if(i(this,H)){if(this.maxCanvasPixels===0)m=!0;else if(this.maxCanvasPixels>0){const{width:$,height:U}=this.viewport,{sx:ee,sy:se}=this.outputScale;m=(Math.floor($)*ee|0)*(Math.floor(U)*se|0)>this.maxCanvasPixels}}const O=!m&&ie>=0&&ie<1e3;if(O||m){if(O&&this.renderingState!==n.RenderingStates.FINISHED&&(this.cancelRendering({keepZoomLayer:!0,keepAnnotationLayer:!0,keepAnnotationEditorLayer:!0,keepXfaLayer:!0,keepTextLayer:!0,cancelExtraDelay:ie}),this.renderingState=n.RenderingStates.FINISHED,i(this,R).directDrawing=!1),this.cssTransform({target:this.canvas,redrawAnnotationLayer:!0,redrawAnnotationEditorLayer:!0,redrawXfaLayer:!0,redrawTextLayer:!O,hideTextLayer:O}),O)return;this.eventBus.dispatch("pagerendered",{source:this,pageNumber:this.id,cssTransform:!0,timestamp:performance.now(),error:i(this,ne)});return}!this.zoomLayer&&!this.canvas.hidden&&(this.zoomLayer=this.canvas.parentNode,this.zoomLayer.style.position="absolute")}this.zoomLayer&&this.cssTransform({target:this.zoomLayer.firstChild}),this.reset({keepZoomLayer:!0,keepAnnotationLayer:!0,keepAnnotationEditorLayer:!0,keepXfaLayer:!0,keepTextLayer:!0})}cancelRendering({keepAnnotationLayer:k=!1,keepAnnotationEditorLayer:G=!1,keepXfaLayer:Y=!1,keepTextLayer:ie=!1,cancelExtraDelay:te=0}={}){var fe;this.renderTask&&(this.renderTask.cancel(te),this.renderTask=null),this.resume=null,this.textLayer&&(!ie||!this.textLayer.div)&&(this.textLayer.cancel(),this.textLayer=null),this.structTreeLayer&&!this.textLayer&&(this.structTreeLayer=null),this.annotationLayer&&(!k||!this.annotationLayer.div)&&(this.annotationLayer.cancel(),this.annotationLayer=null,this._annotationCanvasMap=null),this.annotationEditorLayer&&(!G||!this.annotationEditorLayer.div)&&(this.annotationEditorLayer.cancel(),this.annotationEditorLayer=null),this.xfaLayer&&(!Y||!this.xfaLayer.div)&&(this.xfaLayer.cancel(),this.xfaLayer=null,(fe=this._textHighlighter)==null||fe.disable())}cssTransform({target:k,redrawAnnotationLayer:G=!1,redrawAnnotationEditorLayer:Y=!1,redrawXfaLayer:ie=!1,redrawTextLayer:te=!1,hideTextLayer:fe=!1}){var O;if(!k.hasAttribute("zooming")){k.setAttribute("zooming",!0);const{style:$}=k;$.width=$.height=""}const m=i(this,P).get(k);if(this.viewport!==m){const $=this.viewport.rotation-m.rotation,U=Math.abs($);let ee=1,se=1;if(U===90||U===270){const{width:ue,height:le}=this.viewport;ee=le/ue,se=ue/le}k.style.transform=`rotate(${$}deg) scale(${ee}, ${se})`}G&&this.annotationLayer&&I(this,u,Pt).call(this),Y&&this.annotationEditorLayer&&I(this,q,bt).call(this),ie&&this.xfaLayer&&I(this,ae,Et).call(this),this.textLayer&&(fe?(this.textLayer.hide(),(O=this.structTreeLayer)==null||O.hide()):te&&I(this,Ee,yt).call(this))}get width(){return this.viewport.width}get height(){return this.viewport.height}getPagePoint(k,G){return this.viewport.convertToPdfPoint(k,G)}async draw(){this.renderingState!==n.RenderingStates.INITIAL&&(console.error("Must be in new state before drawing"),this.reset());const{div:k,l10n:G,pageColors:Y,pdfPage:ie,viewport:te}=this;if(!ie)throw this.renderingState=n.RenderingStates.FINISHED,new Error("pdfPage is not loaded");this.renderingState=n.RenderingStates.RUNNING;const fe=document.createElement("div");if(fe.classList.add("canvasWrapper"),k.append(fe),!this.textLayer&&i(this,z)!==n.TextLayerMode.DISABLE&&!ie.isPureXfa&&(this._accessibilityManager||(this._accessibilityManager=new D.TextAccessibilityManager),this.textLayer=new c.TextLayerBuilder({highlighter:this._textHighlighter,accessibilityManager:this._accessibilityManager,isOffscreenCanvasSupported:this.isOffscreenCanvasSupported,enablePermissions:i(this,z)===n.TextLayerMode.ENABLE_PERMISSIONS}),k.append(this.textLayer.div)),!this.annotationLayer&&i(this,v)!==s.AnnotationMode.DISABLE){const{annotationStorage:e,downloadManager:l,enableScripting:N,fieldObjectsPromise:A,hasJSActionsPromise:a,linkService:f}=i(this,x).call(this);this._annotationCanvasMap||(this._annotationCanvasMap=new Map),this.annotationLayer=new E.AnnotationLayerBuilder({pageDiv:k,pdfPage:ie,annotationStorage:e,imageResourcesPath:this.imageResourcesPath,renderForms:i(this,v)===s.AnnotationMode.ENABLE_FORMS,linkService:f,downloadManager:l,l10n:G,enableScripting:N,hasJSActionsPromise:a,fieldObjectsPromise:A,annotationCanvasMap:this._annotationCanvasMap,accessibilityManager:this._accessibilityManager})}const m=e=>{if(se==null||se(!1),this.renderingQueue&&!this.renderingQueue.isHighestPriority(this)){this.renderingState=n.RenderingStates.PAUSED,this.resume=()=>{this.renderingState=n.RenderingStates.RUNNING,e()};return}e()},{width:O,height:$}=te,U=document.createElement("canvas");U.setAttribute("role","presentation"),U.hidden=!0;const ee=!!((Y==null?void 0:Y.background)&&(Y==null?void 0:Y.foreground));let se=e=>{(!ee||e)&&(U.hidden=!1,se=null)};fe.append(U),this.canvas=U;const ue=U.getContext("2d",{alpha:!1}),le=this.outputScale=new n.OutputScale;if(this.maxCanvasPixels===0){const e=1/this.scale;le.sx*=e,le.sy*=e,V(this,H,!0)}else if(this.maxCanvasPixels>0){const e=O*$,l=Math.sqrt(this.maxCanvasPixels/e);le.sx>l||le.sy>l?(le.sx=l,le.sy=l,V(this,H,!0)):V(this,H,!1)}const ce=(0,n.approximateFraction)(le.sx),Te=(0,n.approximateFraction)(le.sy);U.width=(0,n.roundToDivide)(O*le.sx,ce[0]),U.height=(0,n.roundToDivide)($*le.sy,Te[0]);const{style:pe}=U;pe.width=(0,n.roundToDivide)(O,ce[1])+"px",pe.height=(0,n.roundToDivide)($,Te[1])+"px",i(this,P).set(U,te);const ze=le.scaled?[le.sx,0,0,le.sy,0,0]:null,Ae={canvasContext:ue,transform:ze,viewport:te,annotationMode:i(this,v),optionalContentConfigPromise:this._optionalContentConfigPromise,annotationCanvasMap:this._annotationCanvasMap,pageColors:Y},Ge=this.renderTask=this.pdfPage.render(Ae);Ge.onContinue=m;const Ie=Ge.promise.then(async()=>{var e;if(se==null||se(!0),await I(this,Ue,St).call(this,Ge),I(this,Ee,yt).call(this),this.annotationLayer&&await I(this,u,Pt).call(this),!this.annotationEditorLayer){const{annotationEditorUIManager:l}=i(this,x).call(this);if(!l)return;this.annotationEditorLayer=new F.AnnotationEditorLayerBuilder({uiManager:l,pageDiv:k,pdfPage:ie,l10n:G,accessibilityManager:this._accessibilityManager,annotationLayer:(e=this.annotationLayer)==null?void 0:e.annotationLayer})}I(this,q,bt).call(this)},e=>(e instanceof s.RenderingCancelledException||se==null||se(!0),I(this,Ue,St).call(this,Ge,e)));if(ie.isPureXfa){if(this.xfaLayer)this.xfaLayer.div&&k.append(this.xfaLayer.div);else{const{annotationStorage:e,linkService:l}=i(this,x).call(this);this.xfaLayer=new T.XfaLayerBuilder({pageDiv:k,pdfPage:ie,annotationStorage:e,linkService:l})}I(this,ae,Et).call(this)}return k.setAttribute("data-loaded",!0),this.eventBus.dispatch("pagerender",{source:this,pageNumber:this.id}),Ie}setPageLabel(k){this.pageLabel=typeof k=="string"?k:null,this.pageLabel!==null?this.div.setAttribute("data-page-label",this.pageLabel):this.div.removeAttribute("data-page-label")}get thumbnailCanvas(){const{directDrawing:k,initialOptionalContent:G,regularAnnotations:Y}=i(this,R);return k&&G&&Y?this.canvas:null}}v=new WeakMap,H=new WeakMap,x=new WeakMap,B=new WeakMap,W=new WeakMap,ne=new WeakMap,w=new WeakMap,z=new WeakMap,R=new WeakMap,P=new WeakMap,M=new WeakSet,rt=function(){const{viewport:k}=this;if(this.pdfPage){if(i(this,W)===k.rotation)return;V(this,W,k.rotation)}(0,s.setLayerDimensions)(this.div,k,!0,!1)},u=new WeakSet,Pt=async function(){let k=null;try{await this.annotationLayer.render(this.viewport,"display")}catch(G){console.error(`#renderAnnotationLayer: "${G}".`),k=G}finally{this.eventBus.dispatch("annotationlayerrendered",{source:this,pageNumber:this.id,error:k})}},q=new WeakSet,bt=async function(){let k=null;try{await this.annotationEditorLayer.render(this.viewport,"display")}catch(G){console.error(`#renderAnnotationEditorLayer: "${G}".`),k=G}finally{this.eventBus.dispatch("annotationeditorlayerrendered",{source:this,pageNumber:this.id,error:k})}},ae=new WeakSet,Et=async function(){let k=null;try{const G=await this.xfaLayer.render(this.viewport,"display");(G==null?void 0:G.textDivs)&&this._textHighlighter&&I(this,$e,Kt).call(this,G.textDivs)}catch(G){console.error(`#renderXfaLayer: "${G}".`),k=G}finally{this.eventBus.dispatch("xfalayerrendered",{source:this,pageNumber:this.id,error:k})}},Ee=new WeakSet,yt=async function(){const{pdfPage:k,textLayer:G,viewport:Y}=this;if(!G)return;let ie=null;try{if(!G.renderingDone){const te=k.streamTextContent({includeMarkedContent:!0,disableNormalization:!0});G.setTextContentSource(te)}await G.render(Y)}catch(te){if(te instanceof s.AbortException)return;console.error(`#renderTextLayer: "${te}".`),ie=te}this.eventBus.dispatch("textlayerrendered",{source:this,pageNumber:this.id,numTextDivs:G.numTextDivs,error:ie}),I(this,Ne,Xt).call(this)},Ne=new WeakSet,Xt=async function(){var Y,ie,te;if(!this.textLayer)return;this.structTreeLayer||(this.structTreeLayer=new L.StructTreeLayerBuilder);const k=await(this.structTreeLayer.renderingDone?null:this.pdfPage.getStructTree()),G=(Y=this.structTreeLayer)==null?void 0:Y.render(k);G&&((ie=this.canvas)==null||ie.append(G)),(te=this.structTreeLayer)==null||te.show()},$e=new WeakSet,Kt=async function(k){const G=await this.pdfPage.getTextContent(),Y=[];for(const ie of G.items)Y.push(ie.str);this._textHighlighter.setTextMapping(k,Y),this._textHighlighter.enable()},Ue=new WeakSet,St=async function(k,G=null){if(k===this.renderTask&&(this.renderTask=null),G instanceof s.RenderingCancelledException){V(this,ne,null);return}if(V(this,ne,G),this.renderingState=n.RenderingStates.FINISHED,this._resetZoomLayer(!0),i(this,R).regularAnnotations=!k.separateAnnots,this.eventBus.dispatch("pagerendered",{source:this,pageNumber:this.id,cssTransform:!1,timestamp:performance.now(),error:i(this,ne)}),G)throw G},r.PDFPageView=g},(J,r,b)=>{var E,d;Object.defineProperty(r,"__esModule",{value:!0}),r.AnnotationEditorLayerBuilder=void 0;var s=b(4),n=b(7);class F{constructor(p){S(this,E,null);S(this,d,void 0);this.pageDiv=p.pageDiv,this.pdfPage=p.pdfPage,this.accessibilityManager=p.accessibilityManager,this.l10n=p.l10n||n.NullL10n,this.annotationEditorLayer=null,this.div=null,this._cancelled=!1,V(this,d,p.uiManager),V(this,E,p.annotationLayer||null)}async render(p,L="display"){if(L!=="display"||this._cancelled)return;const D=p.clone({dontFlip:!0});if(this.div){this.annotationEditorLayer.update({viewport:D}),this.show();return}const C=this.div=document.createElement("div");C.className="annotationEditorLayer",C.tabIndex=0,C.hidden=!0,C.dir=i(this,d).direction,this.pageDiv.append(C),this.annotationEditorLayer=new s.AnnotationEditorLayer({uiManager:i(this,d),div:C,accessibilityManager:this.accessibilityManager,pageIndex:this.pdfPage.pageNumber-1,l10n:this.l10n,viewport:D,annotationLayer:i(this,E)});const c={viewport:D,div:C,annotations:null,intent:L};this.annotationEditorLayer.render(c),this.show()}cancel(){this._cancelled=!0,this.div&&(this.pageDiv=null,this.annotationEditorLayer.destroy(),this.div.remove())}hide(){!this.div||(this.div.hidden=!0)}show(){!this.div||this.annotationEditorLayer.isEmpty||(this.div.hidden=!1)}}E=new WeakMap,d=new WeakMap,r.AnnotationEditorLayerBuilder=F},(J,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.compatibilityParams=r.OptionKind=r.AppOptions=void 0;const b=Object.create(null);r.compatibilityParams=b;{const d=navigator.userAgent||"",h=navigator.platform||"",p=navigator.maxTouchPoints||1,L=/Android/.test(d),D=/\b(iPad|iPhone|iPod)(?=;)/.test(d)||h==="MacIntel"&&p>1;(function(){(D||L)&&(b.maxCanvasPixels=5242880)})()}const s={VIEWER:2,API:4,WORKER:8,PREFERENCE:128};r.OptionKind=s;const n={annotationEditorMode:{value:0,kind:s.VIEWER+s.PREFERENCE},annotationMode:{value:2,kind:s.VIEWER+s.PREFERENCE},cursorToolOnLoad:{value:0,kind:s.VIEWER+s.PREFERENCE},defaultZoomDelay:{value:400,kind:s.VIEWER+s.PREFERENCE},defaultZoomValue:{value:"",kind:s.VIEWER+s.PREFERENCE},disableHistory:{value:!1,kind:s.VIEWER},disablePageLabels:{value:!1,kind:s.VIEWER+s.PREFERENCE},enablePermissions:{value:!1,kind:s.VIEWER+s.PREFERENCE},enablePrintAutoRotate:{value:!0,kind:s.VIEWER+s.PREFERENCE},enableScripting:{value:!0,kind:s.VIEWER+s.PREFERENCE},enableStampEditor:{value:!0,kind:s.VIEWER+s.PREFERENCE},externalLinkRel:{value:"noopener noreferrer nofollow",kind:s.VIEWER},externalLinkTarget:{value:0,kind:s.VIEWER+s.PREFERENCE},historyUpdateUrl:{value:!1,kind:s.VIEWER+s.PREFERENCE},ignoreDestinationZoom:{value:!1,kind:s.VIEWER+s.PREFERENCE},imageResourcesPath:{value:"./images/",kind:s.VIEWER},maxCanvasPixels:{value:16777216,kind:s.VIEWER},forcePageColors:{value:!1,kind:s.VIEWER+s.PREFERENCE},pageColorsBackground:{value:"Canvas",kind:s.VIEWER+s.PREFERENCE},pageColorsForeground:{value:"CanvasText",kind:s.VIEWER+s.PREFERENCE},pdfBugEnabled:{value:!1,kind:s.VIEWER+s.PREFERENCE},printResolution:{value:150,kind:s.VIEWER},sidebarViewOnLoad:{value:-1,kind:s.VIEWER+s.PREFERENCE},scrollModeOnLoad:{value:-1,kind:s.VIEWER+s.PREFERENCE},spreadModeOnLoad:{value:-1,kind:s.VIEWER+s.PREFERENCE},textLayerMode:{value:1,kind:s.VIEWER+s.PREFERENCE},viewerCssTheme:{value:0,kind:s.VIEWER+s.PREFERENCE},viewOnLoad:{value:0,kind:s.VIEWER+s.PREFERENCE},cMapPacked:{value:!0,kind:s.API},cMapUrl:{value:"../web/cmaps/",kind:s.API},disableAutoFetch:{value:!1,kind:s.API+s.PREFERENCE},disableFontFace:{value:!1,kind:s.API+s.PREFERENCE},disableRange:{value:!1,kind:s.API+s.PREFERENCE},disableStream:{value:!1,kind:s.API+s.PREFERENCE},docBaseUrl:{value:"",kind:s.API},enableXfa:{value:!0,kind:s.API+s.PREFERENCE},fontExtraProperties:{value:!1,kind:s.API},isEvalSupported:{value:!0,kind:s.API},isOffscreenCanvasSupported:{value:!0,kind:s.API},maxImageSize:{value:-1,kind:s.API},pdfBug:{value:!1,kind:s.API},standardFontDataUrl:{value:"../web/standard_fonts/",kind:s.API},verbosity:{value:1,kind:s.API},workerPort:{value:null,kind:s.WORKER},workerSrc:{value:"../build/pdf.worker.js",kind:s.WORKER}};n.defaultUrl={value:"compressed.tracemonkey-pldi-09.pdf",kind:s.VIEWER},n.disablePreferences={value:!1,kind:s.VIEWER},n.locale={value:navigator.language||"en-US",kind:s.VIEWER},n.sandboxBundleSrc={value:"../build/pdf.sandbox.js",kind:s.VIEWER};const F=Object.create(null);class E{constructor(){throw new Error("Cannot initialize AppOptions.")}static get(h){var D;const p=F[h];if(p!==void 0)return p;const L=n[h];if(L!==void 0)return(D=b[h])!=null?D:L.value}static getAll(h=null){var L;const p=Object.create(null);for(const D in n){const C=n[D];if(h){if((h&C.kind)===0)continue;if(h===s.PREFERENCE){const T=C.value,o=typeof T;if(o==="boolean"||o==="string"||o==="number"&&Number.isInteger(T)){p[D]=T;continue}throw new Error(`Invalid type for preference: ${D}`)}}const c=F[D];p[D]=c!==void 0?c:(L=b[D])!=null?L:C.value}return p}static set(h,p){F[h]=p}static setAll(h){for(const p in h)F[p]=h[p]}static remove(h){delete F[h]}}r.AppOptions=E,E._hasUserOptions=function(){return Object.keys(F).length>0}},(J,r,b)=>{var d,h,wt,L,Lt;Object.defineProperty(r,"__esModule",{value:!0}),r.StructTreeLayerBuilder=void 0;var s=b(2);const n={Document:null,DocumentFragment:null,Part:"group",Sect:"group",Div:"group",Aside:"note",NonStruct:"none",P:null,H:"heading",Title:null,FENote:"note",Sub:"group",Lbl:null,Span:null,Em:null,Strong:null,Link:"link",Annot:"note",Form:"form",Ruby:null,RB:null,RT:null,RP:null,Warichu:null,WT:null,WP:null,L:"list",LI:"listitem",LBody:null,Table:"table",TR:"row",TH:"columnheader",TD:"cell",THead:"columnheader",TBody:null,TFoot:null,Caption:null,Figure:"figure",Formula:null,Artifact:null},F=/^H(\d+)$/;class E{constructor(){S(this,h);S(this,L);S(this,d,void 0)}get renderingDone(){return i(this,d)!==void 0}render(c){if(i(this,d)!==void 0)return i(this,d);const T=I(this,L,Lt).call(this,c);return T==null||T.classList.add("structTree"),V(this,d,T)}hide(){i(this,d)&&!i(this,d).hidden&&(i(this,d).hidden=!0)}show(){var c;(c=i(this,d))!=null&&c.hidden&&(i(this,d).hidden=!1)}}d=new WeakMap,h=new WeakSet,wt=function(c,T){const{alt:o,id:t,lang:g}=c;o!==void 0&&T.setAttribute("aria-label",(0,s.removeNullCharacters)(o)),t!==void 0&&T.setAttribute("aria-owns",t),g!==void 0&&T.setAttribute("lang",(0,s.removeNullCharacters)(g,!0))},L=new WeakSet,Lt=function(c){if(!c)return null;const T=document.createElement("span");if("role"in c){const{role:o}=c,t=o.match(F);t?(T.setAttribute("role","heading"),T.setAttribute("aria-level",t[1])):n[o]&&T.setAttribute("role",n[o])}if(I(this,h,wt).call(this,c,T),c.children)if(c.children.length===1&&"id"in c.children[0])I(this,h,wt).call(this,c.children[0],T);else for(const o of c.children)T.append(I(this,L,Lt).call(this,o));return T},r.StructTreeLayerBuilder=E},(J,r,b)=>{var F,E,d,h,p,st,D,Mt;Object.defineProperty(r,"__esModule",{value:!0}),r.TextAccessibilityManager=void 0;var s=b(2);const c=class{constructor(){S(this,D);S(this,F,!1);S(this,E,null);S(this,d,new Map);S(this,h,new Map)}setTextMapping(o){V(this,E,o)}enable(){if(i(this,F))throw new Error("TextAccessibilityManager is already enabled.");if(!i(this,E))throw new Error("Text divs and strings have not been set.");if(V(this,F,!0),V(this,E,i(this,E).slice()),i(this,E).sort(I(c,p,st)),i(this,d).size>0){const o=i(this,E);for(const[t,g]of i(this,d)){if(!document.getElementById(t)){i(this,d).delete(t);continue}I(this,D,Mt).call(this,t,o[g])}}for(const[o,t]of i(this,h))this.addPointerInTextLayer(o,t);i(this,h).clear()}disable(){!i(this,F)||(i(this,h).clear(),V(this,E,null),V(this,F,!1))}removePointerInTextLayer(o){if(!i(this,F)){i(this,h).delete(o);return}const t=i(this,E);if(!t||t.length===0)return;const{id:g}=o,v=i(this,d).get(g);if(v===void 0)return;const H=t[v];i(this,d).delete(g);let x=H.getAttribute("aria-owns");x!=null&&x.includes(g)&&(x=x.split(" ").filter(B=>B!==g).join(" "),x?H.setAttribute("aria-owns",x):(H.removeAttribute("aria-owns"),H.setAttribute("role","presentation")))}addPointerInTextLayer(o,t){const{id:g}=o;if(!g)return null;if(!i(this,F))return i(this,h).set(o,t),null;t&&this.removePointerInTextLayer(o);const v=i(this,E);if(!v||v.length===0)return null;const H=(0,s.binarySearchFirstItem)(v,ne=>{var w;return I(w=c,p,st).call(w,o,ne)<0}),x=Math.max(0,H-1),B=v[x];I(this,D,Mt).call(this,g,B),i(this,d).set(g,x);const W=B.parentNode;return W!=null&&W.classList.contains("markedContent")?W.id:null}moveElementInDOM(o,t,g,v){const H=this.addPointerInTextLayer(g,v);if(!o.hasChildNodes())return o.append(t),H;const x=Array.from(o.childNodes).filter(ne=>ne!==t);if(x.length===0)return H;const B=g||t,W=(0,s.binarySearchFirstItem)(x,ne=>{var w;return I(w=c,p,st).call(w,B,ne)<0});return W===0?x[0].before(t):x[W-1].after(t),H}};let n=c;F=new WeakMap,E=new WeakMap,d=new WeakMap,h=new WeakMap,p=new WeakSet,st=function(o,t){const g=o.getBoundingClientRect(),v=t.getBoundingClientRect();if(g.width===0&&g.height===0)return 1;if(v.width===0&&v.height===0)return-1;const H=g.y,x=g.y+g.height,B=g.y+g.height/2,W=v.y,ne=v.y+v.height,w=v.y+v.height/2;if(B<=W&&w>=x)return-1;if(w<=H&&B>=ne)return 1;const z=g.x+g.width/2,R=v.x+v.width/2;return z-R},D=new WeakSet,Mt=function(o,t){const g=t.getAttribute("aria-owns");g!=null&&g.includes(o)||t.setAttribute("aria-owns",g?`${g} ${o}`:o),t.removeAttribute("role")},S(n,p),r.TextAccessibilityManager=n},(J,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.TextHighlighter=void 0;class b{constructor({findController:n,eventBus:F,pageIndex:E}){this.findController=n,this.matches=[],this.eventBus=F,this.pageIdx=E,this._onUpdateTextLayerMatches=null,this.textDivs=null,this.textContentItemsStr=null,this.enabled=!1}setTextMapping(n,F){this.textDivs=n,this.textContentItemsStr=F}enable(){if(!this.textDivs||!this.textContentItemsStr)throw new Error("Text divs and strings have not been set.");if(this.enabled)throw new Error("TextHighlighter is already enabled.");this.enabled=!0,this._onUpdateTextLayerMatches||(this._onUpdateTextLayerMatches=n=>{(n.pageIndex===this.pageIdx||n.pageIndex===-1)&&this._updateMatches()},this.eventBus._on("updatetextlayermatches",this._onUpdateTextLayerMatches)),this._updateMatches()}disable(){!this.enabled||(this.enabled=!1,this._onUpdateTextLayerMatches&&(this.eventBus._off("updatetextlayermatches",this._onUpdateTextLayerMatches),this._onUpdateTextLayerMatches=null),this._updateMatches(!0))}_convertMatches(n,F){if(!n)return[];const{textContentItemsStr:E}=this;let d=0,h=0;const p=E.length-1,L=[];for(let D=0,C=n.length;D<C;D++){let c=n[D];for(;d!==p&&c>=h+E[d].length;)h+=E[d].length,d++;d===E.length&&console.error("Could not find a matching mapping");const T={begin:{divIdx:d,offset:c-h}};for(c+=F[D];d!==p&&c>h+E[d].length;)h+=E[d].length,d++;T.end={divIdx:d,offset:c-h},L.push(T)}return L}_renderMatches(n){if(n.length===0)return;const{findController:F,pageIdx:E}=this,{textContentItemsStr:d,textDivs:h}=this,p=E===F.selected.pageIdx,L=F.selected.matchIdx,D=F.state.highlightAll;let C=null;const c={divIdx:-1,offset:void 0};function T(x,B){const W=x.divIdx;return h[W].textContent="",o(W,0,x.offset,B)}function o(x,B,W,ne){let w=h[x];if(w.nodeType===Node.TEXT_NODE){const P=document.createElement("span");w.before(P),P.append(w),h[x]=P,w=P}const z=d[x].substring(B,W),R=document.createTextNode(z);if(ne){const P=document.createElement("span");return P.className=`${ne} appended`,P.append(R),w.append(P),ne.includes("selected")?P.offsetLeft:0}return w.append(R),0}let t=L,g=t+1;if(D)t=0,g=n.length;else if(!p)return;let v=-1,H=-1;for(let x=t;x<g;x++){const B=n[x],W=B.begin;if(W.divIdx===v&&W.offset===H)continue;v=W.divIdx,H=W.offset;const ne=B.end,w=p&&x===L,z=w?" selected":"";let R=0;if(!C||W.divIdx!==C.divIdx?(C!==null&&o(C.divIdx,C.offset,c.offset),T(W)):o(C.divIdx,C.offset,W.offset),W.divIdx===ne.divIdx)R=o(W.divIdx,W.offset,ne.offset,"highlight"+z);else{R=o(W.divIdx,W.offset,c.offset,"highlight begin"+z);for(let P=W.divIdx+1,M=ne.divIdx;P<M;P++)h[P].className="highlight middle"+z;T(ne,"highlight end"+z)}C=ne,w&&F.scrollMatchIntoView({element:h[W.divIdx],selectedLeft:R,pageIndex:E,matchIndex:L})}C&&o(C.divIdx,C.offset,c.offset)}_updateMatches(n=!1){if(!this.enabled&&!n)return;const{findController:F,matches:E,pageIdx:d}=this,{textContentItemsStr:h,textDivs:p}=this;let L=-1;for(const c of E){const T=Math.max(L,c.begin.divIdx);for(let o=T,t=c.end.divIdx;o<=t;o++){const g=p[o];g.textContent=h[o],g.className=""}L=c.end.divIdx+1}if(!(F!=null&&F.highlightMatches)||n)return;const D=F.pageMatches[d]||null,C=F.pageMatchesLength[d]||null;this.matches=this._convertMatches(D,C),this._renderMatches(this.matches)}}r.TextHighlighter=b},(J,r,b)=>{var E,d,h,p,L,Zt,C,Qt;Object.defineProperty(r,"__esModule",{value:!0}),r.TextLayerBuilder=void 0;var s=b(4),n=b(2);class F{constructor({highlighter:o=null,accessibilityManager:t=null,isOffscreenCanvasSupported:g=!0,enablePermissions:v=!1}){S(this,L);S(this,C);S(this,E,!1);S(this,d,0);S(this,h,0);S(this,p,null);this.textContentItemsStr=[],this.renderingDone=!1,this.textDivs=[],this.textDivProperties=new WeakMap,this.textLayerRenderTask=null,this.highlighter=o,this.accessibilityManager=t,this.isOffscreenCanvasSupported=g,V(this,E,v===!0),this.div=document.createElement("div"),this.div.className="textLayer",this.hide()}get numTextDivs(){return this.textDivs.length}async render(o){var v,H,x;if(!i(this,p))throw new Error('No "textContentSource" parameter specified.');const t=o.scale*(globalThis.devicePixelRatio||1),{rotation:g}=o;if(this.renderingDone){const B=g!==i(this,d),W=t!==i(this,h);(B||W)&&(this.hide(),(0,s.updateTextLayer)({container:this.div,viewport:o,textDivs:this.textDivs,textDivProperties:this.textDivProperties,isOffscreenCanvasSupported:this.isOffscreenCanvasSupported,mustRescale:W,mustRotate:B}),V(this,h,t),V(this,d,g)),this.show();return}this.cancel(),(v=this.highlighter)==null||v.setTextMapping(this.textDivs,this.textContentItemsStr),(H=this.accessibilityManager)==null||H.setTextMapping(this.textDivs),this.textLayerRenderTask=(0,s.renderTextLayer)({textContentSource:i(this,p),container:this.div,viewport:o,textDivs:this.textDivs,textDivProperties:this.textDivProperties,textContentItemsStr:this.textContentItemsStr,isOffscreenCanvasSupported:this.isOffscreenCanvasSupported}),await this.textLayerRenderTask.promise,I(this,L,Zt).call(this),V(this,h,t),V(this,d,g),this.show(),(x=this.accessibilityManager)==null||x.enable()}hide(){var o;this.div.hidden||((o=this.highlighter)==null||o.disable(),this.div.hidden=!0)}show(){var o;this.div.hidden&&this.renderingDone&&(this.div.hidden=!1,(o=this.highlighter)==null||o.enable())}cancel(){var o,t;this.textLayerRenderTask&&(this.textLayerRenderTask.cancel(),this.textLayerRenderTask=null),(o=this.highlighter)==null||o.disable(),(t=this.accessibilityManager)==null||t.disable(),this.textContentItemsStr.length=0,this.textDivs.length=0,this.textDivProperties=new WeakMap}setTextContentSource(o){this.cancel(),V(this,p,o)}}E=new WeakMap,d=new WeakMap,h=new WeakMap,p=new WeakMap,L=new WeakSet,Zt=function(){this.renderingDone=!0;const o=document.createElement("div");o.className="endOfContent",this.div.append(o),I(this,C,Qt).call(this)},C=new WeakSet,Qt=function(){const{div:o}=this;o.addEventListener("mousedown",t=>{const g=o.querySelector(".endOfContent");if(!g)return;let v=t.target!==o;if(v&&(v=getComputedStyle(g).getPropertyValue("-moz-user-select")!=="none"),v){const H=o.getBoundingClientRect(),x=Math.max(0,(t.pageY-H.top)/H.height);g.style.top=(x*100).toFixed(2)+"%"}g.classList.add("active")}),o.addEventListener("mouseup",()=>{const t=o.querySelector(".endOfContent");!t||(t.style.top="",t.classList.remove("active"))}),o.addEventListener("copy",t=>{if(!i(this,E)){const g=document.getSelection();t.clipboardData.setData("text/plain",(0,n.removeNullCharacters)((0,s.normalizeUnicode)(g.toString())))}t.preventDefault(),t.stopPropagation()})},r.TextLayerBuilder=F},(J,r,b)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.XfaLayerBuilder=void 0;var s=b(4);class n{constructor({pageDiv:E,pdfPage:d,annotationStorage:h=null,linkService:p,xfaHtml:L=null}){this.pageDiv=E,this.pdfPage=d,this.annotationStorage=h,this.linkService=p,this.xfaHtml=L,this.div=null,this._cancelled=!1}async render(E,d="display"){if(d==="print"){const L={viewport:E.clone({dontFlip:!0}),div:this.div,xfaHtml:this.xfaHtml,annotationStorage:this.annotationStorage,linkService:this.linkService,intent:d},D=document.createElement("div");return this.pageDiv.append(D),L.div=D,s.XfaLayer.render(L)}const h=await this.pdfPage.getXfa();if(this._cancelled||!h)return{textDivs:[]};const p={viewport:E.clone({dontFlip:!0}),div:this.div,xfaHtml:h,annotationStorage:this.annotationStorage,linkService:this.linkService,intent:d};return this.div?s.XfaLayer.update(p):(this.div=document.createElement("div"),this.pageDiv.append(this.div),p.div=this.div,s.XfaLayer.render(p))}cancel(){this._cancelled=!0}hide(){!this.div||(this.div.hidden=!0)}}r.XfaLayerBuilder=n},(J,r,b)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.PDFScriptingManager=void 0;var s=b(22),n=b(23);class F extends n.PDFScriptingManager{constructor(d){d.externalServices||window.addEventListener("updatefromsandbox",h=>{d.eventBus.dispatch("updatefromsandbox",{source:window,detail:h.detail})}),d.externalServices||(d.externalServices={createScripting:({sandboxBundleSrc:h})=>new s.GenericScripting(h)}),d.docProperties||(d.docProperties=h=>(0,s.docProperties)(h)),super(d)}}r.PDFScriptingManager=F},(J,r,b)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.GenericScripting=void 0,r.docProperties=n;var s=b(4);async function n(E){const d="",h=d.split("#")[0];let{info:p,metadata:L,contentDispositionFilename:D,contentLength:C}=await E.getMetadata();if(!C){const{length:c}=await E.getDownloadInfo();C=c}return{...p,baseURL:h,filesize:C,filename:D||(0,s.getPdfFilenameFromUrl)(d),metadata:L==null?void 0:L.getRaw(),authors:L==null?void 0:L.get("dc:creator"),numPages:E.numPages,URL:d}}class F{constructor(d){this._ready=(0,s.loadScript)(d,!0).then(()=>window.pdfjsSandbox.QuickJSSandbox())}async createSandbox(d){(await this._ready).create(d)}async dispatchEventInSandbox(d){const h=await this._ready;setTimeout(()=>h.dispatchEvent(d),0)}async destroySandbox(){(await this._ready).nukeSandbox()}}r.GenericScripting=F},(J,r,b)=>{var E,d,h,p,L,D,C,c,T,o,t,g,Yt,H,at,B,Tt,ne,Jt,z,qe;Object.defineProperty(r,"__esModule",{value:!0}),r.PDFScriptingManager=void 0;var s=b(2),n=b(4);class F{constructor({eventBus:M,sandboxBundleSrc:j=null,externalServices:u=null,docProperties:Z=null}){S(this,g);S(this,H);S(this,B);S(this,ne);S(this,z);S(this,E,null);S(this,d,null);S(this,h,null);S(this,p,null);S(this,L,null);S(this,D,null);S(this,C,null);S(this,c,!1);S(this,T,null);S(this,o,null);S(this,t,null);V(this,p,M),V(this,T,j),V(this,L,u),V(this,h,Z)}setViewer(M){V(this,C,M)}async setDocument(M){var q;if(i(this,D)&&await I(this,z,qe).call(this),V(this,D,M),!M)return;const[j,u,Z]=await Promise.all([M.getFieldObjects(),M.getCalculationOrderIds(),M.getJSActions()]);if(!j&&!Z){await I(this,z,qe).call(this);return}if(M===i(this,D)){try{V(this,o,I(this,ne,Jt).call(this))}catch(Q){console.error(`setDocument: "${Q.message}".`),await I(this,z,qe).call(this);return}this._internalEvents.set("updatefromsandbox",Q=>{(Q==null?void 0:Q.source)===window&&I(this,g,Yt).call(this,Q.detail)}),this._internalEvents.set("dispatcheventinsandbox",Q=>{var ae;(ae=i(this,o))==null||ae.dispatchEventInSandbox(Q.detail)}),this._internalEvents.set("pagechanging",({pageNumber:Q,previous:ae})=>{Q!==ae&&(I(this,B,Tt).call(this,ae),I(this,H,at).call(this,Q))}),this._internalEvents.set("pagerendered",({pageNumber:Q})=>{!this._pageOpenPending.has(Q)||Q===i(this,C).currentPageNumber&&I(this,H,at).call(this,Q)}),this._internalEvents.set("pagesdestroy",async()=>{var Q,ae;await I(this,B,Tt).call(this,i(this,C).currentPageNumber),await((Q=i(this,o))==null?void 0:Q.dispatchEventInSandbox({id:"doc",name:"WillClose"})),(ae=i(this,E))==null||ae.resolve()});for(const[Q,ae]of this._internalEvents)i(this,p)._on(Q,ae);try{const Q=await i(this,h).call(this,M);if(M!==i(this,D))return;await i(this,o).createSandbox({objects:j,calculationOrder:u,appInfo:{platform:navigator.platform,language:navigator.language},docInfo:{...Q,actions:Z}}),i(this,p).dispatch("sandboxcreated",{source:this})}catch(Q){console.error(`setDocument: "${Q.message}".`),await I(this,z,qe).call(this);return}await((q=i(this,o))==null?void 0:q.dispatchEventInSandbox({id:"doc",name:"Open"})),await I(this,H,at).call(this,i(this,C).currentPageNumber,!0),Promise.resolve().then(()=>{M===i(this,D)&&V(this,c,!0)})}}async dispatchWillSave(){var M;return(M=i(this,o))==null?void 0:M.dispatchEventInSandbox({id:"doc",name:"WillSave"})}async dispatchDidSave(){var M;return(M=i(this,o))==null?void 0:M.dispatchEventInSandbox({id:"doc",name:"DidSave"})}async dispatchWillPrint(){var M;if(!!i(this,o)){await((M=i(this,t))==null?void 0:M.promise),V(this,t,new n.PromiseCapability);try{await i(this,o).dispatchEventInSandbox({id:"doc",name:"WillPrint"})}catch(j){throw i(this,t).resolve(),V(this,t,null),j}await i(this,t).promise}}async dispatchDidPrint(){var M;return(M=i(this,o))==null?void 0:M.dispatchEventInSandbox({id:"doc",name:"DidPrint"})}get destroyPromise(){var M;return((M=i(this,d))==null?void 0:M.promise)||null}get ready(){return i(this,c)}get _internalEvents(){return(0,n.shadow)(this,"_internalEvents",new Map)}get _pageOpenPending(){return(0,n.shadow)(this,"_pageOpenPending",new Set)}get _visitedPages(){return(0,n.shadow)(this,"_visitedPages",new Map)}}E=new WeakMap,d=new WeakMap,h=new WeakMap,p=new WeakMap,L=new WeakMap,D=new WeakMap,C=new WeakMap,c=new WeakMap,T=new WeakMap,o=new WeakMap,t=new WeakMap,g=new WeakSet,Yt=async function(M){var Ee,we;const j=i(this,C),u=j.isInPresentationMode||j.isChangingPresentationMode,{id:Z,siblings:q,command:Q,value:ae}=M;if(!Z){switch(Q){case"clear":console.clear();break;case"error":console.error(ae);break;case"layout":if(!u){const Ne=(0,s.apiPageLayoutToViewerModes)(ae);j.spreadMode=Ne.spreadMode}break;case"page-num":j.currentPageNumber=ae+1;break;case"print":await j.pagesPromise,i(this,p).dispatch("print",{source:this});break;case"println":console.log(ae);break;case"zoom":u||(j.currentScaleValue=ae);break;case"SaveAs":i(this,p).dispatch("download",{source:this});break;case"FirstPage":j.currentPageNumber=1;break;case"LastPage":j.currentPageNumber=j.pagesCount;break;case"NextPage":j.nextPage();break;case"PrevPage":j.previousPage();break;case"ZoomViewIn":u||j.increaseScale();break;case"ZoomViewOut":u||j.decreaseScale();break;case"WillPrintFinished":(Ee=i(this,t))==null||Ee.resolve(),V(this,t,null);break}return}if(u&&M.focus)return;delete M.id,delete M.siblings;const be=q?[Z,...q]:[Z];for(const Ne of be){const Se=document.querySelector(`[data-element-id="${Ne}"]`);Se?Se.dispatchEvent(new CustomEvent("updatefromsandbox",{detail:M})):(we=i(this,D))==null||we.annotationStorage.setValue(Ne,M)}},H=new WeakSet,at=async function(M,j=!1){const u=i(this,D),Z=this._visitedPages;if(j&&V(this,E,new n.PromiseCapability),!i(this,E))return;const q=i(this,C).getPageView(M-1);if((q==null?void 0:q.renderingState)!==s.RenderingStates.FINISHED){this._pageOpenPending.add(M);return}this._pageOpenPending.delete(M);const Q=(async()=>{var be,Ee;const ae=await(Z.has(M)?null:(be=q.pdfPage)==null?void 0:be.getJSActions());u===i(this,D)&&await((Ee=i(this,o))==null?void 0:Ee.dispatchEventInSandbox({id:"page",name:"PageOpen",pageNumber:M,actions:ae}))})();Z.set(M,Q)},B=new WeakSet,Tt=async function(M){var q;const j=i(this,D),u=this._visitedPages;if(!i(this,E)||this._pageOpenPending.has(M))return;const Z=u.get(M);!Z||(u.set(M,null),await Z,j===i(this,D)&&await((q=i(this,o))==null?void 0:q.dispatchEventInSandbox({id:"page",name:"PageClose",pageNumber:M})))},ne=new WeakSet,Jt=function(){if(V(this,d,new n.PromiseCapability),i(this,o))throw new Error("#initScripting: Scripting already exists.");return i(this,L).createScripting({sandboxBundleSrc:i(this,T)})},z=new WeakSet,qe=async function(){var M,j,u;if(!i(this,o)){V(this,D,null),(M=i(this,d))==null||M.resolve();return}i(this,E)&&(await Promise.race([i(this,E).promise,new Promise(Z=>{setTimeout(Z,1e3)})]).catch(()=>{}),V(this,E,null)),V(this,D,null);try{await i(this,o).destroySandbox()}catch{}(j=i(this,t))==null||j.reject(new Error("Scripting destroyed.")),V(this,t,null);for(const[Z,q]of this._internalEvents)i(this,p)._off(Z,q);this._internalEvents.clear(),this._pageOpenPending.clear(),this._visitedPages.clear(),V(this,o,null),V(this,c,!1),(u=i(this,d))==null||u.resolve()},r.PDFScriptingManager=F},(J,r,b)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.PDFSinglePageViewer=void 0;var s=b(2),n=b(25);class F extends n.PDFViewer{_resetView(){super._resetView(),this._scrollMode=s.ScrollMode.PAGE,this._spreadMode=s.SpreadMode.NONE}set scrollMode(d){}_updateScrollMode(){}set spreadMode(d){}_updateSpreadMode(){}}r.PDFSinglePageViewer=F},(J,r,b)=>{var T,o,t,At,v,H,x,B,W,ne,w,z,R,P,M,j,u,Z,q,Q,ae,be,qt,we,ei,Se,ti,xe,ii,Me,et,k,ot,Y,ni,te,It,m,ri,$,je,ee,Ct,ue,si,ce,ai,pe,xt,Ae,oi;Object.defineProperty(r,"__esModule",{value:!0}),r.PagesCountLimit=r.PDFViewer=r.PDFPageViewBuffer=void 0;var s=b(4),n=b(2),F=b(7),E=b(13),d=b(26),h=b(5);const p=10,L={FORCE_SCROLL_MODE_PAGE:15e3,FORCE_LAZY_PAGE_INIT:7500,PAUSE_EAGER_PAGE_INIT:250};r.PagesCountLimit=L;function D(Ie){return Object.values(s.AnnotationEditorType).includes(Ie)&&Ie!==s.AnnotationEditorType.DISABLE}class C{constructor(e){S(this,t);S(this,T,new Set);S(this,o,0);V(this,o,e)}push(e){const l=i(this,T);l.has(e)&&l.delete(e),l.add(e),l.size>i(this,o)&&I(this,t,At).call(this)}resize(e,l=null){V(this,o,e);const N=i(this,T);if(l){const A=N.size;let a=1;for(const f of N)if(l.has(f.id)&&(N.delete(f),N.add(f)),++a>A)break}for(;N.size>i(this,o);)I(this,t,At).call(this)}has(e){return i(this,T).has(e)}[Symbol.iterator](){return i(this,T).keys()}}T=new WeakMap,o=new WeakMap,t=new WeakSet,At=function(){const e=i(this,T).keys().next().value;e==null||e.destroy(),i(this,T).delete(e)},r.PDFPageViewBuffer=C;class c{constructor(e){S(this,be);S(this,we);S(this,Se);S(this,xe);S(this,Me);S(this,k);S(this,Y);S(this,te);S(this,m);S(this,$);S(this,ee);S(this,ue);S(this,ce);S(this,pe);S(this,Ae);S(this,v,null);S(this,H,null);S(this,x,s.AnnotationEditorType.NONE);S(this,B,null);S(this,W,s.AnnotationMode.ENABLE_FORMS);S(this,ne,null);S(this,w,null);S(this,z,!1);S(this,R,!1);S(this,P,null);S(this,M,!1);S(this,j,0);S(this,u,new ResizeObserver(I(this,Ae,oi).bind(this)));S(this,Z,null);S(this,q,null);S(this,Q,null);S(this,ae,n.TextLayerMode.ENABLE);var N,A,a,f,_,y;const l="3.11.174";if(s.version!==l)throw new Error(`The API version "${s.version}" does not match the Viewer version "${l}".`);if(this.container=e.container,this.viewer=e.viewer||e.container.firstElementChild,((N=this.container)==null?void 0:N.tagName)!=="DIV"||((A=this.viewer)==null?void 0:A.tagName)!=="DIV")throw new Error("Invalid `container` and/or `viewer` option.");if(this.container.offsetParent&&getComputedStyle(this.container).position!=="absolute")throw new Error("The `container` must be absolutely positioned.");i(this,u).observe(this.container),this.eventBus=e.eventBus,this.linkService=e.linkService||new h.SimpleLinkService,this.downloadManager=e.downloadManager||null,this.findController=e.findController||null,V(this,H,e.altTextManager||null),this.findController&&(this.findController.onIsPageVisible=X=>this._getVisiblePages().ids.has(X)),this._scriptingManager=e.scriptingManager||null,V(this,ae,(a=e.textLayerMode)!=null?a:n.TextLayerMode.ENABLE),V(this,W,(f=e.annotationMode)!=null?f:s.AnnotationMode.ENABLE_FORMS),V(this,x,(_=e.annotationEditorMode)!=null?_:s.AnnotationEditorType.NONE),this.imageResourcesPath=e.imageResourcesPath||"",this.enablePrintAutoRotate=e.enablePrintAutoRotate||!1,this.removePageBorders=e.removePageBorders||!1,e.useOnlyCssZoom&&(console.error("useOnlyCssZoom was removed, please use `maxCanvasPixels = 0` instead."),e.maxCanvasPixels=0),this.isOffscreenCanvasSupported=(y=e.isOffscreenCanvasSupported)!=null?y:!0,this.maxCanvasPixels=e.maxCanvasPixels,this.l10n=e.l10n||F.NullL10n,V(this,z,e.enablePermissions||!1),this.pageColors=e.pageColors||null,this.defaultRenderingQueue=!e.renderingQueue,this.defaultRenderingQueue?(this.renderingQueue=new d.PDFRenderingQueue,this.renderingQueue.setViewer(this)):this.renderingQueue=e.renderingQueue,this.scroll=(0,n.watchScroll)(this.container,this._scrollUpdate.bind(this)),this.presentationModeState=n.PresentationModeState.UNKNOWN,this._onBeforeDraw=this._onAfterDraw=null,this._resetView(),this.removePageBorders&&this.viewer.classList.add("removePageBorders"),I(this,pe,xt).call(this),this.eventBus._on("thumbnailrendered",({pageNumber:X,pdfPage:K})=>{const oe=this._pages[X-1];i(this,v).has(oe)||K==null||K.cleanup()})}get pagesCount(){return this._pages.length}getPageView(e){return this._pages[e]}getCachedPageViews(){return new Set(i(this,v))}get pageViewsReady(){return this._pagesCapability.settled&&this._pages.every(e=>e==null?void 0:e.pdfPage)}get renderForms(){return i(this,W)===s.AnnotationMode.ENABLE_FORMS}get enableScripting(){return!!this._scriptingManager}get currentPageNumber(){return this._currentPageNumber}set currentPageNumber(e){if(!Number.isInteger(e))throw new Error("Invalid page number.");!this.pdfDocument||this._setCurrentPageNumber(e,!0)||console.error(`currentPageNumber: "${e}" is not a valid page.`)}_setCurrentPageNumber(e,l=!1){var A,a;if(this._currentPageNumber===e)return l&&I(this,ee,Ct).call(this),!0;if(!(0<e&&e<=this.pagesCount))return!1;const N=this._currentPageNumber;return this._currentPageNumber=e,this.eventBus.dispatch("pagechanging",{source:this,pageNumber:e,pageLabel:(a=(A=this._pageLabels)==null?void 0:A[e-1])!=null?a:null,previous:N}),l&&I(this,ee,Ct).call(this),!0}get currentPageLabel(){var e,l;return(l=(e=this._pageLabels)==null?void 0:e[this._currentPageNumber-1])!=null?l:null}set currentPageLabel(e){if(!this.pdfDocument)return;let l=e|0;if(this._pageLabels){const N=this._pageLabels.indexOf(e);N>=0&&(l=N+1)}this._setCurrentPageNumber(l,!0)||console.error(`currentPageLabel: "${e}" is not a valid page.`)}get currentScale(){return this._currentScale!==n.UNKNOWN_SCALE?this._currentScale:n.DEFAULT_SCALE}set currentScale(e){if(isNaN(e))throw new Error("Invalid numeric scale.");!this.pdfDocument||I(this,$,je).call(this,e,{noScroll:!1})}get currentScaleValue(){return this._currentScaleValue}set currentScaleValue(e){!this.pdfDocument||I(this,$,je).call(this,e,{noScroll:!1})}get pagesRotation(){return this._pagesRotation}set pagesRotation(e){if(!(0,n.isValidRotation)(e))throw new Error("Invalid pages rotation angle.");if(!this.pdfDocument||(e%=360,e<0&&(e+=360),this._pagesRotation===e))return;this._pagesRotation=e;const l=this._currentPageNumber;this.refresh(!0,{rotation:e}),this._currentScaleValue&&I(this,$,je).call(this,this._currentScaleValue,{noScroll:!0}),this.eventBus.dispatch("rotationchanging",{source:this,pagesRotation:e,pageNumber:l}),this.defaultRenderingQueue&&this.update()}get firstPagePromise(){return this.pdfDocument?this._firstPageCapability.promise:null}get onePageRendered(){return this.pdfDocument?this._onePageRenderedCapability.promise:null}get pagesPromise(){return this.pdfDocument?this._pagesCapability.promise:null}async getAllText(){const e=[],l=[];for(let N=1,A=this.pdfDocument.numPages;N<=A;++N){if(i(this,M))return null;l.length=0;const a=await this.pdfDocument.getPage(N),{items:f}=await a.getTextContent();for(const _ of f)_.str&&l.push(_.str),_.hasEOL&&l.push(`
`);e.push((0,n.removeNullCharacters)(l.join("")))}return e.join(`
`)}setDocument(e){var f,_;if(this.pdfDocument&&(this.eventBus.dispatch("pagesdestroy",{source:this}),this._cancelRendering(),this._resetView(),(f=this.findController)==null||f.setDocument(null),(_=this._scriptingManager)==null||_.setDocument(null),i(this,B)&&(i(this,B).destroy(),V(this,B,null))),this.pdfDocument=e,!e)return;const l=e.numPages,N=e.getPage(1),A=e.getOptionalContentConfig(),a=i(this,z)?e.getPermissions():Promise.resolve();if(l>L.FORCE_SCROLL_MODE_PAGE){console.warn("Forcing PAGE-scrolling for performance reasons, given the length of the document.");const y=this._scrollMode=n.ScrollMode.PAGE;this.eventBus.dispatch("scrollmodechanged",{source:this,mode:y})}this._pagesCapability.promise.then(()=>{this.eventBus.dispatch("pagesloaded",{source:this,pagesCount:l})},()=>{}),this._onBeforeDraw=y=>{const X=this._pages[y.pageNumber-1];!X||i(this,v).push(X)},this.eventBus._on("pagerender",this._onBeforeDraw),this._onAfterDraw=y=>{y.cssTransform||this._onePageRenderedCapability.settled||(this._onePageRenderedCapability.resolve({timestamp:y.timestamp}),this.eventBus._off("pagerendered",this._onAfterDraw),this._onAfterDraw=null,i(this,q)&&(document.removeEventListener("visibilitychange",i(this,q)),V(this,q,null)))},this.eventBus._on("pagerendered",this._onAfterDraw),Promise.all([N,a]).then(([y,X])=>{var ke,De;if(e!==this.pdfDocument)return;this._firstPageCapability.resolve(y),this._optionalContentConfigPromise=A;const{annotationEditorMode:K,annotationMode:oe,textLayerMode:he}=I(this,we,ei).call(this,X);if(he!==n.TextLayerMode.DISABLE){const _e=V(this,P,document.createElement("div"));_e.id="hiddenCopyElement",this.viewer.before(_e)}if(K!==s.AnnotationEditorType.DISABLE){const _e=K;e.isPureXfa?console.warn("Warning: XFA-editing is not implemented."):D(_e)?(V(this,B,new s.AnnotationEditorUIManager(this.container,this.viewer,i(this,H),this.eventBus,e,this.pageColors)),_e!==s.AnnotationEditorType.NONE&&i(this,B).updateMode(_e)):console.error(`Invalid AnnotationEditor mode: ${_e}`)}const re=I(this,be,qt).bind(this),de=this._scrollMode===n.ScrollMode.PAGE?null:this.viewer,ge=this.currentScale,Re=y.getViewport({scale:ge*s.PixelsPerInch.PDF_TO_CSS_UNITS});this.viewer.style.setProperty("--scale-factor",Re.scale),(((ke=this.pageColors)==null?void 0:ke.foreground)==="CanvasText"||((De=this.pageColors)==null?void 0:De.background)==="Canvas")&&this.viewer.style.setProperty("--hcm-highligh-filter",e.filterFactory.addHighlightHCMFilter("CanvasText","Canvas","HighlightText","Highlight"));for(let _e=1;_e<=l;++_e){const Fe=new E.PDFPageView({container:de,eventBus:this.eventBus,id:_e,scale:ge,defaultViewport:Re.clone(),optionalContentConfigPromise:A,renderingQueue:this.renderingQueue,textLayerMode:he,annotationMode:oe,imageResourcesPath:this.imageResourcesPath,isOffscreenCanvasSupported:this.isOffscreenCanvasSupported,maxCanvasPixels:this.maxCanvasPixels,pageColors:this.pageColors,l10n:this.l10n,layerProperties:re});this._pages.push(Fe)}const He=this._pages[0];He&&(He.setPdfPage(y),this.linkService.cachePageRef(1,y.ref)),this._scrollMode===n.ScrollMode.PAGE?I(this,Me,et).call(this):this._spreadMode!==n.SpreadMode.NONE&&this._updateSpreadMode(),I(this,Se,ti).call(this).then(async()=>{var Fe,Xe;if((Fe=this.findController)==null||Fe.setDocument(e),(Xe=this._scriptingManager)==null||Xe.setDocument(e),i(this,P)&&(V(this,w,I(this,xe,ii).bind(this,he)),document.addEventListener("copy",i(this,w))),i(this,B)&&this.eventBus.dispatch("annotationeditormodechanged",{source:this,mode:i(this,x)}),e.loadingParams.disableAutoFetch||l>L.FORCE_LAZY_PAGE_INIT){this._pagesCapability.resolve();return}let _e=l-1;if(_e<=0){this._pagesCapability.resolve();return}for(let We=2;We<=l;++We){const lt=e.getPage(We).then(Ke=>{const Ce=this._pages[We-1];Ce.pdfPage||Ce.setPdfPage(Ke),this.linkService.cachePageRef(We,Ke.ref),--_e===0&&this._pagesCapability.resolve()},Ke=>{console.error(`Unable to get page ${We} to initialize viewer`,Ke),--_e===0&&this._pagesCapability.resolve()});We%L.PAUSE_EAGER_PAGE_INIT===0&&await lt}}),this.eventBus.dispatch("pagesinit",{source:this}),e.getMetadata().then(({info:_e})=>{e===this.pdfDocument&&_e.Language&&(this.viewer.lang=_e.Language)}),this.defaultRenderingQueue&&this.update()}).catch(y=>{console.error("Unable to initialize viewer",y),this._pagesCapability.reject(y)})}setPageLabels(e){var l,N;if(!!this.pdfDocument){e?Array.isArray(e)&&this.pdfDocument.numPages===e.length?this._pageLabels=e:(this._pageLabels=null,console.error("setPageLabels: Invalid page labels.")):this._pageLabels=null;for(let A=0,a=this._pages.length;A<a;A++)this._pages[A].setPageLabel((N=(l=this._pageLabels)==null?void 0:l[A])!=null?N:null)}}_resetView(){this._pages=[],this._currentPageNumber=1,this._currentScale=n.UNKNOWN_SCALE,this._currentScaleValue=null,this._pageLabels=null,V(this,v,new C(p)),this._location=null,this._pagesRotation=0,this._optionalContentConfigPromise=null,this._firstPageCapability=new s.PromiseCapability,this._onePageRenderedCapability=new s.PromiseCapability,this._pagesCapability=new s.PromiseCapability,this._scrollMode=n.ScrollMode.VERTICAL,this._previousScrollMode=n.ScrollMode.UNKNOWN,this._spreadMode=n.SpreadMode.NONE,V(this,Z,{previousPageNumber:1,scrollDown:!0,pages:[]}),this._onBeforeDraw&&(this.eventBus._off("pagerender",this._onBeforeDraw),this._onBeforeDraw=null),this._onAfterDraw&&(this.eventBus._off("pagerendered",this._onAfterDraw),this._onAfterDraw=null),i(this,q)&&(document.removeEventListener("visibilitychange",i(this,q)),V(this,q,null)),this.viewer.textContent="",this._updateScrollMode(),this.viewer.removeAttribute("lang"),i(this,P)&&(document.removeEventListener("copy",i(this,w)),V(this,w,null),i(this,P).remove(),V(this,P,null))}_scrollUpdate(){this.pagesCount!==0&&this.update()}pageLabelToPageNumber(e){if(!this._pageLabels)return null;const l=this._pageLabels.indexOf(e);return l<0?null:l+1}scrollPageIntoView({pageNumber:e,destArray:l=null,allowNegativeOffset:N=!1,ignoreDestinationZoom:A=!1}){if(!this.pdfDocument)return;const a=Number.isInteger(e)&&this._pages[e-1];if(!a){console.error(`scrollPageIntoView: "${e}" is not a valid pageNumber parameter.`);return}if(this.isInPresentationMode||!l){this._setCurrentPageNumber(e,!0);return}let f=0,_=0,y=0,X=0,K,oe;const he=a.rotation%180!==0,re=(he?a.height:a.width)/a.scale/s.PixelsPerInch.PDF_TO_CSS_UNITS,de=(he?a.width:a.height)/a.scale/s.PixelsPerInch.PDF_TO_CSS_UNITS;let ge=0;switch(l[1].name){case"XYZ":f=l[2],_=l[3],ge=l[4],f=f!==null?f:0,_=_!==null?_:de;break;case"Fit":case"FitB":ge="page-fit";break;case"FitH":case"FitBH":_=l[2],ge="page-width",_===null&&this._location?(f=this._location.left,_=this._location.top):(typeof _!="number"||_<0)&&(_=de);break;case"FitV":case"FitBV":f=l[2],y=re,X=de,ge="page-height";break;case"FitR":f=l[2],_=l[3],y=l[4]-f,X=l[5]-_;let De=n.SCROLLBAR_PADDING,_e=n.VERTICAL_PADDING;this.removePageBorders&&(De=_e=0),K=(this.container.clientWidth-De)/y/s.PixelsPerInch.PDF_TO_CSS_UNITS,oe=(this.container.clientHeight-_e)/X/s.PixelsPerInch.PDF_TO_CSS_UNITS,ge=Math.min(Math.abs(K),Math.abs(oe));break;default:console.error(`scrollPageIntoView: "${l[1].name}" is not a valid destination type.`);return}if(A||(ge&&ge!==this._currentScale?this.currentScaleValue=ge:this._currentScale===n.UNKNOWN_SCALE&&(this.currentScaleValue=n.DEFAULT_SCALE_VALUE)),ge==="page-fit"&&!l[4]){I(this,k,ot).call(this,a);return}const Re=[a.viewport.convertToViewportPoint(f,_),a.viewport.convertToViewportPoint(f+y,_+X)];let He=Math.min(Re[0][0],Re[1][0]),ke=Math.min(Re[0][1],Re[1][1]);N||(He=Math.max(He,0),ke=Math.max(ke,0)),I(this,k,ot).call(this,a,{left:He,top:ke})}_updateLocation(e){const l=this._currentScale,N=this._currentScaleValue,A=parseFloat(N)===l?Math.round(l*1e4)/100:N,a=e.id,f=this._pages[a-1],_=this.container,y=f.getPagePoint(_.scrollLeft-e.x,_.scrollTop-e.y),X=Math.round(y[0]),K=Math.round(y[1]);let oe=`#page=${a}`;this.isInPresentationMode||(oe+=`&zoom=${A},${X},${K}`),this._location={pageNumber:a,scale:A,top:K,left:X,rotation:this._pagesRotation,pdfOpenParams:oe}}update(){const e=this._getVisiblePages(),l=e.views,N=l.length;if(N===0)return;const A=Math.max(p,2*N+1);i(this,v).resize(A,e.ids),this.renderingQueue.renderHighestPriority(e);const a=this._spreadMode===n.SpreadMode.NONE&&(this._scrollMode===n.ScrollMode.PAGE||this._scrollMode===n.ScrollMode.VERTICAL),f=this._currentPageNumber;let _=!1;for(const y of l){if(y.percent<100)break;if(y.id===f&&a){_=!0;break}}this._setCurrentPageNumber(_?f:l[0].id),this._updateLocation(e.first),this.eventBus.dispatch("updateviewarea",{source:this,location:this._location})}containsElement(e){return this.container.contains(e)}focus(){this.container.focus()}get _isContainerRtl(){return getComputedStyle(this.container).direction==="rtl"}get isInPresentationMode(){return this.presentationModeState===n.PresentationModeState.FULLSCREEN}get isChangingPresentationMode(){return this.presentationModeState===n.PresentationModeState.CHANGING}get isHorizontalScrollbarEnabled(){return this.isInPresentationMode?!1:this.container.scrollWidth>this.container.clientWidth}get isVerticalScrollbarEnabled(){return this.isInPresentationMode?!1:this.container.scrollHeight>this.container.clientHeight}_getVisiblePages(){const e=this._scrollMode===n.ScrollMode.PAGE?i(this,Z).pages:this._pages,l=this._scrollMode===n.ScrollMode.HORIZONTAL,N=l&&this._isContainerRtl;return(0,n.getVisibleElements)({scrollEl:this.container,views:e,sortByVisibility:!0,horizontal:l,rtl:N})}cleanup(){for(const e of this._pages)e.renderingState!==n.RenderingStates.FINISHED&&e.reset()}_cancelRendering(){for(const e of this._pages)e.cancelRendering()}forceRendering(e){const l=e||this._getVisiblePages(),N=I(this,ce,ai).call(this,l),A=this._spreadMode!==n.SpreadMode.NONE&&this._scrollMode!==n.ScrollMode.HORIZONTAL,a=this.renderingQueue.getHighestPriority(l,this._pages,N,A);return a?(I(this,ue,si).call(this,a).then(()=>{this.renderingQueue.renderView(a)}),!0):!1}get hasEqualPageSizes(){const e=this._pages[0];for(let l=1,N=this._pages.length;l<N;++l){const A=this._pages[l];if(A.width!==e.width||A.height!==e.height)return!1}return!0}getPagesOverview(){let e;return this._pages.map(l=>{const N=l.pdfPage.getViewport({scale:1}),A=(0,n.isPortraitOrientation)(N);if(e===void 0)e=A;else if(this.enablePrintAutoRotate&&A!==e)return{width:N.height,height:N.width,rotation:(N.rotation-90)%360};return{width:N.width,height:N.height,rotation:N.rotation}})}get optionalContentConfigPromise(){return this.pdfDocument?this._optionalContentConfigPromise?this._optionalContentConfigPromise:(console.error("optionalContentConfigPromise: Not initialized yet."),this.pdfDocument.getOptionalContentConfig()):Promise.resolve(null)}set optionalContentConfigPromise(e){if(!(e instanceof Promise))throw new Error(`Invalid optionalContentConfigPromise: ${e}`);!this.pdfDocument||!this._optionalContentConfigPromise||(this._optionalContentConfigPromise=e,this.refresh(!1,{optionalContentConfigPromise:e}),this.eventBus.dispatch("optionalcontentconfigchanged",{source:this,promise:e}))}get scrollMode(){return this._scrollMode}set scrollMode(e){if(this._scrollMode!==e){if(!(0,n.isValidScrollMode)(e))throw new Error(`Invalid scroll mode: ${e}`);this.pagesCount>L.FORCE_SCROLL_MODE_PAGE||(this._previousScrollMode=this._scrollMode,this._scrollMode=e,this.eventBus.dispatch("scrollmodechanged",{source:this,mode:e}),this._updateScrollMode(this._currentPageNumber))}}_updateScrollMode(e=null){const l=this._scrollMode,N=this.viewer;N.classList.toggle("scrollHorizontal",l===n.ScrollMode.HORIZONTAL),N.classList.toggle("scrollWrapped",l===n.ScrollMode.WRAPPED),!(!this.pdfDocument||!e)&&(l===n.ScrollMode.PAGE?I(this,Me,et).call(this):this._previousScrollMode===n.ScrollMode.PAGE&&this._updateSpreadMode(),this._currentScaleValue&&isNaN(this._currentScaleValue)&&I(this,$,je).call(this,this._currentScaleValue,{noScroll:!0}),this._setCurrentPageNumber(e,!0),this.update())}get spreadMode(){return this._spreadMode}set spreadMode(e){if(this._spreadMode!==e){if(!(0,n.isValidSpreadMode)(e))throw new Error(`Invalid spread mode: ${e}`);this._spreadMode=e,this.eventBus.dispatch("spreadmodechanged",{source:this,mode:e}),this._updateSpreadMode(this._currentPageNumber)}}_updateSpreadMode(e=null){if(!this.pdfDocument)return;const l=this.viewer,N=this._pages;if(this._scrollMode===n.ScrollMode.PAGE)I(this,Me,et).call(this);else if(l.textContent="",this._spreadMode===n.SpreadMode.NONE)for(const A of this._pages)l.append(A.div);else{const A=this._spreadMode-1;let a=null;for(let f=0,_=N.length;f<_;++f)a===null?(a=document.createElement("div"),a.className="spread",l.append(a)):f%2===A&&(a=a.cloneNode(!1),l.append(a)),a.append(N[f].div)}!e||(this._currentScaleValue&&isNaN(this._currentScaleValue)&&I(this,$,je).call(this,this._currentScaleValue,{noScroll:!0}),this._setCurrentPageNumber(e,!0),this.update())}_getPageAdvance(e,l=!1){switch(this._scrollMode){case n.ScrollMode.WRAPPED:{const{views:N}=this._getVisiblePages(),A=new Map;for(const{id:a,y:f,percent:_,widthPercent:y}of N){if(_===0||y<100)continue;let X=A.get(f);X||A.set(f,X||(X=[])),X.push(a)}for(const a of A.values()){const f=a.indexOf(e);if(f===-1)continue;const _=a.length;if(_===1)break;if(l)for(let y=f-1,X=0;y>=X;y--){const K=a[y],oe=a[y+1]-1;if(K<oe)return e-oe}else for(let y=f+1,X=_;y<X;y++){const K=a[y],oe=a[y-1]+1;if(K>oe)return oe-e}if(l){const y=a[0];if(y<e)return e-y+1}else{const y=a[_-1];if(y>e)return y-e+1}break}break}case n.ScrollMode.HORIZONTAL:break;case n.ScrollMode.PAGE:case n.ScrollMode.VERTICAL:{if(this._spreadMode===n.SpreadMode.NONE)break;const N=this._spreadMode-1;if(l&&e%2!==N)break;if(!l&&e%2===N)break;const{views:A}=this._getVisiblePages(),a=l?e-1:e+1;for(const{id:f,percent:_,widthPercent:y}of A)if(f===a){if(_>0&&y===100)return 2;break}break}}return 1}nextPage(){const e=this._currentPageNumber,l=this.pagesCount;if(e>=l)return!1;const N=this._getPageAdvance(e,!1)||1;return this.currentPageNumber=Math.min(e+N,l),!0}previousPage(){const e=this._currentPageNumber;if(e<=1)return!1;const l=this._getPageAdvance(e,!0)||1;return this.currentPageNumber=Math.max(e-l,1),!0}increaseScale({drawingDelay:e,scaleFactor:l,steps:N}={}){if(!this.pdfDocument)return;let A=this._currentScale;if(l>1)A=Math.round(A*l*100)/100;else{N!=null||(N=1);do A=Math.ceil((A*n.DEFAULT_SCALE_DELTA).toFixed(2)*10)/10;while(--N>0&&A<n.MAX_SCALE)}I(this,$,je).call(this,Math.min(n.MAX_SCALE,A),{noScroll:!1,drawingDelay:e})}decreaseScale({drawingDelay:e,scaleFactor:l,steps:N}={}){if(!this.pdfDocument)return;let A=this._currentScale;if(l>0&&l<1)A=Math.round(A*l*100)/100;else{N!=null||(N=1);do A=Math.floor((A/n.DEFAULT_SCALE_DELTA).toFixed(2)*10)/10;while(--N>0&&A>n.MIN_SCALE)}I(this,$,je).call(this,Math.max(n.MIN_SCALE,A),{noScroll:!1,drawingDelay:e})}get containerTopLeft(){return i(this,ne)||V(this,ne,[this.container.offsetTop,this.container.offsetLeft])}get annotationEditorMode(){return i(this,B)?i(this,x):s.AnnotationEditorType.DISABLE}set annotationEditorMode({mode:e,editId:l=null}){if(!i(this,B))throw new Error("The AnnotationEditor is not enabled.");if(i(this,x)!==e){if(!D(e))throw new Error(`Invalid AnnotationEditor mode: ${e}`);!this.pdfDocument||(V(this,x,e),this.eventBus.dispatch("annotationeditormodechanged",{source:this,mode:e}),i(this,B).updateMode(e,l))}}set annotationEditorParams({type:e,value:l}){if(!i(this,B))throw new Error("The AnnotationEditor is not enabled.");i(this,B).updateParams(e,l)}refresh(e=!1,l=Object.create(null)){if(!!this.pdfDocument){for(const N of this._pages)N.update(l);i(this,Q)!==null&&(clearTimeout(i(this,Q)),V(this,Q,null)),e||this.update()}}}v=new WeakMap,H=new WeakMap,x=new WeakMap,B=new WeakMap,W=new WeakMap,ne=new WeakMap,w=new WeakMap,z=new WeakMap,R=new WeakMap,P=new WeakMap,M=new WeakMap,j=new WeakMap,u=new WeakMap,Z=new WeakMap,q=new WeakMap,Q=new WeakMap,ae=new WeakMap,be=new WeakSet,qt=function(){const e=this;return{get annotationEditorUIManager(){return i(e,B)},get annotationStorage(){var l;return(l=e.pdfDocument)==null?void 0:l.annotationStorage},get downloadManager(){return e.downloadManager},get enableScripting(){return!!e._scriptingManager},get fieldObjectsPromise(){var l;return(l=e.pdfDocument)==null?void 0:l.getFieldObjects()},get findController(){return e.findController},get hasJSActionsPromise(){var l;return(l=e.pdfDocument)==null?void 0:l.hasJSActions()},get linkService(){return e.linkService}}},we=new WeakSet,ei=function(e){const l={annotationEditorMode:i(this,x),annotationMode:i(this,W),textLayerMode:i(this,ae)};return e&&(!e.includes(s.PermissionFlag.COPY)&&i(this,ae)===n.TextLayerMode.ENABLE&&(l.textLayerMode=n.TextLayerMode.ENABLE_PERMISSIONS),e.includes(s.PermissionFlag.MODIFY_CONTENTS)||(l.annotationEditorMode=s.AnnotationEditorType.DISABLE),!e.includes(s.PermissionFlag.MODIFY_ANNOTATIONS)&&!e.includes(s.PermissionFlag.FILL_INTERACTIVE_FORMS)&&i(this,W)===s.AnnotationMode.ENABLE_FORMS&&(l.annotationMode=s.AnnotationMode.ENABLE)),l},Se=new WeakSet,ti=function(){if(document.visibilityState==="hidden"||!this.container.offsetParent||this._getVisiblePages().views.length===0)return Promise.resolve();const e=new Promise(l=>{V(this,q,()=>{document.visibilityState==="hidden"&&(l(),document.removeEventListener("visibilitychange",i(this,q)),V(this,q,null))}),document.addEventListener("visibilitychange",i(this,q))});return Promise.race([this._onePageRenderedCapability.promise,e])},xe=new WeakSet,ii=function(e,l){const N=document.getSelection(),{focusNode:A,anchorNode:a}=N;if(a&&A&&N.containsNode(i(this,P))){if(i(this,R)||e===n.TextLayerMode.ENABLE_PERMISSIONS){l.preventDefault(),l.stopPropagation();return}V(this,R,!0);const f=this.container.style.cursor;this.container.style.cursor="wait";const _=y=>V(this,M,y.key==="Escape");window.addEventListener("keydown",_),this.getAllText().then(async y=>{y!==null&&await navigator.clipboard.writeText(y)}).catch(y=>{console.warn(`Something goes wrong when extracting the text: ${y.message}`)}).finally(()=>{V(this,R,!1),V(this,M,!1),window.removeEventListener("keydown",_),this.container.style.cursor=f}),l.preventDefault(),l.stopPropagation()}},Me=new WeakSet,et=function(){if(this._scrollMode!==n.ScrollMode.PAGE)throw new Error("#ensurePageViewVisible: Invalid scrollMode value.");const e=this._currentPageNumber,l=i(this,Z),N=this.viewer;if(N.textContent="",l.pages.length=0,this._spreadMode===n.SpreadMode.NONE&&!this.isInPresentationMode){const A=this._pages[e-1];N.append(A.div),l.pages.push(A)}else{const A=new Set,a=this._spreadMode-1;a===-1?A.add(e-1):e%2!==a?(A.add(e-1),A.add(e)):(A.add(e-2),A.add(e-1));const f=document.createElement("div");if(f.className="spread",this.isInPresentationMode){const _=document.createElement("div");_.className="dummyPage",f.append(_)}for(const _ of A){const y=this._pages[_];!y||(f.append(y.div),l.pages.push(y))}N.append(f)}l.scrollDown=e>=l.previousPageNumber,l.previousPageNumber=e},k=new WeakSet,ot=function(e,l=null){const{div:N,id:A}=e;if(this._currentPageNumber!==A&&this._setCurrentPageNumber(A),this._scrollMode===n.ScrollMode.PAGE&&(I(this,Me,et).call(this),this.update()),!l&&!this.isInPresentationMode){const a=N.offsetLeft+N.clientLeft,f=a+N.clientWidth,{scrollLeft:_,clientWidth:y}=this.container;(this._scrollMode===n.ScrollMode.HORIZONTAL||a<_||f>_+y)&&(l={left:0,top:0})}(0,n.scrollIntoView)(N,l),!this._currentScaleValue&&this._location&&(this._location=null)},Y=new WeakSet,ni=function(e){return e===this._currentScale||Math.abs(e-this._currentScale)<1e-15},te=new WeakSet,It=function(e,l,{noScroll:N=!1,preset:A=!1,drawingDelay:a=-1}){if(this._currentScaleValue=l.toString(),I(this,Y,ni).call(this,e)){A&&this.eventBus.dispatch("scalechanging",{source:this,scale:e,presetValue:l});return}this.viewer.style.setProperty("--scale-factor",e*s.PixelsPerInch.PDF_TO_CSS_UNITS);const f=a>=0&&a<1e3;if(this.refresh(!0,{scale:e,drawingDelay:f?a:-1}),f&&V(this,Q,setTimeout(()=>{V(this,Q,null),this.refresh()},a)),this._currentScale=e,!N){let _=this._currentPageNumber,y;this._location&&!(this.isInPresentationMode||this.isChangingPresentationMode)&&(_=this._location.pageNumber,y=[null,{name:"XYZ"},this._location.left,this._location.top,null]),this.scrollPageIntoView({pageNumber:_,destArray:y,allowNegativeOffset:!0})}this.eventBus.dispatch("scalechanging",{source:this,scale:e,presetValue:A?l:void 0}),this.defaultRenderingQueue&&this.update()},m=new WeakSet,ri=function(){return this._spreadMode!==n.SpreadMode.NONE&&this._scrollMode!==n.ScrollMode.HORIZONTAL?2:1},$=new WeakSet,je=function(e,l){let N=parseFloat(e);if(N>0)l.preset=!1,I(this,te,It).call(this,N,e,l);else{const A=this._pages[this._currentPageNumber-1];if(!A)return;let a=n.SCROLLBAR_PADDING,f=n.VERTICAL_PADDING;this.isInPresentationMode?(a=f=4,this._spreadMode!==n.SpreadMode.NONE&&(a*=2)):this.removePageBorders?a=f=0:this._scrollMode===n.ScrollMode.HORIZONTAL&&([a,f]=[f,a]);const _=(this.container.clientWidth-a)/A.width*A.scale/i(this,m,ri),y=(this.container.clientHeight-f)/A.height*A.scale;switch(e){case"page-actual":N=1;break;case"page-width":N=_;break;case"page-height":N=y;break;case"page-fit":N=Math.min(_,y);break;case"auto":const X=(0,n.isPortraitOrientation)(A)?_:Math.min(y,_);N=Math.min(n.MAX_AUTO_SCALE,X);break;default:console.error(`#setScale: "${e}" is an unknown zoom value.`);return}l.preset=!0,I(this,te,It).call(this,N,e,l)}},ee=new WeakSet,Ct=function(){const e=this._pages[this._currentPageNumber-1];this.isInPresentationMode&&I(this,$,je).call(this,this._currentScaleValue,{noScroll:!0}),I(this,k,ot).call(this,e)},ue=new WeakSet,si=async function(e){var l,N;if(e.pdfPage)return e.pdfPage;try{const A=await this.pdfDocument.getPage(e.id);return e.pdfPage||e.setPdfPage(A),(N=(l=this.linkService)._cachedPageNumber)!=null&&N.call(l,A.ref)||this.linkService.cachePageRef(e.id,A.ref),A}catch(A){return console.error("Unable to get page for page view",A),null}},ce=new WeakSet,ai=function(e){var l,N;if(((l=e.first)==null?void 0:l.id)===1)return!0;if(((N=e.last)==null?void 0:N.id)===this.pagesCount)return!1;switch(this._scrollMode){case n.ScrollMode.PAGE:return i(this,Z).scrollDown;case n.ScrollMode.HORIZONTAL:return this.scroll.right}return this.scroll.down},pe=new WeakSet,xt=function(e=this.container.clientHeight){e!==i(this,j)&&(V(this,j,e),n.docStyle.setProperty("--viewer-container-height",`${e}px`))},Ae=new WeakSet,oi=function(e){for(const l of e)if(l.target===this.container){I(this,pe,xt).call(this,Math.floor(l.borderBoxSize[0].blockSize)),V(this,ne,null);break}},r.PDFViewer=c},(J,r,b)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.PDFRenderingQueue=void 0;var s=b(4),n=b(2);const F=3e4;class E{constructor(){this.pdfViewer=null,this.pdfThumbnailViewer=null,this.onIdle=null,this.highestPriorityPage=null,this.idleTimeout=null,this.printing=!1,this.isThumbnailViewEnabled=!1,Object.defineProperty(this,"hasViewer",{value:()=>!!this.pdfViewer})}setViewer(h){this.pdfViewer=h}setThumbnailViewer(h){this.pdfThumbnailViewer=h}isHighestPriority(h){return this.highestPriorityPage===h.renderingId}renderHighestPriority(h){var p;this.idleTimeout&&(clearTimeout(this.idleTimeout),this.idleTimeout=null),!this.pdfViewer.forceRendering(h)&&(this.isThumbnailViewEnabled&&((p=this.pdfThumbnailViewer)==null?void 0:p.forceRendering())||this.printing||this.onIdle&&(this.idleTimeout=setTimeout(this.onIdle.bind(this),F)))}getHighestPriority(h,p,L,D=!1){const C=h.views,c=C.length;if(c===0)return null;for(let v=0;v<c;v++){const H=C[v].view;if(!this.isViewFinished(H))return H}const T=h.first.id,o=h.last.id;if(o-T+1>c){const v=h.ids;for(let H=1,x=o-T;H<x;H++){const B=L?T+H:o-H;if(v.has(B))continue;const W=p[B-1];if(!this.isViewFinished(W))return W}}let t=L?o:T-2,g=p[t];return g&&!this.isViewFinished(g)||D&&(t+=L?1:-1,g=p[t],g&&!this.isViewFinished(g))?g:null}isViewFinished(h){return h.renderingState===n.RenderingStates.FINISHED}renderView(h){switch(h.renderingState){case n.RenderingStates.FINISHED:return!1;case n.RenderingStates.PAUSED:this.highestPriorityPage=h.renderingId,h.resume();break;case n.RenderingStates.RUNNING:this.highestPriorityPage=h.renderingId;break;case n.RenderingStates.INITIAL:this.highestPriorityPage=h.renderingId,h.draw().finally(()=>{this.renderHighestPriority()}).catch(p=>{p instanceof s.RenderingCancelledException||console.error(`renderView: "${p}"`)});break}return!0}}r.PDFRenderingQueue=E}],Oe={};function Pe(J){var r=Oe[J];if(r!==void 0)return r.exports;var b=Oe[J]={exports:{}};return ve[J](b,b.exports,Pe),b.exports}var Rt={};return(()=>{var J=Rt;Object.defineProperty(J,"__esModule",{value:!0}),Object.defineProperty(J,"AnnotationLayerBuilder",{enumerable:!0,get:function(){return n.AnnotationLayerBuilder}}),Object.defineProperty(J,"DownloadManager",{enumerable:!0,get:function(){return F.DownloadManager}}),Object.defineProperty(J,"EventBus",{enumerable:!0,get:function(){return E.EventBus}}),Object.defineProperty(J,"FindState",{enumerable:!0,get:function(){return r.FindState}}),Object.defineProperty(J,"GenericL10n",{enumerable:!0,get:function(){return d.GenericL10n}}),Object.defineProperty(J,"LinkTarget",{enumerable:!0,get:function(){return b.LinkTarget}}),Object.defineProperty(J,"NullL10n",{enumerable:!0,get:function(){return h.NullL10n}}),Object.defineProperty(J,"PDFFindController",{enumerable:!0,get:function(){return r.PDFFindController}}),Object.defineProperty(J,"PDFHistory",{enumerable:!0,get:function(){return p.PDFHistory}}),Object.defineProperty(J,"PDFLinkService",{enumerable:!0,get:function(){return b.PDFLinkService}}),Object.defineProperty(J,"PDFPageView",{enumerable:!0,get:function(){return L.PDFPageView}}),Object.defineProperty(J,"PDFScriptingManager",{enumerable:!0,get:function(){return D.PDFScriptingManager}}),Object.defineProperty(J,"PDFSinglePageViewer",{enumerable:!0,get:function(){return C.PDFSinglePageViewer}}),Object.defineProperty(J,"PDFViewer",{enumerable:!0,get:function(){return c.PDFViewer}}),Object.defineProperty(J,"ProgressBar",{enumerable:!0,get:function(){return s.ProgressBar}}),Object.defineProperty(J,"RenderingStates",{enumerable:!0,get:function(){return s.RenderingStates}}),Object.defineProperty(J,"ScrollMode",{enumerable:!0,get:function(){return s.ScrollMode}}),Object.defineProperty(J,"SimpleLinkService",{enumerable:!0,get:function(){return b.SimpleLinkService}}),Object.defineProperty(J,"SpreadMode",{enumerable:!0,get:function(){return s.SpreadMode}}),Object.defineProperty(J,"StructTreeLayerBuilder",{enumerable:!0,get:function(){return T.StructTreeLayerBuilder}}),Object.defineProperty(J,"TextLayerBuilder",{enumerable:!0,get:function(){return o.TextLayerBuilder}}),Object.defineProperty(J,"XfaLayerBuilder",{enumerable:!0,get:function(){return t.XfaLayerBuilder}}),Object.defineProperty(J,"parseQueryString",{enumerable:!0,get:function(){return s.parseQueryString}});var r=Pe(1),b=Pe(5),s=Pe(2),n=Pe(6),F=Pe(8),E=Pe(9),d=Pe(10),h=Pe(7),p=Pe(12),L=Pe(13),D=Pe(21),C=Pe(24),c=Pe(25),T=Pe(16),o=Pe(19),t=Pe(20)})(),Rt})())})(Nt);var ui=li(Nt.exports),fi=hi({__proto__:null,default:ui},[Nt.exports]);export{fi as p};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
