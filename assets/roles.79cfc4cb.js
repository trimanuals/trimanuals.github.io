import{e as B}from"./index.6def9867.js";var Y={exports:{}},se={},U={},K={},W={},fe=B&&B.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var n in r)r.hasOwnProperty(n)&&(e[n]=r[n])};return function(e,r){t(e,r);function n(){this.constructor=e}e.prototype=r===null?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(W,"__esModule",{value:!0});var de=function(t){fe(e,t);function e(r){r===void 0&&(r="");var n=t.call(this,r)||this;return n.message=r,n.name="AccessControlError",Object.setPrototypeOf(n,e.prototype),n}return e}(Error);W.AccessControlError=de;var H={},I={},X={};Object.defineProperty(X,"__esModule",{value:!0});var ye={CREATE:"create",READ:"read",UPDATE:"update",DELETE:"delete"};X.Action=ye;var Z={};Object.defineProperty(Z,"__esModule",{value:!0});var pe={OWN:"own",ANY:"any"};Z.Possession=pe;Object.defineProperty(I,"__esModule",{value:!0});var J=X;I.Action=J.Action;var Q=Z;I.Possession=Q.Possession;var he=Object.keys(J.Action).map(function(t){return J.Action[t]});I.actions=he;var Ae=Object.keys(Q.Possession).map(function(t){return Q.Possession[t]});I.possessions=Ae;var $={},ae={exports:{}};(function(t,e){(function(r,n){t.exports=n()})(typeof self!="undefined"?self:B,function(){return function(r){function n(f){if(a[f])return a[f].exports;var A=a[f]={i:f,l:!1,exports:{}};return r[f].call(A.exports,A,A.exports,n),A.l=!0,A.exports}var a={};return n.m=r,n.c=a,n.d=function(f,A,y){n.o(f,A)||Object.defineProperty(f,A,{configurable:!1,enumerable:!0,get:y})},n.n=function(f){var A=f&&f.__esModule?function(){return f.default}:function(){return f};return n.d(A,"a",A),A},n.o=function(f,A){return Object.prototype.hasOwnProperty.call(f,A)},n.p="lib/",n(n.s=2)}([function(r,n,a){Object.defineProperty(n,"__esModule",{value:!0});var f=Object.prototype.toString,A={isObject:function(y){return f.call(y)==="[object Object]"},isArray:function(y){return f.call(y)==="[object Array]"},ensureArray:function(y){return A.isArray(y)?y:y==null?[]:[y]},hasOwn:function(y,O){return y&&typeof y.hasOwnProperty=="function"&&y.hasOwnProperty(O)},deepCopy:function(y){if(!A.isObject(y))return y;var O=void 0,h=void 0,w={};for(O in y)A.hasOwn(y,O)&&(h=y[O],w[O]=A.isObject(h)?A.deepCopy(h):h);return w},each:function(y,O,h){for(var w=y.length,T=-1;++T<w&&O.call(h,y[T],T,y)!==!1;);},eachRight:function(y,O){for(var h=y.length;h--&&O(y[h],h,y)!==!1;);},pregQuote:function(y,O){return String(y).replace(new RegExp("[.\\\\+*?\\[\\^\\]$(){}=!<>|:\\"+(O||"")+"-]","g"),"\\$&")},stringOrArrayOf:function(y,O){return typeof y=="string"&&y===O||A.isArray(y)&&y.length===1&&y[0]===O},hasSingleItemOf:function(y,O){return y.length===1&&(arguments.length!==2||y[0]===O)}};n.default=A},function(r,n,a){function f(h,w){if(!(h instanceof w))throw new TypeError("Cannot call a class as a function")}function A(h,w){if(!h)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!w||typeof w!="object"&&typeof w!="function"?h:w}function y(h,w){if(typeof w!="function"&&w!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof w);h.prototype=Object.create(w&&w.prototype,{constructor:{value:h,enumerable:!1,writable:!0,configurable:!0}}),w&&(Object.setPrototypeOf?Object.setPrototypeOf(h,w):h.__proto__=w)}Object.defineProperty(n,"__esModule",{value:!0});var O=function(h){function w(){var T=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"";f(this,w);var N=A(this,(w.__proto__||Object.getPrototypeOf(w)).call(this,T));return N.name=N.constructor.name,Object.defineProperty(N,"name",{enumerable:!1,writable:!1,value:"NotationError"}),Object.defineProperty(N,"message",{enumerable:!1,writable:!0,value:T}),Error.hasOwnProperty("captureStackTrace")?Error.captureStackTrace(N,N.constructor):Object.defineProperty(N,"stack",{enumerable:!1,writable:!1,value:new Error(T).stack}),N}return y(w,h),w}(Error);n.default=O},function(r,n,a){var f=a(3),A=function(y){return y&&y.__esModule?y:{default:y}}(f);r.exports=A.default},function(r,n,a){function f(l){return l&&l.__esModule?l:{default:l}}function A(l,i){if(!(l instanceof i))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var y=function(){function l(i,o){for(var u=0;u<o.length;u++){var p=o[u];p.enumerable=p.enumerable||!1,p.configurable=!0,"value"in p&&(p.writable=!0),Object.defineProperty(i,p.key,p)}}return function(i,o,u){return o&&l(i.prototype,o),u&&l(i,u),i}}(),O=a(0),h=f(O),w=a(4),T=f(w),N=a(1),v=f(N),s={SOURCE:"Invalid source object.",DEST:"Invalid destination object.",NOTATION:"Invalid notation: ",NOTA_OBJ:"Invalid notations object: "},b=function(){function l(){var i=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};if(A(this,l),!h.default.isObject(i))throw new v.default(s.SOURCE);this._source=i}return y(l,[{key:"each",value:function(i){var o=this,u=this._source,p=Object.keys(u);h.default.each(p,function(d,m,_){var E=u[d],k=void 0;h.default.isObject(E)?(k=new l(E),k.each(function(R,G,D,L){var te=d+"."+R;i.call(k,te,G,D,u)})):i.call(o,d,d,E,u)})}},{key:"eachKey",value:function(i){return this.each(i)}},{key:"eachValue",value:function(i,o){if(!l.isValid(i))throw new v.default(s.NOTATION+"`"+i+"`");var u=this._source;l.eachNote(i,function(p,d,m,_){if(u=h.default.hasOwn(u,d)?u[d]:void 0,o(u,p,d,m,_)===!1)return!1})}},{key:"getNotations",value:function(){var i=[];return this.each(function(o,u,p,d){i.push(o)}),i}},{key:"flatten",value:function(){var i={};return this.each(function(o,u,p,d){i[o]=p}),this._source=i,this}},{key:"expand",value:function(){return this._source=l.create({}).merge(this._source).value,this}},{key:"aggregate",value:function(){return this.expand()}},{key:"inspect",value:function(i){if(!l.isValid(i))throw new v.default(s.NOTATION+"`"+i+"`");var o=this._source,u={has:!1,value:void 0};return l.eachNote(i,function(p,d,m,_){if(!h.default.hasOwn(o,d))return u={has:!1,value:void 0},!1;o=o[d],u={has:!0,value:o}}),u}},{key:"inspectRemove",value:function(i){if(!l.isValid(i))throw new v.default(s.NOTATION+"`"+i+"`");var o=void 0,u=void 0;if(i.indexOf(".")<0)u=i,o=this._source;else{var p=l.parent(i);u=l.last(i),o=this.inspect(p).value}var d=void 0;return h.default.hasOwn(o,u)?(d={has:!0,value:o[u]},delete o[u]):d={has:!1,value:void 0},d}},{key:"has",value:function(i){return this.inspect(i).has}},{key:"hasDefined",value:function(i){return this.inspect(i).value!==void 0}},{key:"get",value:function(i,o){var u=this.inspect(i);return u.has?u.value:o}},{key:"set",value:function(i,o){var u=!(arguments.length>2&&arguments[2]!==void 0)||arguments[2];if(!l.isValid(i))throw new v.default(s.NOTATION+"`"+i+"`");var p=this._source,d=void 0;return l.eachNote(i,function(m,_,E,k){d=E===k.length-1,h.default.hasOwn(p,_)?d?u&&(p[_]=o):p=p[_]:p=p[_]=d?o:{}}),this}},{key:"merge",value:function(i){var o=this,u=!(arguments.length>1&&arguments[1]!==void 0)||arguments[1];if(!h.default.isObject(i))throw new v.default(s.NOTA_OBJ+"`"+i+"`");var p=void 0;return h.default.each(Object.keys(i),function(d,m,_){p=i[d],o.set(d,p,u)}),this}},{key:"separate",value:function(i){var o=this;if(!h.default.isArray(i))throw new v.default(s.NOTA_OBJ+"`"+i+"`");var u=new l({});return h.default.each(i,function(p,d,m){var _=o.inspectRemove(p);u.set(p,_.value)}),this._source=u._source,this}},{key:"filter",value:function(i){var o=this,u=this.value,p=h.default.deepCopy(u),d=T.default.normalize(i).concat();if(h.default.stringOrArrayOf(d,"*"))return this._source=p,this;if(arguments.length===0||h.default.stringOrArrayOf(d,"")||h.default.stringOrArrayOf(d,"!*"))return this._source={},this;var m=void 0;d[0]==="*"?(m=new l(p),d.shift()):m=new l({});var _=void 0,E=void 0,k=void 0;return h.default.each(d,function(R,G,D){if(_=new T.default(R),E=_.absGlob.slice(-2)===".*",k=E?_.absGlob.slice(0,-2):_.absGlob,k.indexOf("*")<0)return _.isNegated?(m.remove(k),E&&m.set(k,{},!0)):m.copyFrom(u,k,null,!0),!0;o.each(function(L,te,le,Ce){l.eachNote(L,function(V,ke,Pe,Re){if(_.test(V)){if(_.isNegated)return m.remove(V),!1;m.set(V,le,!0)}})})}),this._source=m.value,this}},{key:"remove",value:function(i){return this.inspectRemove(i),this}},{key:"delete",value:function(i){return this.remove(i),this}},{key:"clone",value:function(){return new l(h.default.deepCopy(this.value))}},{key:"copyTo",value:function(i,o){var u=arguments.length>2&&arguments[2]!==void 0?arguments[2]:null,p=!(arguments.length>3&&arguments[3]!==void 0)||arguments[3];if(!h.default.isObject(i))throw new v.default(s.DEST);var d=this.inspect(o);return d.has&&new l(i).set(u||o,d.value,p),this}},{key:"copyFrom",value:function(i,o){var u=arguments.length>2&&arguments[2]!==void 0?arguments[2]:null,p=!(arguments.length>3&&arguments[3]!==void 0)||arguments[3];if(!h.default.isObject(i))throw new v.default(s.DEST);var d=new l(i).inspect(o);return d.has&&this.set(u||o,d.value,p),this}},{key:"moveTo",value:function(i,o){var u=arguments.length>2&&arguments[2]!==void 0?arguments[2]:null,p=!(arguments.length>3&&arguments[3]!==void 0)||arguments[3];if(!h.default.isObject(i))throw new v.default(s.DEST);var d=this.inspectRemove(o);return d.has&&new l(i).set(u||o,d.value,p),this}},{key:"moveFrom",value:function(i,o){var u=arguments.length>2&&arguments[2]!==void 0?arguments[2]:null,p=!(arguments.length>3&&arguments[3]!==void 0)||arguments[3];if(!h.default.isObject(i))throw new v.default(s.DEST);var d=new l(i).inspectRemove(o);return d.has&&this.set(u||o,d.value,p),this}},{key:"rename",value:function(i,o,u){return o?this.moveTo(this._source,i,o,u):this}},{key:"renote",value:function(i,o,u){return this.rename(i,o,u)}},{key:"extract",value:function(i,o){var u={};return this.copyTo(u,i,o),u}},{key:"copyToNew",value:function(i,o){return this.extract(i,o)}},{key:"extrude",value:function(i,o){var u={};return this.moveTo(u,i,o),u}},{key:"moveToNew",value:function(i,o){return this.extrude(i,o)}},{key:"value",get:function(){return this._source}}],[{key:"create",value:function(){return new l(arguments.length>0&&arguments[0]!==void 0?arguments[0]:{})}},{key:"isValid",value:function(i){return typeof i=="string"&&/^[^\s.!]+(\.[^\s.!]+)*$/.test(i)}},{key:"countNotes",value:function(i){if(!l.isValid(i))throw new v.default(s.NOTATION+"`"+i+"`");return i.split(".").length}},{key:"countLevels",value:function(i){return l.countNotes(i)}},{key:"first",value:function(i){if(!l.isValid(i))throw new v.default(s.NOTATION+"`"+i+"`");return i.split(".")[0]}},{key:"last",value:function(i){if(!l.isValid(i))throw new v.default(s.NOTATION+"`"+i+"`");return i.split(".").reverse()[0]}},{key:"parent",value:function(i){if(!l.isValid(i))throw new v.default(s.NOTATION+"`"+i+"`");return i.indexOf(".")>=0?i.replace(/\.[^.]*$/,""):null}},{key:"eachNote",value:function(i,o){if(!l.isValid(i))throw new v.default(s.NOTATION+"`"+i+"`");var u=i.split("."),p=[],d=void 0;h.default.each(u,function(m,_,E){if(p.push(m),d=p.join("."),o(d,m,_,u)===!1)return!1},l)}},{key:"eachLevel",value:function(i,o){l.eachNote(i,o)}}]),l}();b.Error=v.default,b.Glob=T.default,n.default=b},function(r,n,a){function f(v){return v&&v.__esModule?v:{default:v}}function A(v,s){if(!(v instanceof s))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var y=function(){function v(s,b){for(var l=0;l<b.length;l++){var i=b[l];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(s,i.key,i)}}return function(s,b,l){return b&&v(s.prototype,b),l&&v(s,l),s}}(),O=a(0),h=f(O),w=a(1),T=f(w),N=function(){function v(s){if(A(this,v),!v.isValid(s))throw new T.default('Invalid notation glob: "'+s+'"');var b=v.inspect(s);this._={glob:s,absGlob:b.absGlob,isNegated:b.isNegated,regexp:v.toRegExp(b.absGlob),levels:b.absGlob.split(".")}}return y(v,[{key:"test",value:function(s){return this.absGlob==="*"||this.absGlob!==""&&s!==""&&this.regexp.test(s)}},{key:"glob",get:function(){return this._.glob}},{key:"absGlob",get:function(){return this._.absGlob}},{key:"isNegated",get:function(){return this._.isNegated}},{key:"regexp",get:function(){return this._.regexp}},{key:"notes",get:function(){return this._.levels}},{key:"levels",get:function(){return this._.levels}}],[{key:"create",value:function(s){return new v(s)}},{key:"toRegExp",value:function(s){return s.indexOf("!")===0&&(s=s.slice(1)),s=h.default.pregQuote(s).replace(/\\\*/g,"[^\\s\\.]*").replace(/\\\?/g,"."),new RegExp("^"+s+"(\\..+|$)")}},{key:"inspect",value:function(s){var b=s.slice(0,1)==="!";return s=b?s.slice(1):s,{absGlob:s,isNegated:b}}},{key:"isValid",value:function(s){return typeof s=="string"&&/^(!?([^\s.!*]+|\*)(\.([^\s.!*]+|\*))*)$/.test(s)}},{key:"compare",value:function(s,b){if(s===b)return 0;var l=s.split("."),i=b.split(".");if(l.length===i.length){var o=/(?:^|\.)\*(?:$|\.)/g,u=s.match(o),p=b.match(o),d=u?u.length:0,m=p?p.length:0;if(d===m){var _=s.indexOf("!")===0,E=b.indexOf("!")===0;if(_===E)return s<b?-1:1;var k=_?s.slice(1):s,R=E?b.slice(1):b;return k===R?_?1:-1:k<R?-1:1}return d>m?-1:1}return l.length<i.length?-1:1}},{key:"sort",value:function(s){return s.sort(v.compare)}},{key:"normalize",value:function(s){s=h.default.ensureArray(s).map(function(l){return l.trim()}),s=v.sort(s),h.default.eachRight(s,function(l,i){var o=v.inspect(l),u=!1,p=!1,d=!1,m=!0,_=!1,E=!0;h.default.eachRight(s,function(R,G){if(G!==i){var D=v.inspect(R),L=v.toRegExp(D.absGlob);if(l===R)return u=!0,!1;if(D.isNegated&&l===D.absGlob)return p=!0,!1;if(o.isNegated){if(D.isNegated&&L.test(o.absGlob))return d=!0,!1;m&&L.test(o.absGlob)&&(m=!1)}else!D.isNegated&&L.test(o.absGlob)?_=!0:E&&L.test(o.absGlob)&&(E=!1)}});var k=o.isNegated?d||m:_&&E;(u||p||k)&&s.splice(i,1)});var b=s.indexOf("!*");return b>=0&&s.splice(b,1),s}},{key:"union",value:function(s,b){if(h.default.hasSingleItemOf(s,"*")||h.default.hasSingleItemOf(b,"*"))return["*"];var l=s.concat(),i=b.concat(),o=void 0,u=void 0,p=void 0,d=void 0,m=[];h.default.eachRight(l,function(E,k){p=v.inspect(E),o=v.toRegExp(p.absGlob),h.default.eachRight(i,function(R,G){if(d=v.inspect(R),u=v.toRegExp(d.absGlob),p.isNegated&&!d.isNegated&&(p.absGlob===d.absGlob||u.test(p.absGlob)&&i.indexOf(E)===-1&&m.indexOf(E)===-1))return l.splice(k,1),!1;if(!p.isNegated&&d.isNegated&&(p.absGlob===d.absGlob||o.test(d.absGlob)&&l.indexOf(R)===-1&&m.indexOf(R)===-1))return void i.splice(G,1);if(p.isNegated&&d.isNegated&&E!==R){if(u.test(p.absGlob))return i.splice(G,1),void m.push(E);if(o.test(d.absGlob))return l.splice(k,1),m.push(R),!1}if(!p.isNegated&&!d.isNegated&&E===R)return l.splice(k,1),!1})});var _=l.concat(i);return v.normalize(_)}}]),v}();n.default=N}])})})(ae);Object.defineProperty($,"__esModule",{value:!0});var re=ae.exports,M=I,g=K,ue=["*","!","$","$extend"];$.RESERVED_KEYWORDS=ue;var ve="Cannot alter the underlying grants model. AccessControl instance is locked.";$.ERR_LOCK=ve;var c={type:function(t){return Object.prototype.toString.call(t).match(/\s(\w+)/i)[1].toLowerCase()},hasDefined:function(t,e){return t.hasOwnProperty(e)&&t[e]!==void 0},toStringArray:function(t){return Array.isArray(t)?t:typeof t=="string"?t.trim().split(/\s*[;,]\s*/):[]},isFilledStringArray:function(t){if(!t||!Array.isArray(t))return!1;for(var e=0,r=t;e<r.length;e++){var n=r[e];if(typeof n!="string"||n.trim()==="")return!1}return!0},isEmptyArray:function(t){return Array.isArray(t)&&t.length===0},pushUniq:function(t,e){return t.indexOf(e)<0&&t.push(e),t},uniqConcat:function(t,e){var r=t.concat();return e.forEach(function(n){c.pushUniq(r,n)}),r},subtractArray:function(t,e){return t.concat().filter(function(r){return e.indexOf(r)===-1})},deepFreeze:function(t){if(c.type(t)==="object"){var e=Object.getOwnPropertyNames(t);return e.forEach(function(r){var n=t[r];Array.isArray(n)&&Object.freeze(n),c.type(n)==="object"&&c.deepFreeze(n)}),Object.freeze(t)}},each:function(t,e,r){r===void 0&&(r=null);for(var n=t.length,a=-1;++a<n&&e.call(r,t[a],a,t)!==!1;);},eachKey:function(t,e,r){r===void 0&&(r=null),c.each(Object.keys(t),e,r)},eachRole:function(t,e){c.eachKey(t,function(r){return e(t[r],r)})},eachRoleResource:function(t,e){var r,n;c.eachKey(t,function(a){r=t[a],c.eachKey(r,function(f){n=a[f],e(a,f,n)})})},isInfoFulfilled:function(t){return c.hasDefined(t,"role")&&c.hasDefined(t,"action")&&c.hasDefined(t,"resource")},validName:function(t,e){if(e===void 0&&(e=!0),typeof t!="string"||t.trim()===""){if(!e)return!1;throw new g.AccessControlError("Invalid name, expected a valid string.")}if(ue.indexOf(t)>=0){if(!e)return!1;throw new g.AccessControlError('Cannot use reserved name: "'+t+'"')}return!0},hasValidNames:function(t,e){e===void 0&&(e=!0);var r=!0;return c.each(c.toStringArray(t),function(n){return c.validName(n,e)?!0:(r=!1,!1)}),r},validResourceObject:function(t){if(c.type(t)!=="object")throw new g.AccessControlError("Invalid resource definition.");return c.eachKey(t,function(e){var r=e.split(":");if(M.actions.indexOf(r[0])===-1)throw new g.AccessControlError('Invalid action: "'+e+'"');if(r[1]&&M.possessions.indexOf(r[1])===-1)throw new g.AccessControlError('Invalid action possession: "'+e+'"');var n=t[e];if(!c.isEmptyArray(n)&&!c.isFilledStringArray(n))throw new g.AccessControlError('Invalid resource attributes for action "'+e+'".')}),!0},validRoleObject:function(t,e){var r=t[e];if(!r||c.type(r)!=="object")throw new g.AccessControlError("Invalid role definition.");return c.eachKey(r,function(n){if(c.validName(n,!1))c.validResourceObject(r[n]);else if(n==="$extend"){var a=r[n];if(c.isFilledStringArray(a))c.extendRole(t,e,a);else throw new g.AccessControlError('Invalid extend value for role "'+e+'": '+JSON.stringify(a))}else throw new g.AccessControlError('Cannot use reserved name "'+n+'" for a resource.')}),!0},getInspectedGrants:function(t){var e={},r="Invalid grants object.",n=c.type(t);if(n==="object")c.eachKey(t,function(a){return c.validName(a)?c.validRoleObject(t,a):!1}),e=t;else if(n==="array")t.forEach(function(a){return c.commitToGrants(e,a,!0)});else throw new g.AccessControlError(r+" Expected an array or object.");return e},getResources:function(t){var e={};return c.eachRoleResource(t,function(r,n,a){e[n]=null}),Object.keys(e)},normalizeActionPossession:function(t,e){if(e===void 0&&(e=!1),typeof t.action!="string")throw new g.AccessControlError("Invalid action: "+JSON.stringify(t));var r=t.action.split(":");if(M.actions.indexOf(r[0].trim().toLowerCase())<0)throw new g.AccessControlError("Invalid action: "+r[0]);t.action=r[0].trim().toLowerCase();var n=t.possession||r[1];if(n){if(M.possessions.indexOf(n.trim().toLowerCase())<0)throw new g.AccessControlError("Invalid action possession: "+n);t.possession=n.trim().toLowerCase()}else t.possession=M.Possession.ANY;return e?t.action+":"+t.possession:t},normalizeQueryInfo:function(t){if(c.type(t)!=="object")throw new g.AccessControlError("Invalid IQueryInfo: "+typeof t);if(t=Object.assign({},t),t.role=c.toStringArray(t.role),!c.isFilledStringArray(t.role))throw new g.AccessControlError("Invalid role(s): "+JSON.stringify(t.role));if(typeof t.resource!="string"||t.resource.trim()==="")throw new g.AccessControlError('Invalid resource: "'+t.resource+'"');return t.resource=t.resource.trim(),t=c.normalizeActionPossession(t),t},normalizeAccessInfo:function(t,e){if(e===void 0&&(e=!1),c.type(t)!=="object")throw new g.AccessControlError("Invalid IAccessInfo: "+typeof t);if(t=Object.assign({},t),t.role=c.toStringArray(t.role),t.role.length===0||!c.isFilledStringArray(t.role))throw new g.AccessControlError("Invalid role(s): "+JSON.stringify(t.role));if(t.resource=c.toStringArray(t.resource),t.resource.length===0||!c.isFilledStringArray(t.resource))throw new g.AccessControlError("Invalid resource(s): "+JSON.stringify(t.resource));return t.denied||Array.isArray(t.attributes)&&t.attributes.length===0?t.attributes=[]:t.attributes=t.attributes?c.toStringArray(t.attributes):["*"],e&&(t=c.normalizeActionPossession(t)),t},resetAttributes:function(t){return t.denied?(t.attributes=[],t):((!t.attributes||c.isEmptyArray(t.attributes))&&(t.attributes=["*"]),t)},getRoleHierarchyOf:function(t,e,r){var n=t[e];if(!n)throw new g.AccessControlError('Role not found: "'+e+'"');var a=[e];return!Array.isArray(n.$extend)||n.$extend.length===0||n.$extend.forEach(function(f){if(!t[f])throw new g.AccessControlError('Role not found: "'+t[f]+'"');if(f===e)throw new g.AccessControlError('Cannot extend role "'+e+'" by itself.');if(r&&r===f)throw new g.AccessControlError('Cross inheritance is not allowed. Role "'+f+'" already extends "'+r+'".');var A=c.getRoleHierarchyOf(t,f,r||e);a=c.uniqConcat(a,A)}),a},getFlatRoles:function(t,e){var r=c.toStringArray(e);if(r.length===0)throw new g.AccessControlError("Invalid role(s): "+JSON.stringify(e));var n=c.uniqConcat([],r);return r.forEach(function(a){n=c.uniqConcat(n,c.getRoleHierarchyOf(t,a))}),n},getNonExistentRoles:function(t,e){var r=[];if(c.isEmptyArray(e))return r;for(var n=0,a=e;n<a.length;n++){var f=a[n];t.hasOwnProperty(f)||r.push(f)}return r},getCrossExtendingRole:function(t,e,r){var n=c.toStringArray(r),a=null;return c.each(n,function(f){if(a||e===f)return!1;var A=c.getRoleHierarchyOf(t,f);return c.each(A,function(y){return y===e?(a=f,!1):!0}),!0}),a},extendRole:function(t,e,r){if(e=c.toStringArray(e),e.length===0)throw new g.AccessControlError("Invalid role(s): "+JSON.stringify(e));if(!c.isEmptyArray(r)){var n=c.toStringArray(r).concat();if(n.length===0)throw new g.AccessControlError("Cannot inherit invalid role(s): "+JSON.stringify(r));var a=c.getNonExistentRoles(t,n);if(a.length>0)throw new g.AccessControlError('Cannot inherit non-existent role(s): "'+a.join(", ")+'"');e.forEach(function(f){if(!t[f])throw new g.AccessControlError('Role not found: "'+f+'"');if(n.indexOf(f)>=0)throw new g.AccessControlError('Cannot extend role "'+f+'" by itself.');var A=c.getCrossExtendingRole(t,f,n);if(A)throw new g.AccessControlError('Cross inheritance is not allowed. Role "'+A+'" already extends "'+f+'".');c.validName(f);var y=t[f];Array.isArray(y.$extend)?y.$extend=c.uniqConcat(y.$extend,n):y.$extend=n})}},preCreateRoles:function(t,e){if(typeof e=="string"&&(e=c.toStringArray(e)),!Array.isArray(e)||e.length===0)throw new g.AccessControlError("Invalid role(s): "+JSON.stringify(e));e.forEach(function(r){c.validName(r)&&!t.hasOwnProperty(r)&&(t[r]={})})},commitToGrants:function(t,e,r){r===void 0&&(r=!1),e=c.normalizeAccessInfo(e,r),e.role.forEach(function(n){c.validName(n)&&!t.hasOwnProperty(n)&&(t[n]={});var a=t[n],f=e.action+":"+e.possession;e.resource.forEach(function(A){c.validName(A)&&!a.hasOwnProperty(A)&&(a[A]={}),a[A][f]=c.toStringArray(e.attributes)})})},getUnionAttrsOfRoles:function(t,e){e=c.normalizeQueryInfo(e);var r,n,a=[],f=c.getFlatRoles(t,e.role);f.forEach(function(h,w){r=t[h],n=r[e.resource],n&&a.push((n[e.action+":"+e.possession]||n[e.action+":any"]||[]).concat())});var A=[],y=a.length;if(y>0){A=a[0];for(var O=1;O<y;)A=re.Glob.union(A,a[O]),O++}return A},lockAC:function(t){var e=t;if(!e._grants||Object.keys(e._grants).length===0)throw new g.AccessControlError("Cannot lock empty or invalid grants model.");var r=t.isLocked&&Object.isFrozen(e._grants);if(r||(r=Boolean(c.deepFreeze(e._grants))),!r)throw new g.AccessControlError("Could not lock grants: "+typeof e._grants);e._isLocked=r},filter:function(t,e){if(!Array.isArray(e)||e.length===0)return{};var r=new re(t);return r.filter(e).value},filterAll:function(t,e){return Array.isArray(t)?t.map(function(r){return c.filter(r,e)}):c.filter(t,e)}};$.utils=c;Object.defineProperty(H,"__esModule",{value:!0});var ne=K,j=I,S=$,ge=function(){function t(e,r,n){if(n===void 0&&(n=!1),this._={},this._ac=e,this._grants=e._grants,this._.denied=n,typeof r=="string"||Array.isArray(r))this.role(r);else if(S.utils.type(r)==="object"){if(Object.keys(r).length===0)throw new ne.AccessControlError("Invalid IAccessInfo: {}");r.denied=n,this._=S.utils.resetAttributes(r),S.utils.isInfoFulfilled(this._)&&S.utils.commitToGrants(this._grants,this._,!0)}else if(r!==void 0)throw new ne.AccessControlError("Invalid role(s), expected a valid string, string[] or IAccessInfo.")}return Object.defineProperty(t.prototype,"denied",{get:function(){return this._.denied},enumerable:!0,configurable:!0}),t.prototype.role=function(e){return S.utils.preCreateRoles(this._grants,e),this._.role=e,this},t.prototype.resource=function(e){return S.utils.hasValidNames(e,!0),this._.resource=e,this},t.prototype.attributes=function(e){return this._.attributes=e,this},t.prototype.extend=function(e){return S.utils.extendRole(this._grants,this._.role,e),this},t.prototype.inherit=function(e){return this.extend(e),this},t.prototype.grant=function(e){return new t(this._ac,e,!1).attributes(["*"])},t.prototype.deny=function(e){return new t(this._ac,e,!0).attributes([])},t.prototype.lock=function(){return S.utils.lockAC(this._ac),this},t.prototype.createOwn=function(e,r){return this._prepareAndCommit(j.Action.CREATE,j.Possession.OWN,e,r)},t.prototype.createAny=function(e,r){return this._prepareAndCommit(j.Action.CREATE,j.Possession.ANY,e,r)},t.prototype.create=function(e,r){return this.createAny(e,r)},t.prototype.readOwn=function(e,r){return this._prepareAndCommit(j.Action.READ,j.Possession.OWN,e,r)},t.prototype.readAny=function(e,r){return this._prepareAndCommit(j.Action.READ,j.Possession.ANY,e,r)},t.prototype.read=function(e,r){return this.readAny(e,r)},t.prototype.updateOwn=function(e,r){return this._prepareAndCommit(j.Action.UPDATE,j.Possession.OWN,e,r)},t.prototype.updateAny=function(e,r){return this._prepareAndCommit(j.Action.UPDATE,j.Possession.ANY,e,r)},t.prototype.update=function(e,r){return this.updateAny(e,r)},t.prototype.deleteOwn=function(e,r){return this._prepareAndCommit(j.Action.DELETE,j.Possession.OWN,e,r)},t.prototype.deleteAny=function(e,r){return this._prepareAndCommit(j.Action.DELETE,j.Possession.ANY,e,r)},t.prototype.delete=function(e,r){return this.deleteAny(e,r)},t.prototype._prepareAndCommit=function(e,r,n,a){return this._.action=e,this._.possession=r,n&&(this._.resource=n),this._.denied?this._.attributes=[]:this._.attributes=a?S.utils.toStringArray(a):["*"],S.utils.commitToGrants(this._grants,this._,!1),this._.attributes=void 0,this},t}();H.Access=ge;var q={};Object.defineProperty(q,"__esModule",{value:!0});var z=K,x=I,we=$,be=function(){function t(e,r){if(this._={},this._grants=e,typeof r=="string"||Array.isArray(r))this.role(r);else if(we.utils.type(r)==="object"){if(Object.keys(r).length===0)throw new z.AccessControlError("Invalid IQueryInfo: {}");this._=r}else if(r!==void 0)throw new z.AccessControlError("Invalid role(s), expected a valid string, string[] or IQueryInfo.")}return t.prototype.role=function(e){return this._.role=e,this},t.prototype.resource=function(e){return this._.resource=e,this},t.prototype.createOwn=function(e){return this._getPermission(x.Action.CREATE,x.Possession.OWN,e)},t.prototype.createAny=function(e){return this._getPermission(x.Action.CREATE,x.Possession.ANY,e)},t.prototype.create=function(e){return this.createAny(e)},t.prototype.readOwn=function(e){return this._getPermission(x.Action.READ,x.Possession.OWN,e)},t.prototype.readAny=function(e){return this._getPermission(x.Action.READ,x.Possession.ANY,e)},t.prototype.read=function(e){return this.readAny(e)},t.prototype.updateOwn=function(e){return this._getPermission(x.Action.UPDATE,x.Possession.OWN,e)},t.prototype.updateAny=function(e){return this._getPermission(x.Action.UPDATE,x.Possession.ANY,e)},t.prototype.update=function(e){return this.updateAny(e)},t.prototype.deleteOwn=function(e){return this._getPermission(x.Action.DELETE,x.Possession.OWN,e)},t.prototype.deleteAny=function(e){return this._getPermission(x.Action.DELETE,x.Possession.ANY,e)},t.prototype.delete=function(e){return this.deleteAny(e)},t.prototype._getPermission=function(e,r,n){return this._.action=e,this._.possession=r,n&&(this._.resource=n),new z.Permission(this._grants,this._)},t}();q.Query=be;var ee={};Object.defineProperty(ee,"__esModule",{value:!0});var ie=$,me=function(){function t(e,r){this._={},this._.attributes=ie.utils.getUnionAttrsOfRoles(e,r),this._.role=r.role,this._.resource=r.resource}return Object.defineProperty(t.prototype,"roles",{get:function(){return this._.role},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"resource",{get:function(){return this._.resource},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"attributes",{get:function(){return this._.attributes},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"granted",{get:function(){return!this.attributes||this.attributes.length===0?!1:this.attributes.some(function(e){return e.trim().slice(0,1)!=="!"})},enumerable:!0,configurable:!0}),t.prototype.filter=function(e){return ie.utils.filterAll(e,this.attributes)},t}();ee.Permission=me;(function(t){function e(r){for(var n in r)t.hasOwnProperty(n)||(t[n]=r[n])}Object.defineProperty(t,"__esModule",{value:!0}),e(W),e(H),e(q),e(ee)})(K);Object.defineProperty(U,"__esModule",{value:!0});var P=K,oe=I,C=$;/**
 *  @classdesc
 *  AccessControl class that implements RBAC (Role-Based Access Control) basics
 *  and ABAC (Attribute-Based Access Control) <i>resource</i> and <i>action</i>
 *  attributes.
 *
 *  Construct an `AccessControl` instance by either passing a grants object (or
 *  array fetched from database) or simply omit `grants` parameter if you are
 *  willing to build it programmatically.
 *
 *  <p><pre><code> const grants = {
 *      role1: {
 *          resource1: {
 *              "create:any": [ attrs ],
 *              "read:own": [ attrs ]
 *          },
 *          resource2: {
 *              "create:any": [ attrs ],
 *              "update:own": [ attrs ]
 *          }
 *      },
 *      role2: { ... }
 *  };
 *  const ac = new AccessControl(grants);</code></pre></p>
 *
 *  The `grants` object can also be an array, such as a flat list
 *  fetched from a database.
 *
 *  <p><pre><code> const flatList = [
 *      { role: 'role1', resource: 'resource1', action: 'create:any', attributes: [ attrs ] },
 *      { role: 'role1', resource: 'resource1', action: 'read:own', attributes: [ attrs ] },
 *      { role: 'role2', ... },
 *      ...
 *  ];</code></pre></p>
 *
 *  We turn this list into a hashtable for better performance. We aggregate
 *  the list by roles first, resources second. If possession (in action
 *  value or as a separate property) is omitted, it will default to `"any"`.
 *  e.g. `"create"` ➞ `"create:any"`
 *
 *  Below are equivalent:
 *  <p><pre><code> const grants = { role: 'role1', resource: 'resource1', action: 'create:any', attributes: [ attrs ] }
 *  const same = { role: 'role1', resource: 'resource1', action: 'create', possession: 'any', attributes: [ attrs ] }</code></pre></p>
 *
 *  So we can also initialize with this flat list of grants:
 *  <p><pre><code> const ac = new AccessControl(flatList);
 *  console.log(ac.getGrants());</code></pre></p>
 *
 *  @author   Onur Yıldırım <onur@cutepilot.com>
 *  @license  MIT
 *
 *  @class
 *  @global
 *
 *  @example
 *  const ac = new AccessControl(grants);
 *
 *  ac.grant('admin').createAny('profile');
 *
 *  // or you can chain methods
 *  ac.grant('admin')
 *      .createAny('profile')
 *      .readAny('profile', ["*", "!password"])
 *      .readAny('video')
 *      .deleteAny('video');
 *
 *  // since these permissions have common resources, there is an alternative way:
 *  ac.grant('admin')
 *      .resource('profile').createAny().readAny(null, ["*", "!password"])
 *      .resource('video').readAny()..deleteAny();
 *
 *  ac.grant('user')
 *      .readOwn('profile', ["uid", "email", "address.*", "account.*", "!account.roles"])
 *      .updateOwn('profile', ["uid", "email", "password", "address.*", "!account.roles"])
 *      .deleteOwn('profile')
 *      .createOwn('video', ["*", "!geo.*"])
 *      .readAny('video')
 *      .updateOwn('video', ["*", "!geo.*"])
 *      .deleteOwn('video');
 *
 *  // now we can check for granted or denied permissions
 *  const permission = ac.can('admin').readAny('profile');
 *  permission.granted // true
 *  permission.attributes // ["*", "!password"]
 *  permission.filter(data) // { uid, email, address, account }
 *  // deny permission
 *  ac.deny('admin').createAny('profile');
 *  ac.can('admin').createAny('profile').granted; // false
 *
 *  // To add a grant but deny access via attributes
 *  ac.grant('admin').createAny('profile', []); // no attributes allowed
 *  ac.can('admin').createAny('profile').granted; // false
 *
 *  // To prevent any more changes:
 *  ac.lock();
 */var _e=function(){function t(e){this._isLocked=!1,arguments.length===0&&(e={}),this.setGrants(e)}return Object.defineProperty(t.prototype,"isLocked",{get:function(){return this._isLocked&&Object.isFrozen(this._grants)},enumerable:!0,configurable:!0}),t.prototype.getGrants=function(){return this._grants},t.prototype.setGrants=function(e){if(this.isLocked)throw new P.AccessControlError(C.ERR_LOCK);return this._grants=C.utils.getInspectedGrants(e),this},t.prototype.reset=function(){if(this.isLocked)throw new P.AccessControlError(C.ERR_LOCK);return this._grants={},this},t.prototype.lock=function(){return C.utils.lockAC(this),this},t.prototype.extendRole=function(e,r){if(this.isLocked)throw new P.AccessControlError(C.ERR_LOCK);return C.utils.extendRole(this._grants,e,r),this},t.prototype.removeRoles=function(e){var r=this;if(this.isLocked)throw new P.AccessControlError(C.ERR_LOCK);var n=C.utils.toStringArray(e);if(n.length===0||!C.utils.isFilledStringArray(n))throw new P.AccessControlError("Invalid role(s): "+JSON.stringify(e));return n.forEach(function(a){if(!r._grants[a])throw new P.AccessControlError('Cannot remove a non-existing role: "'+a+'"');delete r._grants[a]}),C.utils.eachRole(this._grants,function(a,f){Array.isArray(a.$extend)&&(a.$extend=C.utils.subtractArray(a.$extend,n))}),this},t.prototype.removeResources=function(e,r){if(this.isLocked)throw new P.AccessControlError(C.ERR_LOCK);return this._removePermission(e,r),this},t.prototype.getRoles=function(){return Object.keys(this._grants)},t.prototype.getInheritedRolesOf=function(e){var r=C.utils.getRoleHierarchyOf(this._grants,e);return r.shift(),r},t.prototype.getExtendedRolesOf=function(e){return this.getInheritedRolesOf(e)},t.prototype.getResources=function(){return C.utils.getResources(this._grants)},t.prototype.hasRole=function(e){var r=this;return Array.isArray(e)?e.every(function(n){return r._grants.hasOwnProperty(n)}):this._grants.hasOwnProperty(e)},t.prototype.hasResource=function(e){var r=this.getResources();return Array.isArray(e)?e.every(function(n){return r.indexOf(n)>=0}):typeof e!="string"||e===""?!1:r.indexOf(e)>=0},t.prototype.can=function(e){if(arguments.length!==0&&e===void 0)throw new P.AccessControlError("Invalid role(s): undefined");return new P.Query(this._grants,e)},t.prototype.query=function(e){return this.can(e)},t.prototype.permission=function(e){return new P.Permission(this._grants,e)},t.prototype.grant=function(e){if(this.isLocked)throw new P.AccessControlError(C.ERR_LOCK);if(arguments.length!==0&&e===void 0)throw new P.AccessControlError("Invalid role(s): undefined");return new P.Access(this,e,!1)},t.prototype.allow=function(e){return this.grant(e)},t.prototype.deny=function(e){if(this.isLocked)throw new P.AccessControlError(C.ERR_LOCK);if(arguments.length!==0&&e===void 0)throw new P.AccessControlError("Invalid role(s): undefined");return new P.Access(this,e,!0)},t.prototype.reject=function(e){return this.deny(e)},t.prototype._removePermission=function(e,r,n){var a=this;if(e=C.utils.toStringArray(e),e.length===0||!C.utils.isFilledStringArray(e))throw new P.AccessControlError("Invalid resource(s): "+JSON.stringify(e));if(r!==void 0&&(r=C.utils.toStringArray(r),r.length===0||!C.utils.isFilledStringArray(r)))throw new P.AccessControlError("Invalid role(s): "+JSON.stringify(r));C.utils.eachRoleResource(this._grants,function(f,A,y){if(e.indexOf(A)>=0&&(!r||r.indexOf(f)>=0))if(n){var O=C.utils.normalizeActionPossession({action:n},!0);delete a._grants[f][A][O]}else delete a._grants[f][A]})},Object.defineProperty(t,"Action",{get:function(){return oe.Action},enumerable:!0,configurable:!0}),Object.defineProperty(t,"Possession",{get:function(){return oe.Possession},enumerable:!0,configurable:!0}),Object.defineProperty(t,"Error",{get:function(){return P.AccessControlError},enumerable:!0,configurable:!0}),t.filter=function(e,r){return C.utils.filterAll(e,r)},t.isACError=function(e){return e instanceof P.AccessControlError},t.isAccessControlError=function(e){return t.isACError(e)},t}();U.AccessControl=_e;(function(t){function e(r){for(var n in r)t.hasOwnProperty(n)||(t[n]=r[n])}Object.defineProperty(t,"__esModule",{value:!0}),e(U),e(K)})(se);var ce=se.AccessControl;Y.exports=ce;Y.exports.AccessControl=ce;var Oe=Y.exports;const F=new Oe,Ee=()=>{const t=F.grant("consumer"),e=F.grant("user_admin"),r=F.grant("document_admin"),n=F.grant("admin");return e.readAny("admin"),r.readAny("admin"),n.readAny("admin"),t.readOwn("profile",["*","!role"]).createOwn("profile",["*","!role"]).updateOwn("profile",["*","!role"]),r.readAny("profile"),e.readAny("profile").updateAny("profile").createAny("profile").deleteAny("profile"),n.readAny("profile").updateAny("profile").createAny("profile").deleteAny("profile"),t.readOwn("user").updateOwn("user"),r.readAny("user"),e.readAny("user").updateAny("user").createAny("user").deleteAny("user"),n.readAny("user").updateAny("user").createAny("user").deleteAny("user"),t.readAny("organisation").updateOwn("organisation"),e.readAny("organisation").updateAny("organisation").createAny("organisation").deleteAny("organisation"),r.readAny("organisation"),n.readAny("organisation").updateAny("organisation").createAny("organisation").deleteAny("organisation"),t.readAny("organisationType"),e.readAny("organisationType"),r.readAny("organisationType"),n.readAny("organisationType").updateAny("organisationType").createAny("organisationType").deleteAny("organisationType"),t.readAny("announcement"),e.readAny("announcement").updateAny("announcement").createAny("announcement").deleteAny("announcement"),r.readAny("announcement").updateAny("announcement").createAny("announcement").deleteAny("announcement"),n.readAny("announcement").updateAny("announcement").createAny("announcement").deleteAny("announcement"),t.readAny("product"),r.readAny("product"),e.readAny("product"),n.readAny("product").updateAny("product").createAny("product").deleteAny("product"),t.readAny("productDetails"),r.readAny("productDetails"),e.readAny("productDetails"),n.readAny("productDetails").updateAny("productDetails").createAny("productDetails").deleteAny("productDetails"),t.readAny("subscriptionType"),r.readAny("subscriptionType"),e.readAny("subscriptionType"),n.readAny("subscriptionType").updateAny("subscriptionType").createAny("subscriptionType").deleteAny("subscriptionType"),t.readAny("subscription"),r.readAny("subscription"),e.readAny("subscription"),n.readAny("subscription").updateAny("subscription").createAny("subscription").deleteAny("subscription"),t.readAny("document"),e.readAny("document"),r.readAny("document").updateAny("document").createAny("document").deleteAny("document"),n.readAny("document").updateAny("document").createAny("document").deleteAny("document"),t.readAny("market"),e.readAny("market"),r.readAny("market"),n.readAny("market").updateAny("market").createAny("market").deleteAny("market"),t.readAny("adminSettings"),e.readAny("adminSettings"),r.readAny("adminSettings"),n.readAny("adminSettings").updateAny("adminSettings").createAny("adminSettings").deleteAny("adminSettings"),t.updateOwn("userAnalytics"),r.readAny("userAnalytics").updateOwn("userAnalytics"),e.readAny("userAnalytics").updateOwn("userAnalytics"),n.readAny("userAnalytics").updateOwn("userAnalytics"),t.createOwn("knowledgeBase").readAny("knowledgeBase").updateOwn("knowledgeBase"),r.readAny("knowledgeBase").updateOwn("knowledgeBase"),e.readAny("knowledgeBase").updateOwn("knowledgeBase"),n.readAny("knowledgeBase").updateAny("knowledgeBase").createAny("knowledgeBase").deleteAny("knowledgeBase"),F},xe=Ee(),Te=F;export{Te as a,xe as r};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
