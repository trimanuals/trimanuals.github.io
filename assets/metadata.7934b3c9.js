import{bO as u,bP as S,r as c,an as O,aV as n,by as J,bC as o,bE as N,bQ as l}from"./index.6def9867.js";const T=async e=>{let s={};const t={_id:e._id,systemTitle:JSON.stringify(e.systemTitle),title:JSON.stringify(e.title),icon:JSON.stringify(e.icon),colour:JSON.stringify(e.colour),active:JSON.stringify(e.active),avatar:JSON.stringify(e.avatar),useImage:JSON.stringify(e.useImage),createdAt:JSON.stringify(e.createdAt),updatedAt:JSON.stringify(e.updatedAt)};return s=await u.upsert(t,{conflictPaths:["_id"]}),s},A=async()=>await(await u.find()).map(t=>({_id:t._id,systemTitle:JSON.parse(t.systemTitle),title:JSON.parse(t.title),icon:JSON.parse(t.icon),colour:JSON.parse(t.colour),active:JSON.parse(t.active),avatar:JSON.parse(t.avatar),useImage:JSON.parse(t.useImage),createdAt:JSON.parse(t.createdAt),updatedAt:JSON.parse(t.updatedAt)})),b=S("metadata",()=>{const e=c([]),s=c(null),{t}=O(),i=async()=>{try{const{data:r}=await n.get("/metadata");e.value=r,J()&&e.value.forEach(async a=>{await T(a)});return}catch(r){const a=await A();if(a)return a;o(r,!0,t("errors.failedToLoadArg",[t("entityTypes.metadata")]))}};return{metadata:e,editMeta:s,getAllMetadataTypes:i,getSingleMetadataType:async r=>{try{const{data:a}=await n.get(`/metadata/${r}`);s.value=a;return}catch(a){o(a,!0,t("errors.failedToLoadArg",[t("entityTypes.metadata")]))}},updateSingleMetadataType:async r=>{const{_id:a,title:p,icon:y,colour:d,useImage:g}=r;try{return await n.patch(`/metadata/${a}`,{title:p,icon:y,colour:d,useImage:g}),N("positive"),await i()}catch(f){o(f,!0,l.global.t("errors.failedToLoadArg",[l.global.t("entityTypes.metadata")]))}}}});export{b as u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
