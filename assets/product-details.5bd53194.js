import{e as Ne,bP as me,r as re,cw as ye,aV as P,bC as L,bE as K}from"./index.6def9867.js";var Ee={},G={},ae={},C={};(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.FLOAT_COMPRESSION_PRECISION=1e3,e.DATE_LOW_PRECISION=1e5,e.FLOAT_FULL_PRECISION_DELIMITER=",",e.FLOAT_REDUCED_PRECISION_DELIMITER=".",e.INTEGER_TOKEN="\xA2",e.FLOAT_TOKEN="\xA3",e.STRING_TOKEN="\xA8",e.DATE_TOKEN="\xF8",e.LP_DATE_TOKEN="\xB1",e.UNREFERENCED_INTEGER_TOKEN="\xA4",e.UNREFERENCED_FLOAT_TOKEN="\xA5",e.UNREFERENCED_STRING_TOKEN="\xB4",e.UNREFERENCED_DATE_TOKEN="\xBF",e.UNREFERENCED_LP_DATE_TOKEN="\xFF",e.REF_INTEGER_TOKEN="\xBA",e.REF_FLOAT_TOKEN="\xDD",e.REF_STRING_TOKEN="\xDF",e.REF_DATE_TOKEN="\xD7",e.REF_LP_DATE_TOKEN="\xFC",e.NULL_TOKEN="\xA7",e.UNDEFINED_TOKEN="\xB5",e.BOOLEAN_TRUE_TOKEN="\xBB",e.BOOLEAN_FALSE_TOKEN="\xAB",e.ESCAPE_CHARACTER="\\",e.ESCAPED_STRING_TOKEN=""+e.ESCAPE_CHARACTER+e.STRING_TOKEN,e.ESCAPED_UNREFERENCED_STRING_TOKEN=""+e.ESCAPE_CHARACTER+e.UNREFERENCED_STRING_TOKEN,e.REGEX_ESCAPE_CHARACTER=new RegExp(e.ESCAPE_CHARACTER.replace("\\","\\\\"),"g"),e.REGEX_ESCAPED_ESCAPE_CHARACTER=new RegExp(e.ESCAPE_CHARACTER.replace("\\","\\\\")+e.ESCAPE_CHARACTER.replace("\\","\\\\"),"g"),e.REGEX_STRING_TOKEN=new RegExp(e.STRING_TOKEN,"g"),e.REGEX_ESCAPED_STRING_TOKEN=new RegExp(e.ESCAPE_CHARACTER+e.ESCAPED_STRING_TOKEN,"g"),e.REGEX_UNREFERENCED_STRING_TOKEN=new RegExp(e.UNREFERENCED_STRING_TOKEN,"g"),e.REGEX_UNREFERENCED_ESCAPED_STRING_TOKEN=new RegExp(e.ESCAPE_CHARACTER+e.ESCAPED_UNREFERENCED_STRING_TOKEN,"g"),e.DATE_REGEX=/\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z/,e.OBJECT_START_TOKEN="{",e.OBJECT_END_TOKEN="}",e.TEMPLATE_OBJECT_START="\xA6",e.TEMPLATE_OBJECT_END="\u2021",e.TEMPLATE_OBJECT_FINAL="\u2014",e.ARRAY_START_TOKEN="|",e.ARRAY_END_TOKEN="\xF7",e.ARRAY_REPEAT_TOKEN="\xFE",e.ARRAY_REPEAT_MANY_TOKEN="^",e.ARRAY_REPEAT_COUNT_THRESHOLD=4,e.REFERENCE_HEADER_LENGTH=1,e.DELIMITING_TOKENS_THRESHOLD=122,e.STRING_IDENT_PREFIX="$",e.INTEGER_SMALL_EXCLUSIVE_BOUND_LOWER=-10,e.INTEGER_SMALL_EXCLUSIVE_BOUND_UPPER=10,e.INTEGER_SMALL_TOKEN_EXCLUSIVE_BOUND_LOWER=191,e.INTEGER_SMALL_TOKEN_EXCLUSIVE_BOUND_UPPER=211,e.INTEGER_SMALL_TOKEN_OFFSET=-201,e.INTEGER_SMALL_TOKEN_ELEMENT_OFFSET=9,e.INTEGER_SMALL_TOKENS=["\xC0","\xC1","\xC2","\xC3","\xC4","\xC5","\xC6","\xC7","\xC8","\xC9","\xCA","\xCB","\xCC","\xCD","\xCE","\xCF","\xD0","\xD1","\xD2"]})(C);Object.defineProperty(ae,"__esModule",{value:!0});var B=C;function he(e,t,r,E,a,n){var T=typeof r;T==="number"?e.number(e,t,r,E,a,n):T==="string"?e.string(e,t,r,E,a,n):T==="boolean"?a.write(r?B.BOOLEAN_TRUE_TOKEN:B.BOOLEAN_FALSE_TOKEN):r===null?a.write(B.NULL_TOKEN):r===void 0?a.write(B.UNDEFINED_TOKEN):Array.isArray(r)?e.array(e,t,r,E,a,n):r instanceof Date?e.date(e,t,r.getTime(),E,a,n):e.object(e,t,r,E,a,n)}ae.compressAny=he;var ne={},y={},Ke=Ne&&Ne.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var E in r)r.hasOwnProperty(E)&&(t[E]=r[E])};return function(t,r){e(t,r);function E(){this.constructor=t}t.prototype=r===null?Object.create(r):(E.prototype=r.prototype,new E)}}();Object.defineProperty(y,"__esModule",{value:!0});var pe=function(){function e(){}return e}();y.ZipsonWriter=pe;var Me=function(e){Ke(t,e);function t(){var r=e!==null&&e.apply(this,arguments)||this;return r.value="",r}return t.prototype.write=function(r){this.value+=r},t.prototype.end=function(){},t}(pe);y.ZipsonStringWriter=Me;var I={};Object.defineProperty(I,"__esModule",{value:!0});var m=C,Fe=2147483648,Ge=-2147483649,Ue="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";function H(e){if(e===0)return"0";for(var t="",r=e<0?-e:e,E=0,a;r>0;)r=r/62,a=r%1,E=a*62+.1<<0,r-=a,t=Ue[E]+t;return t=e<0?"-"+t:t,t}I.compressInteger=H;function J(e){var t=0;if(e[0]==="0")return t;for(var r=e[0]==="-",E=1,a=r?1:0,n=e.length-1;n>=a;n--){var T=e.charCodeAt(n),_=T-48;T>=97?_-=13:T>=65&&(_-=7),t+=_*E,E*=62}return r?-t:t}I.decompressInteger=J;function Be(e,t){if(t===void 0&&(t=!1),t){var r=e.toString().split("."),E=r[0],a=r[1],n=E==="-0"?"-":"";return""+n+H(parseInt(E))+m.FLOAT_FULL_PRECISION_DELIMITER+a}else{var E=e>=Fe?Math.floor(e):e<=Ge?Math.ceil(e):e<<0,a=Math.round(m.FLOAT_COMPRESSION_PRECISION*(e%1));return""+H(E)+m.FLOAT_REDUCED_PRECISION_DELIMITER+H(a)}}I.compressFloat=Be;function be(e){if(e.indexOf(m.FLOAT_FULL_PRECISION_DELIMITER)>-1){var t=e.split(m.FLOAT_FULL_PRECISION_DELIMITER),r=t[0],E=t[1],a=r==="-0"?-1:1,n=J(r);return a*parseFloat(n+"."+E)}else{var T=e.split(m.FLOAT_REDUCED_PRECISION_DELIMITER),r=T[0],E=T[1],n=J(r),_=J(E);return n+_/m.FLOAT_COMPRESSION_PRECISION}}I.decompressFloat=be;Object.defineProperty(ne,"__esModule",{value:!0});var M=C,we=y,fe=I;function He(e,t,r,E,a,n){t.arrayLevel++,t.arrayLevel>t.arrayItemWriters.length&&t.arrayItemWriters.push(new we.ZipsonStringWriter);var T=t.arrayItemWriters[t.arrayLevel-1],_=t.arrayItemWriters[t.arrayLevel-2]||a;_.write(M.ARRAY_START_TOKEN);var s="",i=0,l=0,c=new e.template.Object(r[0],r[1]);c.isTemplating&&c.compressTemplate(e,t,E,_,n);for(var A=0;A<r.length;A++){var v=r[A];T.value="",v===void 0&&(v=null),A>1&&c.isTemplating&&c.isNextTemplateable(r[A],_),c.isTemplating?c.compressTemplateValues(e,t,E,T,n,r[A]):e.any(e,t,v,E,T,n),T.value===s?(i++,i>=M.ARRAY_REPEAT_COUNT_THRESHOLD?(l===0&&_.write(M.ARRAY_REPEAT_MANY_TOKEN),l++):_.write(M.ARRAY_REPEAT_TOKEN)):(i=0,l>0&&(_.write(fe.compressInteger(l)),l=0),_.write(T.value),s=T.value)}l>0&&_.write(fe.compressInteger(l)),c.isTemplating&&c.end(_),_.write(M.ARRAY_END_TOKEN),t.arrayLevel--}ne.compressArray=He;var Te={};Object.defineProperty(Te,"__esModule",{value:!0});var f=C,Je=I;function Ye(e,t,r,E,a,n){var T,_=f.STRING_IDENT_PREFIX+r;if(n.detectUtcTimestamps&&r[r.length-1]==="Z"&&r.match(f.DATE_REGEX)){var s=Date.parse(r);e.date(e,t,s,E,a,n)}else if((T=E.stringMap[_])!==void 0)a.write(""+f.REF_STRING_TOKEN+T);else{var i=Je.compressInteger(E.stringCount),l=""+f.STRING_TOKEN+r.replace(f.REGEX_ESCAPE_CHARACTER,f.ESCAPE_CHARACTER+f.ESCAPE_CHARACTER).replace(f.REGEX_STRING_TOKEN,f.ESCAPED_STRING_TOKEN)+f.STRING_TOKEN;i.length+f.REFERENCE_HEADER_LENGTH+1<l.length?(E.stringMap[_]=i,E.stringCount++,a.write(l)):a.write(""+f.UNREFERENCED_STRING_TOKEN+r.replace(f.REGEX_ESCAPE_CHARACTER,f.ESCAPE_CHARACTER+f.ESCAPE_CHARACTER).replace(f.REGEX_UNREFERENCED_STRING_TOKEN,f.ESCAPED_UNREFERENCED_STRING_TOKEN)+f.UNREFERENCED_STRING_TOKEN)}}Te.compressString=Ye;var _e={};Object.defineProperty(_e,"__esModule",{value:!0});var p=C,b=I;function $e(e,t,r,E,a,n){var T;if(r%1===0)if(r<p.INTEGER_SMALL_EXCLUSIVE_BOUND_UPPER&&r>p.INTEGER_SMALL_EXCLUSIVE_BOUND_LOWER)a.write(p.INTEGER_SMALL_TOKENS[r+p.INTEGER_SMALL_TOKEN_ELEMENT_OFFSET]);else if((T=E.integerMap[r])!==void 0)a.write(""+p.REF_INTEGER_TOKEN+T);else{var _=b.compressInteger(E.integerCount),s=b.compressInteger(r),i=""+p.INTEGER_TOKEN+s;_.length+p.REFERENCE_HEADER_LENGTH<i.length?(E.integerMap[r]=_,E.integerCount++,a.write(i)):a.write(""+p.UNREFERENCED_INTEGER_TOKEN+s)}else{var l=b.compressFloat(r,n.fullPrecisionFloats);if((T=E.floatMap[l])!==void 0)a.write(""+p.REF_FLOAT_TOKEN+T);else{var _=b.compressInteger(E.floatCount),i=""+p.FLOAT_TOKEN+l;_.length+p.REFERENCE_HEADER_LENGTH<i.length?(E.floatMap[l]=_,E.floatCount++,a.write(i)):a.write(""+p.UNREFERENCED_FLOAT_TOKEN+l)}}}_e.compressNumber=$e;var ie={};Object.defineProperty(ie,"__esModule",{value:!0});var Oe=C;function Xe(e,t,r,E,a,n){a.write(Oe.OBJECT_START_TOKEN);var T=Object.keys(r),_=new e.template.Object(r[T[0]],r[T[1]]);_.isTemplating&&_.compressTemplate(e,t,E,a,n);for(var s=0;s<T.length;s++)if(s>1&&_.isTemplating&&_.isNextTemplateable(r[T[s]],a),_.isTemplating)e.string(e,t,T[s],E,a,n),_.compressTemplateValues(e,t,E,a,n,r[T[s]]);else{var i=T[s],l=r[i];l!==void 0&&(e.string(e,t,i,E,a,n),e.any(e,t,l,E,a,n))}_.isTemplating&&_.end(a),a.write(Oe.OBJECT_END_TOKEN)}ie.compressObject=Xe;var le={};Object.defineProperty(le,"__esModule",{value:!0});var o=C,w=I;function We(e,t,r,E,a,n){var T,_=r/o.DATE_LOW_PRECISION,s=_%1===0;if(s)if((T=E.lpDateMap[_])!==void 0)a.write(""+o.REF_LP_DATE_TOKEN+T);else{var i=w.compressInteger(E.lpDateCount),l=w.compressInteger(_),c=""+o.LP_DATE_TOKEN+l;i.length+o.REFERENCE_HEADER_LENGTH<c.length?(E.lpDateMap[_]=i,E.lpDateCount++,a.write(c)):a.write(""+o.UNREFERENCED_LP_DATE_TOKEN+l)}else if((T=E.dateMap[r])!==void 0)a.write(""+o.REF_DATE_TOKEN+T);else{var i=w.compressInteger(E.dateCount),l=w.compressInteger(r),c=""+o.DATE_TOKEN+l;i.length+o.REFERENCE_HEADER_LENGTH<c.length?(E.dateMap[r]=i,E.dateCount++,a.write(c)):a.write(""+o.UNREFERENCED_DATE_TOKEN+l)}}le.compressDate=We;var ue={},se={};Object.defineProperty(se,"__esModule",{value:!0});function Ve(e){var t=typeof e;return t==="number"||t==="string"||t==="boolean"||e===null||Array.isArray(e)||e instanceof Date?!1:e!==void 0}se.isObject=Ve;Object.defineProperty(ue,"__esModule",{value:!0});var Y=C,F=se,ke=function(){function e(t,r){this.isTemplating=!1,this.struct=[],t!=null&&r!=null&&(this.isTemplating=Ce(t,r,this.struct))}return e.prototype.compressTemplate=function(t,r,E,a,n){Ie(t,r,E,a,n,this.struct)},e.prototype.compressTemplateValues=function(t,r,E,a,n,T){Le(t,r,E,a,n,this.struct,T)},e.prototype.isNextTemplateable=function(t,r){this.isTemplating=Se(this.struct,t),this.isTemplating||r.write(Y.TEMPLATE_OBJECT_FINAL)},e.prototype.end=function(t){t.write(Y.TEMPLATE_OBJECT_FINAL)},e}();ue.TemplateObject=ke;function Ce(e,t,r,E){if(E===void 0&&(E=0),E>6)return!1;var a=Object.keys(e),n=Object.keys(t);if(a.length!==n.length||a.length>10)return!1;a.sort(function(A,v){return A.localeCompare(v)}),n.sort(function(A,v){return A.localeCompare(v)});for(var T=0;T<a.length;T++){var _=a[T],s=n[T];if(_!==s)return!1;var i=e[_],l=t[s];if(F.isObject(i)){if(!F.isObject(l))return!1;var c=[];if(r.push([_,c]),!Ce(i,l,c,E+1))return!1}else{if(F.isObject(l))return!1;r.push([_])}}return E>0||F.isObject(e)}function Se(e,t){if(!t||Object.keys(t).length!==e.length)return!1;for(var r=0;r<e.length;r++){var E=e[r][0],a=e[r].length>1;if(t[E]===void 0)return!1;if(a){var n=e[r];if(n[1],!Se(e[r][1],t[E]))return!1}else if(F.isObject(t[E]))return!1}return!0}function Ie(e,t,r,E,a,n){E.write(Y.TEMPLATE_OBJECT_START);for(var T=0;T<n.length;T++){var _=n[T][0],s=n[T].length>1;e.string(e,t,_,r,E,a),s&&Ie(e,t,r,E,a,n[T][1])}E.write(Y.TEMPLATE_OBJECT_END)}function Le(e,t,r,E,a,n,T){for(var _=0;_<n.length;_++){var s=n[_][0],i=T[s],l=n[_].length>1;l?Le(e,t,r,E,a,n[_][1],i):e.any(e,t,i,r,E,a)}}Object.defineProperty(G,"__esModule",{value:!0});var je=ae,Ze=ne,ze=Te,Qe=_e,qe=ie,xe=le,et=ue,Ae={any:je.compressAny,array:Ze.compressArray,object:qe.compressObject,string:ze.compressString,date:xe.compressDate,number:Qe.compressNumber,template:{Object:et.TemplateObject}};function tt(){return{arrayItemWriters:[],arrayLevel:0}}G.makeCompressContext=tt;function rt(){return{stringMap:{},integerMap:{},floatMap:{},dateMap:{},lpDateMap:{},stringCount:0,integerCount:0,floatCount:0,dateCount:0,lpDateCount:0}}G.makeInvertedIndex=rt;function Et(e,t,r,E,a){Ae.any(Ae,e,t,r,E,a)}G.compress=Et;var U={},h={};(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.SKIP_SCALAR={},function(t){t.ARRAY="ARRAY",t.OBJECT="OBJECT",t.SCALAR="SCALAR",t.TEMPLATE_OBJECT="TEMPLATE_OBJECT",t.TEMPLATE_OBJECT_PROPERTIES="TEMPLATE_OBJECT_PROPERTIES",t.TEMPLATE_OBJECT_ELEMENTS="TEMPLATE_OBJECT_ELEMENTS"}(e.TargetType||(e.TargetType={}))})(h);var Re={},$={};Object.defineProperty($,"__esModule",{value:!0});var u=C,at=h,g=I;function nt(e,t,r,E){var a=r.index,n=r.index+1,T;if(e===u.STRING_TOKEN&&(T=u.STRING_TOKEN)||e===u.UNREFERENCED_STRING_TOKEN&&(T=u.UNREFERENCED_STRING_TOKEN)){for(var _=!0;_&&n<t.length;){n=t.indexOf(T,n);var s=1;for(_=!1;t[n-s]===u.ESCAPE_CHARACTER;)_=s%2===1,s++;n++}n<=a&&(n=t.length)}else for(;!(t.charCodeAt(n)>u.DELIMITING_TOKENS_THRESHOLD)&&n<t.length;)n++;if(!r.drain&&n===t.length)return at.SKIP_SCALAR;r.index=n-1;var i=e.charCodeAt(0);if(i>u.INTEGER_SMALL_TOKEN_EXCLUSIVE_BOUND_LOWER&&i<u.INTEGER_SMALL_TOKEN_EXCLUSIVE_BOUND_UPPER)return i+u.INTEGER_SMALL_TOKEN_OFFSET;if(e===u.ARRAY_REPEAT_MANY_TOKEN)return g.decompressInteger(t.substring(a+1,n));if(e===u.REF_STRING_TOKEN)return E.strings[g.decompressInteger(t.substring(a+1,n))];if(e===u.REF_INTEGER_TOKEN)return E.integers[g.decompressInteger(t.substring(a+1,n))];if(e===u.REF_FLOAT_TOKEN)return E.floats[g.decompressInteger(t.substring(a+1,n))];if(e===u.REF_DATE_TOKEN)return E.dates[g.decompressInteger(t.substring(a+1,n))];if(e===u.REF_LP_DATE_TOKEN)return E.lpDates[g.decompressInteger(t.substring(a+1,n))];if(e===u.STRING_TOKEN)return E.strings[E.strings.length]=t.substring(a+1,n-1).replace(u.REGEX_ESCAPED_ESCAPE_CHARACTER,u.ESCAPE_CHARACTER).replace(u.REGEX_ESCAPED_STRING_TOKEN,u.STRING_TOKEN);if(e===u.INTEGER_TOKEN)return E.integers[E.integers.length]=g.decompressInteger(t.substring(a+1,n));if(e===u.FLOAT_TOKEN)return E.floats[E.floats.length]=g.decompressFloat(t.substring(a+1,n));if(e===u.DATE_TOKEN)return E.dates[E.dates.length]=new Date(g.decompressInteger(t.substring(a+1,n))).toISOString();if(e===u.LP_DATE_TOKEN)return E.lpDates[E.lpDates.length]=new Date(u.DATE_LOW_PRECISION*g.decompressInteger(t.substring(a+1,n))).toISOString();if(e===u.UNREFERENCED_STRING_TOKEN)return t.substring(a+1,n-1).replace(u.REGEX_ESCAPED_ESCAPE_CHARACTER,u.ESCAPE_CHARACTER).replace(u.REGEX_UNREFERENCED_ESCAPED_STRING_TOKEN,u.UNREFERENCED_STRING_TOKEN);if(e===u.UNREFERENCED_INTEGER_TOKEN)return g.decompressInteger(t.substring(a+1,n));if(e===u.UNREFERENCED_FLOAT_TOKEN)return g.decompressFloat(t.substring(a+1,n));if(e===u.UNREFERENCED_DATE_TOKEN)return new Date(g.decompressInteger(t.substring(a+1,n))).toISOString();if(e===u.UNREFERENCED_LP_DATE_TOKEN)return new Date(u.DATE_LOW_PRECISION*g.decompressInteger(t.substring(a+1,n))).toISOString();if(e===u.BOOLEAN_TRUE_TOKEN)return!0;if(e===u.BOOLEAN_FALSE_TOKEN)return!1;if(e===u.NULL_TOKEN)return null;if(e===u.UNDEFINED_TOKEN)return;throw new Error("Unexpected scalar "+e+" at "+a+"-"+n)}$.decompressScalar=nt;var ce={},X={};Object.defineProperty(X,"__esModule",{value:!0});function oe(e,t){for(var r=e.paths[e.currentPathIndex],E=0,a=e.currentObject;E<r.length-1;E++){var n=r[E];a=a[n]=a[n]||{}}t!==void 0&&(a[r[E]]=t)}function Tt(e,t){e.currentPathIndex===-1?e.value[t]=e.currentObject={}:oe(e,t),++e.currentPathIndex===e.expectedPaths&&(e.currentPathIndex=-1)}X.appendTemplateObjectPropertiesValue=Tt;function _t(e,t){e.currentPathIndex===0&&(e.currentObject={},e.value.push(e.currentObject)),oe(e,t),++e.currentPathIndex===e.expectedPaths&&(e.currentPathIndex=0)}X.appendTemplateObjectElementsValue=_t;Object.defineProperty(ce,"__esModule",{value:!0});var ge=C,D=h,it=$,ve=X;function lt(e,t,r,E){var a;if(e===ge.ARRAY_END_TOKEN||e===ge.OBJECT_END_TOKEN)a=t.currentTarget.value,t.currentTarget=t.stack[t.pointer-1],t.pointer--;else if(a=it.decompressScalar(e,r,t,E),a===D.SKIP_SCALAR)return!1;return t.currentTarget.type===D.TargetType.SCALAR?t.currentTarget.value=a:t.currentTarget.type===D.TargetType.ARRAY?t.currentTarget.value[t.currentTarget.value.length]=a:t.currentTarget.type===D.TargetType.OBJECT?t.currentTarget.key!=null?(t.currentTarget.value[t.currentTarget.key]=a,t.currentTarget.key=void 0):t.currentTarget.key=a:t.currentTarget.type===D.TargetType.TEMPLATE_OBJECT?(t.currentTarget.currentToken=a,t.currentTarget.currentTokens.push(a)):t.currentTarget.type===D.TargetType.TEMPLATE_OBJECT_PROPERTIES?ve.appendTemplateObjectPropertiesValue(t.currentTarget,a):t.currentTarget.type===D.TargetType.TEMPLATE_OBJECT_ELEMENTS&&ve.appendTemplateObjectElementsValue(t.currentTarget,a),!0}ce.decompressElement=lt;Object.defineProperty(Re,"__esModule",{value:!0});var d=C,O=h,ut=$,st=ce;function Rt(e,t,r){for(;e.index<t.length;e.index++){var E=t[e.index];if(E===d.ARRAY_START_TOKEN)e.currentTarget={type:O.TargetType.ARRAY,value:[]},e.stack[++e.pointer]=e.currentTarget;else if(E===d.OBJECT_START_TOKEN)e.currentTarget={type:O.TargetType.OBJECT,value:{}},e.stack[++e.pointer]=e.currentTarget;else if(E===d.ARRAY_REPEAT_TOKEN&&(e.currentTarget.type===O.TargetType.ARRAY||e.currentTarget.type===O.TargetType.TEMPLATE_OBJECT_ELEMENTS)){var a=e.currentTarget.value[e.currentTarget.value.length-1];e.currentTarget.value.push(a)}else if(E===d.ARRAY_REPEAT_MANY_TOKEN&&(e.currentTarget.type===O.TargetType.ARRAY||e.currentTarget.type===O.TargetType.TEMPLATE_OBJECT_ELEMENTS)){var n=ut.decompressScalar(t[e.index],t,e,r);if(n===O.SKIP_SCALAR)return;for(var a=e.currentTarget.value[e.currentTarget.value.length-1],T=0;T<n;T++)e.currentTarget.value.push(a)}else if(E===d.TEMPLATE_OBJECT_START&&(e.currentTarget.type===O.TargetType.TEMPLATE_OBJECT||e.currentTarget.type===O.TargetType.OBJECT||e.currentTarget.type===O.TargetType.ARRAY))if(e.currentTarget.type!==O.TargetType.TEMPLATE_OBJECT){var _=e.currentTarget;e.currentTarget={type:O.TargetType.TEMPLATE_OBJECT,value:void 0,currentTokens:[],currentRoute:[],paths:[],level:0,parentTarget:_},e.stack[++e.pointer]=e.currentTarget}else{for(var T=0;T<e.currentTarget.currentTokens.length-1;T++){var s=e.currentTarget.currentTokens[T];e.currentTarget.paths[e.currentTarget.paths.length]=e.currentTarget.currentRoute.concat(s)}e.currentTarget.currentToken!=null&&e.currentTarget.currentRoute.push(e.currentTarget.currentToken),e.currentTarget.currentTokens=[],e.currentTarget.level++}else if(E===d.TEMPLATE_OBJECT_END&&e.currentTarget.type===O.TargetType.TEMPLATE_OBJECT){for(var T=0;T<e.currentTarget.currentTokens.length;T++){var s=e.currentTarget.currentTokens[T];e.currentTarget.paths[e.currentTarget.paths.length]=e.currentTarget.currentRoute.concat(s)}if(e.currentTarget.currentTokens=[],e.currentTarget.currentRoute=e.currentTarget.currentRoute.slice(0,-1),e.currentTarget.level--,e.currentTarget.level<0){var i=e.currentTarget.paths,_=e.currentTarget.parentTarget;e.pointer--,_.type===O.TargetType.ARRAY?e.currentTarget={type:O.TargetType.TEMPLATE_OBJECT_ELEMENTS,value:_.value,paths:i,currentPathIndex:0,expectedPaths:i.length,currentObject:{}}:_.type===O.TargetType.OBJECT&&(e.currentTarget={type:O.TargetType.TEMPLATE_OBJECT_PROPERTIES,value:_.value,paths:i,currentPathIndex:-1,expectedPaths:i.length,currentObject:{}}),e.stack[++e.pointer]=e.currentTarget}}else if(E===d.TEMPLATE_OBJECT_FINAL)e.currentTarget=e.stack[--e.pointer];else if(!st.decompressElement(E,e,t,r))return}}Re.decompressStages=Rt;Object.defineProperty(U,"__esModule",{value:!0});var ct=h,Pe=Re;function Nt(){return{strings:[],integers:[],floats:[],dates:[],lpDates:[]}}U.makeOrderedIndex=Nt;function De(e){var t={type:ct.TargetType.SCALAR,value:void 0},r=new Array(10);return r[0]=t,{index:0,rootTarget:t,stack:r,currentTarget:t,pointer:0,drain:e}}function ft(e,t){var r=De(!0);return Pe.decompressStages(r,e,t),r.rootTarget.value}U.decompress=ft;function Ot(e){var t=De(!1),r="";function E(a){if(a===null)t.drain=!0;else{if(a.length===0)return;r+=a}var n=t.index;Pe.decompressStages(t,r,e);var T=t.index-n;T>0&&(r=r.substring(T),t.index-=T)}return{increment:E,cursor:t}}U.decompressIncremental=Ot;(function(e){function t(i){for(var l in i)e.hasOwnProperty(l)||(e[l]=i[l])}Object.defineProperty(e,"__esModule",{value:!0});var r=G,E=y,a=U;t(y),t(h);function n(i){var l=a.makeOrderedIndex();return a.decompress(i,l)}e.parse=n;function T(){var i=a.makeOrderedIndex(),l=a.decompressIncremental(i),c=l.cursor,A=l.increment;return function(v){if(A(v),v===null)return c.rootTarget.value}}e.parseIncremental=T;function _(i,l,c){c===void 0&&(c={});var A=r.makeInvertedIndex(),v=r.makeCompressContext();r.compress(v,i,A,l,c),l.end()}e.stringifyTo=_;function s(i,l){var c=new E.ZipsonStringWriter;return _(i,c,l),c.value}e.stringify=s})(Ee);const gt=me("productDetails",()=>{const e=re(),t=ye(),r=async N=>{try{const{data:R}=await P.get("/product-details/single",{params:N});return e.value=R,R}catch(R){const S=await E(N);if(S!==null||S!==void 0)return S;L(R,!1)}},E=async N=>{const R=await t.getOfflineProductDetailsById(N);e.value=R},a=async N=>{try{const{data:R}=await P.get(`/product-details/${N}`);e.value=R}catch(R){L(R,!1)}},n=async N=>{try{const{data:R}=await P.post("/product-details",N);return K("positive"),R}catch(R){L(R,!1)}},T=async N=>{try{const{modelName:R,modelCode:S,modelYear:W,productRange:V,productType:k,brand:j,state:Z,productionStart:z,productionEnd:Q,serialStart:q,serialEnd:x,displayName:ee,_id:te}=N,{data:de}=await P.patch(`/product-details/${te}`,{modelName:R,modelCode:S,modelYear:W,productRange:V,productType:k,brand:j,state:Z,productionStart:z,productionEnd:Q,serialStart:q,serialEnd:x,displayName:ee});return K("positive"),de}catch(R){L(R,!1)}},_=async N=>{try{const{data:R}=await P.delete(`/product-details/${N}`);return K("positive"),R}catch(R){L(R,!1)}},s=re([]),i=async()=>{try{const{data:N}=await P.get("/product-details/product-details-clashes");return s.value=N,N}catch(N){L(N,!1)}},l=async({id:N,index:R})=>{try{await P.delete(`/product-details/${N}product-details-clashes/${R}`),K("positive"),await i()}catch(S){L(S,!1)}},c=async N=>{try{const{_id:R,conflictInfo:S}=N;await P.patch(`/product-details/${R}`,{conflictInfo:S}),K("positive"),await i()}catch(R){L(R,!1)}},A=re([]);return{productDetail:e,findSingleProductDetail:r,loadModelDetailsById:a,createProductDetails:n,getOfflineModelDetailsById:E,updateProductDetails:T,deleteProductDetails:_,productDetailClashes:s,getProductDetailsClashes:i,deleteProductDetailClashImage:l,updateProductDetailClashInfo:c,bulkModels:A,updateBulkModels:async N=>{try{N.forEach(async R=>{const{_id:S,modelName:W,productRange:V,productType:k,brand:j,state:Z,modelYear:z,productionStart:Q,productionEnd:q,serialStart:x,serialEnd:ee,displayName:te}=R;await T({_id:S,modelName:W,productRange:V,productType:k,brand:j,state:Z,modelYear:z,productionStart:Q,productionEnd:q,serialStart:x,serialEnd:ee,displayName:te})})}catch(R){L(R,!1)}}}},{persist:{paths:["bulkModels"],storage:sessionStorage,serializer:{deserialize:Ee.parse,serialize:Ee.stringify}}});export{gt as u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1kZXRhaWxzLjViZDUzMTk0LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9ub2RlX21vZHVsZXMvemlwc29uL2xpYi9jb25zdGFudHMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvemlwc29uL2xpYi9jb21wcmVzc29yL2FueS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy96aXBzb24vbGliL2NvbXByZXNzb3Ivd3JpdGVyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3ppcHNvbi9saWIvdXRpbC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy96aXBzb24vbGliL2NvbXByZXNzb3IvYXJyYXkuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvemlwc29uL2xpYi9jb21wcmVzc29yL3N0cmluZy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy96aXBzb24vbGliL2NvbXByZXNzb3IvbnVtYmVyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3ppcHNvbi9saWIvY29tcHJlc3Nvci9vYmplY3QuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvemlwc29uL2xpYi9jb21wcmVzc29yL2RhdGUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvemlwc29uL2xpYi9jb21wcmVzc29yL3V0aWwuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvemlwc29uL2xpYi9jb21wcmVzc29yL3RlbXBsYXRlL29iamVjdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy96aXBzb24vbGliL2NvbXByZXNzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3ppcHNvbi9saWIvZGVjb21wcmVzc29yL2NvbW1vbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy96aXBzb24vbGliL2RlY29tcHJlc3Nvci9zY2FsYXIuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvemlwc29uL2xpYi9kZWNvbXByZXNzb3IvdGVtcGxhdGUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvemlwc29uL2xpYi9kZWNvbXByZXNzb3IvZWxlbWVudC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy96aXBzb24vbGliL2RlY29tcHJlc3Nvci9zdGFnZXMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvemlwc29uL2xpYi9kZWNvbXByZXNzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3ppcHNvbi9saWIvaW5kZXguanMiLCIuLi8uLi8uLi9zcmMvc3RvcmVzL3Byb2R1Y3QtZGV0YWlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogUHJlY2lzaW9uIGNvbnN0YW50c1xuICovXG5leHBvcnRzLkZMT0FUX0NPTVBSRVNTSU9OX1BSRUNJU0lPTiA9IDEwMDA7XG5leHBvcnRzLkRBVEVfTE9XX1BSRUNJU0lPTiA9IDEwMDAwMDtcbi8qKlxuICogRmxvYXRpbmcgcG9pbnQgZGVsaW1pdGVyc1xuICovXG5leHBvcnRzLkZMT0FUX0ZVTExfUFJFQ0lTSU9OX0RFTElNSVRFUiA9ICcsJztcbmV4cG9ydHMuRkxPQVRfUkVEVUNFRF9QUkVDSVNJT05fREVMSU1JVEVSID0gJy4nO1xuLyoqXG4gKiBEYXRhIHR5cGUgdG9rZW5zXG4gKi9cbmV4cG9ydHMuSU5URUdFUl9UT0tFTiA9ICfCoic7XG5leHBvcnRzLkZMT0FUX1RPS0VOID0gJ8KjJztcbmV4cG9ydHMuU1RSSU5HX1RPS0VOID0gJ8KoJztcbmV4cG9ydHMuREFURV9UT0tFTiA9ICfDuCc7XG5leHBvcnRzLkxQX0RBVEVfVE9LRU4gPSAnwrEnO1xuZXhwb3J0cy5VTlJFRkVSRU5DRURfSU5URUdFUl9UT0tFTiA9ICfCpCc7XG5leHBvcnRzLlVOUkVGRVJFTkNFRF9GTE9BVF9UT0tFTiA9ICfCpSc7XG5leHBvcnRzLlVOUkVGRVJFTkNFRF9TVFJJTkdfVE9LRU4gPSAnwrQnO1xuZXhwb3J0cy5VTlJFRkVSRU5DRURfREFURV9UT0tFTiA9ICfCvyc7XG5leHBvcnRzLlVOUkVGRVJFTkNFRF9MUF9EQVRFX1RPS0VOID0gJ8O/JztcbmV4cG9ydHMuUkVGX0lOVEVHRVJfVE9LRU4gPSAnwronO1xuZXhwb3J0cy5SRUZfRkxPQVRfVE9LRU4gPSAnw50nO1xuZXhwb3J0cy5SRUZfU1RSSU5HX1RPS0VOID0gJ8OfJztcbmV4cG9ydHMuUkVGX0RBVEVfVE9LRU4gPSAnw5cnO1xuZXhwb3J0cy5SRUZfTFBfREFURV9UT0tFTiA9ICfDvCc7XG5leHBvcnRzLk5VTExfVE9LRU4gPSAnwqcnO1xuZXhwb3J0cy5VTkRFRklORURfVE9LRU4gPSAnwrUnO1xuZXhwb3J0cy5CT09MRUFOX1RSVUVfVE9LRU4gPSAnwrsnO1xuZXhwb3J0cy5CT09MRUFOX0ZBTFNFX1RPS0VOID0gJ8KrJztcbi8qKlxuICogU3RyaW5nIGVzY2FwZSB0b2tlbnNcbiAqL1xuZXhwb3J0cy5FU0NBUEVfQ0hBUkFDVEVSID0gJ1xcXFwnO1xuZXhwb3J0cy5FU0NBUEVEX1NUUklOR19UT0tFTiA9IFwiXCIgKyBleHBvcnRzLkVTQ0FQRV9DSEFSQUNURVIgKyBleHBvcnRzLlNUUklOR19UT0tFTjtcbmV4cG9ydHMuRVNDQVBFRF9VTlJFRkVSRU5DRURfU1RSSU5HX1RPS0VOID0gXCJcIiArIGV4cG9ydHMuRVNDQVBFX0NIQVJBQ1RFUiArIGV4cG9ydHMuVU5SRUZFUkVOQ0VEX1NUUklOR19UT0tFTjtcbi8qKlxuICogUmVnZXggbG9va3Vwc1xuICovXG5leHBvcnRzLlJFR0VYX0VTQ0FQRV9DSEFSQUNURVIgPSBuZXcgUmVnRXhwKGV4cG9ydHMuRVNDQVBFX0NIQVJBQ1RFUi5yZXBsYWNlKFwiXFxcXFwiLCBcIlxcXFxcXFxcXCIpLCAnZycpO1xuZXhwb3J0cy5SRUdFWF9FU0NBUEVEX0VTQ0FQRV9DSEFSQUNURVIgPSBuZXcgUmVnRXhwKGV4cG9ydHMuRVNDQVBFX0NIQVJBQ1RFUi5yZXBsYWNlKFwiXFxcXFwiLCBcIlxcXFxcXFxcXCIpICsgZXhwb3J0cy5FU0NBUEVfQ0hBUkFDVEVSLnJlcGxhY2UoXCJcXFxcXCIsIFwiXFxcXFxcXFxcIiksICdnJyk7XG5leHBvcnRzLlJFR0VYX1NUUklOR19UT0tFTiA9IG5ldyBSZWdFeHAoZXhwb3J0cy5TVFJJTkdfVE9LRU4sICdnJyk7XG5leHBvcnRzLlJFR0VYX0VTQ0FQRURfU1RSSU5HX1RPS0VOID0gbmV3IFJlZ0V4cChleHBvcnRzLkVTQ0FQRV9DSEFSQUNURVIgKyBleHBvcnRzLkVTQ0FQRURfU1RSSU5HX1RPS0VOLCAnZycpO1xuZXhwb3J0cy5SRUdFWF9VTlJFRkVSRU5DRURfU1RSSU5HX1RPS0VOID0gbmV3IFJlZ0V4cChleHBvcnRzLlVOUkVGRVJFTkNFRF9TVFJJTkdfVE9LRU4sICdnJyk7XG5leHBvcnRzLlJFR0VYX1VOUkVGRVJFTkNFRF9FU0NBUEVEX1NUUklOR19UT0tFTiA9IG5ldyBSZWdFeHAoZXhwb3J0cy5FU0NBUEVfQ0hBUkFDVEVSICsgZXhwb3J0cy5FU0NBUEVEX1VOUkVGRVJFTkNFRF9TVFJJTkdfVE9LRU4sICdnJyk7XG5leHBvcnRzLkRBVEVfUkVHRVggPSAvXFxkezR9LVxcZHsyfS1cXGR7Mn1UXFxkezJ9OlxcZHsyfTpcXGR7Mn0oXFwuXFxkKyk/Wi87XG4vKipcbiAqIFN0cnVjdHVyYWwgdG9rZW5zXG4gKi9cbmV4cG9ydHMuT0JKRUNUX1NUQVJUX1RPS0VOID0gJ3snO1xuZXhwb3J0cy5PQkpFQ1RfRU5EX1RPS0VOID0gJ30nO1xuZXhwb3J0cy5URU1QTEFURV9PQkpFQ1RfU1RBUlQgPSAnwqYnO1xuZXhwb3J0cy5URU1QTEFURV9PQkpFQ1RfRU5EID0gJ+KAoSc7XG5leHBvcnRzLlRFTVBMQVRFX09CSkVDVF9GSU5BTCA9ICfigJQnO1xuZXhwb3J0cy5BUlJBWV9TVEFSVF9UT0tFTiA9ICd8JztcbmV4cG9ydHMuQVJSQVlfRU5EX1RPS0VOID0gJ8O3JztcbmV4cG9ydHMuQVJSQVlfUkVQRUFUX1RPS0VOID0gJ8O+JztcbmV4cG9ydHMuQVJSQVlfUkVQRUFUX01BTllfVE9LRU4gPSAnXic7XG5leHBvcnRzLkFSUkFZX1JFUEVBVF9DT1VOVF9USFJFU0hPTEQgPSA0O1xuLyoqXG4gKiBHZW5lcmFsIHRva2VuaXphdGlvbiBjb25zdGFudHNcbiAqL1xuZXhwb3J0cy5SRUZFUkVOQ0VfSEVBREVSX0xFTkdUSCA9IDE7XG5leHBvcnRzLkRFTElNSVRJTkdfVE9LRU5TX1RIUkVTSE9MRCA9IDEyMjtcbmV4cG9ydHMuU1RSSU5HX0lERU5UX1BSRUZJWCA9ICckJztcbi8qKlxuICogU21hbGwgaW50ZWdlciB0b2tlbnNcbiAqL1xuZXhwb3J0cy5JTlRFR0VSX1NNQUxMX0VYQ0xVU0lWRV9CT1VORF9MT1dFUiA9IC0xMDtcbmV4cG9ydHMuSU5URUdFUl9TTUFMTF9FWENMVVNJVkVfQk9VTkRfVVBQRVIgPSAxMDtcbmV4cG9ydHMuSU5URUdFUl9TTUFMTF9UT0tFTl9FWENMVVNJVkVfQk9VTkRfTE9XRVIgPSAxOTE7XG5leHBvcnRzLklOVEVHRVJfU01BTExfVE9LRU5fRVhDTFVTSVZFX0JPVU5EX1VQUEVSID0gMjExO1xuZXhwb3J0cy5JTlRFR0VSX1NNQUxMX1RPS0VOX09GRlNFVCA9IC0yMDE7XG5leHBvcnRzLklOVEVHRVJfU01BTExfVE9LRU5fRUxFTUVOVF9PRkZTRVQgPSA5O1xuZXhwb3J0cy5JTlRFR0VSX1NNQUxMX1RPS0VOUyA9IFsnw4AnLCAnw4EnLCAnw4InLCAnw4MnLCAnw4QnLCAnw4UnLCAnw4YnLCAnw4cnLCAnw4gnLCAnw4knLCAnw4onLCAnw4snLCAnw4wnLCAnw40nLCAnw44nLCAnw48nLCAnw5AnLCAnw5EnLCAnw5InXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG4vKipcbiAqIENvbXByZXNzIGFueSBkYXRhIHR5cGUgdG8gd3JpdGVyXG4gKi9cbmZ1bmN0aW9uIGNvbXByZXNzQW55KGNvbXByZXNzb3JzLCBjb250ZXh0LCBvYmosIGludmVydGVkSW5kZXgsIHdyaXRlciwgb3B0aW9ucykge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIG9iajtcbiAgICBpZiAodHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY29tcHJlc3NvcnMubnVtYmVyKGNvbXByZXNzb3JzLCBjb250ZXh0LCBvYmosIGludmVydGVkSW5kZXgsIHdyaXRlciwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbXByZXNzb3JzLnN0cmluZyhjb21wcmVzc29ycywgY29udGV4dCwgb2JqLCBpbnZlcnRlZEluZGV4LCB3cml0ZXIsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgd3JpdGVyLndyaXRlKG9iaiA/IGNvbnN0YW50c18xLkJPT0xFQU5fVFJVRV9UT0tFTiA6IGNvbnN0YW50c18xLkJPT0xFQU5fRkFMU0VfVE9LRU4pO1xuICAgIH1cbiAgICBlbHNlIGlmIChvYmogPT09IG51bGwpIHtcbiAgICAgICAgd3JpdGVyLndyaXRlKGNvbnN0YW50c18xLk5VTExfVE9LRU4pO1xuICAgIH1cbiAgICBlbHNlIGlmIChvYmogPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB3cml0ZXIud3JpdGUoY29uc3RhbnRzXzEuVU5ERUZJTkVEX1RPS0VOKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgICAgIGNvbXByZXNzb3JzLmFycmF5KGNvbXByZXNzb3JzLCBjb250ZXh0LCBvYmosIGludmVydGVkSW5kZXgsIHdyaXRlciwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKG9iaiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgY29tcHJlc3NvcnMuZGF0ZShjb21wcmVzc29ycywgY29udGV4dCwgb2JqLmdldFRpbWUoKSwgaW52ZXJ0ZWRJbmRleCwgd3JpdGVyLCBvcHRpb25zKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbXByZXNzb3JzLm9iamVjdChjb21wcmVzc29ycywgY29udGV4dCwgb2JqLCBpbnZlcnRlZEluZGV4LCB3cml0ZXIsIG9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydHMuY29tcHJlc3NBbnkgPSBjb21wcmVzc0FueTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFueS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBBIHppcHNvbiB3cml0ZXIgdGFrZXMgYSBwaWVjZSBvZiB6aXBzb24gY29tcHJlc3Npb24gb3V0cHV0IGFzIGEgc3RyaW5nXG4gKi9cbnZhciBaaXBzb25Xcml0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gWmlwc29uV3JpdGVyKCkge1xuICAgIH1cbiAgICByZXR1cm4gWmlwc29uV3JpdGVyO1xufSgpKTtcbmV4cG9ydHMuWmlwc29uV3JpdGVyID0gWmlwc29uV3JpdGVyO1xuLyoqXG4gKiBXcml0ZXMgemlwc29uIGNvbXByZXNzaW9uIG91dHVwdCBpbiBmdWxsIHRvIGEgc3RyaW5nXG4gKi9cbnZhciBaaXBzb25TdHJpbmdXcml0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFppcHNvblN0cmluZ1dyaXRlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBaaXBzb25TdHJpbmdXcml0ZXIoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy52YWx1ZSA9ICcnO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFppcHNvblN0cmluZ1dyaXRlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB0aGlzLnZhbHVlICs9IGRhdGE7XG4gICAgfTtcbiAgICBaaXBzb25TdHJpbmdXcml0ZXIucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICByZXR1cm4gWmlwc29uU3RyaW5nV3JpdGVyO1xufShaaXBzb25Xcml0ZXIpKTtcbmV4cG9ydHMuWmlwc29uU3RyaW5nV3JpdGVyID0gWmlwc29uU3RyaW5nV3JpdGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JpdGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xudmFyIG1heEludGVnZXIgPSAyMTQ3NDgzNjQ4O1xudmFyIG1pbkludGVnZXIgPSAtMjE0NzQ4MzY0OTtcbnZhciBiYXNlNjIgPSAnMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonO1xuLyoqXG4gKiBDb252ZXJ0IG51bWJlciB0byBiYXNlNjIgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIGNvbXByZXNzSW50ZWdlcihudW1iZXIpIHtcbiAgICBpZiAobnVtYmVyID09PSAwKSB7XG4gICAgICAgIHJldHVybiAnMCc7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSAnJztcbiAgICB2YXIgY2FycnkgPSBudW1iZXIgPCAwID8gLW51bWJlciA6IG51bWJlcjtcbiAgICB2YXIgY3VycmVudCA9IDA7XG4gICAgdmFyIGZyYWN0aW9uO1xuICAgIHdoaWxlIChjYXJyeSA+IDApIHtcbiAgICAgICAgY2FycnkgPSBjYXJyeSAvIDYyO1xuICAgICAgICBmcmFjdGlvbiA9IGNhcnJ5ICUgMTtcbiAgICAgICAgY3VycmVudCA9ICgoZnJhY3Rpb24gKiA2MikgKyAwLjEpIDw8IDA7XG4gICAgICAgIGNhcnJ5IC09IGZyYWN0aW9uO1xuICAgICAgICByZXN1bHQgPSBiYXNlNjJbY3VycmVudF0gKyByZXN1bHQ7XG4gICAgfVxuICAgIHJlc3VsdCA9IG51bWJlciA8IDAgPyAnLScgKyByZXN1bHQgOiByZXN1bHQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuY29tcHJlc3NJbnRlZ2VyID0gY29tcHJlc3NJbnRlZ2VyO1xuLyoqXG4gKiBDb252ZXJ0IGJhc2U2MiBzdHJpbmcgdG8gbnVtYmVyXG4gKi9cbmZ1bmN0aW9uIGRlY29tcHJlc3NJbnRlZ2VyKGNvbXByZXNzZWRJbnRlZ2VyKSB7XG4gICAgdmFyIHZhbHVlID0gMDtcbiAgICBpZiAoY29tcHJlc3NlZEludGVnZXJbMF0gPT09ICcwJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgbmVnYXRpdmUgPSBjb21wcmVzc2VkSW50ZWdlclswXSA9PT0gJy0nO1xuICAgICAgICB2YXIgbXVsdGlwbGllciA9IDE7XG4gICAgICAgIHZhciBsZWZ0Qm91bmQgPSBuZWdhdGl2ZSA/IDEgOiAwO1xuICAgICAgICBmb3IgKHZhciBpID0gY29tcHJlc3NlZEludGVnZXIubGVuZ3RoIC0gMTsgaSA+PSBsZWZ0Qm91bmQ7IGktLSkge1xuICAgICAgICAgICAgdmFyIGNvZGUgPSBjb21wcmVzc2VkSW50ZWdlci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBjb2RlIC0gNDg7XG4gICAgICAgICAgICBpZiAoY29kZSA+PSA5Nykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgLT0gMTM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjb2RlID49IDY1KSB7XG4gICAgICAgICAgICAgICAgY3VycmVudCAtPSA3O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsdWUgKz0gY3VycmVudCAqIG11bHRpcGxpZXI7XG4gICAgICAgICAgICBtdWx0aXBsaWVyICo9IDYyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZWdhdGl2ZSA/IC12YWx1ZSA6IHZhbHVlO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVjb21wcmVzc0ludGVnZXIgPSBkZWNvbXByZXNzSW50ZWdlcjtcbi8qKlxuICogQ29udmVydCBmbG9hdCB0byBiYXNlNjIgc3RyaW5nIGZvciBpbnRlZ2VyIGFuZCBmcmFjdGlvblxuICovXG5mdW5jdGlvbiBjb21wcmVzc0Zsb2F0KGZsb2F0LCBmdWxsUHJlY2lzaW9uKSB7XG4gICAgaWYgKGZ1bGxQcmVjaXNpb24gPT09IHZvaWQgMCkgeyBmdWxsUHJlY2lzaW9uID0gZmFsc2U7IH1cbiAgICBpZiAoZnVsbFByZWNpc2lvbikge1xuICAgICAgICB2YXIgX2EgPSBmbG9hdC50b1N0cmluZygpLnNwbGl0KCcuJyksIGludGVnZXIgPSBfYVswXSwgZnJhY3Rpb24gPSBfYVsxXTtcbiAgICAgICAgdmFyIG9wZXJhdG9yID0gaW50ZWdlciA9PT0gJy0wJyA/ICctJyA6ICcnO1xuICAgICAgICByZXR1cm4gXCJcIiArIG9wZXJhdG9yICsgY29tcHJlc3NJbnRlZ2VyKHBhcnNlSW50KGludGVnZXIpKSArIGNvbnN0YW50c18xLkZMT0FUX0ZVTExfUFJFQ0lTSU9OX0RFTElNSVRFUiArIGZyYWN0aW9uO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIGludGVnZXIgPSBmbG9hdCA+PSBtYXhJbnRlZ2VyID8gTWF0aC5mbG9vcihmbG9hdCkgOiBmbG9hdCA8PSBtaW5JbnRlZ2VyID8gTWF0aC5jZWlsKGZsb2F0KSA6IGZsb2F0IDw8IDA7XG4gICAgICAgIHZhciBmcmFjdGlvbiA9IE1hdGgucm91bmQoKGNvbnN0YW50c18xLkZMT0FUX0NPTVBSRVNTSU9OX1BSRUNJU0lPTiAqIChmbG9hdCAlIDEpKSk7XG4gICAgICAgIHJldHVybiBcIlwiICsgY29tcHJlc3NJbnRlZ2VyKGludGVnZXIpICsgY29uc3RhbnRzXzEuRkxPQVRfUkVEVUNFRF9QUkVDSVNJT05fREVMSU1JVEVSICsgY29tcHJlc3NJbnRlZ2VyKGZyYWN0aW9uKTtcbiAgICB9XG59XG5leHBvcnRzLmNvbXByZXNzRmxvYXQgPSBjb21wcmVzc0Zsb2F0O1xuLyoqXG4gKiBDb252ZXJ0IGJhc2U2MiBpbnRlZ2VyIGFuZCBmcmFjdGlvbiB0byBmbG9hdFxuICovXG5mdW5jdGlvbiBkZWNvbXByZXNzRmxvYXQoY29tcHJlc3NlZEZsb2F0KSB7XG4gICAgaWYgKGNvbXByZXNzZWRGbG9hdC5pbmRleE9mKGNvbnN0YW50c18xLkZMT0FUX0ZVTExfUFJFQ0lTSU9OX0RFTElNSVRFUikgPiAtMSkge1xuICAgICAgICB2YXIgX2EgPSBjb21wcmVzc2VkRmxvYXQuc3BsaXQoY29uc3RhbnRzXzEuRkxPQVRfRlVMTF9QUkVDSVNJT05fREVMSU1JVEVSKSwgaW50ZWdlciA9IF9hWzBdLCBmcmFjdGlvbiA9IF9hWzFdO1xuICAgICAgICB2YXIgbXVsdCA9IGludGVnZXIgPT09ICctMCcgPyAtMSA6IDE7XG4gICAgICAgIHZhciB1bmNvbXByZXNzZWRJbnRlZ2VyID0gZGVjb21wcmVzc0ludGVnZXIoaW50ZWdlcik7XG4gICAgICAgIHJldHVybiBtdWx0ICogcGFyc2VGbG9hdCh1bmNvbXByZXNzZWRJbnRlZ2VyICsgJy4nICsgZnJhY3Rpb24pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIF9iID0gY29tcHJlc3NlZEZsb2F0LnNwbGl0KGNvbnN0YW50c18xLkZMT0FUX1JFRFVDRURfUFJFQ0lTSU9OX0RFTElNSVRFUiksIGludGVnZXIgPSBfYlswXSwgZnJhY3Rpb24gPSBfYlsxXTtcbiAgICAgICAgdmFyIHVuY29tcHJlc3NlZEludGVnZXIgPSBkZWNvbXByZXNzSW50ZWdlcihpbnRlZ2VyKTtcbiAgICAgICAgdmFyIHVuY29tcHJlc3NlZEZyYWN0aW9uID0gZGVjb21wcmVzc0ludGVnZXIoZnJhY3Rpb24pO1xuICAgICAgICByZXR1cm4gdW5jb21wcmVzc2VkSW50ZWdlciArIHVuY29tcHJlc3NlZEZyYWN0aW9uIC8gY29uc3RhbnRzXzEuRkxPQVRfQ09NUFJFU1NJT05fUFJFQ0lTSU9OO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVjb21wcmVzc0Zsb2F0ID0gZGVjb21wcmVzc0Zsb2F0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG52YXIgd3JpdGVyXzEgPSByZXF1aXJlKFwiLi93cml0ZXJcIik7XG52YXIgdXRpbF8xID0gcmVxdWlyZShcIi4uL3V0aWxcIik7XG4vKipcbiAqIENvbXByZXNzIGFycmF5IHRvIHdyaXRlclxuICovXG5mdW5jdGlvbiBjb21wcmVzc0FycmF5KGNvbXByZXNzb3JzLCBjb250ZXh0LCBhcnJheSwgaW52ZXJ0ZWRJbmRleCwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgLy8gSW5jcmVhc2UgY29udGV4dCBhcnJheSBsZXZlbCBhbmQgY3JlYXRlIGEgbmV3IGVsZW1lbnQgd3JpdGVyIGlmIG5lZWRlZFxuICAgIGNvbnRleHQuYXJyYXlMZXZlbCsrO1xuICAgIGlmIChjb250ZXh0LmFycmF5TGV2ZWwgPiBjb250ZXh0LmFycmF5SXRlbVdyaXRlcnMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnRleHQuYXJyYXlJdGVtV3JpdGVycy5wdXNoKG5ldyB3cml0ZXJfMS5aaXBzb25TdHJpbmdXcml0ZXIoKSk7XG4gICAgfVxuICAgIC8vIEdldCB0aGUgZWxlbWVudCBhbmQgcGFyZW50IHdyaXRlclxuICAgIHZhciBhcnJheUl0ZW1Xcml0ZXIgPSBjb250ZXh0LmFycmF5SXRlbVdyaXRlcnNbY29udGV4dC5hcnJheUxldmVsIC0gMV07XG4gICAgdmFyIHBhcmVudFdyaXRlciA9IGNvbnRleHQuYXJyYXlJdGVtV3JpdGVyc1tjb250ZXh0LmFycmF5TGV2ZWwgLSAyXSB8fCB3cml0ZXI7XG4gICAgcGFyZW50V3JpdGVyLndyaXRlKGNvbnN0YW50c18xLkFSUkFZX1NUQVJUX1RPS0VOKTtcbiAgICB2YXIgcHJldmlvdXNJdGVtID0gJyc7XG4gICAgdmFyIHJlcGVhdGVkVGltZXMgPSAwO1xuICAgIHZhciByZXBlYXRNYW55Q291bnQgPSAwO1xuICAgIC8vIENyZWF0ZSBhIHRlbXBsYXRlIG9iamVjdCBmb3IgZmlyc3QgdHdvIGtleXMgaW4gb2JqZWN0XG4gICAgdmFyIHRlbXBsYXRlT2JqZWN0ID0gbmV3IGNvbXByZXNzb3JzLnRlbXBsYXRlLk9iamVjdChhcnJheVswXSwgYXJyYXlbMV0pO1xuICAgIC8vIENvbXByZXNzIHRlbXBsYXRlIGlzIHRlbXBsYXRpbmdcbiAgICBpZiAodGVtcGxhdGVPYmplY3QuaXNUZW1wbGF0aW5nKSB7XG4gICAgICAgIHRlbXBsYXRlT2JqZWN0LmNvbXByZXNzVGVtcGxhdGUoY29tcHJlc3NvcnMsIGNvbnRleHQsIGludmVydGVkSW5kZXgsIHBhcmVudFdyaXRlciwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBhcnJheVtpXTtcbiAgICAgICAgYXJyYXlJdGVtV3JpdGVyLnZhbHVlID0gJyc7XG4gICAgICAgIC8vIE1ha2UgdW5kZWZpbmVkIGVsZW1lbnRzIGludG8gbnVsbCB2YWx1ZXNcbiAgICAgICAgaWYgKGl0ZW0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaXRlbSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGV0ZXJtaW5lIGlmIHN0aWxsIHRlbXBsYXRpbmcgYWZ0ZXIgdGhlIHR3byBmaXJzdCBlbGVtZW50c1xuICAgICAgICBpZiAoaSA+IDEgJiYgdGVtcGxhdGVPYmplY3QuaXNUZW1wbGF0aW5nKSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZU9iamVjdC5pc05leHRUZW1wbGF0ZWFibGUoYXJyYXlbaV0sIHBhcmVudFdyaXRlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRlbXBsYXRlT2JqZWN0LmlzVGVtcGxhdGluZykge1xuICAgICAgICAgICAgLy8gQ29tcHJlc3MgdGVtcGxhdGUgdmFsdWVzIGlmIHRlbXBsYXRpbmdcbiAgICAgICAgICAgIHRlbXBsYXRlT2JqZWN0LmNvbXByZXNzVGVtcGxhdGVWYWx1ZXMoY29tcHJlc3NvcnMsIGNvbnRleHQsIGludmVydGVkSW5kZXgsIGFycmF5SXRlbVdyaXRlciwgb3B0aW9ucywgYXJyYXlbaV0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gQ29tcHJlc3MgYW55IGVsZW1lbnQgb3RoZXJ3aXNlXG4gICAgICAgICAgICBjb21wcmVzc29ycy5hbnkoY29tcHJlc3NvcnMsIGNvbnRleHQsIGl0ZW0sIGludmVydGVkSW5kZXgsIGFycmF5SXRlbVdyaXRlciwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2hlY2sgaWYgd2Ugd3JvdGUgYW4gaWRlbnRpY2FsIGVsZW1lbnRzXG4gICAgICAgIGlmIChhcnJheUl0ZW1Xcml0ZXIudmFsdWUgPT09IHByZXZpb3VzSXRlbSkge1xuICAgICAgICAgICAgLy8gQ291bnQgcmVwZXRpdGlvbnMgYW5kIHNlZSBpZiB3ZSByZXBlYXRlZCBlbm91Z2ggdG8gdXNlIGEgbWFueSB0b2tlblxuICAgICAgICAgICAgcmVwZWF0ZWRUaW1lcysrO1xuICAgICAgICAgICAgaWYgKHJlcGVhdGVkVGltZXMgPj0gY29uc3RhbnRzXzEuQVJSQVlfUkVQRUFUX0NPVU5UX1RIUkVTSE9MRCkge1xuICAgICAgICAgICAgICAgIC8vIFdyaXRlIGEgbWFueSB0b2tlbiBpZiBuZWVkZWQgYW5kIGNvdW50IGhvdyBtYW55IFwibWFueVwiLXRpbWVzIHdlIHJlcGVhdGVkXG4gICAgICAgICAgICAgICAgaWYgKHJlcGVhdE1hbnlDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRXcml0ZXIud3JpdGUoY29uc3RhbnRzXzEuQVJSQVlfUkVQRUFUX01BTllfVE9LRU4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXBlYXRNYW55Q291bnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gc3RhbmRhcmQgcmVwZWF0IHRva2VuXG4gICAgICAgICAgICAgICAgcGFyZW50V3JpdGVyLndyaXRlKGNvbnN0YW50c18xLkFSUkFZX1JFUEVBVF9UT0tFTik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXBlYXRlZFRpbWVzID0gMDtcbiAgICAgICAgICAgIGlmIChyZXBlYXRNYW55Q291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgcmVwZWF0ZWQgbWFueSB0aW1lcywgd3JpdGUgdGhlIGNvdW50IGJlZm9yZSB0aGUgbmV4dCBlbGVtZW50XG4gICAgICAgICAgICAgICAgcGFyZW50V3JpdGVyLndyaXRlKHV0aWxfMS5jb21wcmVzc0ludGVnZXIocmVwZWF0TWFueUNvdW50KSk7XG4gICAgICAgICAgICAgICAgcmVwZWF0TWFueUNvdW50ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmVudFdyaXRlci53cml0ZShhcnJheUl0ZW1Xcml0ZXIudmFsdWUpO1xuICAgICAgICAgICAgcHJldmlvdXNJdGVtID0gYXJyYXlJdGVtV3JpdGVyLnZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIElmIHN0aWxsIHJlcGVhdGluZyBtYXksIHdyaXRlIHRoZSBmaW5hbCByZXBlYXQgY291bnRcbiAgICBpZiAocmVwZWF0TWFueUNvdW50ID4gMCkge1xuICAgICAgICBwYXJlbnRXcml0ZXIud3JpdGUodXRpbF8xLmNvbXByZXNzSW50ZWdlcihyZXBlYXRNYW55Q291bnQpKTtcbiAgICB9XG4gICAgLy8gRmluYWxpemUgdGVtcGxhdGUgb2JqZWN0IGlmIHN0aWxsIHRlbXBsYXRpbmdcbiAgICBpZiAodGVtcGxhdGVPYmplY3QuaXNUZW1wbGF0aW5nKSB7XG4gICAgICAgIHRlbXBsYXRlT2JqZWN0LmVuZChwYXJlbnRXcml0ZXIpO1xuICAgIH1cbiAgICBwYXJlbnRXcml0ZXIud3JpdGUoY29uc3RhbnRzXzEuQVJSQVlfRU5EX1RPS0VOKTtcbiAgICBjb250ZXh0LmFycmF5TGV2ZWwtLTtcbn1cbmV4cG9ydHMuY29tcHJlc3NBcnJheSA9IGNvbXByZXNzQXJyYXk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcnJheS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG52YXIgdXRpbF8xID0gcmVxdWlyZShcIi4uL3V0aWxcIik7XG4vKipcbiAqIENvbXByZXNzIHN0cmluZyB0b1xuICovXG5mdW5jdGlvbiBjb21wcmVzc1N0cmluZyhjb21wcmVzc29ycywgY29udGV4dCwgb2JqLCBpbnZlcnRlZEluZGV4LCB3cml0ZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgZm91bmRSZWY7XG4gICAgLy9cbiAgICB2YXIgc3RyaW5nSWRlbnQgPSBjb25zdGFudHNfMS5TVFJJTkdfSURFTlRfUFJFRklYICsgb2JqO1xuICAgIC8vIERldGVjdCBpZiBzdHJpbmcgaXMgdXRjIHRpbWVzdGFtcCBpZiBlbmFibGVkXG4gICAgaWYgKG9wdGlvbnMuZGV0ZWN0VXRjVGltZXN0YW1wcyAmJiBvYmpbb2JqLmxlbmd0aCAtIDFdID09PSAnWicgJiYgb2JqLm1hdGNoKGNvbnN0YW50c18xLkRBVEVfUkVHRVgpKSB7XG4gICAgICAgIHZhciBkYXRlID0gRGF0ZS5wYXJzZShvYmopO1xuICAgICAgICBjb21wcmVzc29ycy5kYXRlKGNvbXByZXNzb3JzLCBjb250ZXh0LCBkYXRlLCBpbnZlcnRlZEluZGV4LCB3cml0ZXIsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBlbHNlIGlmICgoZm91bmRSZWYgPSBpbnZlcnRlZEluZGV4LnN0cmluZ01hcFtzdHJpbmdJZGVudF0pICE9PSB2b2lkIDApIHtcbiAgICAgICAgd3JpdGVyLndyaXRlKFwiXCIgKyBjb25zdGFudHNfMS5SRUZfU1RSSU5HX1RPS0VOICsgZm91bmRSZWYpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIHJlZiA9IHV0aWxfMS5jb21wcmVzc0ludGVnZXIoaW52ZXJ0ZWRJbmRleC5zdHJpbmdDb3VudCk7XG4gICAgICAgIHZhciBuZXdSZWYgPSBcIlwiICsgY29uc3RhbnRzXzEuU1RSSU5HX1RPS0VOICsgb2JqLnJlcGxhY2UoY29uc3RhbnRzXzEuUkVHRVhfRVNDQVBFX0NIQVJBQ1RFUiwgY29uc3RhbnRzXzEuRVNDQVBFX0NIQVJBQ1RFUiArIGNvbnN0YW50c18xLkVTQ0FQRV9DSEFSQUNURVIpLnJlcGxhY2UoY29uc3RhbnRzXzEuUkVHRVhfU1RSSU5HX1RPS0VOLCBjb25zdGFudHNfMS5FU0NBUEVEX1NUUklOR19UT0tFTikgKyBjb25zdGFudHNfMS5TVFJJTkdfVE9LRU47XG4gICAgICAgIGlmIChyZWYubGVuZ3RoICsgY29uc3RhbnRzXzEuUkVGRVJFTkNFX0hFQURFUl9MRU5HVEggKyAxIDwgbmV3UmVmLmxlbmd0aCkge1xuICAgICAgICAgICAgaW52ZXJ0ZWRJbmRleC5zdHJpbmdNYXBbc3RyaW5nSWRlbnRdID0gcmVmO1xuICAgICAgICAgICAgaW52ZXJ0ZWRJbmRleC5zdHJpbmdDb3VudCsrO1xuICAgICAgICAgICAgd3JpdGVyLndyaXRlKG5ld1JlZik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB3cml0ZXIud3JpdGUoXCJcIiArIGNvbnN0YW50c18xLlVOUkVGRVJFTkNFRF9TVFJJTkdfVE9LRU4gKyBvYmoucmVwbGFjZShjb25zdGFudHNfMS5SRUdFWF9FU0NBUEVfQ0hBUkFDVEVSLCBjb25zdGFudHNfMS5FU0NBUEVfQ0hBUkFDVEVSICsgY29uc3RhbnRzXzEuRVNDQVBFX0NIQVJBQ1RFUikucmVwbGFjZShjb25zdGFudHNfMS5SRUdFWF9VTlJFRkVSRU5DRURfU1RSSU5HX1RPS0VOLCBjb25zdGFudHNfMS5FU0NBUEVEX1VOUkVGRVJFTkNFRF9TVFJJTkdfVE9LRU4pICsgY29uc3RhbnRzXzEuVU5SRUZFUkVOQ0VEX1NUUklOR19UT0tFTik7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLmNvbXByZXNzU3RyaW5nID0gY29tcHJlc3NTdHJpbmc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJpbmcuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xudmFyIHV0aWxfMSA9IHJlcXVpcmUoXCIuLi91dGlsXCIpO1xuLyoqXG4gKiBDb21wcmVzcyBudW1iZXIgKGludGVnZXIgb3IgZmxvYXQpIHRvIHdyaXRlclxuICovXG5mdW5jdGlvbiBjb21wcmVzc051bWJlcihjb21wcmVzc29ycywgY29udGV4dCwgb2JqLCBpbnZlcnRlZEluZGV4LCB3cml0ZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgZm91bmRSZWY7XG4gICAgaWYgKG9iaiAlIDEgPT09IDApIHtcbiAgICAgICAgLy8gQ0hlY2sgaWYgdGhlIHZhbHVlIGlzIGEgc21hbGwgaW50ZWdlclxuICAgICAgICBpZiAob2JqIDwgY29uc3RhbnRzXzEuSU5URUdFUl9TTUFMTF9FWENMVVNJVkVfQk9VTkRfVVBQRVIgJiYgb2JqID4gY29uc3RhbnRzXzEuSU5URUdFUl9TTUFMTF9FWENMVVNJVkVfQk9VTkRfTE9XRVIpIHtcbiAgICAgICAgICAgIHdyaXRlci53cml0ZShjb25zdGFudHNfMS5JTlRFR0VSX1NNQUxMX1RPS0VOU1tvYmogKyBjb25zdGFudHNfMS5JTlRFR0VSX1NNQUxMX1RPS0VOX0VMRU1FTlRfT0ZGU0VUXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKGZvdW5kUmVmID0gaW52ZXJ0ZWRJbmRleC5pbnRlZ2VyTWFwW29ial0pICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHdyaXRlci53cml0ZShcIlwiICsgY29uc3RhbnRzXzEuUkVGX0lOVEVHRVJfVE9LRU4gKyBmb3VuZFJlZik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgcmVmID0gdXRpbF8xLmNvbXByZXNzSW50ZWdlcihpbnZlcnRlZEluZGV4LmludGVnZXJDb3VudCk7XG4gICAgICAgICAgICB2YXIgY29tcHJlc3NlZEludGVnZXIgPSB1dGlsXzEuY29tcHJlc3NJbnRlZ2VyKG9iaik7XG4gICAgICAgICAgICB2YXIgbmV3UmVmID0gXCJcIiArIGNvbnN0YW50c18xLklOVEVHRVJfVE9LRU4gKyBjb21wcmVzc2VkSW50ZWdlcjtcbiAgICAgICAgICAgIGlmIChyZWYubGVuZ3RoICsgY29uc3RhbnRzXzEuUkVGRVJFTkNFX0hFQURFUl9MRU5HVEggPCBuZXdSZWYubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaW52ZXJ0ZWRJbmRleC5pbnRlZ2VyTWFwW29ial0gPSByZWY7XG4gICAgICAgICAgICAgICAgaW52ZXJ0ZWRJbmRleC5pbnRlZ2VyQ291bnQrKztcbiAgICAgICAgICAgICAgICB3cml0ZXIud3JpdGUobmV3UmVmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHdyaXRlci53cml0ZShcIlwiICsgY29uc3RhbnRzXzEuVU5SRUZFUkVOQ0VEX0lOVEVHRVJfVE9LRU4gKyBjb21wcmVzc2VkSW50ZWdlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIENvbXByZXNzIGZsb2F0IHByaW9yIHRvIGxvb2t1cCB0byByZXVzZSBmb3IgXCJzYW1lXCIgZmxvYXRpbmcgdmFsdWVzXG4gICAgICAgIHZhciBjb21wcmVzc2VkRmxvYXQgPSB1dGlsXzEuY29tcHJlc3NGbG9hdChvYmosIG9wdGlvbnMuZnVsbFByZWNpc2lvbkZsb2F0cyk7XG4gICAgICAgIGlmICgoZm91bmRSZWYgPSBpbnZlcnRlZEluZGV4LmZsb2F0TWFwW2NvbXByZXNzZWRGbG9hdF0pICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHdyaXRlci53cml0ZShcIlwiICsgY29uc3RhbnRzXzEuUkVGX0ZMT0FUX1RPS0VOICsgZm91bmRSZWYpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIHJlZiA9IHV0aWxfMS5jb21wcmVzc0ludGVnZXIoaW52ZXJ0ZWRJbmRleC5mbG9hdENvdW50KTtcbiAgICAgICAgICAgIHZhciBuZXdSZWYgPSBcIlwiICsgY29uc3RhbnRzXzEuRkxPQVRfVE9LRU4gKyBjb21wcmVzc2VkRmxvYXQ7XG4gICAgICAgICAgICBpZiAocmVmLmxlbmd0aCArIGNvbnN0YW50c18xLlJFRkVSRU5DRV9IRUFERVJfTEVOR1RIIDwgbmV3UmVmLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGludmVydGVkSW5kZXguZmxvYXRNYXBbY29tcHJlc3NlZEZsb2F0XSA9IHJlZjtcbiAgICAgICAgICAgICAgICBpbnZlcnRlZEluZGV4LmZsb2F0Q291bnQrKztcbiAgICAgICAgICAgICAgICB3cml0ZXIud3JpdGUobmV3UmVmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHdyaXRlci53cml0ZShcIlwiICsgY29uc3RhbnRzXzEuVU5SRUZFUkVOQ0VEX0ZMT0FUX1RPS0VOICsgY29tcHJlc3NlZEZsb2F0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuY29tcHJlc3NOdW1iZXIgPSBjb21wcmVzc051bWJlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW51bWJlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG4vKipcbiAqIENvbXByZXNzIG9iamVjdCB0byB3cml0ZXJcbiAqL1xuZnVuY3Rpb24gY29tcHJlc3NPYmplY3QoY29tcHJlc3NvcnMsIGNvbnRleHQsIG9iaiwgaW52ZXJ0ZWRJbmRleCwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgd3JpdGVyLndyaXRlKGNvbnN0YW50c18xLk9CSkVDVF9TVEFSVF9UT0tFTik7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIC8vIENyZWF0ZSBhIHRlbXBsYXRlIG9iamVjdCBmb3IgZmlyc3QgdHdvIGtleXMgaW4gb2JqZWN0XG4gICAgdmFyIHRlbXBsYXRlT2JqZWN0ID0gbmV3IGNvbXByZXNzb3JzLnRlbXBsYXRlLk9iamVjdChvYmpba2V5c1swXV0sIG9ialtrZXlzWzFdXSk7XG4gICAgLy8gQ29tcHJlc3MgdGVtcGxhdGUgaXMgdGVtcGxhdGluZ1xuICAgIGlmICh0ZW1wbGF0ZU9iamVjdC5pc1RlbXBsYXRpbmcpIHtcbiAgICAgICAgdGVtcGxhdGVPYmplY3QuY29tcHJlc3NUZW1wbGF0ZShjb21wcmVzc29ycywgY29udGV4dCwgaW52ZXJ0ZWRJbmRleCwgd3JpdGVyLCBvcHRpb25zKTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIERldGVybWluZSBpZiBzdGlsbCB0ZW1wbGF0aW5nIGFmdGVyIHRoZSB0d28gZmlyc3Qga2V5c1xuICAgICAgICBpZiAoaSA+IDEgJiYgdGVtcGxhdGVPYmplY3QuaXNUZW1wbGF0aW5nKSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZU9iamVjdC5pc05leHRUZW1wbGF0ZWFibGUob2JqW2tleXNbaV1dLCB3cml0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0ZW1wbGF0ZU9iamVjdC5pc1RlbXBsYXRpbmcpIHtcbiAgICAgICAgICAgIC8vIENvbXByZXNzIGlkIGFuZCB0ZW1wbGF0ZSB2YWx1ZXMgaWYgdGVtcGxhdGluZ1xuICAgICAgICAgICAgY29tcHJlc3NvcnMuc3RyaW5nKGNvbXByZXNzb3JzLCBjb250ZXh0LCBrZXlzW2ldLCBpbnZlcnRlZEluZGV4LCB3cml0ZXIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdGVtcGxhdGVPYmplY3QuY29tcHJlc3NUZW1wbGF0ZVZhbHVlcyhjb21wcmVzc29ycywgY29udGV4dCwgaW52ZXJ0ZWRJbmRleCwgd3JpdGVyLCBvcHRpb25zLCBvYmpba2V5c1tpXV0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gQ29tcHJlc3Mgb2JqZWN0IGtleSBhbmQgdmFsdWUgaWYgbm90IHRlbXBsYXRpbmdcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgdmFyIHZhbCA9IG9ialtrZXldO1xuICAgICAgICAgICAgaWYgKHZhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29tcHJlc3NvcnMuc3RyaW5nKGNvbXByZXNzb3JzLCBjb250ZXh0LCBrZXksIGludmVydGVkSW5kZXgsIHdyaXRlciwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgY29tcHJlc3NvcnMuYW55KGNvbXByZXNzb3JzLCBjb250ZXh0LCB2YWwsIGludmVydGVkSW5kZXgsIHdyaXRlciwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgO1xuICAgIC8vIEZpbmFsaXplIHRlbXBsYXRlIG9iamVjdCBpZiBzdGlsbCB0ZW1wbGF0aW5nXG4gICAgaWYgKHRlbXBsYXRlT2JqZWN0LmlzVGVtcGxhdGluZykge1xuICAgICAgICB0ZW1wbGF0ZU9iamVjdC5lbmQod3JpdGVyKTtcbiAgICB9XG4gICAgd3JpdGVyLndyaXRlKGNvbnN0YW50c18xLk9CSkVDVF9FTkRfVE9LRU4pO1xufVxuZXhwb3J0cy5jb21wcmVzc09iamVjdCA9IGNvbXByZXNzT2JqZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JqZWN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcbnZhciB1dGlsXzEgPSByZXF1aXJlKFwiLi4vdXRpbFwiKTtcbi8qKlxuICogQ29tcHJlc3MgZGF0ZSAoYXMgdW5peCB0aW1lc3RhbXApIHRvIHdyaXRlclxuICovXG5mdW5jdGlvbiBjb21wcmVzc0RhdGUoY29tcHJlc3NvcnMsIGNvbnRleHQsIG9iaiwgaW52ZXJ0ZWRJbmRleCwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgdmFyIGZvdW5kUmVmO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZSBpZiB3ZSBzaG91bGQgcmVwcmVzZW50IHRoZSBkYXRlIHdpdGggbG93IHByZWNpc2lvblxuICAgICAqL1xuICAgIHZhciBsb3dQcmVjaXNpb25EYXRlID0gb2JqIC8gY29uc3RhbnRzXzEuREFURV9MT1dfUFJFQ0lTSU9OO1xuICAgIHZhciBpc0xvd1ByZWNpc2lvbiA9IGxvd1ByZWNpc2lvbkRhdGUgJSAxID09PSAwO1xuICAgIGlmIChpc0xvd1ByZWNpc2lvbikge1xuICAgICAgICBpZiAoKGZvdW5kUmVmID0gaW52ZXJ0ZWRJbmRleC5scERhdGVNYXBbbG93UHJlY2lzaW9uRGF0ZV0pICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHdyaXRlci53cml0ZShcIlwiICsgY29uc3RhbnRzXzEuUkVGX0xQX0RBVEVfVE9LRU4gKyBmb3VuZFJlZik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgcmVmID0gdXRpbF8xLmNvbXByZXNzSW50ZWdlcihpbnZlcnRlZEluZGV4LmxwRGF0ZUNvdW50KTtcbiAgICAgICAgICAgIHZhciBjb21wcmVzc2VkRGF0ZSA9IHV0aWxfMS5jb21wcmVzc0ludGVnZXIobG93UHJlY2lzaW9uRGF0ZSk7XG4gICAgICAgICAgICB2YXIgbmV3UmVmID0gXCJcIiArIGNvbnN0YW50c18xLkxQX0RBVEVfVE9LRU4gKyBjb21wcmVzc2VkRGF0ZTtcbiAgICAgICAgICAgIGlmIChyZWYubGVuZ3RoICsgY29uc3RhbnRzXzEuUkVGRVJFTkNFX0hFQURFUl9MRU5HVEggPCBuZXdSZWYubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaW52ZXJ0ZWRJbmRleC5scERhdGVNYXBbbG93UHJlY2lzaW9uRGF0ZV0gPSByZWY7XG4gICAgICAgICAgICAgICAgaW52ZXJ0ZWRJbmRleC5scERhdGVDb3VudCsrO1xuICAgICAgICAgICAgICAgIHdyaXRlci53cml0ZShuZXdSZWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgd3JpdGVyLndyaXRlKFwiXCIgKyBjb25zdGFudHNfMS5VTlJFRkVSRU5DRURfTFBfREFURV9UT0tFTiArIGNvbXByZXNzZWREYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKChmb3VuZFJlZiA9IGludmVydGVkSW5kZXguZGF0ZU1hcFtvYmpdKSAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICB3cml0ZXIud3JpdGUoXCJcIiArIGNvbnN0YW50c18xLlJFRl9EQVRFX1RPS0VOICsgZm91bmRSZWYpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIHJlZiA9IHV0aWxfMS5jb21wcmVzc0ludGVnZXIoaW52ZXJ0ZWRJbmRleC5kYXRlQ291bnQpO1xuICAgICAgICAgICAgdmFyIGNvbXByZXNzZWREYXRlID0gdXRpbF8xLmNvbXByZXNzSW50ZWdlcihvYmopO1xuICAgICAgICAgICAgdmFyIG5ld1JlZiA9IFwiXCIgKyBjb25zdGFudHNfMS5EQVRFX1RPS0VOICsgY29tcHJlc3NlZERhdGU7XG4gICAgICAgICAgICBpZiAocmVmLmxlbmd0aCArIGNvbnN0YW50c18xLlJFRkVSRU5DRV9IRUFERVJfTEVOR1RIIDwgbmV3UmVmLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGludmVydGVkSW5kZXguZGF0ZU1hcFtvYmpdID0gcmVmO1xuICAgICAgICAgICAgICAgIGludmVydGVkSW5kZXguZGF0ZUNvdW50Kys7XG4gICAgICAgICAgICAgICAgd3JpdGVyLndyaXRlKG5ld1JlZik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB3cml0ZXIud3JpdGUoXCJcIiArIGNvbnN0YW50c18xLlVOUkVGRVJFTkNFRF9EQVRFX1RPS0VOICsgY29tcHJlc3NlZERhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5jb21wcmVzc0RhdGUgPSBjb21wcmVzc0RhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBEZXRlcm1pbmUgaWYgb2JqIGlzIGFuIG9iamVjdCBhY2NvcmRpbmcgdG8gc2VyaWFsaXphdGlvblxuICovXG5mdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiBvYmo7XG4gICAgaWYgKHR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIGlmIChvYmogPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIGlmIChvYmogaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSBpZiAob2JqID09PSB2b2lkIDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb25zdGFudHNcIik7XG52YXIgdXRpbF8xID0gcmVxdWlyZShcIi4uL3V0aWxcIik7XG52YXIgVGVtcGxhdGVPYmplY3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IHRlbXBsYXRlIG9iamVjdCBzdGFydGluZyB3aXRoIHR3byBpbml0aWFsIG9iamVjdCB0aGF0IG1pZ2h0IGhhdmUgYSBzaGFyZWQgc3RydWN0dXJlXG4gICAgICovXG4gICAgZnVuY3Rpb24gVGVtcGxhdGVPYmplY3QoYSwgYikge1xuICAgICAgICB0aGlzLmlzVGVtcGxhdGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN0cnVjdCA9IFtdO1xuICAgICAgICBpZiAoYSAhPSBudWxsICYmIGIgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5pc1RlbXBsYXRpbmcgPSBidWlsZFRlbXBsYXRlKGEsIGIsIHRoaXMuc3RydWN0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wcmVzcyB0ZW1wbGF0ZSB0byB3cml0ZXJcbiAgICAgKi9cbiAgICBUZW1wbGF0ZU9iamVjdC5wcm90b3R5cGUuY29tcHJlc3NUZW1wbGF0ZSA9IGZ1bmN0aW9uIChjb21wcmVzc29ycywgY29udGV4dCwgaW52ZXJ0ZWRJbmRleCwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbXByZXNPYmplY3RUZW1wbGF0ZShjb21wcmVzc29ycywgY29udGV4dCwgaW52ZXJ0ZWRJbmRleCwgd3JpdGVyLCBvcHRpb25zLCB0aGlzLnN0cnVjdCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb21wcmVzcyBvYmplY3QgdmFsdWVzIGFjY29yZGluZyB0byBzdHJ1Y3R1cmUgdG8gd3JpdGVyXG4gICAgICovXG4gICAgVGVtcGxhdGVPYmplY3QucHJvdG90eXBlLmNvbXByZXNzVGVtcGxhdGVWYWx1ZXMgPSBmdW5jdGlvbiAoY29tcHJlc3NvcnMsIGNvbnRleHQsIGludmVydGVkSW5kZXgsIHdyaXRlciwgb3B0aW9ucywgb2JqKSB7XG4gICAgICAgIGNvbXByZXNzT2JqZWN0VmFsdWVzKGNvbXByZXNzb3JzLCBjb250ZXh0LCBpbnZlcnRlZEluZGV4LCB3cml0ZXIsIG9wdGlvbnMsIHRoaXMuc3RydWN0LCBvYmopO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lIGlmIG9iamVjdCBpcyB0ZW1wbGF0ZWFibGUgYWNjb3JkaW5nIHRvIGV4aXN0aW5nIHN0cnVjdHVyZVxuICAgICAqIElmIG5vdCB0aGUgYW4gZW5kaW5nIHRva2VuIHdpbGwgYmUgd3JpdHRlbiB0byB3cml0ZXJcbiAgICAgKi9cbiAgICBUZW1wbGF0ZU9iamVjdC5wcm90b3R5cGUuaXNOZXh0VGVtcGxhdGVhYmxlID0gZnVuY3Rpb24gKG9iaiwgd3JpdGVyKSB7XG4gICAgICAgIHRoaXMuaXNUZW1wbGF0aW5nID0gY29uZm9ybXNUb1N0cnVjdHVyZSh0aGlzLnN0cnVjdCwgb2JqKTtcbiAgICAgICAgaWYgKCF0aGlzLmlzVGVtcGxhdGluZykge1xuICAgICAgICAgICAgd3JpdGVyLndyaXRlKGNvbnN0YW50c18xLlRFTVBMQVRFX09CSkVDVF9GSU5BTCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEZpbmFsaXplIHRlbXBsYXRlIG9iamVjdCBhbmQgd3JpdGUgZW5kaW5nIHRva2VuXG4gICAgICovXG4gICAgVGVtcGxhdGVPYmplY3QucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uICh3cml0ZXIpIHtcbiAgICAgICAgd3JpdGVyLndyaXRlKGNvbnN0YW50c18xLlRFTVBMQVRFX09CSkVDVF9GSU5BTCk7XG4gICAgfTtcbiAgICByZXR1cm4gVGVtcGxhdGVPYmplY3Q7XG59KCkpO1xuZXhwb3J0cy5UZW1wbGF0ZU9iamVjdCA9IFRlbXBsYXRlT2JqZWN0O1xuLyoqXG4gKiBCdWlsZCBhIHNoYXJlZCB0ZW1wbGF0ZSBzdHJ1Y3R1cmUgZm9yIHR3byBvYmplY3RzLCByZXR1cm5zIHRydWUgaWYgdGhleSBzdHJpY3RseSBzaGFyZSBhIHN0cnVjdHJlXG4gKiBvciBmYWxzZSBpZiBub3QgYW5kIGEgc2hhcmVkIHRlbXBsYXRlIHN0cnVjdHVyZSBjb3VsZCBub3QgYmUgYnVpbHRcbiAqL1xuZnVuY3Rpb24gYnVpbGRUZW1wbGF0ZShhLCBiLCBzdHJ1Y3QsIGxldmVsKSB7XG4gICAgaWYgKGxldmVsID09PSB2b2lkIDApIHsgbGV2ZWwgPSAwOyB9XG4gICAgLy8gRG8gbm90IGNoZWNrIGRlZXBlciB0aGFuIDYgbGV2ZWxzXG4gICAgaWYgKGxldmVsID4gNikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKGEpO1xuICAgIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKGIpO1xuICAgIC8vIElmIHRoZXkgZG8gbm90IGhhdmUgdGhlIHNhbWUgYW1vdW50IG9mIGtleXMsIGl0IGlzIG5vdCBhIHNoYXJlZCBzdHJ1Y3R1cmVcbiAgICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBEbyBub3QgdHJ5IHRvIGZpbmQgYSBzaGFyZWQgc3RydWN0dXJlIGlmIHRoZXJlIGlzIG1vcmUgdGhhbiAxMCBrZXlzIGZvciBvbmUgbGV2ZWxcbiAgICBpZiAoa2V5c0EubGVuZ3RoID4gMTApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBTb3J0IGtleXMgdG8gYXNzZXJ0IHN0cnVjdHVyYWwgZXF1YWxpdHlcbiAgICBrZXlzQS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmxvY2FsZUNvbXBhcmUoYik7IH0pO1xuICAgIGtleXNCLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEubG9jYWxlQ29tcGFyZShiKTsgfSk7XG4gICAgLy8gQ2hlY2sgZWFjaCBrZXkgZm9yIHN0cnVjdHVyYWwgZXF1YWxpdHlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBrZXlBID0ga2V5c0FbaV07XG4gICAgICAgIHZhciBrZXlCID0ga2V5c0JbaV07XG4gICAgICAgIC8vIElmIHRoZSBrZXlzIGRvIG5vdCBzaGFyZSB0aGUgc2FtZSBpZGVudGlmaWVyLCB0aGV5IGFyZSBub3Qgc3RydWN0dXJhbGx5IGVxdWFsXG4gICAgICAgIGlmIChrZXlBICE9PSBrZXlCKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhbHVlQSA9IGFba2V5QV07XG4gICAgICAgIHZhciB2YWx1ZUIgPSBiW2tleUJdO1xuICAgICAgICAvLyBDaGVjayBpZiB0aGUga2V5IGlzIGFuIG9iamVjdFxuICAgICAgICBpZiAodXRpbF8xLmlzT2JqZWN0KHZhbHVlQSkpIHtcbiAgICAgICAgICAgIGlmICghdXRpbF8xLmlzT2JqZWN0KHZhbHVlQikpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBhIGlzIGFuIG9iamVjdCBhIGIgaXMgbm90LCB0aGV5IGFyZSBub3Qgc3RydWN0dXJhbGx5IGVxdWFsXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgc3Vic3RydWN0dXJlIGZvciBuZXN0ZWQgb2JqZWN0XG4gICAgICAgICAgICB2YXIgbmV4dFN0cnVjdCA9IFtdO1xuICAgICAgICAgICAgLy8gQWRkIGtleSBhbmQgc3Vic3RydWN0dXJlIHRvIHBhcmVudCBzdHJ1Y3R1cmVcbiAgICAgICAgICAgIHN0cnVjdC5wdXNoKFtrZXlBLCBuZXh0U3RydWN0XSk7XG4gICAgICAgICAgICAvLyBDaGVjayBuZXN0ZWQgb2JqZWN0cyBmb3Igc3RydWN0dXJhbCBlcXVhbGl0eVxuICAgICAgICAgICAgaWYgKCFidWlsZFRlbXBsYXRlKHZhbHVlQSwgdmFsdWVCLCBuZXh0U3RydWN0LCBsZXZlbCArIDEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHV0aWxfMS5pc09iamVjdCh2YWx1ZUIpKSB7XG4gICAgICAgICAgICAvLyBJZiBhIGlzIG5vdCBhbiBvYmplY3QgYW5kIGIgaXMsIHRoZXkgYXJlIG5vdCBzdHJ1Y3R1cmFsbHkgZXF1YWxcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN0cnVjdC5wdXNoKFtrZXlBXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gSWYgbm90IG9uIHJvb3QgbGV2ZWwgb3Igcm9vdCBsZXZlbCBpcyBzdHJ1Y3R1cmFsbHkgZXF1YWwgb2JqZWN0cyB0aGV5IGFyZSBjb25zaWRlcmVkIHN0cnVjdHVyYWxseSBlcXVhbFxuICAgIHJldHVybiBsZXZlbCA+IDAgfHwgdXRpbF8xLmlzT2JqZWN0KGEpO1xufVxuLyoqXG4gKiBDaGVjayBpZiBhbiBvYmplY3QgY29uZm9ybXMgdG8gYW4gZXhpc3Rpbmcgc3RydWN0dXJlXG4gKi9cbmZ1bmN0aW9uIGNvbmZvcm1zVG9TdHJ1Y3R1cmUoc3RydWN0LCBvYmopIHtcbiAgICBpZiAoIW9iaikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChPYmplY3Qua2V5cyhvYmopLmxlbmd0aCAhPT0gc3RydWN0Lmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RydWN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBzdHJ1Y3RbaV1bMF07XG4gICAgICAgIHZhciBpc05lc3RlZCA9IHN0cnVjdFtpXS5sZW5ndGggPiAxO1xuICAgICAgICBpZiAob2JqW2tleV0gPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc05lc3RlZCkge1xuICAgICAgICAgICAgdmFyIHggPSBzdHJ1Y3RbaV07XG4gICAgICAgICAgICB2YXIgeSA9IHhbMV07XG4gICAgICAgICAgICBpZiAoIWNvbmZvcm1zVG9TdHJ1Y3R1cmUoc3RydWN0W2ldWzFdLCBvYmpba2V5XSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodXRpbF8xLmlzT2JqZWN0KG9ialtrZXldKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8qKlxuICogQ29tcHJlc3MgYW4gb2JqZWN0IHRlbXBsYXRlIHRvIHdyaXRlclxuICovXG5mdW5jdGlvbiBjb21wcmVzT2JqZWN0VGVtcGxhdGUoY29tcHJlc3NvcnMsIGNvbnRleHQsIGludmVydGVkSW5kZXgsIHdyaXRlciwgb3B0aW9ucywgc3RydWN0KSB7XG4gICAgd3JpdGVyLndyaXRlKGNvbnN0YW50c18xLlRFTVBMQVRFX09CSkVDVF9TVEFSVCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJ1Y3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGtleSA9IHN0cnVjdFtpXVswXTtcbiAgICAgICAgdmFyIGlzTmVzdGVkID0gc3RydWN0W2ldLmxlbmd0aCA+IDE7XG4gICAgICAgIGNvbXByZXNzb3JzLnN0cmluZyhjb21wcmVzc29ycywgY29udGV4dCwga2V5LCBpbnZlcnRlZEluZGV4LCB3cml0ZXIsIG9wdGlvbnMpO1xuICAgICAgICBpZiAoaXNOZXN0ZWQpIHtcbiAgICAgICAgICAgIGNvbXByZXNPYmplY3RUZW1wbGF0ZShjb21wcmVzc29ycywgY29udGV4dCwgaW52ZXJ0ZWRJbmRleCwgd3JpdGVyLCBvcHRpb25zLCBzdHJ1Y3RbaV1bMV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIDtcbiAgICB3cml0ZXIud3JpdGUoY29uc3RhbnRzXzEuVEVNUExBVEVfT0JKRUNUX0VORCk7XG59XG4vKipcbiAqIENvbXByZXNzIG9iamVjdCB2YWx1ZXMgYWNjb3JkaW5nIHRvIHByb3ZpZGVkIHN0cnVjdHVyZSB0byB3cml0ZXJcbiAqL1xuZnVuY3Rpb24gY29tcHJlc3NPYmplY3RWYWx1ZXMoY29tcHJlc3NvcnMsIGNvbnRleHQsIGludmVydGVkSW5kZXgsIHdyaXRlciwgb3B0aW9ucywgc3RydWN0LCBvYmopIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cnVjdC5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIga2V5ID0gc3RydWN0W2ldWzBdO1xuICAgICAgICB2YXIgdmFsdWUgPSBvYmpba2V5XTtcbiAgICAgICAgdmFyIGlzTmVzdGVkID0gc3RydWN0W2ldLmxlbmd0aCA+IDE7XG4gICAgICAgIGlmIChpc05lc3RlZCkge1xuICAgICAgICAgICAgY29tcHJlc3NPYmplY3RWYWx1ZXMoY29tcHJlc3NvcnMsIGNvbnRleHQsIGludmVydGVkSW5kZXgsIHdyaXRlciwgb3B0aW9ucywgc3RydWN0W2ldWzFdLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb21wcmVzc29ycy5hbnkoY29tcHJlc3NvcnMsIGNvbnRleHQsIHZhbHVlLCBpbnZlcnRlZEluZGV4LCB3cml0ZXIsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9iamVjdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBhbnlfMSA9IHJlcXVpcmUoXCIuL2NvbXByZXNzb3IvYW55XCIpO1xudmFyIGFycmF5XzEgPSByZXF1aXJlKFwiLi9jb21wcmVzc29yL2FycmF5XCIpO1xudmFyIHN0cmluZ18xID0gcmVxdWlyZShcIi4vY29tcHJlc3Nvci9zdHJpbmdcIik7XG52YXIgbnVtYmVyXzEgPSByZXF1aXJlKFwiLi9jb21wcmVzc29yL251bWJlclwiKTtcbnZhciBvYmplY3RfMSA9IHJlcXVpcmUoXCIuL2NvbXByZXNzb3Ivb2JqZWN0XCIpO1xudmFyIGRhdGVfMSA9IHJlcXVpcmUoXCIuL2NvbXByZXNzb3IvZGF0ZVwiKTtcbnZhciBvYmplY3RfMiA9IHJlcXVpcmUoXCIuL2NvbXByZXNzb3IvdGVtcGxhdGUvb2JqZWN0XCIpO1xudmFyIGNvbXByZXNzb3JzID0ge1xuICAgIGFueTogYW55XzEuY29tcHJlc3NBbnksXG4gICAgYXJyYXk6IGFycmF5XzEuY29tcHJlc3NBcnJheSxcbiAgICBvYmplY3Q6IG9iamVjdF8xLmNvbXByZXNzT2JqZWN0LFxuICAgIHN0cmluZzogc3RyaW5nXzEuY29tcHJlc3NTdHJpbmcsXG4gICAgZGF0ZTogZGF0ZV8xLmNvbXByZXNzRGF0ZSxcbiAgICBudW1iZXI6IG51bWJlcl8xLmNvbXByZXNzTnVtYmVyLFxuICAgIHRlbXBsYXRlOiB7XG4gICAgICAgIE9iamVjdDogb2JqZWN0XzIuVGVtcGxhdGVPYmplY3RcbiAgICB9XG59O1xuLyoqXG4gKiBDcmVhdGUgYSBuZXcgY29tcHJlc3Npb24gY29udGV4dFxuICovXG5mdW5jdGlvbiBtYWtlQ29tcHJlc3NDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFycmF5SXRlbVdyaXRlcnM6IFtdLFxuICAgICAgICBhcnJheUxldmVsOiAwLFxuICAgIH07XG59XG5leHBvcnRzLm1ha2VDb21wcmVzc0NvbnRleHQgPSBtYWtlQ29tcHJlc3NDb250ZXh0O1xuLyoqXG4gKiBDcmVhdGUgYW4gaW52ZXJ0ZWQgaW5kZXggZm9yIGNvbXByZXNzaW9uXG4gKi9cbmZ1bmN0aW9uIG1ha2VJbnZlcnRlZEluZGV4KCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0cmluZ01hcDoge30sXG4gICAgICAgIGludGVnZXJNYXA6IHt9LFxuICAgICAgICBmbG9hdE1hcDoge30sXG4gICAgICAgIGRhdGVNYXA6IHt9LFxuICAgICAgICBscERhdGVNYXA6IHt9LFxuICAgICAgICBzdHJpbmdDb3VudDogMCxcbiAgICAgICAgaW50ZWdlckNvdW50OiAwLFxuICAgICAgICBmbG9hdENvdW50OiAwLFxuICAgICAgICBkYXRlQ291bnQ6IDAsXG4gICAgICAgIGxwRGF0ZUNvdW50OiAwLFxuICAgIH07XG59XG5leHBvcnRzLm1ha2VJbnZlcnRlZEluZGV4ID0gbWFrZUludmVydGVkSW5kZXg7XG4vKipcbiAqIENvbXByZXNzIGFsbCBkYXRhIG9udG8gYSBwcm92aWRlZCB3cml0ZXJcbiAqL1xuZnVuY3Rpb24gY29tcHJlc3MoY29udGV4dCwgb2JqLCBpbnZlcnRlZEluZGV4LCB3cml0ZXIsIG9wdGlvbnMpIHtcbiAgICBjb21wcmVzc29ycy5hbnkoY29tcHJlc3NvcnMsIGNvbnRleHQsIG9iaiwgaW52ZXJ0ZWRJbmRleCwgd3JpdGVyLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuY29tcHJlc3MgPSBjb21wcmVzcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXByZXNzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TS0lQX1NDQUxBUiA9IHt9O1xuLyoqXG4gKiBUYXJnZXQgdHlwZSBkaWZmZXJlbnRpYXRvcnNcbiAqL1xudmFyIFRhcmdldFR5cGU7XG4oZnVuY3Rpb24gKFRhcmdldFR5cGUpIHtcbiAgICBUYXJnZXRUeXBlW1wiQVJSQVlcIl0gPSBcIkFSUkFZXCI7XG4gICAgVGFyZ2V0VHlwZVtcIk9CSkVDVFwiXSA9IFwiT0JKRUNUXCI7XG4gICAgVGFyZ2V0VHlwZVtcIlNDQUxBUlwiXSA9IFwiU0NBTEFSXCI7XG4gICAgVGFyZ2V0VHlwZVtcIlRFTVBMQVRFX09CSkVDVFwiXSA9IFwiVEVNUExBVEVfT0JKRUNUXCI7XG4gICAgVGFyZ2V0VHlwZVtcIlRFTVBMQVRFX09CSkVDVF9QUk9QRVJUSUVTXCJdID0gXCJURU1QTEFURV9PQkpFQ1RfUFJPUEVSVElFU1wiO1xuICAgIFRhcmdldFR5cGVbXCJURU1QTEFURV9PQkpFQ1RfRUxFTUVOVFNcIl0gPSBcIlRFTVBMQVRFX09CSkVDVF9FTEVNRU5UU1wiO1xufSkoVGFyZ2V0VHlwZSA9IGV4cG9ydHMuVGFyZ2V0VHlwZSB8fCAoZXhwb3J0cy5UYXJnZXRUeXBlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1vbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG52YXIgY29tbW9uXzEgPSByZXF1aXJlKFwiLi9jb21tb25cIik7XG52YXIgdXRpbF8xID0gcmVxdWlyZShcIi4uL3V0aWxcIik7XG5mdW5jdGlvbiBkZWNvbXByZXNzU2NhbGFyKHRva2VuLCBkYXRhLCBjdXJzb3IsIG9yZGVyZWRJbmRleCkge1xuICAgIHZhciBzdGFydEluZGV4ID0gY3Vyc29yLmluZGV4O1xuICAgIHZhciBlbmRJbmRleCA9IGN1cnNvci5pbmRleCArIDE7XG4gICAgLy8gRmluZCBlbmQgaW5kZXggb2YgdG9rZW4gdmFsdWVcbiAgICB2YXIgZm91bmRTdHJpbmdUb2tlbjtcbiAgICBpZiAoKCh0b2tlbiA9PT0gY29uc3RhbnRzXzEuU1RSSU5HX1RPS0VOKSAmJiAoZm91bmRTdHJpbmdUb2tlbiA9IGNvbnN0YW50c18xLlNUUklOR19UT0tFTikpXG4gICAgICAgIHx8ICgodG9rZW4gPT09IGNvbnN0YW50c18xLlVOUkVGRVJFTkNFRF9TVFJJTkdfVE9LRU4pICYmIChmb3VuZFN0cmluZ1Rva2VuID0gY29uc3RhbnRzXzEuVU5SRUZFUkVOQ0VEX1NUUklOR19UT0tFTikpKSB7XG4gICAgICAgIHZhciBlc2NhcGVkID0gdHJ1ZTtcbiAgICAgICAgd2hpbGUgKGVzY2FwZWQgJiYgZW5kSW5kZXggPCBkYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgZW5kSW5kZXggPSBkYXRhLmluZGV4T2YoZm91bmRTdHJpbmdUb2tlbiwgZW5kSW5kZXgpO1xuICAgICAgICAgICAgdmFyIGlOdW1Fc2NhcGVDaGFyYWN0ZXJzID0gMTtcbiAgICAgICAgICAgIGVzY2FwZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHdoaWxlIChkYXRhW2VuZEluZGV4IC0gaU51bUVzY2FwZUNoYXJhY3RlcnNdID09PSBjb25zdGFudHNfMS5FU0NBUEVfQ0hBUkFDVEVSKSB7XG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9IGlOdW1Fc2NhcGVDaGFyYWN0ZXJzICUgMiA9PT0gMTtcbiAgICAgICAgICAgICAgICBpTnVtRXNjYXBlQ2hhcmFjdGVycysrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW5kSW5kZXgrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5kSW5kZXggPD0gc3RhcnRJbmRleCkge1xuICAgICAgICAgICAgZW5kSW5kZXggPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgd2hpbGUgKCEoZGF0YS5jaGFyQ29kZUF0KGVuZEluZGV4KSA+IGNvbnN0YW50c18xLkRFTElNSVRJTkdfVE9LRU5TX1RIUkVTSE9MRCkgJiYgZW5kSW5kZXggPCBkYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgZW5kSW5kZXgrKztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWN1cnNvci5kcmFpbiAmJiBlbmRJbmRleCA9PT0gZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGNvbW1vbl8xLlNLSVBfU0NBTEFSO1xuICAgIH1cbiAgICAvLyBVcGRhdGUgY3Vyc29yIGVuZCBpbmRleFxuICAgIGN1cnNvci5pbmRleCA9IGVuZEluZGV4IC0gMTtcbiAgICB2YXIgdG9rZW5DaGFyQ29kZSA9IHRva2VuLmNoYXJDb2RlQXQoMCk7XG4gICAgLy8gRGVjb21wcmVzcyB0aGUgdG9rZW4gdmFsdWVcbiAgICBpZiAodG9rZW5DaGFyQ29kZSA+IGNvbnN0YW50c18xLklOVEVHRVJfU01BTExfVE9LRU5fRVhDTFVTSVZFX0JPVU5EX0xPV0VSICYmIHRva2VuQ2hhckNvZGUgPCBjb25zdGFudHNfMS5JTlRFR0VSX1NNQUxMX1RPS0VOX0VYQ0xVU0lWRV9CT1VORF9VUFBFUikge1xuICAgICAgICByZXR1cm4gdG9rZW5DaGFyQ29kZSArIGNvbnN0YW50c18xLklOVEVHRVJfU01BTExfVE9LRU5fT0ZGU0VUO1xuICAgIH1cbiAgICBlbHNlIGlmICh0b2tlbiA9PT0gY29uc3RhbnRzXzEuQVJSQVlfUkVQRUFUX01BTllfVE9LRU4pIHtcbiAgICAgICAgcmV0dXJuIHV0aWxfMS5kZWNvbXByZXNzSW50ZWdlcihkYXRhLnN1YnN0cmluZyhzdGFydEluZGV4ICsgMSwgZW5kSW5kZXgpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodG9rZW4gPT09IGNvbnN0YW50c18xLlJFRl9TVFJJTkdfVE9LRU4pIHtcbiAgICAgICAgcmV0dXJuIG9yZGVyZWRJbmRleC5zdHJpbmdzW3V0aWxfMS5kZWNvbXByZXNzSW50ZWdlcihkYXRhLnN1YnN0cmluZyhzdGFydEluZGV4ICsgMSwgZW5kSW5kZXgpKV07XG4gICAgfVxuICAgIGVsc2UgaWYgKHRva2VuID09PSBjb25zdGFudHNfMS5SRUZfSU5URUdFUl9UT0tFTikge1xuICAgICAgICByZXR1cm4gb3JkZXJlZEluZGV4LmludGVnZXJzW3V0aWxfMS5kZWNvbXByZXNzSW50ZWdlcihkYXRhLnN1YnN0cmluZyhzdGFydEluZGV4ICsgMSwgZW5kSW5kZXgpKV07XG4gICAgfVxuICAgIGVsc2UgaWYgKHRva2VuID09PSBjb25zdGFudHNfMS5SRUZfRkxPQVRfVE9LRU4pIHtcbiAgICAgICAgcmV0dXJuIG9yZGVyZWRJbmRleC5mbG9hdHNbdXRpbF8xLmRlY29tcHJlc3NJbnRlZ2VyKGRhdGEuc3Vic3RyaW5nKHN0YXJ0SW5kZXggKyAxLCBlbmRJbmRleCkpXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodG9rZW4gPT09IGNvbnN0YW50c18xLlJFRl9EQVRFX1RPS0VOKSB7XG4gICAgICAgIHJldHVybiBvcmRlcmVkSW5kZXguZGF0ZXNbdXRpbF8xLmRlY29tcHJlc3NJbnRlZ2VyKGRhdGEuc3Vic3RyaW5nKHN0YXJ0SW5kZXggKyAxLCBlbmRJbmRleCkpXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodG9rZW4gPT09IGNvbnN0YW50c18xLlJFRl9MUF9EQVRFX1RPS0VOKSB7XG4gICAgICAgIHJldHVybiBvcmRlcmVkSW5kZXgubHBEYXRlc1t1dGlsXzEuZGVjb21wcmVzc0ludGVnZXIoZGF0YS5zdWJzdHJpbmcoc3RhcnRJbmRleCArIDEsIGVuZEluZGV4KSldO1xuICAgIH1cbiAgICBlbHNlIGlmICh0b2tlbiA9PT0gY29uc3RhbnRzXzEuU1RSSU5HX1RPS0VOKSB7XG4gICAgICAgIHJldHVybiBvcmRlcmVkSW5kZXguc3RyaW5nc1tvcmRlcmVkSW5kZXguc3RyaW5ncy5sZW5ndGhdID0gZGF0YS5zdWJzdHJpbmcoc3RhcnRJbmRleCArIDEsIGVuZEluZGV4IC0gMSkucmVwbGFjZShjb25zdGFudHNfMS5SRUdFWF9FU0NBUEVEX0VTQ0FQRV9DSEFSQUNURVIsIGNvbnN0YW50c18xLkVTQ0FQRV9DSEFSQUNURVIpLnJlcGxhY2UoY29uc3RhbnRzXzEuUkVHRVhfRVNDQVBFRF9TVFJJTkdfVE9LRU4sIGNvbnN0YW50c18xLlNUUklOR19UT0tFTik7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRva2VuID09PSBjb25zdGFudHNfMS5JTlRFR0VSX1RPS0VOKSB7XG4gICAgICAgIHJldHVybiBvcmRlcmVkSW5kZXguaW50ZWdlcnNbb3JkZXJlZEluZGV4LmludGVnZXJzLmxlbmd0aF0gPSB1dGlsXzEuZGVjb21wcmVzc0ludGVnZXIoZGF0YS5zdWJzdHJpbmcoc3RhcnRJbmRleCArIDEsIGVuZEluZGV4KSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRva2VuID09PSBjb25zdGFudHNfMS5GTE9BVF9UT0tFTikge1xuICAgICAgICByZXR1cm4gb3JkZXJlZEluZGV4LmZsb2F0c1tvcmRlcmVkSW5kZXguZmxvYXRzLmxlbmd0aF0gPSB1dGlsXzEuZGVjb21wcmVzc0Zsb2F0KGRhdGEuc3Vic3RyaW5nKHN0YXJ0SW5kZXggKyAxLCBlbmRJbmRleCkpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0b2tlbiA9PT0gY29uc3RhbnRzXzEuREFURV9UT0tFTikge1xuICAgICAgICByZXR1cm4gb3JkZXJlZEluZGV4LmRhdGVzW29yZGVyZWRJbmRleC5kYXRlcy5sZW5ndGhdID0gbmV3IERhdGUodXRpbF8xLmRlY29tcHJlc3NJbnRlZ2VyKGRhdGEuc3Vic3RyaW5nKHN0YXJ0SW5kZXggKyAxLCBlbmRJbmRleCkpKS50b0lTT1N0cmluZygpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0b2tlbiA9PT0gY29uc3RhbnRzXzEuTFBfREFURV9UT0tFTikge1xuICAgICAgICByZXR1cm4gb3JkZXJlZEluZGV4LmxwRGF0ZXNbb3JkZXJlZEluZGV4LmxwRGF0ZXMubGVuZ3RoXSA9IG5ldyBEYXRlKGNvbnN0YW50c18xLkRBVEVfTE9XX1BSRUNJU0lPTiAqIHV0aWxfMS5kZWNvbXByZXNzSW50ZWdlcihkYXRhLnN1YnN0cmluZyhzdGFydEluZGV4ICsgMSwgZW5kSW5kZXgpKSkudG9JU09TdHJpbmcoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodG9rZW4gPT09IGNvbnN0YW50c18xLlVOUkVGRVJFTkNFRF9TVFJJTkdfVE9LRU4pIHtcbiAgICAgICAgcmV0dXJuIGRhdGEuc3Vic3RyaW5nKHN0YXJ0SW5kZXggKyAxLCBlbmRJbmRleCAtIDEpLnJlcGxhY2UoY29uc3RhbnRzXzEuUkVHRVhfRVNDQVBFRF9FU0NBUEVfQ0hBUkFDVEVSLCBjb25zdGFudHNfMS5FU0NBUEVfQ0hBUkFDVEVSKS5yZXBsYWNlKGNvbnN0YW50c18xLlJFR0VYX1VOUkVGRVJFTkNFRF9FU0NBUEVEX1NUUklOR19UT0tFTiwgY29uc3RhbnRzXzEuVU5SRUZFUkVOQ0VEX1NUUklOR19UT0tFTik7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRva2VuID09PSBjb25zdGFudHNfMS5VTlJFRkVSRU5DRURfSU5URUdFUl9UT0tFTikge1xuICAgICAgICByZXR1cm4gdXRpbF8xLmRlY29tcHJlc3NJbnRlZ2VyKGRhdGEuc3Vic3RyaW5nKHN0YXJ0SW5kZXggKyAxLCBlbmRJbmRleCkpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0b2tlbiA9PT0gY29uc3RhbnRzXzEuVU5SRUZFUkVOQ0VEX0ZMT0FUX1RPS0VOKSB7XG4gICAgICAgIHJldHVybiB1dGlsXzEuZGVjb21wcmVzc0Zsb2F0KGRhdGEuc3Vic3RyaW5nKHN0YXJ0SW5kZXggKyAxLCBlbmRJbmRleCkpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0b2tlbiA9PT0gY29uc3RhbnRzXzEuVU5SRUZFUkVOQ0VEX0RBVEVfVE9LRU4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHV0aWxfMS5kZWNvbXByZXNzSW50ZWdlcihkYXRhLnN1YnN0cmluZyhzdGFydEluZGV4ICsgMSwgZW5kSW5kZXgpKSkudG9JU09TdHJpbmcoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodG9rZW4gPT09IGNvbnN0YW50c18xLlVOUkVGRVJFTkNFRF9MUF9EQVRFX1RPS0VOKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShjb25zdGFudHNfMS5EQVRFX0xPV19QUkVDSVNJT04gKiB1dGlsXzEuZGVjb21wcmVzc0ludGVnZXIoZGF0YS5zdWJzdHJpbmcoc3RhcnRJbmRleCArIDEsIGVuZEluZGV4KSkpLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRva2VuID09PSBjb25zdGFudHNfMS5CT09MRUFOX1RSVUVfVE9LRU4pIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRva2VuID09PSBjb25zdGFudHNfMS5CT09MRUFOX0ZBTFNFX1RPS0VOKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSBpZiAodG9rZW4gPT09IGNvbnN0YW50c18xLk5VTExfVE9LRU4pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRva2VuID09PSBjb25zdGFudHNfMS5VTkRFRklORURfVE9LRU4pIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBzY2FsYXIgXCIgKyB0b2tlbiArIFwiIGF0IFwiICsgc3RhcnRJbmRleCArIFwiLVwiICsgZW5kSW5kZXgpO1xufVxuZXhwb3J0cy5kZWNvbXByZXNzU2NhbGFyID0gZGVjb21wcmVzc1NjYWxhcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjYWxhci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGFwcGVuZFRlbXBsYXRlT2JqZWN0VmFsdWUodGVtcGxhdGVPYmplY3RUYXJnZXQsIHRhcmdldFZhbHVlKSB7XG4gICAgdmFyIGN1cnJlbnRQYXRoID0gdGVtcGxhdGVPYmplY3RUYXJnZXQucGF0aHNbdGVtcGxhdGVPYmplY3RUYXJnZXQuY3VycmVudFBhdGhJbmRleF07XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciB0YXJnZXRPYmplY3QgPSB0ZW1wbGF0ZU9iamVjdFRhcmdldC5jdXJyZW50T2JqZWN0O1xuICAgIGZvciAoOyBpIDwgY3VycmVudFBhdGgubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIHZhciBmcmFnbWVudCA9IGN1cnJlbnRQYXRoW2ldO1xuICAgICAgICB0YXJnZXRPYmplY3QgPSB0YXJnZXRPYmplY3RbZnJhZ21lbnRdID0gdGFyZ2V0T2JqZWN0W2ZyYWdtZW50XSB8fCB7fTtcbiAgICB9XG4gICAgLy8gVW5kZWZpbmVkIHZhbHVlcyBhcmUgdG9rZW5pemVkIGZvciB0ZW1wbGF0ZWQgb2JqZWN0IGluIG9yZGVyIHRvIGtlZXAgZmllbGQgb3JkZXJcbiAgICAvLyBzbyB3ZSBmaWx0ZXIgdGhlbSBpbiBwYXJzaW5nIHRvIGF2b2lkIGluY2x1ZGluZyB0aGVtIGluIHBhcnNlZCByZXN1bHRcbiAgICBpZiAodGFyZ2V0VmFsdWUgIT09IHZvaWQgMCkge1xuICAgICAgICB0YXJnZXRPYmplY3RbY3VycmVudFBhdGhbaV1dID0gdGFyZ2V0VmFsdWU7XG4gICAgfVxufVxuLyoqXG4gKiBBcHBlbmQgYSBwYXJzZWQgdmFsdWUgdG8gdGVtcGxhdGUgb2JqZWN0IGJ5IHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gYXBwZW5kVGVtcGxhdGVPYmplY3RQcm9wZXJ0aWVzVmFsdWUodGVtcGxhdGVPYmplY3RFbGVtZW50c1RhcmdldCwgdGFyZ2V0VmFsdWUpIHtcbiAgICAvLyBJZiB3ZSBoYXZlIGEgbmVnYXRpdmUgcGF0aCBpbmRleCB0aGF0IGlzIHRoZSByb290IGlkZW50aWZpZXIgZm9yIGEgbmV3IG9iamVjdFxuICAgIGlmICh0ZW1wbGF0ZU9iamVjdEVsZW1lbnRzVGFyZ2V0LmN1cnJlbnRQYXRoSW5kZXggPT09IC0xKSB7XG4gICAgICAgIHRlbXBsYXRlT2JqZWN0RWxlbWVudHNUYXJnZXQudmFsdWVbdGFyZ2V0VmFsdWVdID0gdGVtcGxhdGVPYmplY3RFbGVtZW50c1RhcmdldC5jdXJyZW50T2JqZWN0ID0ge307XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhcHBlbmRUZW1wbGF0ZU9iamVjdFZhbHVlKHRlbXBsYXRlT2JqZWN0RWxlbWVudHNUYXJnZXQsIHRhcmdldFZhbHVlKTtcbiAgICB9XG4gICAgLy8gSWYgd2UgZ290IGFsbCBwYXRoIHZhbHVlcywgcm90YXRlIHRvIG5lZ2F0aXZlIDEgZm9yIHRoZSBuZXh0IG9iamVjdFxuICAgIGlmICgrK3RlbXBsYXRlT2JqZWN0RWxlbWVudHNUYXJnZXQuY3VycmVudFBhdGhJbmRleCA9PT0gdGVtcGxhdGVPYmplY3RFbGVtZW50c1RhcmdldC5leHBlY3RlZFBhdGhzKSB7XG4gICAgICAgIHRlbXBsYXRlT2JqZWN0RWxlbWVudHNUYXJnZXQuY3VycmVudFBhdGhJbmRleCA9IC0xO1xuICAgIH1cbn1cbmV4cG9ydHMuYXBwZW5kVGVtcGxhdGVPYmplY3RQcm9wZXJ0aWVzVmFsdWUgPSBhcHBlbmRUZW1wbGF0ZU9iamVjdFByb3BlcnRpZXNWYWx1ZTtcbi8qKlxuICogQXBwZW5kIGEgcGFyc2VkIHZhbHVlIHRvIHRlbXBsYXRlIG9iamVjdCBieSBlbGVtZW50c1xuICovXG5mdW5jdGlvbiBhcHBlbmRUZW1wbGF0ZU9iamVjdEVsZW1lbnRzVmFsdWUodGVtcGxhdGVPYmplY3RQcm9wZXJ0aWVzVGFyZ2V0LCB0YXJnZXRWYWx1ZSkge1xuICAgIC8vIElmIHdlIGhhdmUgdGhlIGZpcnN0IHBhdGggdmFsdWUgY3JlYXRlIGEgbmV3IGVsZW1lbnRcbiAgICBpZiAodGVtcGxhdGVPYmplY3RQcm9wZXJ0aWVzVGFyZ2V0LmN1cnJlbnRQYXRoSW5kZXggPT09IDApIHtcbiAgICAgICAgdGVtcGxhdGVPYmplY3RQcm9wZXJ0aWVzVGFyZ2V0LmN1cnJlbnRPYmplY3QgPSB7fTtcbiAgICAgICAgdGVtcGxhdGVPYmplY3RQcm9wZXJ0aWVzVGFyZ2V0LnZhbHVlLnB1c2godGVtcGxhdGVPYmplY3RQcm9wZXJ0aWVzVGFyZ2V0LmN1cnJlbnRPYmplY3QpO1xuICAgIH1cbiAgICBhcHBlbmRUZW1wbGF0ZU9iamVjdFZhbHVlKHRlbXBsYXRlT2JqZWN0UHJvcGVydGllc1RhcmdldCwgdGFyZ2V0VmFsdWUpO1xuICAgIC8vIElmIHdlIGdvdCBhbGwgcGF0aCB2YWx1ZXMsIHJvdGF0ZSB0byAwIGZvciB0aGUgbmV4dCBlbGVtZW50XG4gICAgaWYgKCsrdGVtcGxhdGVPYmplY3RQcm9wZXJ0aWVzVGFyZ2V0LmN1cnJlbnRQYXRoSW5kZXggPT09IHRlbXBsYXRlT2JqZWN0UHJvcGVydGllc1RhcmdldC5leHBlY3RlZFBhdGhzKSB7XG4gICAgICAgIHRlbXBsYXRlT2JqZWN0UHJvcGVydGllc1RhcmdldC5jdXJyZW50UGF0aEluZGV4ID0gMDtcbiAgICB9XG59XG5leHBvcnRzLmFwcGVuZFRlbXBsYXRlT2JqZWN0RWxlbWVudHNWYWx1ZSA9IGFwcGVuZFRlbXBsYXRlT2JqZWN0RWxlbWVudHNWYWx1ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlbXBsYXRlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcbnZhciBjb21tb25fMSA9IHJlcXVpcmUoXCIuL2NvbW1vblwiKTtcbnZhciBzY2FsYXJfMSA9IHJlcXVpcmUoXCIuL3NjYWxhclwiKTtcbnZhciB0ZW1wbGF0ZV8xID0gcmVxdWlyZShcIi4vdGVtcGxhdGVcIik7XG5mdW5jdGlvbiBkZWNvbXByZXNzRWxlbWVudChjLCBjdXJzb3IsIGRhdGEsIG9yZGVyZWRJbmRleCkge1xuICAgIHZhciB0YXJnZXRWYWx1ZTtcbiAgICBpZiAoYyA9PT0gY29uc3RhbnRzXzEuQVJSQVlfRU5EX1RPS0VOIHx8IGMgPT09IGNvbnN0YW50c18xLk9CSkVDVF9FTkRfVE9LRU4pIHtcbiAgICAgICAgdGFyZ2V0VmFsdWUgPSBjdXJzb3IuY3VycmVudFRhcmdldC52YWx1ZTtcbiAgICAgICAgY3Vyc29yLmN1cnJlbnRUYXJnZXQgPSBjdXJzb3Iuc3RhY2tbY3Vyc29yLnBvaW50ZXIgLSAxXTtcbiAgICAgICAgY3Vyc29yLnBvaW50ZXItLTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRhcmdldFZhbHVlID0gc2NhbGFyXzEuZGVjb21wcmVzc1NjYWxhcihjLCBkYXRhLCBjdXJzb3IsIG9yZGVyZWRJbmRleCk7XG4gICAgICAgIGlmICh0YXJnZXRWYWx1ZSA9PT0gY29tbW9uXzEuU0tJUF9TQ0FMQVIpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoY3Vyc29yLmN1cnJlbnRUYXJnZXQudHlwZSA9PT0gY29tbW9uXzEuVGFyZ2V0VHlwZS5TQ0FMQVIpIHtcbiAgICAgICAgY3Vyc29yLmN1cnJlbnRUYXJnZXQudmFsdWUgPSB0YXJnZXRWYWx1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY3Vyc29yLmN1cnJlbnRUYXJnZXQudHlwZSA9PT0gY29tbW9uXzEuVGFyZ2V0VHlwZS5BUlJBWSkge1xuICAgICAgICBjdXJzb3IuY3VycmVudFRhcmdldC52YWx1ZVtjdXJzb3IuY3VycmVudFRhcmdldC52YWx1ZS5sZW5ndGhdID0gdGFyZ2V0VmFsdWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGN1cnNvci5jdXJyZW50VGFyZ2V0LnR5cGUgPT09IGNvbW1vbl8xLlRhcmdldFR5cGUuT0JKRUNUKSB7XG4gICAgICAgIGlmIChjdXJzb3IuY3VycmVudFRhcmdldC5rZXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgY3Vyc29yLmN1cnJlbnRUYXJnZXQudmFsdWVbY3Vyc29yLmN1cnJlbnRUYXJnZXQua2V5XSA9IHRhcmdldFZhbHVlO1xuICAgICAgICAgICAgY3Vyc29yLmN1cnJlbnRUYXJnZXQua2V5ID0gdm9pZCAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY3Vyc29yLmN1cnJlbnRUYXJnZXQua2V5ID0gdGFyZ2V0VmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoY3Vyc29yLmN1cnJlbnRUYXJnZXQudHlwZSA9PT0gY29tbW9uXzEuVGFyZ2V0VHlwZS5URU1QTEFURV9PQkpFQ1QpIHtcbiAgICAgICAgY3Vyc29yLmN1cnJlbnRUYXJnZXQuY3VycmVudFRva2VuID0gdGFyZ2V0VmFsdWU7XG4gICAgICAgIGN1cnNvci5jdXJyZW50VGFyZ2V0LmN1cnJlbnRUb2tlbnMucHVzaCh0YXJnZXRWYWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGN1cnNvci5jdXJyZW50VGFyZ2V0LnR5cGUgPT09IGNvbW1vbl8xLlRhcmdldFR5cGUuVEVNUExBVEVfT0JKRUNUX1BST1BFUlRJRVMpIHtcbiAgICAgICAgdGVtcGxhdGVfMS5hcHBlbmRUZW1wbGF0ZU9iamVjdFByb3BlcnRpZXNWYWx1ZShjdXJzb3IuY3VycmVudFRhcmdldCwgdGFyZ2V0VmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChjdXJzb3IuY3VycmVudFRhcmdldC50eXBlID09PSBjb21tb25fMS5UYXJnZXRUeXBlLlRFTVBMQVRFX09CSkVDVF9FTEVNRU5UUykge1xuICAgICAgICB0ZW1wbGF0ZV8xLmFwcGVuZFRlbXBsYXRlT2JqZWN0RWxlbWVudHNWYWx1ZShjdXJzb3IuY3VycmVudFRhcmdldCwgdGFyZ2V0VmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydHMuZGVjb21wcmVzc0VsZW1lbnQgPSBkZWNvbXByZXNzRWxlbWVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVsZW1lbnQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xudmFyIGNvbW1vbl8xID0gcmVxdWlyZShcIi4vY29tbW9uXCIpO1xudmFyIHNjYWxhcl8xID0gcmVxdWlyZShcIi4vc2NhbGFyXCIpO1xudmFyIGVsZW1lbnRfMSA9IHJlcXVpcmUoXCIuL2VsZW1lbnRcIik7XG5mdW5jdGlvbiBkZWNvbXByZXNzU3RhZ2VzKGN1cnNvciwgZGF0YSwgb3JkZXJlZEluZGV4KSB7XG4gICAgZm9yICg7IGN1cnNvci5pbmRleCA8IGRhdGEubGVuZ3RoOyBjdXJzb3IuaW5kZXgrKykge1xuICAgICAgICB2YXIgYyA9IGRhdGFbY3Vyc29yLmluZGV4XTtcbiAgICAgICAgaWYgKGMgPT09IGNvbnN0YW50c18xLkFSUkFZX1NUQVJUX1RPS0VOKSB7XG4gICAgICAgICAgICBjdXJzb3IuY3VycmVudFRhcmdldCA9IHsgdHlwZTogY29tbW9uXzEuVGFyZ2V0VHlwZS5BUlJBWSwgdmFsdWU6IFtdIH07XG4gICAgICAgICAgICBjdXJzb3Iuc3RhY2tbKytjdXJzb3IucG9pbnRlcl0gPSBjdXJzb3IuY3VycmVudFRhcmdldDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSBjb25zdGFudHNfMS5PQkpFQ1RfU1RBUlRfVE9LRU4pIHtcbiAgICAgICAgICAgIGN1cnNvci5jdXJyZW50VGFyZ2V0ID0geyB0eXBlOiBjb21tb25fMS5UYXJnZXRUeXBlLk9CSkVDVCwgdmFsdWU6IHt9IH07XG4gICAgICAgICAgICBjdXJzb3Iuc3RhY2tbKytjdXJzb3IucG9pbnRlcl0gPSBjdXJzb3IuY3VycmVudFRhcmdldDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSBjb25zdGFudHNfMS5BUlJBWV9SRVBFQVRfVE9LRU4gJiYgKGN1cnNvci5jdXJyZW50VGFyZ2V0LnR5cGUgPT09IGNvbW1vbl8xLlRhcmdldFR5cGUuQVJSQVkgfHwgY3Vyc29yLmN1cnJlbnRUYXJnZXQudHlwZSA9PT0gY29tbW9uXzEuVGFyZ2V0VHlwZS5URU1QTEFURV9PQkpFQ1RfRUxFTUVOVFMpKSB7XG4gICAgICAgICAgICB2YXIgcmVwZWF0ZWRJdGVtID0gY3Vyc29yLmN1cnJlbnRUYXJnZXQudmFsdWVbY3Vyc29yLmN1cnJlbnRUYXJnZXQudmFsdWUubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBjdXJzb3IuY3VycmVudFRhcmdldC52YWx1ZS5wdXNoKHJlcGVhdGVkSXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gY29uc3RhbnRzXzEuQVJSQVlfUkVQRUFUX01BTllfVE9LRU4gJiYgKGN1cnNvci5jdXJyZW50VGFyZ2V0LnR5cGUgPT09IGNvbW1vbl8xLlRhcmdldFR5cGUuQVJSQVkgfHwgY3Vyc29yLmN1cnJlbnRUYXJnZXQudHlwZSA9PT0gY29tbW9uXzEuVGFyZ2V0VHlwZS5URU1QTEFURV9PQkpFQ1RfRUxFTUVOVFMpKSB7XG4gICAgICAgICAgICB2YXIgcmVwZWF0Q291bnQgPSBzY2FsYXJfMS5kZWNvbXByZXNzU2NhbGFyKGRhdGFbY3Vyc29yLmluZGV4XSwgZGF0YSwgY3Vyc29yLCBvcmRlcmVkSW5kZXgpO1xuICAgICAgICAgICAgaWYgKHJlcGVhdENvdW50ID09PSBjb21tb25fMS5TS0lQX1NDQUxBUikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXBlYXRlZEl0ZW0gPSBjdXJzb3IuY3VycmVudFRhcmdldC52YWx1ZVtjdXJzb3IuY3VycmVudFRhcmdldC52YWx1ZS5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVwZWF0Q291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGN1cnNvci5jdXJyZW50VGFyZ2V0LnZhbHVlLnB1c2gocmVwZWF0ZWRJdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSBjb25zdGFudHNfMS5URU1QTEFURV9PQkpFQ1RfU1RBUlQgJiYgKGN1cnNvci5jdXJyZW50VGFyZ2V0LnR5cGUgPT09IGNvbW1vbl8xLlRhcmdldFR5cGUuVEVNUExBVEVfT0JKRUNUIHx8IGN1cnNvci5jdXJyZW50VGFyZ2V0LnR5cGUgPT09IGNvbW1vbl8xLlRhcmdldFR5cGUuT0JKRUNUIHx8IGN1cnNvci5jdXJyZW50VGFyZ2V0LnR5cGUgPT09IGNvbW1vbl8xLlRhcmdldFR5cGUuQVJSQVkpKSB7XG4gICAgICAgICAgICBpZiAoY3Vyc29yLmN1cnJlbnRUYXJnZXQudHlwZSAhPT0gY29tbW9uXzEuVGFyZ2V0VHlwZS5URU1QTEFURV9PQkpFQ1QpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50VGFyZ2V0ID0gY3Vyc29yLmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgICAgICAgICAgY3Vyc29yLmN1cnJlbnRUYXJnZXQgPSB7IHR5cGU6IGNvbW1vbl8xLlRhcmdldFR5cGUuVEVNUExBVEVfT0JKRUNULCB2YWx1ZTogdm9pZCAwLCBjdXJyZW50VG9rZW5zOiBbXSwgY3VycmVudFJvdXRlOiBbXSwgcGF0aHM6IFtdLCBsZXZlbDogMCwgcGFyZW50VGFyZ2V0OiBwYXJlbnRUYXJnZXQgfTtcbiAgICAgICAgICAgICAgICBjdXJzb3Iuc3RhY2tbKytjdXJzb3IucG9pbnRlcl0gPSBjdXJzb3IuY3VycmVudFRhcmdldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEFkZCBhbnkgZm91bmQgdG9rZW5zIHByaW9yIHRvIG5leHQgbmVzdGVkIGFzIHNlcGFyYXRlIHBhdGhzXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjdXJzb3IuY3VycmVudFRhcmdldC5jdXJyZW50VG9rZW5zLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFRva2VuID0gY3Vyc29yLmN1cnJlbnRUYXJnZXQuY3VycmVudFRva2Vuc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yLmN1cnJlbnRUYXJnZXQucGF0aHNbY3Vyc29yLmN1cnJlbnRUYXJnZXQucGF0aHMubGVuZ3RoXSA9IGN1cnNvci5jdXJyZW50VGFyZ2V0LmN1cnJlbnRSb3V0ZS5jb25jYXQoY3VycmVudFRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQWRkIG1vc3QgcmVjZW50IHRva2VuIGFzIHBhcnQgb2YgbmV4dCBwYXRoXG4gICAgICAgICAgICAgICAgaWYgKGN1cnNvci5jdXJyZW50VGFyZ2V0LmN1cnJlbnRUb2tlbiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnNvci5jdXJyZW50VGFyZ2V0LmN1cnJlbnRSb3V0ZS5wdXNoKGN1cnNvci5jdXJyZW50VGFyZ2V0LmN1cnJlbnRUb2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIENsZWFyIHRva2VucyBmb3IgbmVzdGVkIG9iamVjdFxuICAgICAgICAgICAgICAgIGN1cnNvci5jdXJyZW50VGFyZ2V0LmN1cnJlbnRUb2tlbnMgPSBbXTtcbiAgICAgICAgICAgICAgICBjdXJzb3IuY3VycmVudFRhcmdldC5sZXZlbCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IGNvbnN0YW50c18xLlRFTVBMQVRFX09CSkVDVF9FTkQgJiYgY3Vyc29yLmN1cnJlbnRUYXJnZXQudHlwZSA9PT0gY29tbW9uXzEuVGFyZ2V0VHlwZS5URU1QTEFURV9PQkpFQ1QpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3Vyc29yLmN1cnJlbnRUYXJnZXQuY3VycmVudFRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50VG9rZW4gPSBjdXJzb3IuY3VycmVudFRhcmdldC5jdXJyZW50VG9rZW5zW2ldO1xuICAgICAgICAgICAgICAgIGN1cnNvci5jdXJyZW50VGFyZ2V0LnBhdGhzW2N1cnNvci5jdXJyZW50VGFyZ2V0LnBhdGhzLmxlbmd0aF0gPSBjdXJzb3IuY3VycmVudFRhcmdldC5jdXJyZW50Um91dGUuY29uY2F0KGN1cnJlbnRUb2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJzb3IuY3VycmVudFRhcmdldC5jdXJyZW50VG9rZW5zID0gW107XG4gICAgICAgICAgICBjdXJzb3IuY3VycmVudFRhcmdldC5jdXJyZW50Um91dGUgPSBjdXJzb3IuY3VycmVudFRhcmdldC5jdXJyZW50Um91dGUuc2xpY2UoMCwgLTEpO1xuICAgICAgICAgICAgY3Vyc29yLmN1cnJlbnRUYXJnZXQubGV2ZWwtLTtcbiAgICAgICAgICAgIGlmIChjdXJzb3IuY3VycmVudFRhcmdldC5sZXZlbCA8IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgcGF0aHMgPSBjdXJzb3IuY3VycmVudFRhcmdldC5wYXRocztcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50VGFyZ2V0ID0gY3Vyc29yLmN1cnJlbnRUYXJnZXQucGFyZW50VGFyZ2V0O1xuICAgICAgICAgICAgICAgIGN1cnNvci5wb2ludGVyLS07XG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudFRhcmdldC50eXBlID09PSBjb21tb25fMS5UYXJnZXRUeXBlLkFSUkFZKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnNvci5jdXJyZW50VGFyZ2V0ID0geyB0eXBlOiBjb21tb25fMS5UYXJnZXRUeXBlLlRFTVBMQVRFX09CSkVDVF9FTEVNRU5UUywgdmFsdWU6IHBhcmVudFRhcmdldC52YWx1ZSwgcGF0aHM6IHBhdGhzLCBjdXJyZW50UGF0aEluZGV4OiAwLCBleHBlY3RlZFBhdGhzOiBwYXRocy5sZW5ndGgsIGN1cnJlbnRPYmplY3Q6IHt9IH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBhcmVudFRhcmdldC50eXBlID09PSBjb21tb25fMS5UYXJnZXRUeXBlLk9CSkVDVCkge1xuICAgICAgICAgICAgICAgICAgICBjdXJzb3IuY3VycmVudFRhcmdldCA9IHsgdHlwZTogY29tbW9uXzEuVGFyZ2V0VHlwZS5URU1QTEFURV9PQkpFQ1RfUFJPUEVSVElFUywgdmFsdWU6IHBhcmVudFRhcmdldC52YWx1ZSwgcGF0aHM6IHBhdGhzLCBjdXJyZW50UGF0aEluZGV4OiAtMSwgZXhwZWN0ZWRQYXRoczogcGF0aHMubGVuZ3RoLCBjdXJyZW50T2JqZWN0OiB7fSB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdXJzb3Iuc3RhY2tbKytjdXJzb3IucG9pbnRlcl0gPSBjdXJzb3IuY3VycmVudFRhcmdldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSBjb25zdGFudHNfMS5URU1QTEFURV9PQkpFQ1RfRklOQUwpIHtcbiAgICAgICAgICAgIGN1cnNvci5jdXJyZW50VGFyZ2V0ID0gY3Vyc29yLnN0YWNrWy0tY3Vyc29yLnBvaW50ZXJdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFlbGVtZW50XzEuZGVjb21wcmVzc0VsZW1lbnQoYywgY3Vyc29yLCBkYXRhLCBvcmRlcmVkSW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5kZWNvbXByZXNzU3RhZ2VzID0gZGVjb21wcmVzc1N0YWdlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YWdlcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb21tb25fMSA9IHJlcXVpcmUoXCIuL2RlY29tcHJlc3Nvci9jb21tb25cIik7XG52YXIgc3RhZ2VzXzEgPSByZXF1aXJlKFwiLi9kZWNvbXByZXNzb3Ivc3RhZ2VzXCIpO1xuLyoqXG4gKiBDcmVhdGUgYW4gb3JkZXJlZCBpbmRleCBmb3IgZGVjb21wcmVzc2lvblxuICovXG5mdW5jdGlvbiBtYWtlT3JkZXJlZEluZGV4KCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0cmluZ3M6IFtdLFxuICAgICAgICBpbnRlZ2VyczogW10sXG4gICAgICAgIGZsb2F0czogW10sXG4gICAgICAgIGRhdGVzOiBbXSxcbiAgICAgICAgbHBEYXRlczogW10sXG4gICAgfTtcbn1cbmV4cG9ydHMubWFrZU9yZGVyZWRJbmRleCA9IG1ha2VPcmRlcmVkSW5kZXg7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBjdXJzb3Igd2l0aCBhIHJvb3QgdGFyZ2V0IGZvciBzcGVjaWZpZWQgZHJhaW4gbW9kZVxuICovXG5mdW5jdGlvbiBtYWtlQ3Vyc29yKGRyYWluKSB7XG4gICAgdmFyIHJvb3RUYXJnZXQgPSB7IHR5cGU6IGNvbW1vbl8xLlRhcmdldFR5cGUuU0NBTEFSLCB2YWx1ZTogdm9pZCAwIH07XG4gICAgdmFyIHN0YWNrID0gbmV3IEFycmF5KDEwKTtcbiAgICBzdGFja1swXSA9IHJvb3RUYXJnZXQ7XG4gICAgcmV0dXJuIHsgaW5kZXg6IDAsIHJvb3RUYXJnZXQ6IHJvb3RUYXJnZXQsIHN0YWNrOiBzdGFjaywgY3VycmVudFRhcmdldDogcm9vdFRhcmdldCwgcG9pbnRlcjogMCwgZHJhaW46IGRyYWluIH07XG59XG4vKipcbiAqIERlY29tcHJlc3MgZGF0YSBzdHJpbmcgd2l0aCBwcm92aWRlZCBvcmRlcmVkIGluZGV4XG4gKi9cbmZ1bmN0aW9uIGRlY29tcHJlc3MoZGF0YSwgb3JkZXJlZEluZGV4KSB7XG4gICAgdmFyIGN1cnNvciA9IG1ha2VDdXJzb3IodHJ1ZSk7XG4gICAgc3RhZ2VzXzEuZGVjb21wcmVzc1N0YWdlcyhjdXJzb3IsIGRhdGEsIG9yZGVyZWRJbmRleCk7XG4gICAgcmV0dXJuIGN1cnNvci5yb290VGFyZ2V0LnZhbHVlO1xufVxuZXhwb3J0cy5kZWNvbXByZXNzID0gZGVjb21wcmVzcztcbi8qKlxuICogRGVjb21wcmVzcyB6aXBzb24gZGF0YSBpbmNyZW1lbnRhbGx5IGJ5IHByb3ZpZGluZyBlYWNoIGNodW5rIG9mIGRhdGEgaW4gc2VxdWVuY2VcbiAqL1xuZnVuY3Rpb24gZGVjb21wcmVzc0luY3JlbWVudGFsKG9yZGVyZWRJbmRleCkge1xuICAgIHZhciBjdXJzb3IgPSBtYWtlQ3Vyc29yKGZhbHNlKTtcbiAgICAvLyBLZWVwIGFuIGludGVybmFsIGJ1ZmZlciBmb3IgYW55IHVudGVybWluYXRlZCBjaHVua3Mgb2YgZGF0YVxuICAgIHZhciBidWZmZXIgPSAnJztcbiAgICBmdW5jdGlvbiBpbmNyZW1lbnQoZGF0YSkge1xuICAgICAgICBpZiAoZGF0YSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gTW92ZSBjdXJzb3IgdG8gZHJhaW4gbW9kZSBpZiB3ZSBnb3QgdGhlIGxhc3QgY2h1bmsgb2YgZGF0YVxuICAgICAgICAgICAgY3Vyc29yLmRyYWluID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYnVmZmVyICs9IGRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGVjb21wcmVzcyBhbiBkZXRlcm1pbmUgYW1vdW50IG9mIGJ1ZmZlciB0aGF0IHdhcyBwYXJzZWRcbiAgICAgICAgdmFyIGN1cnNvckluZGV4QmVmb3JlID0gY3Vyc29yLmluZGV4O1xuICAgICAgICBzdGFnZXNfMS5kZWNvbXByZXNzU3RhZ2VzKGN1cnNvciwgYnVmZmVyLCBvcmRlcmVkSW5kZXgpO1xuICAgICAgICB2YXIgbW92ZWRBbW91bnQgPSBjdXJzb3IuaW5kZXggLSBjdXJzb3JJbmRleEJlZm9yZTtcbiAgICAgICAgLy8gUm90YXRlIHBhcnNlZCBkYXRhIG91dCBvZiBidWZmZXIgYW5kIG1vdmUgY3Vyc29yIGJhY2sgdG8gbmV4dCBwYXJzaW5nIHBvc2l0aW9uXG4gICAgICAgIGlmIChtb3ZlZEFtb3VudCA+IDApIHtcbiAgICAgICAgICAgIGJ1ZmZlciA9IGJ1ZmZlci5zdWJzdHJpbmcobW92ZWRBbW91bnQpO1xuICAgICAgICAgICAgY3Vyc29yLmluZGV4IC09IG1vdmVkQW1vdW50O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IGluY3JlbWVudDogaW5jcmVtZW50LCBjdXJzb3I6IGN1cnNvciB9O1xufVxuZXhwb3J0cy5kZWNvbXByZXNzSW5jcmVtZW50YWwgPSBkZWNvbXByZXNzSW5jcmVtZW50YWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWNvbXByZXNzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gX19leHBvcnQobSkge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb21wcmVzc18xID0gcmVxdWlyZShcIi4vY29tcHJlc3NcIik7XG52YXIgd3JpdGVyXzEgPSByZXF1aXJlKFwiLi9jb21wcmVzc29yL3dyaXRlclwiKTtcbnZhciBkZWNvbXByZXNzXzEgPSByZXF1aXJlKFwiLi9kZWNvbXByZXNzXCIpO1xuX19leHBvcnQocmVxdWlyZShcIi4vY29tcHJlc3Nvci93cml0ZXJcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vZGVjb21wcmVzc29yL2NvbW1vblwiKSk7XG4vKipcbiAqIFBhcnNlIGEgemlwc29uIGRhdGEgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIHBhcnNlKGRhdGEpIHtcbiAgICB2YXIgb3JkZXJlZEluZGV4ID0gZGVjb21wcmVzc18xLm1ha2VPcmRlcmVkSW5kZXgoKTtcbiAgICByZXR1cm4gZGVjb21wcmVzc18xLmRlY29tcHJlc3MoZGF0YSwgb3JkZXJlZEluZGV4KTtcbn1cbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbi8qKlxuICogSW5jcmVtZW50YWxseSBwYXJzZSBhIHppcHNvbiBkYXRhIHN0cmluZyBpbiBjaHVua3NcbiAqL1xuZnVuY3Rpb24gcGFyc2VJbmNyZW1lbnRhbCgpIHtcbiAgICB2YXIgb3JkZXJlZEluZGV4ID0gZGVjb21wcmVzc18xLm1ha2VPcmRlcmVkSW5kZXgoKTtcbiAgICB2YXIgX2EgPSBkZWNvbXByZXNzXzEuZGVjb21wcmVzc0luY3JlbWVudGFsKG9yZGVyZWRJbmRleCksIGN1cnNvciA9IF9hLmN1cnNvciwgaW5jcmVtZW50ID0gX2EuaW5jcmVtZW50O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpbmNyZW1lbnQoZGF0YSk7XG4gICAgICAgIGlmIChkYXRhID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gY3Vyc29yLnJvb3RUYXJnZXQudmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZXhwb3J0cy5wYXJzZUluY3JlbWVudGFsID0gcGFyc2VJbmNyZW1lbnRhbDtcbi8qKlxuICogU3RyaW5naWZ5IGFueSBkYXRhIHRvIGEgemlwc29uIHdyaXRlclxuICovXG5mdW5jdGlvbiBzdHJpbmdpZnlUbyhkYXRhLCB3cml0ZXIsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIHZhciBpbnZlcnRlZEluZGV4ID0gY29tcHJlc3NfMS5tYWtlSW52ZXJ0ZWRJbmRleCgpO1xuICAgIHZhciBjb250ZXh0ID0gY29tcHJlc3NfMS5tYWtlQ29tcHJlc3NDb250ZXh0KCk7XG4gICAgY29tcHJlc3NfMS5jb21wcmVzcyhjb250ZXh0LCBkYXRhLCBpbnZlcnRlZEluZGV4LCB3cml0ZXIsIG9wdGlvbnMpO1xuICAgIHdyaXRlci5lbmQoKTtcbn1cbmV4cG9ydHMuc3RyaW5naWZ5VG8gPSBzdHJpbmdpZnlUbztcbi8qKlxuICogU3RyaW5naWZ5IGFueSBkYXRhIHRvIGEgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ2lmeShkYXRhLCBvcHRpb25zKSB7XG4gICAgdmFyIHdyaXRlciA9IG5ldyB3cml0ZXJfMS5aaXBzb25TdHJpbmdXcml0ZXIoKTtcbiAgICBzdHJpbmdpZnlUbyhkYXRhLCB3cml0ZXIsIG9wdGlvbnMpO1xuICAgIHJldHVybiB3cml0ZXIudmFsdWU7XG59XG5leHBvcnRzLnN0cmluZ2lmeSA9IHN0cmluZ2lmeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImltcG9ydCB7IGRlZmluZVN0b3JlIH0gZnJvbSAncGluaWEnO1xuaW1wb3J0IHsgUFJPRFVDVF9ERVRBSUwgfSBmcm9tICdzcmMvQHR5cGVzL3Byb2R1Y3QtZGV0YWlsJztcbmltcG9ydCB7IHJvY3VtZW50c0FwaSB9IGZyb20gJ3NyYy9ib290L2F4aW9zJztcbmltcG9ydCB7IHVzZU9mZmxpbmVQcm9kdWN0QWN0aW9ucyB9IGZyb20gJ3NyYy9zcWxpdGUtZGF0YWJhc2Uvb2ZmbGluZS1wcm9kdWN0LWFjdGlvbnMnO1xuaW1wb3J0IGFwaUVycm9ySGFuZGxlciBmcm9tICdzcmMvdXRpbHMvZXhjZXB0aW9ucy9hcGktZXJyb3ItaGFuZGxlcic7XG5pbXBvcnQgeyBwb3BUb2FzdCB9IGZyb20gJ3NyYy91dGlscy90b2FzdHMnO1xuaW1wb3J0IHsgcmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IHBhcnNlLCBzdHJpbmdpZnkgfSBmcm9tICd6aXBzb24nO1xuXG5leHBvcnQgdHlwZSBQUk9EVUNUX0RFVEFJTF9DTEFTSEVTID0gKFBhcnRpYWw8UFJPRFVDVF9ERVRBSUw+ICYge1xuICBjb21wYXJhdG9yOiBzdHJpbmc7XG59KVtdW107XG5cbmV4cG9ydCBjb25zdCB1c2VQcm9kdWN0RGV0YWlsc1N0b3JlID0gZGVmaW5lU3RvcmUoXG4gICdwcm9kdWN0RGV0YWlscycsXG4gICgpID0+IHtcbiAgICBjb25zdCBwcm9kdWN0RGV0YWlsID0gcmVmPFBST0RVQ1RfREVUQUlMPigpO1xuICAgIGNvbnN0IG9mZmxpbmVQcm9kdWN0QWN0aW9ucyA9IHVzZU9mZmxpbmVQcm9kdWN0QWN0aW9ucygpO1xuXG4gICAgLyoqXG4gICAgICogRmluZHMgYSBzaW5nbGUgcHJvZHVjdCBkZXRhaWwgYmFzZWQgb24gdGhlIHByb3ZpZGVkIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSBxdWVyeSAtIFRoZSBxdWVyeSBwYXJhbWV0ZXJzIGZvciB0aGUgcHJvZHVjdCBkZXRhaWwgc2VhcmNoLlxuICAgICAqIEByZXR1cm5zIFRoZSByZXRyaWV2ZWQgcHJvZHVjdCBkZXRhaWwuXG4gICAgICovXG4gICAgY29uc3QgZmluZFNpbmdsZVByb2R1Y3REZXRhaWwgPSBhc3luYyAocXVlcnk6IGFueSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCByb2N1bWVudHNBcGkuZ2V0KCcvcHJvZHVjdC1kZXRhaWxzL3NpbmdsZScsIHtcbiAgICAgICAgICBwYXJhbXM6IHF1ZXJ5LFxuICAgICAgICB9KTtcbiAgICAgICAgcHJvZHVjdERldGFpbC52YWx1ZSA9IGRhdGE7XG5cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zdCBvZmZsaW5lUHJvZHVjdERldGFpbCA9IGF3YWl0IGdldE9mZmxpbmVNb2RlbERldGFpbHNCeUlkKHF1ZXJ5KTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIG9mZmxpbmVQcm9kdWN0RGV0YWlsICE9PSBudWxsIHx8XG4gICAgICAgICAgb2ZmbGluZVByb2R1Y3REZXRhaWwgIT09IHVuZGVmaW5lZFxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gb2ZmbGluZVByb2R1Y3REZXRhaWw7XG4gICAgICAgIH1cblxuICAgICAgICBhcGlFcnJvckhhbmRsZXIoZXJyb3IsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgZ2V0T2ZmbGluZU1vZGVsRGV0YWlsc0J5SWQgPSBhc3luYyAoaWQ6IHN0cmluZykgPT4ge1xuICAgICAgY29uc3QgcHJvZERldGFpbCA9XG4gICAgICAgIGF3YWl0IG9mZmxpbmVQcm9kdWN0QWN0aW9ucy5nZXRPZmZsaW5lUHJvZHVjdERldGFpbHNCeUlkKGlkKTtcblxuICAgICAgcHJvZHVjdERldGFpbC52YWx1ZSA9IHByb2REZXRhaWw7XG4gICAgfTtcblxuICAgIGNvbnN0IGxvYWRNb2RlbERldGFpbHNCeUlkID0gYXN5bmMgKGlkOiBzdHJpbmcpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgcm9jdW1lbnRzQXBpLmdldChgL3Byb2R1Y3QtZGV0YWlscy8ke2lkfWApO1xuICAgICAgICBwcm9kdWN0RGV0YWlsLnZhbHVlID0gZGF0YTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGFwaUVycm9ySGFuZGxlcihlcnJvciwgZmFsc2UpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBjcmVhdGVQcm9kdWN0RGV0YWlscyA9IGFzeW5jIChcbiAgICAgIHByb2R1Y3REZXRhaWxzOiBQYXJ0aWFsPFBST0RVQ1RfREVUQUlMPlxuICAgICkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCByb2N1bWVudHNBcGkucG9zdChcbiAgICAgICAgICAnL3Byb2R1Y3QtZGV0YWlscycsXG4gICAgICAgICAgcHJvZHVjdERldGFpbHNcbiAgICAgICAgKTtcbiAgICAgICAgcG9wVG9hc3QoJ3Bvc2l0aXZlJyk7XG5cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBhcGlFcnJvckhhbmRsZXIoZXJyb3IsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgdXBkYXRlUHJvZHVjdERldGFpbHMgPSBhc3luYyAodXBkYXRlczogUGFydGlhbDxQUk9EVUNUX0RFVEFJTD4pID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBtb2RlbE5hbWUsXG4gICAgICAgICAgbW9kZWxDb2RlLFxuICAgICAgICAgIG1vZGVsWWVhcixcbiAgICAgICAgICBwcm9kdWN0UmFuZ2UsXG4gICAgICAgICAgcHJvZHVjdFR5cGUsXG4gICAgICAgICAgYnJhbmQsXG4gICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgcHJvZHVjdGlvblN0YXJ0LFxuICAgICAgICAgIHByb2R1Y3Rpb25FbmQsXG4gICAgICAgICAgc2VyaWFsU3RhcnQsXG4gICAgICAgICAgc2VyaWFsRW5kLFxuICAgICAgICAgIGRpc3BsYXlOYW1lLFxuICAgICAgICAgIF9pZCxcbiAgICAgICAgfSA9IHVwZGF0ZXM7XG5cbiAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCByb2N1bWVudHNBcGkucGF0Y2goYC9wcm9kdWN0LWRldGFpbHMvJHtfaWR9YCwge1xuICAgICAgICAgIG1vZGVsTmFtZSxcbiAgICAgICAgICBtb2RlbENvZGUsXG4gICAgICAgICAgbW9kZWxZZWFyLFxuICAgICAgICAgIHByb2R1Y3RSYW5nZSxcbiAgICAgICAgICBwcm9kdWN0VHlwZSxcbiAgICAgICAgICBicmFuZCxcbiAgICAgICAgICBzdGF0ZSxcbiAgICAgICAgICBwcm9kdWN0aW9uU3RhcnQsXG4gICAgICAgICAgcHJvZHVjdGlvbkVuZCxcbiAgICAgICAgICBzZXJpYWxTdGFydCxcbiAgICAgICAgICBzZXJpYWxFbmQsXG4gICAgICAgICAgZGlzcGxheU5hbWUsXG4gICAgICAgIH0pO1xuICAgICAgICBwb3BUb2FzdCgncG9zaXRpdmUnKTtcblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGFwaUVycm9ySGFuZGxlcihlcnJvciwgZmFsc2UpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBkZWxldGVQcm9kdWN0RGV0YWlscyA9IGFzeW5jIChpZDogc3RyaW5nKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHJvY3VtZW50c0FwaS5kZWxldGUoYC9wcm9kdWN0LWRldGFpbHMvJHtpZH1gKTtcbiAgICAgICAgcG9wVG9hc3QoJ3Bvc2l0aXZlJyk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgYXBpRXJyb3JIYW5kbGVyKGVycm9yLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFRPRE8gSW1wcm92ZSB0eXBlXG4gICAgY29uc3QgcHJvZHVjdERldGFpbENsYXNoZXMgPSByZWY8UFJPRFVDVF9ERVRBSUxfQ0xBU0hFUz4oW10pO1xuXG4gICAgY29uc3QgZ2V0UHJvZHVjdERldGFpbHNDbGFzaGVzID0gYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCByb2N1bWVudHNBcGkuZ2V0PFBST0RVQ1RfREVUQUlMX0NMQVNIRVM+KFxuICAgICAgICAgICcvcHJvZHVjdC1kZXRhaWxzL3Byb2R1Y3QtZGV0YWlscy1jbGFzaGVzJ1xuICAgICAgICApO1xuICAgICAgICBwcm9kdWN0RGV0YWlsQ2xhc2hlcy52YWx1ZSA9IGRhdGE7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgYXBpRXJyb3JIYW5kbGVyKGVycm9yLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IGRlbGV0ZVByb2R1Y3REZXRhaWxDbGFzaEltYWdlID0gYXN5bmMgKHtcbiAgICAgIGlkLFxuICAgICAgaW5kZXgsXG4gICAgfToge1xuICAgICAgaWQ6IHN0cmluZztcbiAgICAgIGluZGV4OiBudW1iZXI7XG4gICAgfSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgcm9jdW1lbnRzQXBpLmRlbGV0ZShcbiAgICAgICAgICBgL3Byb2R1Y3QtZGV0YWlscy8ke2lkfXByb2R1Y3QtZGV0YWlscy1jbGFzaGVzLyR7aW5kZXh9YFxuICAgICAgICApO1xuICAgICAgICBwb3BUb2FzdCgncG9zaXRpdmUnKTtcbiAgICAgICAgYXdhaXQgZ2V0UHJvZHVjdERldGFpbHNDbGFzaGVzKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBhcGlFcnJvckhhbmRsZXIoZXJyb3IsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgdXBkYXRlUHJvZHVjdERldGFpbENsYXNoSW5mbyA9IGFzeW5jIChcbiAgICAgIHVwZGF0ZXM6IFBhcnRpYWw8UFJPRFVDVF9ERVRBSUw+XG4gICAgKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7IF9pZCwgY29uZmxpY3RJbmZvIH0gPSB1cGRhdGVzO1xuICAgICAgICBhd2FpdCByb2N1bWVudHNBcGkucGF0Y2goYC9wcm9kdWN0LWRldGFpbHMvJHtfaWR9YCwge1xuICAgICAgICAgIGNvbmZsaWN0SW5mbyxcbiAgICAgICAgfSk7XG4gICAgICAgIHBvcFRvYXN0KCdwb3NpdGl2ZScpO1xuICAgICAgICBhd2FpdCBnZXRQcm9kdWN0RGV0YWlsc0NsYXNoZXMoKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGFwaUVycm9ySGFuZGxlcihlcnJvciwgZmFsc2UpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBidWxrTW9kZWxzID0gcmVmPFBhcnRpYWw8UFJPRFVDVF9ERVRBSUw+W10+KFtdKTtcbiAgICBjb25zdCB1cGRhdGVCdWxrTW9kZWxzID0gYXN5bmMgKHVwZGF0ZXM6IFBhcnRpYWw8UFJPRFVDVF9ERVRBSUw+W10pID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHVwZGF0ZXMuZm9yRWFjaChhc3luYyAodXBkYXRlKSA9PiB7XG4gICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgX2lkLFxuICAgICAgICAgICAgbW9kZWxOYW1lLFxuICAgICAgICAgICAgcHJvZHVjdFJhbmdlLFxuICAgICAgICAgICAgcHJvZHVjdFR5cGUsXG4gICAgICAgICAgICBicmFuZCxcbiAgICAgICAgICAgIHN0YXRlLFxuICAgICAgICAgICAgbW9kZWxZZWFyLFxuICAgICAgICAgICAgcHJvZHVjdGlvblN0YXJ0LFxuICAgICAgICAgICAgcHJvZHVjdGlvbkVuZCxcbiAgICAgICAgICAgIHNlcmlhbFN0YXJ0LFxuICAgICAgICAgICAgc2VyaWFsRW5kLFxuICAgICAgICAgICAgZGlzcGxheU5hbWUsXG4gICAgICAgICAgfSA9IHVwZGF0ZTtcblxuICAgICAgICAgIGF3YWl0IHVwZGF0ZVByb2R1Y3REZXRhaWxzKHtcbiAgICAgICAgICAgIF9pZCxcbiAgICAgICAgICAgIG1vZGVsTmFtZSxcbiAgICAgICAgICAgIHByb2R1Y3RSYW5nZSxcbiAgICAgICAgICAgIHByb2R1Y3RUeXBlLFxuICAgICAgICAgICAgYnJhbmQsXG4gICAgICAgICAgICBzdGF0ZSxcbiAgICAgICAgICAgIG1vZGVsWWVhcixcbiAgICAgICAgICAgIHByb2R1Y3Rpb25TdGFydCxcbiAgICAgICAgICAgIHByb2R1Y3Rpb25FbmQsXG4gICAgICAgICAgICBzZXJpYWxTdGFydCxcbiAgICAgICAgICAgIHNlcmlhbEVuZCxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGFwaUVycm9ySGFuZGxlcihlcnJvciwgZmFsc2UpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgcHJvZHVjdERldGFpbCxcbiAgICAgIGZpbmRTaW5nbGVQcm9kdWN0RGV0YWlsLFxuICAgICAgbG9hZE1vZGVsRGV0YWlsc0J5SWQsXG4gICAgICBjcmVhdGVQcm9kdWN0RGV0YWlscyxcbiAgICAgIGdldE9mZmxpbmVNb2RlbERldGFpbHNCeUlkLFxuICAgICAgdXBkYXRlUHJvZHVjdERldGFpbHMsXG4gICAgICBkZWxldGVQcm9kdWN0RGV0YWlscyxcbiAgICAgIHByb2R1Y3REZXRhaWxDbGFzaGVzLFxuICAgICAgZ2V0UHJvZHVjdERldGFpbHNDbGFzaGVzLFxuICAgICAgZGVsZXRlUHJvZHVjdERldGFpbENsYXNoSW1hZ2UsXG4gICAgICB1cGRhdGVQcm9kdWN0RGV0YWlsQ2xhc2hJbmZvLFxuICAgICAgYnVsa01vZGVscyxcbiAgICAgIHVwZGF0ZUJ1bGtNb2RlbHMsXG4gICAgfTtcbiAgfSxcbiAge1xuICAgIHBlcnNpc3Q6IHtcbiAgICAgIHBhdGhzOiBbJ2J1bGtNb2RlbHMnXSxcbiAgICAgIHN0b3JhZ2U6IHNlc3Npb25TdG9yYWdlLFxuICAgICAgc2VyaWFsaXplcjoge1xuICAgICAgICBkZXNlcmlhbGl6ZTogcGFyc2UsXG4gICAgICAgIHNlcmlhbGl6ZTogc3RyaW5naWZ5LFxuICAgICAgfSxcbiAgICB9LFxuICB9XG4pO1xuIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJhbnkiLCJjb25zdGFudHNfMSIsInJlcXVpcmUkJDAiLCJjb21wcmVzc0FueSIsImNvbXByZXNzb3JzIiwiY29udGV4dCIsIm9iaiIsImludmVydGVkSW5kZXgiLCJ3cml0ZXIiLCJvcHRpb25zIiwidHlwZSIsIl9fZXh0ZW5kcyIsInRoaXMiLCJleHRlbmRTdGF0aWNzIiwiZCIsImIiLCJwIiwiX18iLCJaaXBzb25Xcml0ZXIiLCJaaXBzb25TdHJpbmdXcml0ZXIiLCJfc3VwZXIiLCJfdGhpcyIsImRhdGEiLCJ1dGlsIiwibWF4SW50ZWdlciIsIm1pbkludGVnZXIiLCJiYXNlNjIiLCJjb21wcmVzc0ludGVnZXIiLCJudW1iZXIiLCJyZXN1bHQiLCJjYXJyeSIsImN1cnJlbnQiLCJmcmFjdGlvbiIsImRlY29tcHJlc3NJbnRlZ2VyIiwiY29tcHJlc3NlZEludGVnZXIiLCJ2YWx1ZSIsIm5lZ2F0aXZlIiwibXVsdGlwbGllciIsImxlZnRCb3VuZCIsImkiLCJjb2RlIiwiY29tcHJlc3NGbG9hdCIsImZsb2F0IiwiZnVsbFByZWNpc2lvbiIsIl9hIiwiaW50ZWdlciIsIm9wZXJhdG9yIiwiZGVjb21wcmVzc0Zsb2F0IiwiY29tcHJlc3NlZEZsb2F0IiwibXVsdCIsInVuY29tcHJlc3NlZEludGVnZXIiLCJfYiIsInVuY29tcHJlc3NlZEZyYWN0aW9uIiwiYXJyYXkiLCJ3cml0ZXJfMSIsInJlcXVpcmUkJDEiLCJ1dGlsXzEiLCJyZXF1aXJlJCQyIiwiY29tcHJlc3NBcnJheSIsImFycmF5SXRlbVdyaXRlciIsInBhcmVudFdyaXRlciIsInByZXZpb3VzSXRlbSIsInJlcGVhdGVkVGltZXMiLCJyZXBlYXRNYW55Q291bnQiLCJ0ZW1wbGF0ZU9iamVjdCIsIml0ZW0iLCJzdHJpbmciLCJjb21wcmVzc1N0cmluZyIsImZvdW5kUmVmIiwic3RyaW5nSWRlbnQiLCJkYXRlIiwicmVmIiwibmV3UmVmIiwiY29tcHJlc3NOdW1iZXIiLCJvYmplY3QiLCJjb21wcmVzc09iamVjdCIsImtleXMiLCJrZXkiLCJ2YWwiLCJjb21wcmVzc0RhdGUiLCJsb3dQcmVjaXNpb25EYXRlIiwiaXNMb3dQcmVjaXNpb24iLCJjb21wcmVzc2VkRGF0ZSIsImlzT2JqZWN0IiwiVGVtcGxhdGVPYmplY3QiLCJhIiwiYnVpbGRUZW1wbGF0ZSIsImNvbXByZXNPYmplY3RUZW1wbGF0ZSIsImNvbXByZXNzT2JqZWN0VmFsdWVzIiwiY29uZm9ybXNUb1N0cnVjdHVyZSIsInN0cnVjdCIsImxldmVsIiwia2V5c0EiLCJrZXlzQiIsImtleUEiLCJrZXlCIiwidmFsdWVBIiwidmFsdWVCIiwibmV4dFN0cnVjdCIsImlzTmVzdGVkIiwieCIsImNvbXByZXNzXzEiLCJhbnlfMSIsImFycmF5XzEiLCJzdHJpbmdfMSIsIm51bWJlcl8xIiwicmVxdWlyZSQkMyIsIm9iamVjdF8xIiwicmVxdWlyZSQkNCIsImRhdGVfMSIsInJlcXVpcmUkJDUiLCJvYmplY3RfMiIsInJlcXVpcmUkJDYiLCJtYWtlQ29tcHJlc3NDb250ZXh0IiwibWFrZUludmVydGVkSW5kZXgiLCJjb21wcmVzcyIsIlRhcmdldFR5cGUiLCJzY2FsYXIiLCJjb21tb25fMSIsImRlY29tcHJlc3NTY2FsYXIiLCJ0b2tlbiIsImN1cnNvciIsIm9yZGVyZWRJbmRleCIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsImZvdW5kU3RyaW5nVG9rZW4iLCJlc2NhcGVkIiwiaU51bUVzY2FwZUNoYXJhY3RlcnMiLCJ0b2tlbkNoYXJDb2RlIiwidGVtcGxhdGUiLCJhcHBlbmRUZW1wbGF0ZU9iamVjdFZhbHVlIiwidGVtcGxhdGVPYmplY3RUYXJnZXQiLCJ0YXJnZXRWYWx1ZSIsImN1cnJlbnRQYXRoIiwidGFyZ2V0T2JqZWN0IiwiZnJhZ21lbnQiLCJhcHBlbmRUZW1wbGF0ZU9iamVjdFByb3BlcnRpZXNWYWx1ZSIsInRlbXBsYXRlT2JqZWN0RWxlbWVudHNUYXJnZXQiLCJhcHBlbmRUZW1wbGF0ZU9iamVjdEVsZW1lbnRzVmFsdWUiLCJ0ZW1wbGF0ZU9iamVjdFByb3BlcnRpZXNUYXJnZXQiLCJlbGVtZW50Iiwic2NhbGFyXzEiLCJ0ZW1wbGF0ZV8xIiwiZGVjb21wcmVzc0VsZW1lbnQiLCJjIiwic3RhZ2VzIiwiZWxlbWVudF8xIiwiZGVjb21wcmVzc1N0YWdlcyIsInJlcGVhdGVkSXRlbSIsInJlcGVhdENvdW50IiwicGFyZW50VGFyZ2V0IiwiY3VycmVudFRva2VuIiwicGF0aHMiLCJkZWNvbXByZXNzXzEiLCJzdGFnZXNfMSIsIm1ha2VPcmRlcmVkSW5kZXgiLCJtYWtlQ3Vyc29yIiwiZHJhaW4iLCJyb290VGFyZ2V0Iiwic3RhY2siLCJkZWNvbXByZXNzIiwiZGVjb21wcmVzc0luY3JlbWVudGFsIiwiYnVmZmVyIiwiaW5jcmVtZW50IiwiY3Vyc29ySW5kZXhCZWZvcmUiLCJtb3ZlZEFtb3VudCIsIl9fZXhwb3J0IiwibSIsInBhcnNlIiwicGFyc2VJbmNyZW1lbnRhbCIsInN0cmluZ2lmeVRvIiwic3RyaW5naWZ5IiwidXNlUHJvZHVjdERldGFpbHNTdG9yZSIsImRlZmluZVN0b3JlIiwicHJvZHVjdERldGFpbCIsIm9mZmxpbmVQcm9kdWN0QWN0aW9ucyIsInVzZU9mZmxpbmVQcm9kdWN0QWN0aW9ucyIsImZpbmRTaW5nbGVQcm9kdWN0RGV0YWlsIiwicXVlcnkiLCJyb2N1bWVudHNBcGkiLCJlcnJvciIsIm9mZmxpbmVQcm9kdWN0RGV0YWlsIiwiZ2V0T2ZmbGluZU1vZGVsRGV0YWlsc0J5SWQiLCJhcGlFcnJvckhhbmRsZXIiLCJpZCIsInByb2REZXRhaWwiLCJsb2FkTW9kZWxEZXRhaWxzQnlJZCIsImNyZWF0ZVByb2R1Y3REZXRhaWxzIiwicHJvZHVjdERldGFpbHMiLCJwb3BUb2FzdCIsInVwZGF0ZVByb2R1Y3REZXRhaWxzIiwidXBkYXRlcyIsIm1vZGVsTmFtZSIsIm1vZGVsQ29kZSIsIm1vZGVsWWVhciIsInByb2R1Y3RSYW5nZSIsInByb2R1Y3RUeXBlIiwiYnJhbmQiLCJzdGF0ZSIsInByb2R1Y3Rpb25TdGFydCIsInByb2R1Y3Rpb25FbmQiLCJzZXJpYWxTdGFydCIsInNlcmlhbEVuZCIsImRpc3BsYXlOYW1lIiwiX2lkIiwiZGVsZXRlUHJvZHVjdERldGFpbHMiLCJwcm9kdWN0RGV0YWlsQ2xhc2hlcyIsImdldFByb2R1Y3REZXRhaWxzQ2xhc2hlcyIsImRlbGV0ZVByb2R1Y3REZXRhaWxDbGFzaEltYWdlIiwiaW5kZXgiLCJ1cGRhdGVQcm9kdWN0RGV0YWlsQ2xhc2hJbmZvIiwiY29uZmxpY3RJbmZvIiwiYnVsa01vZGVscyIsInVwZGF0ZSJdLCJtYXBwaW5ncyI6ImtJQUNBLE9BQU8sZUFBY0EsRUFBVSxhQUFjLENBQUUsTUFBTyxFQUFJLENBQUUsRUFJNURBLEVBQUEsNEJBQXNDLElBQ3RDQSxFQUFBLG1CQUE2QixJQUk3QkEsRUFBQSwrQkFBeUMsSUFDekNBLEVBQUEs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
