import{cC as c,cD as F,cE as D,cF as i,ck as v,a as T,t as L,cG as p}from"./index.6def9867.js";var y=36e5;function M(a,e){c(2,arguments);var r=D(e);return F(a,r*y)}function l(a,e){c(2,arguments);var r=i(a),n=i(e);return r.getTime()>n.getTime()}function g(a,e){c(2,arguments);var r=i(a),n=i(e);return r.getTime()===n.getTime()}function m(a,e){c(2,arguments);var r=D(e);return M(a,-r)}const{extractDate:u}=p;function C(a){const e=v(),{dateFormat:r}=T(e),n=a||L(r);return{fromMongoFormat:(o,t=!1)=>{const s=new Date(o),d=`${n}${t?", hh:mm a":""}`,f=p.formatDate(s,d);return o?f:void 0},toMongoFormat:o=>{if(!o)return null;const t=o.split("/");return new Date(+t[2],+t[1]-1,+t[0])},displayFromOptionsLimiter:o=>{const t=new Date(o);return l(t,m(t,12))||g(t,m(t,12))},validateDisplayFrom:o=>{const t=u(o,n);return l(t,m(t,12))||g(t,m(t,12))},validateDisplayTo:(o,t)=>{const s=u(o,n);return u(t,n)>s}}}export{m as s,C as u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
