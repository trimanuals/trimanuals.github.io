import{bP as u,aV as s,bC as r,bE as i}from"./index.6def9867.js";const m=u("announcements",{state:()=>({announcements:[],announcement:null}),getters:{currentAnnouncements(n){var e;return(e=n.announcements)==null?void 0:e.filter(o=>{const c=new Date,t=o.displayFrom?new Date(o.displayFrom):null,a=o.displayTo?new Date(o.displayTo):null;if(!!t&&!!a)return t<=c&&a>=c;if(!!t&&!a)return t<=c;if(!t&&!!a)return a>=c})}},actions:{async getAllAnnouncements(){try{const{data:n}=await s.get("/announcements");return this.announcements=n,n}catch(n){r(n)}},async getSingleAnnouncement(n){try{const{data:e}=await s.get(`/announcements/${n}`);return this.announcement=e,e}catch(e){r(e)}},async updateAnnouncement(n){try{const{data:e}=await s.patch(`/announcements/${n._id}`,{title:n.title,content:n.content,displayFrom:n.displayFrom,displayTo:n.displayTo});return this.announcement=e,i("positive"),e}catch(e){r(e)}},async createAnnouncement(n){try{return await s.post("/announcements",n),i("positive"),await this.getAllAnnouncements()}catch(e){r(e)}},async deleteAnnouncement(n){try{return await s.delete(`/announcements/${n}`),i("positive"),`Announcement with ${n}, has been deleted`}catch(e){r(e)}}}});export{m as u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ub3VuY2VtZW50cy4yZDU4MDYyMi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0b3Jlcy9hbm5vdW5jZW1lbnRzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmluZVN0b3JlIH0gZnJvbSAncGluaWEnO1xuaW1wb3J0IHsgcm9jdW1lbnRzQXBpIH0gZnJvbSAnc3JjL2Jvb3QvYXhpb3MnO1xuaW1wb3J0IGFwaUVycm9ySGFuZGxlciBmcm9tICcuLi91dGlscy9leGNlcHRpb25zL2FwaS1lcnJvci1oYW5kbGVyJztcbmltcG9ydCB7IHBvcFRvYXN0IH0gZnJvbSAnc3JjL3V0aWxzL3RvYXN0cyc7XG5pbXBvcnQgeyBBTk5PVU5DRU1FTlQgfSBmcm9tICdzcmMvQHR5cGVzL2Fubm91bmNlbWVudHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0YXRlIHtcbiAgYW5ub3VuY2VtZW50czogTm9uTnVsbGFibGU8QU5OT1VOQ0VNRU5UW10+IHwgbnVsbDtcbiAgYW5ub3VuY2VtZW50OiBOb25OdWxsYWJsZTxBTk5PVU5DRU1FTlQ+IHwgbnVsbDtcbn1cblxuZXhwb3J0IGNvbnN0IHVzZUFubm91bmNlbWVudHNTdG9yZSA9IGRlZmluZVN0b3JlKCdhbm5vdW5jZW1lbnRzJywge1xuICBzdGF0ZTogKCk6IFN0YXRlID0+ICh7XG4gICAgYW5ub3VuY2VtZW50czogW10sXG4gICAgYW5ub3VuY2VtZW50OiBudWxsLFxuICB9KSxcbiAgZ2V0dGVyczoge1xuICAgIGN1cnJlbnRBbm5vdW5jZW1lbnRzKHN0YXRlOiBTdGF0ZSkge1xuICAgICAgcmV0dXJuIHN0YXRlLmFubm91bmNlbWVudHM/LmZpbHRlcigoYW5ub3VuY2VtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG5cbiAgICAgICAgY29uc3QgZGlzcGxheUZyb20gPSBhbm5vdW5jZW1lbnQuZGlzcGxheUZyb21cbiAgICAgICAgICA/IG5ldyBEYXRlKGFubm91bmNlbWVudC5kaXNwbGF5RnJvbSlcbiAgICAgICAgICA6IG51bGw7XG5cbiAgICAgICAgY29uc3QgZGlzcGxheVRvID0gYW5ub3VuY2VtZW50LmRpc3BsYXlUb1xuICAgICAgICAgID8gbmV3IERhdGUoYW5ub3VuY2VtZW50LmRpc3BsYXlUbylcbiAgICAgICAgICA6IG51bGw7XG5cbiAgICAgICAgaWYgKCEhZGlzcGxheUZyb20gJiYgISFkaXNwbGF5VG8pIHtcbiAgICAgICAgICByZXR1cm4gZGlzcGxheUZyb20gPD0gbm93ICYmIGRpc3BsYXlUbyA+PSBub3c7XG4gICAgICAgIH0gZWxzZSBpZiAoISFkaXNwbGF5RnJvbSAmJiAhZGlzcGxheVRvKSB7XG4gICAgICAgICAgcmV0dXJuIGRpc3BsYXlGcm9tIDw9IG5vdztcbiAgICAgICAgfSBlbHNlIGlmICghZGlzcGxheUZyb20gJiYgISFkaXNwbGF5VG8pIHtcbiAgICAgICAgICByZXR1cm4gZGlzcGxheVRvID49IG5vdztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgfSxcbiAgYWN0aW9uczoge1xuICAgIGFzeW5jIGdldEFsbEFubm91bmNlbWVudHMoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHJvY3VtZW50c0FwaS5nZXQ8QU5OT1VOQ0VNRU5UW10+KFxuICAgICAgICAgICcvYW5ub3VuY2VtZW50cydcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5hbm5vdW5jZW1lbnRzID0gZGF0YTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgYXBpRXJyb3JIYW5kbGVyKGVycik7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyBnZXRTaW5nbGVBbm5vdW5jZW1lbnQoaWQ6IHN0cmluZykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCByb2N1bWVudHNBcGkuZ2V0PEFOTk9VTkNFTUVOVD4oXG4gICAgICAgICAgYC9hbm5vdW5jZW1lbnRzLyR7aWR9YFxuICAgICAgICApO1xuICAgICAgICB0aGlzLmFubm91bmNlbWVudCA9IGRhdGE7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGFwaUVycm9ySGFuZGxlcihlcnIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgdXBkYXRlQW5ub3VuY2VtZW50KHBheWxvYWQ6IFBhcnRpYWw8QU5OT1VOQ0VNRU5UPikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCByb2N1bWVudHNBcGkucGF0Y2g8QU5OT1VOQ0VNRU5UPihcbiAgICAgICAgICBgL2Fubm91bmNlbWVudHMvJHtwYXlsb2FkLl9pZH1gLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRpdGxlOiBwYXlsb2FkLnRpdGxlLFxuICAgICAgICAgICAgY29udGVudDogcGF5bG9hZC5jb250ZW50LFxuICAgICAgICAgICAgZGlzcGxheUZyb206IHBheWxvYWQuZGlzcGxheUZyb20sXG4gICAgICAgICAgICBkaXNwbGF5VG86IHBheWxvYWQuZGlzcGxheVRvLFxuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5hbm5vdW5jZW1lbnQgPSBkYXRhO1xuICAgICAgICBwb3BUb2FzdCgncG9zaXRpdmUnKTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgYXBpRXJyb3JIYW5kbGVyKGVycik7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyBjcmVhdGVBbm5vdW5jZW1lbnQocGF5bG9hZDogUGFydGlhbDxBTk5PVU5DRU1FTlQ+KSB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCByb2N1bWVudHNBcGkucG9zdDxBTk5PVU5DRU1FTlQ+KCcvYW5ub3VuY2VtZW50cycsIHBheWxvYWQpO1xuICAgICAgICBwb3BUb2FzdCgncG9zaXRpdmUnKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0QWxsQW5ub3VuY2VtZW50cygpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGFwaUVycm9ySGFuZGxlcihlcnIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgZGVsZXRlQW5ub3VuY2VtZW50KGlkOiBzdHJpbmcpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHJvY3VtZW50c0FwaS5kZWxldGU8QU5OT1VOQ0VNRU5UPihgL2Fubm91bmNlbWVudHMvJHtpZH1gKTtcbiAgICAgICAgcG9wVG9hc3QoJ3Bvc2l0aXZlJyk7XG4gICAgICAgIHJldHVybiBgQW5ub3VuY2VtZW50IHdpdGggJHtpZH0sIGhhcyBiZWVuIGRlbGV0ZWRgO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGFwaUVycm9ySGFuZGxlcihlcnIpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG59KTtcbiJdLCJuYW1lcyI6WyJ1c2VBbm5vdW5jZW1lbnRzU3RvcmUiLCJkZWZpbmVTdG9yZSIsInN0YXRlIiwiX2EiLCJhbm5vdW5jZW1lbnQiLCJub3ciLCJkaXNwbGF5RnJvbSIsImRpc3BsYXlUbyIsImRhdGEiLCJyb2N1bWVudHNBcGkiLCJlcnIiLCJhcGlFcnJvckhhbmRsZXIiLCJpZCIsInBheWxvYWQiLCJwb3BUb2FzdCJdLCJtYXBwaW5ncyI6ImlFQVdhLE1BQUFBLEVBQXdCQyxFQUFZLGdCQUFpQixDQUNoRSxNQUFPLEtBQWMsQ0FDbkIsY0FBZSxDQUFDLEVBQ2hCLGFBQWMsSUFBQSxHQUVoQixRQUFTLENBQ1AscUJBQXFCQyxFQUFjLE9BQ2pDLE9BQU9DLEVBQUFELEVBQU0sZ0JBQU4sWUFBQUMsRUFBcUIsT0FBUUMsR0FBaUIsQ0FDN0MsTUFBQUMsRUFBTSxJQUFJLEtBRVZDLEVBQWNGLEVBQWEsWUFDN0IsSUFBSSxLQUFLQSxFQUFhLFdBQVcsRUFDakMsS0FFRUcsRUFBWUgsRUFBYSxVQUMzQixJQUFJLEtBQUtBLEVBQWEsU0FBUyxFQUMvQixLQUVKLEdBQUksQ0FBQyxDQUFDRSxHQUFlLENBQUMsQ0FBQ0MsRUFDZCxPQUFBRCxHQUFlRCxHQUFPRSxHQUFhRixFQUNqQyxHQUFBLENBQUMsQ0FBQ0MsR0FBZSxDQUFDQyxFQUMzQixPQUFPRCxHQUFlRCxFQUNiLEdBQUEsQ0FBQ0MsR0FBZSxDQUFDLENBQUNDLEVBQzNCLE9BQU9BLEdBQWFGLENBQ3RCLEVBRUosQ0FDRixFQUNBLFFBQVMsQ0FDUCxNQUFNLHFCQUFzQixDQUN0QixHQUFBLENBQ0YsS0FBTSxDQUFFLEtBQUFHLENBQUEsRUFBUyxNQUFNQyxFQUFhLElBQ2xDLGdCQUFBLEVBRUYsWUFBSyxjQUFnQkQsRUFDZEEsUUFDQUUsR0FDUEMsRUFBZ0JELENBQUcsQ0FDckIsQ0FDRixFQUNBLE1BQU0sc0JBQXNCRSxFQUFZLENBQ2xDLEdBQUEsQ0FDRixLQUFNLENBQUUsS0FBQUosQ0FBQSxFQUFTLE1BQU1DLEVBQWEsSUFDbEMsa0JBQWtCRyxHQUFBLEVBRXBCLFlBQUssYUFBZUosRUFDYkEsUUFDQUUsR0FDUEMsRUFBZ0JELENBQUcsQ0FDckIsQ0FDRixFQUNBLE1BQU0sbUJBQW1CRyxFQUFnQyxDQUNuRCxHQUFBLENBQ0YsS0FBTSxDQUFFLEtBQUFMLENBQUEsRUFBUyxNQUFNQyxFQUFhLE1BQ2xDLGtCQUFrQkksRUFBUSxNQUMxQixDQUNFLE1BQU9BLEVBQVEsTUFDZixRQUFTQSxFQUFRLFFBQ2pCLFlBQWFBLEVBQVEsWUFDckIsVUFBV0EsRUFBUSxTQUNyQixDQUFBLEVBRUYsWUFBSyxhQUFlTCxFQUNwQk0sRUFBUyxVQUFVLEVBQ1pOLFFBQ0FFLEdBQ1BDLEVBQWdCRCxDQUFHLENBQ3JCLENBQ0YsRUFDQSxNQUFNLG1CQUFtQkcsRUFBZ0MsQ0FDbkQsR0FBQSxDQUNJLGFBQUFKLEVBQWEsS0FBbUIsaUJBQWtCSSxDQUFPLEVBQy9EQyxFQUFTLFVBQVUsRUFDWixNQUFNLEtBQUssNEJBQ1hKLEdBQ1BDLEVBQWdCRCxDQUFHLENBQ3JCLENBQ0YsRUFDQSxNQUFNLG1CQUFtQkUsRUFBWSxDQUMvQixHQUFBLENBQ0ksYUFBQUgsRUFBYSxPQUFxQixrQkFBa0JHLEdBQUksRUFDOURFLEVBQVMsVUFBVSxFQUNaLHFCQUFxQkYsNEJBQ3JCRixHQUNQQyxFQUFnQkQsQ0FBRyxDQUNyQixDQUNGLENBQ0YsQ0FDRixDQUFDIn0=
