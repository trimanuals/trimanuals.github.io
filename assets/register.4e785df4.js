import{ac as j,r as M,ad as D,n as k,ae as O,N as S,o as x,V as b,af as U,ag as $,ah as X,Q as W,ai as G,b as H}from"./index.6def9867.js";import{Q as J}from"./QPagination.278e8c8f.js";/*!
 * @quasar/quasar-ui-qiconpicker v2.0.7
 * (c) 2023 Jeff Galbraith <jeff@quasar.dev>
 * Released under the MIT License.
 */const K={modelValue:String,iconSet:{type:String,validator:e=>["material-icons","material-icons-outlined","material-icons-round","material-icons-sharp","ionicons-v4","mdi-v4","mdi-v5","mdi-v6","fontawesome-v5","eva-icons","themify","line-awesome","bootstrap-icons",""].includes(e),default:""},icons:Array,filter:String,tags:Array,dense:Boolean,tooltips:Boolean,noFooter:Boolean,size:{type:String,default:"inherit"},color:String,textColor:String,selectedColor:{type:String,default:"primary"},selectedTextColor:{type:String,default:"grey-1"},paginationProps:{type:Object,default:()=>({maxPages:5,input:!0})},modelPagination:Object,animated:Boolean,transitionPrev:{type:String,default:"slide-right"},transitionNext:{type:String,default:"slide-left"}},C={NEXT:"next",PREV:"prev"};function Y(e,i,l,d){function f(t){return t.page<1&&(t.page=1),(t.itemsPerPage===void 0||t.itemsPerPage<1)&&(t.itemsPerPage=0),t}function o(t,c){for(const y in c)if(c[y]!==t[y])return!1;return!0}const s=k(()=>f({...e.innerPagination,...i.modelPagination})),v=k(()=>s.value.itemsPerPage===0?1:Math.max(1,Math.ceil(d.value.length/s.value.itemsPerPage)));function n(t){const c=f({...s.value,...t});o(e.innerPagination,c)||(i.modelPagination&&l("update:model-pagination",c),e.innerPagination=c)}function r(){i.modelPagination!==void 0&&n({total:d.value.length,totalPages:v.value})}return{samePagination:o,computedPagination:s,setPagination:n,updatePagination:r,computedPagesNumber:v}}function Z(e,i,l,d){function f(n){if(e.iconsList=[],n)if(window.QIconPicker){const r=n.replace(/-([a-z])/g,t=>t[1].toUpperCase());window.QIconPicker.iconSet&&window.QIconPicker.iconSet[r]?e.iconsList=window.QIconPicker.iconSet[r].icons:(console.error(`QIconPicker: no icon set loaded called ${n}`),console.error("Be sure to load the UMD version of the icon set in a script tag before using QIconPicker UMD version"))}else try{e.iconsList=require(`@quasar/quasar-ui-qiconpicker/src/components/icon-set/${n}.js`).default.icons}catch{console.error(`QIconPicker: cannot find icon set found called ${n}`)}console.info(`Loaded ${e.iconsList.length} icons.`)}const o=k(()=>{let n=[];return e.iconsList&&(n=s.value,i.modelPagination&&i.modelPagination.itemsPerPage!==0&&(n=n.slice(l.value,d.value))),n}),s=k(()=>{let n=e.iconsList;return n&&(i.tags!==void 0&&i.tags!==""&&i.tags!==null&&i.tags.length>0&&(n=n.filter(r=>r.tags.filter(t=>i.tags.includes(t)).length>0)),i.filter!==void 0&&i.filter!==""&&i.filter!==null&&(n=n.filter(r=>r.name.includes(i.filter)))),n});function v(){const n=[];return e.iconsList.forEach(r=>{const t=r.tags;t&&t.length>0&&t.forEach(c=>{n.includes(c)!==!0&&n.push(c)})}),n.sort(),e.categories=n,!0}return{loadIconSet:f,computedDisplayedIcons:o,computedFilteredIcons:s,categories:v}}function p(e,i,l,d,f,o,s,v){const n=()=>{const{page:u}=l.value;u>1&&(d({page:u-1}),e.direction=C.PREV)},r=()=>{const{page:u,itemsPerPage:h}=l.value;o.value>0&&u*h<s.value.length&&(d({page:u+1}),e.direction=C.NEXT)},t=()=>{d({page:v.value})},c=()=>{d({page:0})},y=k(()=>o.value===0?!0:l.value.page>=v.value),I=k(()=>l.value.page===1);i({prevPage:n,nextPage:r,lastPage:t,firstPage:c,isLastPage:y,isFirstPage:I})}var q=j({name:"QIconPicker",props:{...K},emits:["update:model-value","update:tags","update:model-pagination"],setup(e,{slots:i,emit:l,expose:d}){const f=M(null),o=D({iconsList:[],innerPagination:{page:1,itemsPerPage:0,totalPages:0},categories:[],width:"100",height:"100",direction:""}),s=k(()=>{const{page:g,itemsPerPage:P}=I.value;return(g-1)*P}),v=k(()=>{const{page:g,itemsPerPage:P}=I.value;return g*P}),{loadIconSet:n,computedDisplayedIcons:r,computedFilteredIcons:t,categories:c}=Z(o,e,s,v),{samePagination:y,computedPagination:I,setPagination:u,updatePagination:h,computedPagesNumber:L}=Y(o,e,l,t);return p(o,d,I,u,s,v,t,L),O(()=>{e.iconSet?n(e.iconSet):e.icons!==void 0&&e.icons.length>0&&(o.iconsList=e.icons),h()}),S(()=>e.iconSet,g=>{g&&(n(g),h(),b(()=>{u({page:1})}).catch(P=>console.error(P)),f.value&&f.value.setScrollPosition(0))}),S(()=>e.icons,g=>{e.icons!==void 0&&e.icons.length>0&&(o.iconsList=e.icons),h(),b(()=>{u({page:1})}).catch(P=>console.error(P)),f.value&&f.value.setScrollPosition(0)}),S(()=>e.filter,()=>{u({page:1,totalPages:L.value}),h()}),S(()=>e.tags,g=>{u({page:1,totalPages:L.value}),h()}),e.modelPagination&&S(()=>e.modelPagination,(g,P)=>{y(P,g)||h()}),e.modelPagination&&(S(()=>e.modelPagination.itemsPerPage,()=>{h()}),S(()=>e.modelPagination.page,()=>{h()})),()=>{function g(){if(e.modelPagination&&e.modelPagination.itemsPerPage===0)return"";const a=i.pagination&&i.pagination(),{page:m,totalPages:Q}=I.value;return a||x(J,{class:"q-icon-picker__pagination",...e.paginationProps,modelValue:m,max:Q,"onUpdate:modelValue":w=>{e.animated&&(w>m?o.direction=C.NEXT:o.direction=C.PREV),u({page:w})}})}function P(){if(e.noFooter!==!0&&e.modelPagination!==void 0){const a=i.footer&&i.footer();return x("div",{class:"q-icon-picker__footer flex flex-center"},[a?a(I.value):g()])}}function T(a){if(e.tooltips===!0)return()=>x(G,{},()=>a)}function V(a){const m=a.prefix!==void 0?a.prefix+" "+a.name:a.name;if(i.icon&&i.icon())return i.icon(m);const Q=m===e.modelValue,w=Q?e.selectedTextColor:void 0,A=Q?e.selectedColor:void 0,R=e.size?e.size:void 0;return x(W,{id:m,unelevated:!0,dense:e.dense,noWrap:!0,size:R,textColor:w,color:A,icon:m,onClick:()=>l("update:model-value",m)},T(m))}function z(){return r.value.map(a=>V(a))}function E(){const a=()=>x("div",{key:I.value.page,class:"q-icon-picker__container col"},[...z()]);if(e.animated===!0){const m="q-transition--"+(o.direction==="prev"?e.transitionPrev:e.transitionNext);return()=>x(X,{name:m,appear:!0},a)}return a}function B(){return x($,{ref:f,style:{width:o.width+"px",height:o.height+"px"}},E())}function F(){return x("div",{class:"q-icon-picker__body col column"},[B(),x(U,{onResize:a=>{o.width=a.width,o.height=a.height}})])}const _=["q-icon-picker","column"];e.color&&_.push("bg-"+e.color),e.textColor&&_.push("text-"+e.textColor);const N=x("div",{class:_.join(" ")},[F(),P()]);return b(()=>{c(),l("update:tags",o.categories)}).catch(a=>console.error(a)),N}}});const ee="2.0.7";function ne(e){e.component(q.name,q)}var ie=Object.freeze({__proto__:null,QIconPicker:q,install:ne,version:ee}),ae=H(({app:e})=>{e.use(ie)});export{ae as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
