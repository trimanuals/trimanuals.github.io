import{M as se,aC as ce,o as u,a1 as ue,a2 as A,v as F,Q as E,ai as de,a5 as j,J as fe,a7 as he,z as pe,f as ge,E as me,G as ve,bR as ye,r as L,n as g,N as U,ae as ke,U as Ce,j as be,bS as we,L as Se,V as Te,aY as ze}from"./index.6def9867.js";import{u as xe,a as qe,b as Le}from"./use-fullscreen.9a4adf4c.js";function I(t,e){if(e&&t===e)return null;const o=t.nodeName.toLowerCase();if(["div","li","ul","ol","blockquote"].includes(o)===!0)return t;const r=window.getComputedStyle?window.getComputedStyle(t):t.currentStyle,l=r.display;return l==="block"||l==="table"?t:I(t.parentNode)}function H(t,e,o){return!t||t===document.body?!1:o===!0&&t===e||(e===document?document.body:e).contains(t.parentNode)}function D(t,e,o){if(o||(o=document.createRange(),o.selectNode(t),o.setStart(t,0)),e.count===0)o.setEnd(t,e.count);else if(e.count>0)if(t.nodeType===Node.TEXT_NODE)t.textContent.length<e.count?e.count-=t.textContent.length:(o.setEnd(t,e.count),e.count=0);else for(let r=0;e.count!==0&&r<t.childNodes.length;r++)o=D(t.childNodes[r],e,o);return o}const Pe=/^https?:\/\//;class Be{constructor(e,o){this.el=e,this.eVm=o,this._range=null}get selection(){if(this.el){const e=document.getSelection();if(H(e.anchorNode,this.el,!0)&&H(e.focusNode,this.el,!0))return e}return null}get hasSelection(){return this.selection!==null?this.selection.toString().length!==0:!1}get range(){const e=this.selection;return e!==null&&e.rangeCount?e.getRangeAt(0):this._range}get parent(){const e=this.range;if(e!==null){const o=e.startContainer;return o.nodeType===document.ELEMENT_NODE?o:o.parentNode}return null}get blockParent(){const e=this.parent;return e!==null?I(e,this.el):null}save(e=this.range){e!==null&&(this._range=e)}restore(e=this._range){const o=document.createRange(),r=document.getSelection();e!==null?(o.setStart(e.startContainer,e.startOffset),o.setEnd(e.endContainer,e.endOffset),r.removeAllRanges(),r.addRange(o)):(r.selectAllChildren(this.el),r.collapseToEnd())}savePosition(){let e=-1,o;const r=document.getSelection(),l=this.el.parentNode;if(r.focusNode&&H(r.focusNode,l))for(o=r.focusNode,e=r.focusOffset;o&&o!==l;)o!==this.el&&o.previousSibling?(o=o.previousSibling,e+=o.textContent.length):o=o.parentNode;this.savedPos=e}restorePosition(e=0){if(this.savedPos>0&&this.savedPos<e){const o=window.getSelection(),r=D(this.el,{count:this.savedPos});r&&(r.collapse(!1),o.removeAllRanges(),o.addRange(r))}}hasParent(e,o){const r=o?this.parent:this.blockParent;return r!==null?r.nodeName.toLowerCase()===e.toLowerCase():!1}hasParents(e,o,r=this.parent){return r===null?!1:e.includes(r.nodeName.toLowerCase())===!0?!0:o===!0?this.hasParents(e,o,r.parentNode):!1}is(e,o){if(this.selection===null)return!1;switch(e){case"formatBlock":return o==="DIV"&&this.parent===this.el||this.hasParent(o,o==="PRE");case"link":return this.hasParent("A",!0);case"fontSize":return document.queryCommandValue(e)===o;case"fontName":const r=document.queryCommandValue(e);return r===`"${o}"`||r===o;case"fullscreen":return this.eVm.inFullscreen.value;case"viewsource":return this.eVm.isViewingSource.value;case void 0:return!1;default:const l=document.queryCommandState(e);return o!==void 0?l===o:l}}getParentAttribute(e){return this.parent!==null?this.parent.getAttribute(e):null}can(e){if(e==="outdent")return this.hasParents(["blockquote","li"],!0);if(e==="indent")return this.hasParents(["li"],!0);if(e==="link")return this.selection!==null||this.is("link")}apply(e,o,r=se){if(e==="formatBlock")["BLOCKQUOTE","H1","H2","H3","H4","H5","H6"].includes(o)&&this.is(e,o)&&(e="outdent",o=null),o==="PRE"&&this.is(e,"PRE")&&(o="P");else if(e==="print"){r();const l=window.open();l.document.write(`
        <!doctype html>
        <html>
          <head>
            <title>Print - ${document.title}</title>
          </head>
          <body>
            <div>${this.el.innerHTML}</div>
          </body>
        </html>
      `),l.print(),l.close();return}else if(e==="link"){const l=this.getParentAttribute("href");if(l===null){const f=this.selectWord(this.selection),c=f?f.toString():"";if(!c.length&&(!this.range||!this.range.cloneContents().querySelector("img")))return;this.eVm.editLinkUrl.value=Pe.test(c)?c:"https://",document.execCommand("createLink",!1,this.eVm.editLinkUrl.value),this.save(f.getRangeAt(0))}else this.eVm.editLinkUrl.value=l,this.range.selectNodeContents(this.parent),this.save();return}else if(e==="fullscreen"){this.eVm.toggleFullscreen(),r();return}else if(e==="viewsource"){this.eVm.isViewingSource.value=this.eVm.isViewingSource.value===!1,this.eVm.setContent(this.eVm.props.modelValue),r();return}document.execCommand(e,!1,o),r()}selectWord(e){if(e===null||e.isCollapsed!==!0||e.modify===void 0)return e;const o=document.createRange();o.setStart(e.anchorNode,e.anchorOffset),o.setEnd(e.focusNode,e.focusOffset);const r=o.collapsed?["backward","forward"]:["forward","backward"];o.detach();const l=e.focusNode,f=e.focusOffset;return e.collapse(e.anchorNode,e.anchorOffset),e.modify("move",r[0],"character"),e.modify("move",r[1],"word"),e.extend(l,f),e.modify("extend",r[1],"character"),e.modify("extend",r[0],"word"),e}}function Q(t,e,o){e.handler?e.handler(t,o,o.caret):o.runCmd(e.cmd,e.param)}function N(t){return u("div",{class:"q-editor__toolbar-group"},t)}function M(t,e,o,r=!1){const l=r||(e.type==="toggle"?e.toggled?e.toggled(t):e.cmd&&t.caret.is(e.cmd,e.param):!1),f=[];if(e.tip&&t.$q.platform.is.desktop){const c=e.key?u("div",[u("small",`(CTRL + ${String.fromCharCode(e.key)})`)]):null;f.push(u(de,{delay:1e3},()=>[u("div",{innerHTML:e.tip}),c]))}return u(E,{...t.buttonProps.value,icon:e.icon!==null?e.icon:void 0,color:l?e.toggleColor||t.props.toolbarToggleColor:e.color||t.props.toolbarColor,textColor:l&&!t.props.toolbarPush?null:e.textColor||t.props.toolbarTextColor,label:e.label,disable:e.disable?typeof e.disable=="function"?e.disable(t):!0:!1,size:"sm",onClick(c){o&&o(),Q(c,e,t)}},()=>f)}function $e(t,e){const o=e.list==="only-icons";let r=e.label,l=e.icon!==null?e.icon:void 0,f,c;function v(){w.component.proxy.hide()}if(o)c=e.options.map(a=>{const m=a.type===void 0?t.caret.is(a.cmd,a.param):!1;return m&&(r=a.tip,l=a.icon!==null?a.icon:void 0),M(t,a,v,m)}),f=t.toolbarBackgroundClass.value,c=[N(c)];else{const a=t.props.toolbarToggleColor!==void 0?`text-${t.props.toolbarToggleColor}`:null,m=t.props.toolbarTextColor!==void 0?`text-${t.props.toolbarTextColor}`:null,b=e.list==="no-icons";c=e.options.map(d=>{const x=d.disable?d.disable(t):!1,k=d.type===void 0?t.caret.is(d.cmd,d.param):!1;k&&(r=d.tip,l=d.icon!==null?d.icon:void 0);const S=d.htmlTip;return u(he,{active:k,activeClass:a,clickable:!0,disable:x,dense:!0,onClick(T){v(),t.contentRef.value!==null&&t.contentRef.value.focus(),t.caret.restore(),Q(T,d,t)}},()=>[b===!0?null:u(j,{class:k?a:m,side:!0},()=>u(fe,{name:d.icon!==null?d.icon:void 0})),u(j,S?()=>u("div",{class:"text-no-wrap",innerHTML:d.htmlTip}):d.tip?()=>u("div",{class:"text-no-wrap"},d.tip):void 0)])}),f=[t.toolbarBackgroundClass.value,m]}const z=e.highlight&&r!==e.label,w=u(pe,{...t.buttonProps.value,noCaps:!0,noWrap:!0,color:z?t.props.toolbarToggleColor:t.props.toolbarColor,textColor:z&&!t.props.toolbarPush?null:t.props.toolbarTextColor,label:e.fixedLabel?e.label:r,icon:e.fixedIcon?e.icon!==null?e.icon:void 0:l,contentClass:f,onShow:a=>t.emit("dropdownShow",a),onHide:a=>t.emit("dropdownHide",a),onBeforeShow:a=>t.emit("dropdownBeforeShow",a),onBeforeHide:a=>t.emit("dropdownBeforeHide",a)},()=>c);return w}function He(t){if(t.caret)return t.buttons.value.filter(e=>!t.isViewingSource.value||e.find(o=>o.cmd==="viewsource")).map(e=>N(e.map(o=>t.isViewingSource.value&&o.cmd!=="viewsource"?!1:o.type==="slot"?ce(t.slots[o.slot]):o.type==="dropdown"?$e(t,o):M(t,o))))}function Ee(t,e,o,r={}){const l=Object.keys(r);if(l.length===0)return{};const f={default_font:{cmd:"fontName",param:t,icon:o,tip:e}};return l.forEach(c=>{const v=r[c];f[c]={cmd:"fontName",param:v,icon:o,tip:v,htmlTip:`<font face="${v}">${v}</font>`}}),f}function Ne(t){if(t.caret){const e=t.props.toolbarColor||t.props.toolbarTextColor;let o=t.editLinkUrl.value;const r=()=>{t.caret.restore(),o!==t.editLinkUrl.value&&document.execCommand("createLink",!1,o===""?" ":o),t.editLinkUrl.value=null};return[u("div",{class:`q-mx-xs text-${e}`},`${t.$q.lang.editor.url}: `),u("input",{key:"qedt_btm_input",class:"col q-editor__link-input",value:o,onInput:l=>{ue(l),o=l.target.value},onKeydown:l=>{if(A(l)!==!0)switch(l.keyCode){case 13:return F(l),r();case 27:F(l),t.caret.restore(),(!t.editLinkUrl.value||t.editLinkUrl.value==="https://")&&document.execCommand("unlink"),t.editLinkUrl.value=null;break}}}),N([u(E,{key:"qedt_btm_rem",tabindex:-1,...t.buttonProps.value,label:t.$q.lang.label.remove,noCaps:!0,onClick:()=>{t.caret.restore(),document.execCommand("unlink"),t.editLinkUrl.value=null}}),u(E,{key:"qedt_btm_upd",...t.buttonProps.value,label:t.$q.lang.label.update,noCaps:!0,onClick:r})])]}}var Re=ge({name:"QEditor",props:{...me,...xe,modelValue:{type:String,required:!0},readonly:Boolean,disable:Boolean,minHeight:{type:String,default:"10rem"},maxHeight:String,height:String,definitions:Object,fonts:Object,placeholder:String,toolbar:{type:Array,validator:t=>t.length===0||t.every(e=>e.length),default:()=>[["left","center","right","justify"],["bold","italic","underline","strike"],["undo","redo"]]},toolbarColor:String,toolbarBg:String,toolbarTextColor:String,toolbarToggleColor:{type:String,default:"primary"},toolbarOutline:Boolean,toolbarPush:Boolean,toolbarRounded:Boolean,paragraphTag:{type:String,validator:t=>["div","p"].includes(t),default:"div"},contentStyle:Object,contentClass:[Object,Array,String],square:Boolean,flat:Boolean,dense:Boolean},emits:[...qe,"update:modelValue","keydown","click","focus","blur","dropdownShow","dropdownHide","dropdownBeforeShow","dropdownBeforeHide","linkShow","linkHide"],setup(t,{slots:e,emit:o}){const{proxy:r}=be(),{$q:l}=r,f=ve(t,l),{inFullscreen:c,toggleFullscreen:v}=Le(),z=ye(),w=L(null),a=L(null),m=L(null),b=L(!1),d=g(()=>!t.readonly&&!t.disable);let x,k,S=t.modelValue;document.execCommand("defaultParagraphSeparator",!1,t.paragraphTag),x=window.getComputedStyle(document.body).fontFamily;const T=g(()=>t.toolbarBg?` bg-${t.toolbarBg}`:""),K=g(()=>{const n=t.toolbarOutline!==!0&&t.toolbarPush!==!0;return{type:"a",flat:n,noWrap:!0,outline:t.toolbarOutline,push:t.toolbarPush,rounded:t.toolbarRounded,dense:!0,color:t.toolbarColor,disable:!d.value,size:"sm"}}),q=g(()=>{const n=l.lang.editor,i=l.iconSet.editor;return{bold:{cmd:"bold",icon:i.bold,tip:n.bold,key:66},italic:{cmd:"italic",icon:i.italic,tip:n.italic,key:73},strike:{cmd:"strikeThrough",icon:i.strikethrough,tip:n.strikethrough,key:83},underline:{cmd:"underline",icon:i.underline,tip:n.underline,key:85},unordered:{cmd:"insertUnorderedList",icon:i.unorderedList,tip:n.unorderedList},ordered:{cmd:"insertOrderedList",icon:i.orderedList,tip:n.orderedList},subscript:{cmd:"subscript",icon:i.subscript,tip:n.subscript,htmlTip:"x<subscript>2</subscript>"},superscript:{cmd:"superscript",icon:i.superscript,tip:n.superscript,htmlTip:"x<superscript>2</superscript>"},link:{cmd:"link",disable:s=>s.caret&&!s.caret.can("link"),icon:i.hyperlink,tip:n.hyperlink,key:76},fullscreen:{cmd:"fullscreen",icon:i.toggleFullscreen,tip:n.toggleFullscreen,key:70},viewsource:{cmd:"viewsource",icon:i.viewSource,tip:n.viewSource},quote:{cmd:"formatBlock",param:"BLOCKQUOTE",icon:i.quote,tip:n.quote,key:81},left:{cmd:"justifyLeft",icon:i.left,tip:n.left},center:{cmd:"justifyCenter",icon:i.center,tip:n.center},right:{cmd:"justifyRight",icon:i.right,tip:n.right},justify:{cmd:"justifyFull",icon:i.justify,tip:n.justify},print:{type:"no-state",cmd:"print",icon:i.print,tip:n.print,key:80},outdent:{type:"no-state",disable:s=>s.caret&&!s.caret.can("outdent"),cmd:"outdent",icon:i.outdent,tip:n.outdent},indent:{type:"no-state",disable:s=>s.caret&&!s.caret.can("indent"),cmd:"indent",icon:i.indent,tip:n.indent},removeFormat:{type:"no-state",cmd:"removeFormat",icon:i.removeFormat,tip:n.removeFormat},hr:{type:"no-state",cmd:"insertHorizontalRule",icon:i.hr,tip:n.hr},undo:{type:"no-state",cmd:"undo",icon:i.undo,tip:n.undo,key:90},redo:{type:"no-state",cmd:"redo",icon:i.redo,tip:n.redo,key:89},h1:{cmd:"formatBlock",param:"H1",icon:i.heading1||i.heading,tip:n.heading1,htmlTip:`<h1 class="q-ma-none">${n.heading1}</h1>`},h2:{cmd:"formatBlock",param:"H2",icon:i.heading2||i.heading,tip:n.heading2,htmlTip:`<h2 class="q-ma-none">${n.heading2}</h2>`},h3:{cmd:"formatBlock",param:"H3",icon:i.heading3||i.heading,tip:n.heading3,htmlTip:`<h3 class="q-ma-none">${n.heading3}</h3>`},h4:{cmd:"formatBlock",param:"H4",icon:i.heading4||i.heading,tip:n.heading4,htmlTip:`<h4 class="q-ma-none">${n.heading4}</h4>`},h5:{cmd:"formatBlock",param:"H5",icon:i.heading5||i.heading,tip:n.heading5,htmlTip:`<h5 class="q-ma-none">${n.heading5}</h5>`},h6:{cmd:"formatBlock",param:"H6",icon:i.heading6||i.heading,tip:n.heading6,htmlTip:`<h6 class="q-ma-none">${n.heading6}</h6>`},p:{cmd:"formatBlock",param:t.paragraphTag,icon:i.heading,tip:n.paragraph},code:{cmd:"formatBlock",param:"PRE",icon:i.code,htmlTip:`<code>${n.code}</code>`},"size-1":{cmd:"fontSize",param:"1",icon:i.size1||i.size,tip:n.size1,htmlTip:`<font size="1">${n.size1}</font>`},"size-2":{cmd:"fontSize",param:"2",icon:i.size2||i.size,tip:n.size2,htmlTip:`<font size="2">${n.size2}</font>`},"size-3":{cmd:"fontSize",param:"3",icon:i.size3||i.size,tip:n.size3,htmlTip:`<font size="3">${n.size3}</font>`},"size-4":{cmd:"fontSize",param:"4",icon:i.size4||i.size,tip:n.size4,htmlTip:`<font size="4">${n.size4}</font>`},"size-5":{cmd:"fontSize",param:"5",icon:i.size5||i.size,tip:n.size5,htmlTip:`<font size="5">${n.size5}</font>`},"size-6":{cmd:"fontSize",param:"6",icon:i.size6||i.size,tip:n.size6,htmlTip:`<font size="6">${n.size6}</font>`},"size-7":{cmd:"fontSize",param:"7",icon:i.size7||i.size,tip:n.size7,htmlTip:`<font size="7">${n.size7}</font>`}}}),_=g(()=>{const n=t.definitions||{},i=t.definitions||t.fonts?we(!0,{},q.value,n,Ee(x,l.lang.editor.defaultFont,l.iconSet.editor.font,t.fonts)):q.value;return t.toolbar.map(s=>s.map(h=>{if(h.options)return{type:"dropdown",icon:h.icon,label:h.label,size:"sm",dense:!0,fixedLabel:h.fixedLabel,fixedIcon:h.fixedIcon,highlight:h.highlight,list:h.list,options:h.options.map(ae=>i[ae])};const y=i[h];return y?y.type==="no-state"||n[h]&&(y.cmd===void 0||q.value[y.cmd]&&q.value[y.cmd].type==="no-state")?y:Object.assign({type:"toggle"},y):{type:"slot",slot:h}}))}),p={$q:l,props:t,slots:e,emit:o,inFullscreen:c,toggleFullscreen:v,runCmd:B,isViewingSource:b,editLinkUrl:m,toolbarBackgroundClass:T,buttonProps:K,contentRef:a,buttons:_,setContent:P};U(()=>t.modelValue,n=>{S!==n&&(S=n,P(n,!0))}),U(m,n=>{o(`link${n?"Show":"Hide"}`)});const W=g(()=>t.toolbar&&t.toolbar.length!==0),G=g(()=>{const n={},i=s=>{s.key&&(n[s.key]={cmd:s.cmd,param:s.param})};return _.value.forEach(s=>{s.forEach(h=>{h.options?h.options.forEach(i):i(h)})}),n}),J=g(()=>c.value?t.contentStyle:[{minHeight:t.minHeight,height:t.height,maxHeight:t.maxHeight},t.contentStyle]),X=g(()=>`q-editor q-editor--${b.value===!0?"source":"default"}`+(t.disable===!0?" disabled":"")+(c.value===!0?" fullscreen column":"")+(t.square===!0?" q-editor--square no-border-radius":"")+(t.flat===!0?" q-editor--flat":"")+(t.dense===!0?" q-editor--dense":"")+(f.value===!0?" q-editor--dark q-dark":"")),Y=g(()=>[t.contentClass,"q-editor__content",{col:c.value,"overflow-auto":c.value||t.maxHeight}]),Z=g(()=>t.disable===!0?{"aria-disabled":"true"}:{});function V(){if(a.value!==null){const n=`inner${b.value===!0?"Text":"HTML"}`,i=a.value[n];i!==t.modelValue&&(S=i,o("update:modelValue",i))}}function ee(n){if(o("keydown",n),n.ctrlKey!==!0||A(n)===!0){C();return}const i=n.keyCode,s=G.value[i];if(s!==void 0){const{cmd:h,param:y}=s;Se(n),B(h,y,!1)}}function te(n){C(),o("click",n)}function oe(n){if(a.value!==null){const{scrollTop:i,scrollHeight:s}=a.value;k=s-i}p.caret.save(),o("blur",n)}function ne(n){Te(()=>{a.value!==null&&k!==void 0&&(a.value.scrollTop=a.value.scrollHeight-k)}),o("focus",n)}function ie(n){const i=w.value;if(i!==null&&i.contains(n.target)===!0&&(n.relatedTarget===null||i.contains(n.relatedTarget)!==!0)){const s=`inner${b.value===!0?"Text":"HTML"}`;p.caret.restorePosition(a.value[s].length),C()}}function re(n){const i=w.value;i!==null&&i.contains(n.target)===!0&&(n.relatedTarget===null||i.contains(n.relatedTarget)!==!0)&&(p.caret.savePosition(),C())}function O(){k=void 0}function R(n){p.caret.save()}function P(n,i){if(a.value!==null){i===!0&&p.caret.savePosition();const s=`inner${b.value===!0?"Text":"HTML"}`;a.value[s]=n,i===!0&&(p.caret.restorePosition(a.value[s].length),C())}}function B(n,i,s=!0){$(),p.caret.restore(),p.caret.apply(n,i,()=>{$(),p.caret.save(),s&&C()})}function C(){setTimeout(()=>{m.value=null,r.$forceUpdate()},1)}function $(){ze(()=>{a.value!==null&&a.value.focus({preventScroll:!0})})}function le(){return a.value}return ke(()=>{p.caret=r.caret=new Be(a.value,p),P(t.modelValue),C(),document.addEventListener("selectionchange",R)}),Ce(()=>{document.removeEventListener("selectionchange",R)}),Object.assign(r,{runCmd:B,refreshToolbar:C,focus:$,getContentEl:le}),()=>{let n;if(W.value){const i=[u("div",{key:"qedt_top",class:"q-editor__toolbar row no-wrap scroll-x"+T.value},He(p))];m.value!==null&&i.push(u("div",{key:"qedt_btm",class:"q-editor__toolbar row no-wrap items-center scroll-x"+T.value},Ne(p))),n=u("div",{key:"toolbar_ctainer",class:"q-editor__toolbars-container"},i)}return u("div",{ref:w,class:X.value,style:{height:c.value===!0?"100%":null},...Z.value,onFocusin:ie,onFocusout:re},[n,u("div",{ref:a,style:J.value,class:Y.value,contenteditable:d.value,placeholder:t.placeholder,...z.listeners.value,onInput:V,onKeydown:ee,onClick:te,onBlur:oe,onFocus:ne,onMousedown:O,onTouchstartPassive:O})])}}});export{Re as Q};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
