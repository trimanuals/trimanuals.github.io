import{Q as Zd}from"./QSkeleton.4d1a7f68.js";import{f as Eu,bh as Yd,bi as Qd,n as Ae,o as gn,J as es,a8 as Jd,bj as _d,bk as $d,bl as eh,aC as th,e as rh,ac as dt,an as Lt,aU as tn,a as Ut,r as me,ap as G,ax as oe,as as V,av as ue,aS as Me,aN as Re,aw as fe,au as U,a_ as ti,ar as I,aP as Yt,aq as xe,aZ as st,a$ as Ke,aQ as Rr,bm as Ou,ao as Da,ad as Ru,aO as Ea,aM as Oa,bn as nh,Q as Ve,af as ih,a4 as ts,bo as ah,at as zt,aF as Qt,bp as rs,ai as it,b9 as Kr,bq as ha,br as ns,bs as kr,bt as oh,aK as An,b3 as sh,bu as Mu,bv as lh,b1 as Bu,N as Yr,ae as Nu,aR as uh,aV as Oo,bw as fh,aW as ch,bx as dh,by as lo,bb as ju,a6 as Iu,a7 as zu,a5 as Ro,bz as hh,bA as ol,t as vt,P as is,bB as vh,bC as sl,U as Ra,D as Uu,bD as as,bE as ll,bF as ph,az as gh,bG as yh,aJ as mh,bH as uo,bI as bh,bJ as ul,bK as fo,bL as xh}from"./index.6def9867.js";import{Q as os}from"./QInnerLoading.a2fe3785.js";import{Q as wh}from"./QPage.a93271a6.js";import{Q as ss,a as Sh}from"./QSelect.afec6258.js";import{Q as Vu}from"./QImg.7529f41e.js";import{Q as Fh}from"./QExpansionItem.46d34000.js";import{E as Ch}from"./pinch-scroll-zoom.01cb27c7.js";import{Q as kh}from"./QMarkupTable.f2c9676f.js";import{Q as Lu}from"./QBar.704848d4.js";import{u as Ma}from"./metadata.7934b3c9.js";import{Q as Th}from"./QLinearProgress.af39097c.js";import{Q as fl,a as Ah,b as Ph}from"./QStepper.dad684d9.js";import{i as Dh,n as Eh,a as Oh,t as Wu,b as Rh}from"./index.d7453927.js";import{Q as qu}from"./QEditor.3f7eb643.js";import{Q as Mh}from"./QUploader.a637749d.js";import{Q as Bh}from"./QRating.a1e00742.js";import{Q as Nh}from"./QField.d0527066.js";import{Q as jh}from"./QForm.f30bae85.js";import{u as Ih}from"./useValidations.2c9684d2.js";import{u as zh}from"./useLocaleContent.f472392b.js";import{u as Uh}from"./useViewTracking.05efe2a6.js";import{u as Vh}from"./useDwellTime.9e4cd4a0.js";import{Q as Lh}from"./QPagination.278e8c8f.js";import"./use-panel.8093defb.js";import"./use-fullscreen.9a4adf4c.js";import"./use-file.bda887f0.js";var co=Eu({name:"QBreadcrumbsEl",props:{...Yd,label:String,icon:String,tag:{type:String,default:"span"}},emits:["click"],setup(e,{slots:t}){const{linkTag:r,linkAttrs:n,linkClass:i,navigateOnClick:a}=Qd(),o=Ae(()=>({class:"q-breadcrumbs__el q-link flex inline items-center relative-position "+(e.disable!==!0?"q-link--focusable"+i.value:"q-breadcrumbs__el--disable"),...n.value,onClick:a})),l=Ae(()=>"q-breadcrumbs__el-icon"+(e.label!==void 0?" q-breadcrumbs__el-icon--with-label":""));return()=>{const u=[];return e.icon!==void 0&&u.push(gn(es,{class:l.value,name:e.icon})),e.label!==void 0&&u.push(e.label),gn(r.value,{...o.value},Jd(t.default,u))}}});const Wh=["",!0];var qh=Eu({name:"QBreadcrumbs",props:{..._d,separator:{type:String,default:"/"},separatorColor:String,activeColor:{type:String,default:"primary"},gutter:{type:String,validator:e=>["none","xs","sm","md","lg","xl"].includes(e),default:"sm"}},setup(e,{slots:t}){const r=$d(e),n=Ae(()=>`flex items-center ${r.value}${e.gutter==="none"?"":` q-gutter-${e.gutter}`}`),i=Ae(()=>e.separatorColor?` text-${e.separatorColor}`:""),a=Ae(()=>` text-${e.activeColor}`);return()=>{if(t.default===void 0)return;const o=eh(th(t.default));if(o.length===0)return;let l=1;const u=[],s=o.filter(c=>c.type!==void 0&&c.type.name==="QBreadcrumbsEl").length,f=t.separator!==void 0?t.separator:()=>e.separator;return o.forEach(c=>{if(c.type!==void 0&&c.type.name==="QBreadcrumbsEl"){const d=l<s,h=c.props!==null&&Wh.includes(c.props.disable),p=(d===!0?"":" q-breadcrumbs--last")+(h!==!0&&d===!0?a.value:"");l++,u.push(gn("div",{class:`flex items-center${p}`},[c])),d===!0&&u.push(gn("div",{class:"q-breadcrumbs__separator"+i.value},f()))}else u.push(c)}),gn("div",{class:"q-breadcrumbs"},[gn("div",{class:n.value},u)])}}}),Mo={exports:{}};(function(e,t){(function(n,i){e.exports=i()})(rh,function(){return function(r){var n={};function i(a){if(n[a])return n[a].exports;var o=n[a]={exports:{},id:a,loaded:!1};return r[a].call(o.exports,o,o.exports,i),o.loaded=!0,o.exports}return i.m=r,i.c=n,i.p="",i(0)}([function(r,n,i){var a=i(1),o=g(a),l=i(4),u=g(l),s=i(5),f=g(s),c=i(6),d=g(c),h=i(7),p=g(h),v=i(8),y=g(v);function g(w){return w&&w.__esModule?w:{default:w}}r.exports={findFirst:o.default,findAll:u.default,findAndModifyFirst:f.default,findAndModifyAll:d.default,findAndDeleteFirst:p.default,findAndDeleteAll:y.default}},function(r,n,i){Object.defineProperty(n,"__esModule",{value:!0});var a=i(2),o=l(a);function l(s){return s&&s.__esModule?s:{default:s}}var u=function(f,c,d){var h=f,p=!1,v=Object.keys(d);if(v.forEach(function(g){(0,o.default)(f[g],d[g])?p=!0:p=!1}),p)return f;var y=function g(w,S,P){var C=!1;if(w.hasOwnProperty(S)){for(var A=function(B){if(v.forEach(function(k){(0,o.default)(w[S][B][k],P[k])?C=!0:C=!1}),C)return p=!0,h=w[S][B],"break"},F=0;F<w[S].length;F++){var D=A(F);if(D==="break")break}!C&&!p&&w[S].forEach(function(O){return g(O,S,P)})}return w};return y(f,c,d),p?h:!1};n.default=u,r.exports=n.default},function(r,n,i){(function(a,o){var l=200,u="__lodash_hash_undefined__",s=1,f=2,c=9007199254740991,d="[object Arguments]",h="[object Array]",p="[object AsyncFunction]",v="[object Boolean]",y="[object Date]",g="[object Error]",w="[object Function]",S="[object GeneratorFunction]",P="[object Map]",C="[object Number]",A="[object Null]",F="[object Object]",D="[object Promise]",O="[object Proxy]",B="[object RegExp]",k="[object Set]",M="[object String]",N="[object Symbol]",T="[object Undefined]",W="[object WeakMap]",L="[object ArrayBuffer]",X="[object DataView]",Ee="[object Float32Array]",Pe="[object Float64Array]",we="[object Int8Array]",Be="[object Int16Array]",Ie="[object Int32Array]",Mt="[object Uint8Array]",Qe="[object Uint8ClampedArray]",$t="[object Uint16Array]",er="[object Uint32Array]",tr=/[\\^$.*+?()[\]{}|]/g,De=/^\[object .+?Constructor\]$/,pr=/^(?:0|[1-9]\d*)$/,ve={};ve[Ee]=ve[Pe]=ve[we]=ve[Be]=ve[Ie]=ve[Mt]=ve[Qe]=ve[$t]=ve[er]=!0,ve[d]=ve[h]=ve[L]=ve[v]=ve[X]=ve[y]=ve[g]=ve[w]=ve[P]=ve[C]=ve[F]=ve[B]=ve[k]=ve[M]=ve[W]=!1;var Nn=typeof a=="object"&&a&&a.Object===Object&&a,Ic=typeof self=="object"&&self&&self.Object===Object&&self,rr=Nn||Ic||Function("return this")(),Is=typeof n=="object"&&n&&!n.nodeType&&n,zs=Is&&typeof o=="object"&&o&&!o.nodeType&&o,Us=zs&&zs.exports===Is,eo=Us&&Nn.process,Vs=function(){try{return eo&&eo.binding&&eo.binding("util")}catch{}}(),Ls=Vs&&Vs.isTypedArray;function zc(x,E){for(var j=-1,H=x==null?0:x.length,Ne=0,le=[];++j<H;){var Le=x[j];E(Le,j,x)&&(le[Ne++]=Le)}return le}function Uc(x,E){for(var j=-1,H=E.length,Ne=x.length;++j<H;)x[Ne+j]=E[j];return x}function Vc(x,E){for(var j=-1,H=x==null?0:x.length;++j<H;)if(E(x[j],j,x))return!0;return!1}function Lc(x,E){for(var j=-1,H=Array(x);++j<x;)H[j]=E(j);return H}function Wc(x){return function(E){return x(E)}}function qc(x,E){return x.has(E)}function Kc(x,E){return x==null?void 0:x[E]}function Gc(x){var E=-1,j=Array(x.size);return x.forEach(function(H,Ne){j[++E]=[Ne,H]}),j}function Hc(x,E){return function(j){return x(E(j))}}function Xc(x){var E=-1,j=Array(x.size);return x.forEach(function(H){j[++E]=H}),j}var Zc=Array.prototype,Yc=Function.prototype,Ri=Object.prototype,to=rr["__core-js_shared__"],Ws=Yc.toString,qt=Ri.hasOwnProperty,qs=function(){var x=/[^.]+$/.exec(to&&to.keys&&to.keys.IE_PROTO||"");return x?"Symbol(src)_1."+x:""}(),Ks=Ri.toString,Qc=RegExp("^"+Ws.call(qt).replace(tr,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Gs=Us?rr.Buffer:void 0,Mi=rr.Symbol,Hs=rr.Uint8Array,Xs=Ri.propertyIsEnumerable,Jc=Zc.splice,zr=Mi?Mi.toStringTag:void 0,Zs=Object.getOwnPropertySymbols,_c=Gs?Gs.isBuffer:void 0,$c=Hc(Object.keys,Object),ro=un(rr,"DataView"),jn=un(rr,"Map"),no=un(rr,"Promise"),io=un(rr,"Set"),ao=un(rr,"WeakMap"),In=un(Object,"create"),ed=Lr(ro),td=Lr(jn),rd=Lr(no),nd=Lr(io),id=Lr(ao),Ys=Mi?Mi.prototype:void 0,oo=Ys?Ys.valueOf:void 0;function Ur(x){var E=-1,j=x==null?0:x.length;for(this.clear();++E<j;){var H=x[E];this.set(H[0],H[1])}}function ad(){this.__data__=In?In(null):{},this.size=0}function od(x){var E=this.has(x)&&delete this.__data__[x];return this.size-=E?1:0,E}function sd(x){var E=this.__data__;if(In){var j=E[x];return j===u?void 0:j}return qt.call(E,x)?E[x]:void 0}function ld(x){var E=this.__data__;return In?E[x]!==void 0:qt.call(E,x)}function ud(x,E){var j=this.__data__;return this.size+=this.has(x)?0:1,j[x]=In&&E===void 0?u:E,this}Ur.prototype.clear=ad,Ur.prototype.delete=od,Ur.prototype.get=sd,Ur.prototype.has=ld,Ur.prototype.set=ud;function nr(x){var E=-1,j=x==null?0:x.length;for(this.clear();++E<j;){var H=x[E];this.set(H[0],H[1])}}function fd(){this.__data__=[],this.size=0}function cd(x){var E=this.__data__,j=Ni(E,x);if(j<0)return!1;var H=E.length-1;return j==H?E.pop():Jc.call(E,j,1),--this.size,!0}function dd(x){var E=this.__data__,j=Ni(E,x);return j<0?void 0:E[j][1]}function hd(x){return Ni(this.__data__,x)>-1}function vd(x,E){var j=this.__data__,H=Ni(j,x);return H<0?(++this.size,j.push([x,E])):j[H][1]=E,this}nr.prototype.clear=fd,nr.prototype.delete=cd,nr.prototype.get=dd,nr.prototype.has=hd,nr.prototype.set=vd;function Vr(x){var E=-1,j=x==null?0:x.length;for(this.clear();++E<j;){var H=x[E];this.set(H[0],H[1])}}function pd(){this.size=0,this.__data__={hash:new Ur,map:new(jn||nr),string:new Ur}}function gd(x){var E=ji(this,x).delete(x);return this.size-=E?1:0,E}function yd(x){return ji(this,x).get(x)}function md(x){return ji(this,x).has(x)}function bd(x,E){var j=ji(this,x),H=j.size;return j.set(x,E),this.size+=j.size==H?0:1,this}Vr.prototype.clear=pd,Vr.prototype.delete=gd,Vr.prototype.get=yd,Vr.prototype.has=md,Vr.prototype.set=bd;function Bi(x){var E=-1,j=x==null?0:x.length;for(this.__data__=new Vr;++E<j;)this.add(x[E])}function xd(x){return this.__data__.set(x,u),this}function wd(x){return this.__data__.has(x)}Bi.prototype.add=Bi.prototype.push=xd,Bi.prototype.has=wd;function gr(x){var E=this.__data__=new nr(x);this.size=E.size}function Sd(){this.__data__=new nr,this.size=0}function Fd(x){var E=this.__data__,j=E.delete(x);return this.size=E.size,j}function Cd(x){return this.__data__.get(x)}function kd(x){return this.__data__.has(x)}function Td(x,E){var j=this.__data__;if(j instanceof nr){var H=j.__data__;if(!jn||H.length<l-1)return H.push([x,E]),this.size=++j.size,this;j=this.__data__=new Vr(H)}return j.set(x,E),this.size=j.size,this}gr.prototype.clear=Sd,gr.prototype.delete=Fd,gr.prototype.get=Cd,gr.prototype.has=kd,gr.prototype.set=Td;function Ad(x,E){var j=Ii(x),H=!j&&Wd(x),Ne=!j&&!H&&so(x),le=!j&&!H&&!Ne&&il(x),Le=j||H||Ne||le,Je=Le?Lc(x.length,String):[],$e=Je.length;for(var ze in x)(E||qt.call(x,ze))&&!(Le&&(ze=="length"||Ne&&(ze=="offset"||ze=="parent")||le&&(ze=="buffer"||ze=="byteLength"||ze=="byteOffset")||Id(ze,$e)))&&Je.push(ze);return Je}function Ni(x,E){for(var j=x.length;j--;)if(el(x[j][0],E))return j;return-1}function Pd(x,E,j){var H=E(x);return Ii(x)?H:Uc(H,j(x))}function zn(x){return x==null?x===void 0?T:A:zr&&zr in Object(x)?Nd(x):Ld(x)}function Qs(x){return Un(x)&&zn(x)==d}function Js(x,E,j,H,Ne){return x===E?!0:x==null||E==null||!Un(x)&&!Un(E)?x!==x&&E!==E:Dd(x,E,j,H,Js,Ne)}function Dd(x,E,j,H,Ne,le){var Le=Ii(x),Je=Ii(E),$e=Le?h:yr(x),ze=Je?h:yr(E);$e=$e==d?F:$e,ze=ze==d?F:ze;var ht=$e==F,Bt=ze==F,nt=$e==ze;if(nt&&so(x)){if(!so(E))return!1;Le=!0,ht=!1}if(nt&&!ht)return le||(le=new gr),Le||il(x)?_s(x,E,j,H,Ne,le):Md(x,E,$e,j,H,Ne,le);if(!(j&s)){var xt=ht&&qt.call(x,"__wrapped__"),wt=Bt&&qt.call(E,"__wrapped__");if(xt||wt){var mr=xt?x.value():x,ir=wt?E.value():E;return le||(le=new gr),Ne(mr,ir,j,H,le)}}return nt?(le||(le=new gr),Bd(x,E,j,H,Ne,le)):!1}function Ed(x){if(!nl(x)||Ud(x))return!1;var E=tl(x)?Qc:De;return E.test(Lr(x))}function Od(x){return Un(x)&&rl(x.length)&&!!ve[zn(x)]}function Rd(x){if(!Vd(x))return $c(x);var E=[];for(var j in Object(x))qt.call(x,j)&&j!="constructor"&&E.push(j);return E}function _s(x,E,j,H,Ne,le){var Le=j&s,Je=x.length,$e=E.length;if(Je!=$e&&!(Le&&$e>Je))return!1;var ze=le.get(x);if(ze&&le.get(E))return ze==E;var ht=-1,Bt=!0,nt=j&f?new Bi:void 0;for(le.set(x,E),le.set(E,x);++ht<Je;){var xt=x[ht],wt=E[ht];if(H)var mr=Le?H(wt,xt,ht,E,x,le):H(xt,wt,ht,x,E,le);if(mr!==void 0){if(mr)continue;Bt=!1;break}if(nt){if(!Vc(E,function(ir,Wr){if(!qc(nt,Wr)&&(xt===ir||Ne(xt,ir,j,H,le)))return nt.push(Wr)})){Bt=!1;break}}else if(!(xt===wt||Ne(xt,wt,j,H,le))){Bt=!1;break}}return le.delete(x),le.delete(E),Bt}function Md(x,E,j,H,Ne,le,Le){switch(j){case X:if(x.byteLength!=E.byteLength||x.byteOffset!=E.byteOffset)return!1;x=x.buffer,E=E.buffer;case L:return!(x.byteLength!=E.byteLength||!le(new Hs(x),new Hs(E)));case v:case y:case C:return el(+x,+E);case g:return x.name==E.name&&x.message==E.message;case B:case M:return x==E+"";case P:var Je=Gc;case k:var $e=H&s;if(Je||(Je=Xc),x.size!=E.size&&!$e)return!1;var ze=Le.get(x);if(ze)return ze==E;H|=f,Le.set(x,E);var ht=_s(Je(x),Je(E),H,Ne,le,Le);return Le.delete(x),ht;case N:if(oo)return oo.call(x)==oo.call(E)}return!1}function Bd(x,E,j,H,Ne,le){var Le=j&s,Je=$s(x),$e=Je.length,ze=$s(E),ht=ze.length;if($e!=ht&&!Le)return!1;for(var Bt=$e;Bt--;){var nt=Je[Bt];if(!(Le?nt in E:qt.call(E,nt)))return!1}var xt=le.get(x);if(xt&&le.get(E))return xt==E;var wt=!0;le.set(x,E),le.set(E,x);for(var mr=Le;++Bt<$e;){nt=Je[Bt];var ir=x[nt],Wr=E[nt];if(H)var al=Le?H(Wr,ir,nt,E,x,le):H(ir,Wr,nt,x,E,le);if(!(al===void 0?ir===Wr||Ne(ir,Wr,j,H,le):al)){wt=!1;break}mr||(mr=nt=="constructor")}if(wt&&!mr){var zi=x.constructor,Ui=E.constructor;zi!=Ui&&"constructor"in x&&"constructor"in E&&!(typeof zi=="function"&&zi instanceof zi&&typeof Ui=="function"&&Ui instanceof Ui)&&(wt=!1)}return le.delete(x),le.delete(E),wt}function $s(x){return Pd(x,Gd,jd)}function ji(x,E){var j=x.__data__;return zd(E)?j[typeof E=="string"?"string":"hash"]:j.map}function un(x,E){var j=Kc(x,E);return Ed(j)?j:void 0}function Nd(x){var E=qt.call(x,zr),j=x[zr];try{x[zr]=void 0;var H=!0}catch{}var Ne=Ks.call(x);return H&&(E?x[zr]=j:delete x[zr]),Ne}var jd=Zs?function(x){return x==null?[]:(x=Object(x),zc(Zs(x),function(E){return Xs.call(x,E)}))}:Hd,yr=zn;(ro&&yr(new ro(new ArrayBuffer(1)))!=X||jn&&yr(new jn)!=P||no&&yr(no.resolve())!=D||io&&yr(new io)!=k||ao&&yr(new ao)!=W)&&(yr=function(x){var E=zn(x),j=E==F?x.constructor:void 0,H=j?Lr(j):"";if(H)switch(H){case ed:return X;case td:return P;case rd:return D;case nd:return k;case id:return W}return E});function Id(x,E){return E=E==null?c:E,!!E&&(typeof x=="number"||pr.test(x))&&x>-1&&x%1==0&&x<E}function zd(x){var E=typeof x;return E=="string"||E=="number"||E=="symbol"||E=="boolean"?x!=="__proto__":x===null}function Ud(x){return!!qs&&qs in x}function Vd(x){var E=x&&x.constructor,j=typeof E=="function"&&E.prototype||Ri;return x===j}function Ld(x){return Ks.call(x)}function Lr(x){if(x!=null){try{return Ws.call(x)}catch{}try{return x+""}catch{}}return""}function el(x,E){return x===E||x!==x&&E!==E}var Wd=Qs(function(){return arguments}())?Qs:function(x){return Un(x)&&qt.call(x,"callee")&&!Xs.call(x,"callee")},Ii=Array.isArray;function qd(x){return x!=null&&rl(x.length)&&!tl(x)}var so=_c||Xd;function Kd(x,E){return Js(x,E)}function tl(x){if(!nl(x))return!1;var E=zn(x);return E==w||E==S||E==p||E==O}function rl(x){return typeof x=="number"&&x>-1&&x%1==0&&x<=c}function nl(x){var E=typeof x;return x!=null&&(E=="object"||E=="function")}function Un(x){return x!=null&&typeof x=="object"}var il=Ls?Wc(Ls):Od;function Gd(x){return qd(x)?Ad(x):Rd(x)}function Hd(){return[]}function Xd(){return!1}o.exports=Kd}).call(n,function(){return this}(),i(3)(r))},function(r,n){r.exports=function(i){return i.webpackPolyfill||(i.deprecate=function(){},i.paths=[],i.children=[],i.webpackPolyfill=1),i}},function(r,n,i){Object.defineProperty(n,"__esModule",{value:!0});var a=i(2),o=l(a);function l(s){return s&&s.__esModule?s:{default:s}}var u=function(f,c,d){var h=[];function p(v,y,g){var w=Object.keys(g),S=!1;if(w.forEach(function(B){(0,o.default)(v[B],g[B])?S=!0:S=!1}),S&&h.push(v),v.hasOwnProperty(y)){var P=!0,C=!1,A=void 0;try{for(var F=v[y][Symbol.iterator](),D;!(P=(D=F.next()).done);P=!0){var O=D.value;p(O,y,g)}}catch(B){C=!0,A=B}finally{try{!P&&F.return&&F.return()}finally{if(C)throw A}}}}return p(f,c,d),h};n.default=u,r.exports=n.default},function(r,n,i){Object.defineProperty(n,"__esModule",{value:!0});var a=i(2),o=l(a);function l(s){return s&&s.__esModule?s:{default:s}}var u=function(f,c,d,h){var p=f,v=!1,y=!1,g=Object.keys(d);if(g.forEach(function(C){(0,o.default)(f[C],d[C])?v=!0:v=!1}),v){for(var w in f)delete f[w];for(var S in h)f[S]=h[S];return f}var P=function C(A,F,D,O){if(A.hasOwnProperty(F)){for(var B=function(T){if(g.forEach(function(W){(0,o.default)(A[F][T][W],D[W])?v=!0:v=!1}),v)return A[F][T]=O,y=!0,"break"},k=0;k<A[F].length;k++){var M=B(k);if(M==="break")break}v||A[F].forEach(function(N){return C(N,F,D,O)})}return A};return P(f,c,d,h),y?p:!1};n.default=u,r.exports=n.default},function(r,n,i){Object.defineProperty(n,"__esModule",{value:!0});var a=i(2),o=l(a);function l(s){return s&&s.__esModule?s:{default:s}}var u=function(f,c,d,h){var p=!1;function v(y,g,w,S){var P=Object.keys(w),C=!1;if(P.forEach(function(T){(0,o.default)(y[T],w[T])?C=!0:C=!1}),C){for(var A in y)delete y[A];for(var F in S)y[F]=S[F];p=!0}else if(y.hasOwnProperty(g)){var D=!0,O=!1,B=void 0;try{for(var k=y[g][Symbol.iterator](),M;!(D=(M=k.next()).done);D=!0){var N=M.value;v(N,g,w,S)}}catch(T){O=!0,B=T}finally{try{!D&&k.return&&k.return()}finally{if(O)throw B}}}}return v(f,c,d,h),p?f:!1};n.default=u,r.exports=n.default},function(r,n,i){Object.defineProperty(n,"__esModule",{value:!0});var a=i(2),o=l(a);function l(s){return s&&s.__esModule?s:{default:s}}var u=function(f,c,d){var h=f,p=!1,v=function y(g,w,S){var P=Object.keys(S),C=!1;if(g.hasOwnProperty(w)){for(var A=function(B){if(P.forEach(function(k){(0,o.default)(g[w][B][k],S[k])?C=!0:C=!1}),C)return g[w].splice(B,1),p=!0,"break"},F=0;F<g[w].length;F++){var D=A(F);if(D==="break")break}C||g[w].forEach(function(O){return y(O,w,S)})}return g};return v(f,c,d),p?h:!1};n.default=u,r.exports=n.default},function(r,n,i){Object.defineProperty(n,"__esModule",{value:!0});var a=i(2),o=l(a);function l(s){return s&&s.__esModule?s:{default:s}}var u=function(f,c,d){var h=!1,p=Object.keys(d),v=!1;if(p.forEach(function(g){(0,o.default)(f[g],d[g])?v=!0:v=!1}),v)return Object.keys(f).forEach(function(g){return delete f[g]}),f;function y(g,w,S){if(g[w])for(var P=function(F){var D=Object.keys(S),O=!1;D.forEach(function(B){(0,o.default)(g[w][F][B],S[B])?O=!0:O=!1}),O&&(g[w].splice(F,1),h=!0),g[w][F].hasOwnProperty(w)&&y(g[w][F],w,S)},C=g[w].length-1;C>=0;C--)P(C)}return y(f,c,d),h?f:!1};n.default=u,r.exports=n.default}])})})(Mo);var Kh=["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","label","legend","li","link","main","map","mark","math","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rb","rp","rt","rtc","ruby","s","samp","script","search","section","select","slot","small","source","span","strong","style","sub","summary","sup","svg","table","tbody","td","template","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr"],Gh=Kh;const Hh=dt({__name:"WarningCard",props:{severity:{default:"notice"},content:{}},setup(e){const{t}=Lt(),r=tn(),{selectedViewMode:n}=Ut(r),i=me(null),a=o=>o==="note"?"notice":o;return(o,l)=>(G(),oe(U(Fh),{ref_key:"expansionItem",ref:i,"header-class":`atom__safety-${o.severity} text-h5 text-bold text-center text-uppercase border-grey-8`,label:a(o.severity),"default-opened":U(n)!==U(Ou).Overview,"expand-icon-class":{"text-white":o.severity==="danger"||o.severity==="note"||o.severity==="notice","text-black":o.severity==="warning"||o.severity==="caution","q-pr-none":!0},class:"q-my-md","expand-icon":"fas fa-angle-down"},{header:V(()=>[ue("div",{class:ti([{"text-italic":o.severity==="notice"||o.severity==="note"},"text-center full-width"])},[o.severity!=="notice"&&o.severity!=="note"?(G(),oe(es,{key:0,name:"fas fa-exclamation-triangle",size:"0.9em",style:{"vertical-align":"baseline"}})):Me("",!0),Re(" "+fe(U(t)(`warnings.${o.severity}`)),1)],2)]),default:V(()=>[I(Rr,{bordered:""},{default:V(()=>[I(Yt,null,{default:V(()=>[(G(!0),xe(Ke,null,st(o.content,(u,s)=>(G(),oe(Zr,{key:s,node:u},null,8,["node"]))),128))]),_:1})]),_:1})]),_:1},8,["header-class","label","default-opened","expand-icon-class"]))}});const Xh=dt({__name:"ImageDialog",props:{open:{type:Boolean},src:{}},emits:["close"],setup(e){const{t}=Lt(),r=Da(),n=Ru({width:0,height:0}),i=a=>Object.assign(n,a);return(a,o)=>(G(),oe(ts,{"model-value":a.open,maximized:"",onHide:o[0]||(o[0]=l=>a.$emit("close"))},{default:V(()=>[I(Rr,{class:"column"},{default:V(()=>[I(Ea,{class:"bg-primary text-white"},{default:V(()=>[I(Oa,null,{default:V(()=>[Re(fe(U(t)("documents.imageZoom"))+" ",1),ue("small",null," - "+fe(U(r).platform.is.mobile?U(t)("documents.imageZoomHelpMobile"):U(t)("documents.imageZoomHelpDesktop")),1)]),_:1}),nh(I(Ve,{flat:"",round:"",dense:"",icon:"close",class:"q-mr-xs"},null,512),[[ah]])]),_:1}),I(Yt,{class:"col justify-center q-pa-none"},{default:V(()=>[n.width?(G(),oe(U(Ch),{key:0,ref:"zoomer",width:n.width,height:n.height,"content-width":n.width,"content-height":n.height,within:""},{default:V(()=>[I(Vu,{src:a.src,"spinner-color":"primary","spinner-size":"82px",class:"fit",fit:"contain"},null,8,["src"])]),_:1},8,["width","height","content-width","content-height"])):Me("",!0),I(ih,{debounce:0,onResize:i})]),_:1})]),_:1})]),_:1},8,["model-value"]))}}),Zh={key:0},Yh=dt({__name:"MarkupTable",props:{content:{},widths:{default:""},fixed:{type:Boolean}},setup(e){const t=Da(),r=e,n=Ae(()=>{const i=r.widths.split(" ").map(o=>parseInt(o,10));if(r.fixed)return i;const a=i.reduce((o,l)=>o+l,0);return i.map(o=>o/a*100)});return(i,a)=>(G(),oe(kh,{dense:U(t).screen.lt.lg,square:"",flat:"","wrap-cells":"",separator:"none"},{default:V(()=>[i.widths?(G(),xe("colgroup",Zh,[(G(!0),xe(Ke,null,st(n.value,(o,l)=>(G(),xe("col",{key:l,style:zt({width:`${o}%`}),span:"1"},null,4))),128))])):Me("",!0),(G(!0),xe(Ke,null,st(i.content,(o,l)=>(G(),oe(Zr,{key:l,node:o},null,8,["node"]))),128))]),_:1},8,["dense"]))}}),Qh={class:"text-caption"},Jh=["src"],_h={class:"ellipsis fragment-chip"},$h={key:1},e0=dt({__name:"FragmentUser",props:{node:{}},setup(e){const t=Ma(),{luminosity:r,lighten:n}=ns,i=e,a=Qt("product"),{metadata:o}=Ut(t),l=Ae(()=>kr.exports.keyBy(o.value,"systemTitle")),u=Ae(()=>{const p={engineNo:"engine-numberTaxonomyLink",serialNumberStub:"vin-numberTaxonomyLink",modelCode:"ModelsTaxonomyLink",marketSpec:"MarketsTaxonomyLink",modelYear:"ModelYearTaxonomyLink"};return a!=null&&a.value?Object.keys(a.value).map(v=>p[v]).filter(Boolean):Object.values(p)}),s=Ae(()=>kr.exports.pickBy(i.node.metadata,(p,v)=>!u.value.includes(v)&&!"All".split(",").includes(p))),f=p=>r(p)>=.5?"black":"white",c=Lt(),{t:d}=c,h=p=>p.title&&p.title[c.locale.value]?p.title[c.locale.value]:p.title&&p.title[c.fallbackLocale.value.toString()]?p.title[c.fallbackLocale.value.toString()]:p.systemTitle;return(p,v)=>u.value.length&&!!Object.keys(s.value).length?(G(),oe(Rr,{key:0,flat:!0,bordered:"",class:"q-mb-sm"},{default:V(()=>[I(Lu,{class:"bg-grey-2"},{default:V(()=>[ue("span",Qh,fe(U(d)("documents.fragments.classification"))+":",1),(G(!0),xe(Ke,null,st(s.value,(y,g)=>{var w,S;return G(),oe(ss,{key:g,dense:"",style:zt([{"max-width":"140px"},{backgroundColor:U(n)((w=l.value[g])==null?void 0:w.colour,75)}]),"text-color":f(U(n)((S=l.value[g])==null?void 0:S.colour,75))},{default:V(()=>{var P,C,A,F,D;return[I(rs,{icon:((P=l.value[g])==null?void 0:P.avatarUrl)&&((C=l.value[g])==null?void 0:C.useImage)||(A=l.value[g])==null?void 0:A.icon,style:zt({backgroundColor:(F=l.value[g])==null?void 0:F.colour}),"text-color":f((D=l.value[g])==null?void 0:D.colour)},{default:V(()=>{var O,B,k;return[((O=l.value[g])==null?void 0:O.avatarUrl)&&((B=l.value[g])==null?void 0:B.useImage)?(G(),xe("img",{key:0,src:(k=l.value[g])==null?void 0:k.avatarUrl},null,8,Jh)):Me("",!0),I(it,null,{default:V(()=>[Re(fe(h(l.value[g])),1)]),_:2},1024)]}),_:2},1032,["icon","style","text-color"]),ue("div",_h,[Re(fe(y)+" ",1),I(it,null,{default:V(()=>[Re(fe(y),1)]),_:2},1024)])]}),_:2},1032,["style","text-color"])}),128))]),_:1}),I(Kr),I(Yt,{class:"fragment"},{default:V(()=>[ha(p.$slots,"default")]),_:3})]),_:3})):(G(),xe("div",$h,[ha(p.$slots,"default")]))}}),t0={class:"text-caption"},r0=["src"],n0={class:"ellipsis fragment-chip"},i0=dt({__name:"FragmentAdmin",props:{node:{}},setup(e){const{luminosity:t,lighten:r}=ns,n=Ma(),i=Lt(),{t:a}=i,{metadata:o}=Ut(n),l=Ae(()=>kr.exports.keyBy(o.value,"systemTitle")),u=f=>t(f)>=.5?"black":"white",s=f=>f.title&&f.title[i.locale.value]?f.title[i.locale.value]:f.title&&f.title[i.fallbackLocale.value.toString()]?f.title[i.fallbackLocale.value.toString()]:f.systemTitle;return(f,c)=>(G(),oe(Rr,{square:"",flat:"",bordered:"",class:"q-mb-sm"},{default:V(()=>[I(Lu,{class:"bg-grey-2"},{default:V(()=>[ue("span",t0,fe(U(a)("documents.fragments.classification"))+":",1),(G(!0),xe(Ke,null,st(f.node.metadata,(d,h)=>{var p,v;return G(),oe(ss,{key:h,dense:"",style:zt([{"max-width":"140px"},{backgroundColor:U(r)((p=l.value[h])==null?void 0:p.colour,75)}]),"text-color":u(U(r)((v=l.value[h])==null?void 0:v.colour,75))},{default:V(()=>{var y,g,w,S,P;return[I(rs,{icon:((y=l.value[h])==null?void 0:y.avatarUrl)&&((g=l.value[h])==null?void 0:g.useImage)||(w=l.value[h])==null?void 0:w.icon,style:zt({backgroundColor:(S=l.value[h])==null?void 0:S.colour}),"text-color":u((P=l.value[h])==null?void 0:P.colour)},{default:V(()=>{var C,A,F;return[((C=l.value[h])==null?void 0:C.avatarUrl)&&((A=l.value[h])==null?void 0:A.useImage)?(G(),xe("img",{key:0,src:(F=l.value[h])==null?void 0:F.avatarUrl},null,8,r0)):Me("",!0),I(it,null,{default:V(()=>[Re(fe(s(l.value[h])),1)]),_:2},1024)]}),_:2},1032,["icon","style","text-color"]),ue("div",n0,[Re(fe(d)+" ",1),I(it,null,{default:V(()=>[Re(fe(d),1)]),_:2},1024)])]}),_:2},1032,["style","text-color"])}),128))]),_:1}),I(Kr),I(Yt,{class:"fragment"},{default:V(()=>[ha(f.$slots,"default")]),_:3})]),_:3}))}}),cl=dt({inheritAttrs:!1,__name:"RawText",setup(e){return(t,r)=>ha(t.$slots,"default")}});const a0={flat:""},Ku=dt({__name:"DocumentLink",props:{link:{},linkTarget:{}},setup(e){const t=tn(),{replaceCurrentTab:r,addNewTab:n}=t;return(i,a)=>(G(),xe("span",a0,[ue("a",{class:"topic_link cursor-pointer",role:"link",size:"1em",padding:"0",onClick:a[0]||(a[0]=o=>U(r)(i.linkTarget))},[I(Zr,{node:i.link},null,8,["node"])]),I(Ve,{flat:"",dens:"",icon:"far fa-external-link-square-alt",size:"sm",color:"grey-5",padding:"3px",role:"link",onClick:a[1]||(a[1]=o=>U(n)(i.$route.params.id.toString(),i.linkTarget))},{default:V(()=>[I(it,{delay:300,class:"text-caption"},{default:V(()=>[Re(fe(i.$t("documents.openInNewTab")),1)]),_:1})]),_:1})]))}}),o0=["innerHTML"],s0={class:"text-caption"},l0=["src"],u0={class:"fragment-chip"},Zr=dt({__name:"DocumentElement",props:{node:{}},setup(e){const{luminosity:t,lighten:r,getPaletteColor:n}=ns,i=e,a=tn(),{contentFontSize:o}=Ut(a),l=oh(),{searchQuery:u}=Ut(l),s=Ma(),{metadata:f}=Ut(s),c=An(),d=Da(),{locale:h,fallbackLocale:p}=Lt(),v=me(!1),y=Ae(()=>!!i.node&&i.node.body!==`\r
`&&(typeof i.node.body=="string"?!i.node.body.match(/^\s*\r\n\s*$/):!0)),g=Qt("product"),w=Ae(()=>kr.exports.mapValues(kr.exports.keyBy(f.value,"systemTitle"),T=>({...T,color:T.colour}))),S=Ae(()=>`${Bu()}/documents/${c.params.id}/images`),P=Ae(()=>{const T={engineNo:"engine-numberTaxonomyLink",serialNumberStub:"vin-numberTaxonomyLink",modelCode:"ModelsTaxonomyLink",marketSpec:"MarketsTaxonomyLink",modelYear:"ModelYearTaxonomyLink"};return g!=null&&g.value&&c.name==="document"?Object.keys(g.value).map(W=>T[W]).filter(Boolean):Object.values(T)}),C=Ae(()=>c.name==="documentPreview"?kr.exports.pickBy(i.node.metadata,(T,W)=>P.value.includes(W)):kr.exports.pickBy(i.node.metadata,(T,W)=>!P.value.includes(W)&&!"All".split(",").includes(T))),A=(T,W)=>typeof T!="string"||!W?T:T.replace(new RegExp(`(${W})`,"gi"),"<mark>$1</mark>"),F=T=>!!Gh.filter(L=>!["title","link","img","table","td"].includes(L)).includes(T),D={link:Ku,text:cl,img:Vu,"inline-img":"img",title:"h1","image-container":"figure","image-title":"figcaption",table:Yh,conditions:"ul",condition:"li",instructions:"ol",instruction:"li",safety:Hh,cause:"p",consequence:"p",emphasis:"span",subheading:"h2",margin_text:"h2",embedded_safety:"span",variable:"span",textmodule:c.name==="documentPreview"?i0:e0,"procedural-instructions":"div",intermediateresult:"div",results:"ul",result:"li","table-container":"div",td:"td",tr:"tr",li:"li",safety_conditions:"ul",safety_condition:"li",safety_instructions:"ol",safety_instruction:"li",safety_intermediateresult:"p",safety_results:"ul",safety_result:"li",linklist:"div",codeblock:"pre"},O=T=>F(T)?T:D[T]||"span",B=T=>{switch(T){case"img":v.value=!0;break}},k=T=>t(T)>=.5?"black":"white",M=T=>T.title&&T.title[h.value]?T.title[h.value]:T.title&&T.title[p.value.toString()]?T.title[p.value.toString()]:T.systemTitle,N=Ae(()=>{const T=i.node;return[F(T.node)||T.node==="text"?void 0:T.node==="emphasis"?`atom__emphasis-${T.type}`:T.node==="embedded_safety"?`atom__embedded-safety-${T.severity}`:T.divider?"bg-grey-5":T.node==="variable"?"variable":T.type==="divider"?"bg-grey-5":T.align==="center"?"text-center":T.node,{"cursor-help bg-yellow-2":(T.node==="tr"||T.node==="li"||T.node==="instruction")&&!!T.metadata&&!!Object.keys(C.value).length&&P.value.length}]});return(T,W)=>{var X,Ee;const L=sh("DocumentElement",!0);return y.value?(G(),oe(lh(O(T.node.node)),{key:0,class:ti(N.value),src:T.node.node==="img"?`${S.value}/${T.node.href}`:T.node.node==="inline-img"?`${S.value}/${T.node.href}`:void 0,contain:T.node.node==="img"||void 0,severity:T.node.node==="safety"?T.node.severity:void 0,content:T.node.node==="safety"||T.node.node==="table"?T.node.body:void 0,widths:T.node.node==="table"?T.node.widths:void 0,flat:["table","textmodule","link"].includes(T.node.node)||void 0,separator:T.node.node==="table"?"none":void 0,"data-detail-level":(X=T.node.metadata)==null?void 0:X.ATOMDetailLevel,colspan:T.node.colspan,rowspan:T.node.rowspan,"wrap-cells":T.node.node==="table"||void 0,"data-type":T.node.type,dense:U(d).screen.lt.lg&&T.node.node==="table"||T.node.node==="link"||void 0,square:T.node.node==="table"||void 0,node:T.node.node==="textmodule"?T.node:void 0,fixed:T.node.node==="table"&&T.node.type==="fixed"||void 0,style:zt(T.node.node.includes("title")?`font-size: ${22+(U(o)-16)}px`:`font-size: ${U(o)}px`),link:T.node.node==="link"?T.node.body[0]:void 0,"link-target":T.node.node==="link"?(Ee=T.node)==null?void 0:Ee["target-base-id"]:void 0,onClick:W[1]||(W[1]=Pe=>B(T.node.node))},{default:V(()=>[T.node.node==="text"||typeof T.node.body=="string"?(G(),xe(Ke,{key:0},[U(u)?(G(),xe("span",{key:0,innerHTML:A(T.node.body,U(u))},null,8,o0)):(G(),oe(cl,{key:1},{default:V(()=>[Re(fe(T.node.body),1)]),_:1}))],64)):(G(!0),xe(Ke,{key:1},st(T.node.body.filter(Boolean),(Pe,we)=>(G(),oe(L,{key:we,node:Pe},null,8,["node"]))),128)),T.node.node==="img"?(G(),oe(Xh,{key:2,src:`${S.value}/${T.node.href}`,open:v.value,content:T.node,onClose:W[0]||(W[0]=Pe=>v.value=!1)},null,8,["src","open","content"])):Me("",!0),(T.node.node==="tr"||T.node.node==="li"||T.node.node==="instruction")&&!!T.node.metadata&&!!Object.keys(C.value).length?(G(),oe(it,{key:3,anchor:"top middle",self:"bottom middle","hide-delay":300},{default:V(()=>[ue("div",s0,fe(T.$t("documents.fragments.classification"))+": ",1),(G(!0),xe(Ke,null,st(C.value,(Pe,we)=>{var Be,Ie;return G(),oe(ss,{key:we,dense:"",style:zt({backgroundColor:U(r)((Be=w.value[we])==null?void 0:Be.colour,75)}),"text-color":k(U(r)((Ie=w.value[we])==null?void 0:Ie.colour,75))},{default:V(()=>{var Mt,Qe,$t,er,tr;return[I(rs,{icon:((Mt=w.value[we])==null?void 0:Mt.avatarUrl)&&((Qe=w.value[we])==null?void 0:Qe.useImage)||($t=w.value[we])==null?void 0:$t.icon,style:zt({backgroundColor:(er=w.value[we])==null?void 0:er.colour}),"text-color":k((tr=w.value[we])==null?void 0:tr.colour)},{default:V(()=>{var De,pr,ve;return[((De=w.value[we])==null?void 0:De.avatarUrl)&&((pr=w.value[we])==null?void 0:pr.useImage)?(G(),xe("img",{key:0,src:(ve=w.value[we])==null?void 0:ve.avatarUrl},null,8,l0)):Me("",!0)]}),_:2},1032,["icon","style","text-color"]),ue("div",u0,[Re(fe(M(w.value[we]))+": ",1),(G(!0),xe(Ke,null,st(Pe.split("; "),(De,pr)=>{var ve,Nn;return G(),oe(Mu,{key:pr,class:"q-mx-xs",rounded:"",style:zt({backgroundColor:((ve=w.value[we])==null?void 0:ve.colour)||U(n)("accent"),color:k(((Nn=w.value[we])==null?void 0:Nn.colour)||U(n)("accent"))})},{default:V(()=>[Re(fe(De),1)]),_:2},1032,["style"])}),128))])]}),_:2},1032,["style","text-color"])}),128))]),_:1})):Me("",!0)]),_:1},8,["class","src","contain","severity","content","widths","flat","separator","data-detail-level","colspan","rowspan","wrap-cells","data-type","dense","square","node","fixed","style","link","link-target"])):Me("",!0)}}});const f0={class:"absolute-full flex flex-center"},c0={class:"col"},d0={class:"col"},h0={class:"col"},v0={class:"col"},p0=dt({__name:"ProcedureStepper",props:{content:{}},emits:["finish"],setup(e,{emit:t}){const r=e,n=t,{t:i}=Lt(),a=me(0),o=me(null),l=Ae(()=>{const f=r.content.reduce((p,v,y)=>(v.node==="procedural-instructions"&&p.push(y),p),[]),c=[];let d=0;for(let p of f){const v=r.content.slice(d,p);c.push(v);const y=r.content.slice(p,p+1)[0];if(typeof y.body=="string")return;y.body.filter(w=>w.node!=="text").flat().forEach(w=>{typeof w.body!="string"&&c.push(...w.body.filter(S=>S.node!=="text").filter(S=>S.metadata?S.metadata.ATOMDetailLevel==="DetailedOnly":!0))}),d=p+1}const h=r.content.slice(f[f.length-1]+1).filter(p=>p.node!=="linklist").filter(p=>p.node!=="image");return c.push(h),c.filter(p=>(Array.isArray(p)&&p.length,!0))}),u=An();Yr(()=>u.fullPath,()=>a.value=0);const s=()=>{a.value=0,n("finish")};return(f,c)=>(G(),xe(Ke,null,[I(Zr,{node:f.content[0]},null,8,["node"]),l.value?(G(),oe(Th,{key:0,"model-value":a.value/(l.value.length-1),color:"accent",size:"20px","track-color":"grey-4"},{default:V(()=>[ue("div",f0,[I(Mu,{label:`${a.value+1}/${l.value.length}`,color:"grey-4","text-color":"black"},null,8,["label"])])]),_:1},8,["model-value"])):Me("",!0),!!o.value&&l.value?(G(),oe(fl,{key:1,class:"row q-col-gutter-md"},{default:V(()=>[ue("div",c0,[I(Ve,{disable:a.value<1,label:U(i)("buttons.back"),color:"primary",class:"full-width",onClick:c[0]||(c[0]=d=>o.value.previous())},null,8,["disable","label"])]),ue("div",d0,[I(Ve,{label:a.value===l.value.length-1?"Finish":"Continue",color:"primary",class:"full-width",onClick:c[1]||(c[1]=d=>a.value===l.value.length-1?s():o.value.next())},null,8,["label"])])]),_:1})):Me("",!0),I(U(Ph),{ref_key:"stepper",ref:o,modelValue:a.value,"onUpdate:modelValue":c[2]||(c[2]=d=>a.value=d),color:"primary",animated:"",contracted:"",flat:"","done-icon":"fad fa-check-circle","active-icon":"fad fa-play-circle","header-class":"hidden",class:"col atom__proc-stepper"},{default:V(()=>[(G(!0),xe(Ke,null,st(l.value,(d,h)=>(G(),oe(Ah,{key:h,name:h,done:a.value>h,icon:`${h}`,title:`${h}`},{default:V(()=>[Array.isArray(d)?(G(!0),xe(Ke,{key:0},st(d,(p,v)=>(G(),oe(Zr,{key:p.node+v,node:p},null,8,["node"]))),128)):(G(),oe(Zr,{key:"text"+h,node:d},null,8,["node"]))]),_:2},1032,["name","done","icon","title"]))),128))]),_:1},8,["modelValue"]),!!o.value&&l.value?(G(),oe(fl,{key:2,class:"row q-col-gutter-md"},{default:V(()=>[ue("div",h0,[I(Ve,{disable:a.value<1,label:U(i)("buttons.back"),color:"primary",class:"full-width",onClick:c[3]||(c[3]=d=>o.value.previous())},null,8,["disable","label"])]),ue("div",v0,[I(Ve,{label:a.value===l.value.length-1?"Finish":"Continue",color:"primary",class:"full-width",onClick:c[4]||(c[4]=d=>{var h;return a.value===l.value.length-1?s():(h=o.value)==null?void 0:h.next()})},null,8,["label"])])]),_:1})):Me("",!0)],64))}});function g0(){const e=me(0),t=me(null),r=tn(),{currentTopic:n,trackedSession:i}=Ut(r),a=()=>{const s=window.scrollY,f=document.documentElement.offsetHeight,c=window.innerHeight,d=f-c;e.value=s/d*100>e.value?s/d*100:e.value},o=()=>{e.value=0,window.addEventListener("scroll",a),a()},l=async()=>{await u(),window.removeEventListener("scroll",a)};Nu(()=>{var s;t.value=(s=n.value)==null?void 0:s._id,o(),window.addEventListener("beforeunload",u)}),uh(l);const u=async()=>{try{await Oo.post("/tracking/completion",{_id:i.value,topicId:t.value,completion:e.value||0})}catch(s){console.error("Error in API request:",s)}};return Yr(n,s=>{l(),o(),t.value=s==null?void 0:s._id}),{scrollPercentage:e}}function y0(e){var t;const r=Wu(e);return(t=r==null?void 0:r.$el)!=null?t:r}const Gu=Dh?window:void 0;function m0(...e){let t,r,n,i;if(typeof e[0]=="string"||Array.isArray(e[0])?([r,n,i]=e,t=Gu):[t,r,n,i]=e,!t)return Eh;Array.isArray(r)||(r=[r]),Array.isArray(n)||(n=[n]);const a=[],o=()=>{a.forEach(f=>f()),a.length=0},l=(f,c,d,h)=>(f.addEventListener(c,d,h),()=>f.removeEventListener(c,d,h)),u=Yr(()=>[y0(t),Wu(i)],([f,c])=>{if(o(),!f)return;const d=Oh(c)?{...c}:c;a.push(...r.flatMap(h=>n.map(p=>l(f,h,p,d))))},{immediate:!0,flush:"post"}),s=()=>{u(),o()};return Rh(s),s}function b0(e={}){const{window:t=Gu,behavior:r="auto"}=e;if(!t)return{x:me(0),y:me(0)};const n=me(t.scrollX),i=me(t.scrollY),a=Ae({get(){return n.value},set(l){scrollTo({left:l,behavior:r})}}),o=Ae({get(){return i.value},set(l){scrollTo({top:l,behavior:r})}});return m0(t,"scroll",()=>{n.value=t.scrollX,i.value=t.scrollY},{capture:!1,passive:!0}),{x:a,y:o}}const x0={key:0},w0={class:"row"},S0={class:"col"},F0=dt({__name:"TopicContent",props:{loading:{type:Boolean}},setup(e){const t=tn(),{currentDocument:r,currentTopic:n,productContext:i,filteredToc:a,tabScrollPositions:o,rootTopic:l,selectedViewMode:u}=Ut(t),{replaceCurrentTab:s}=t,{x:f,y:c}=b0();fh(()=>{var k;!n.value||(o.value[(k=n.value)==null?void 0:k.id]={x:f.value,y:c.value})});const d=An(),{t:h}=Lt(),p=Da(),v=!1;ch("product",i);const y=Ae(()=>{var k;return{node:"root",body:kr.exports.cloneDeep((k=n.value)==null?void 0:k.content)}});g0();const g=Ae(()=>{const k={engineNo:"engine-numberTaxonomyLink",serialNumberStub:"vin-numberTaxonomyLink",modelCode:"ModelsTaxonomyLink",marketSpec:"MarketsTaxonomyLink",modelYear:"ModelYearTaxonomyLink"},M=ol(y.value,(T,W,L)=>T.node==="title"&&L.node==="textmodule"?!1:T.name!=="LayoutMarker",{leavesOnly:!1,childrenPath:["body"],onFalse:{skipChildren:!0}});return d.name==="documentPreview"?M:ol(M,T=>!["textmodule","li","tr","instruction"].includes(T.node)||!T.metadata?!0:Object.entries(k).map(([L,X])=>{var Ee,Pe,we,Be,Ie,Mt,Qe;if(!((Ee=T.metadata)!=null&&Ee.hasOwnProperty(X))||!((Pe=vt(i))!=null&&Pe.hasOwnProperty(L)))return!0;switch(L){case"marketSpec":return w(T,(we=vt(i))==null?void 0:we[L]);case"engineNo":return S(T,(Be=vt(i))==null?void 0:Be[L]);case"serialNumberStub":return P(T,(Ie=vt(i))==null?void 0:Ie[L]);case"modelCode":return C(T,(Mt=vt(i))==null?void 0:Mt[L]);case"modelYear":return A(T,(Qe=vt(i))==null?void 0:Qe[L]);default:return!0}}).every(L=>L===!0),{leavesOnly:!1,childrenPath:["body"],onFalse:{skipChildren:!0}})}),{checkMarket:w,checkEngineNo:S,checkSerial:P,checkModelCode:C,checkModelYear:A}=dh(),F=Ae(()=>{var k;return Mo.exports.findFirst({id:"root",title:"root",children:a.value},"children",{id:(k=n.value)==null?void 0:k.id})}),D=Ae(()=>{var k,M;return(M=(k=F.value)==null?void 0:k.metadata)==null?void 0:M["custom-meta-ModelsAffected2"]}),O=k=>Mo.exports.findFirst({id:"root",title:"root",children:a.value},"children",{id:k}).title,B=()=>{u.value=Ou.Standard};return(k,M)=>{var N;return G(),oe(Rr,{id:"topic-content",dir:(N=U(r))!=null&&N.language.includes("ar-")?"rtl":"ltr",class:ti([{"admin-preview":U(d).path.includes("document-preview")},"q-pt-none bg-transparent print-hide"]),flat:""},{default:V(()=>{var T;return[I(Yt,{class:ti(["print-hide",{"q-py-xs":U(lo)(),"bg-grey-4":U(lo)()}])},{default:V(()=>[I(qh,null,{default:V(()=>{var W,L;return[I(co,{icon:U(lo)()?"fal fa-home":"fas fa-home",class:"cursor-pointer",onClick:M[0]||(M[0]=X=>U(s)(U(l).id))},null,8,["icon"]),(G(!0),xe(Ke,null,st((W=U(n))==null?void 0:W.ancestors,X=>(G(),oe(co,{key:X,label:O(X),class:"cursor-pointer",onClick:Ee=>U(s)(X)},null,8,["label","onClick"]))),128)),I(co,{label:(L=U(n))==null?void 0:L.title},null,8,["label"])]}),_:1})]),_:1},8,["class"]),D.value?(G(),oe(Yt,{key:0,class:"atom__topic-content q-mx-auto"},{default:V(()=>[I(Rr,{flat:"",bordered:"",class:"border-grey-8"},{default:V(()=>[I(Ea,{class:"bg-info text-white"},{default:V(()=>[I(Oa,null,{default:V(()=>[I(es,{name:"fad fa-info-circle",color:"white"}),Re(" "+fe(U(h)("library.modelsAffected")),1)]),_:1})]),_:1}),I(Yt,null,{default:V(()=>[Re(fe(F.value.metadata["custom-meta-ModelsAffected2"]),1)]),_:1})]),_:1})]),_:1})):Me("",!0),I(Yt,{class:ti([[U(u),`atom__topic-type--${(T=U(n))==null?void 0:T.infoType}`],"atom__topic-content q-mx-auto"]),style:zt({"user-select":U(v)?void 0:"none"}),onContextmenu:M[1]||(M[1]=hh(()=>{},["prevent"]))},{default:V(()=>[!U(n)||!Object.keys(U(n)).length&&!k.loading?(G(),xe("div",x0,fe(U(h)("documents.emptyTopic")),1)):Me("",!0),U(u)==="detailed"?(G(),oe(p0,{key:1,content:g.value.body.filter(Boolean),onFinish:B},null,8,["content"])):g.value.body?(G(!0),xe(Ke,{key:2},st(g.value.body.filter(Boolean),(W,L)=>(G(),xe(Ke,{key:W.node+L},[!!W&&W.node!=="linklist"?(G(),oe(Zr,{key:W.node+L,node:W},null,8,["node"])):Me("",!0)],64))),128)):Me("",!0),F.value.children&&F.value.children.length?(G(),oe(ju,{key:3,dense:U(p).screen.lt.sm,bordered:"",class:"q-my-lg print-hide",separator:""},{default:V(()=>[I(Iu,{header:""},{default:V(()=>[Re(fe(U(h)("documents.furtherReading")),1)]),_:1}),(G(!0),xe(Ke,null,st(F.value.children,W=>(G(),oe(zu,{key:W.key},{default:V(()=>[I(Ro,null,{default:V(()=>[ue("div",w0,[ue("div",S0,[I(Ku,{link:{node:"text",body:W.title},"link-target":W.id},null,8,["link","link-target"])])])]),_:2},1024)]),_:2},1024))),128))]),_:1},8,["dense"])):Me("",!0)]),_:1},8,["class","style"])]}),_:1},8,["dir","class"])}}}),C0={key:1,class:"text-negative"},k0={class:"q-mt-md"},T0={class:"q-my-md q-gutter-x-md"},A0=dt({__name:"FeedbackDialog",props:{topicData:{}},setup(e){const{isRequired:t}=Ih(),{t:r}=Lt(),n=An(),{result:i}=zh(),a=e,o=Qt("event-bus"),l=me(!1),u=me(""),s=me(""),f=me(null),c=me(!1),d=me(0),h=me(["orange-2","orange-4","orange","orange-9","orange-10"]),p=me(!1),v=me(r("errors.required")),y=me([]),g=me(!0),w=()=>{c.value=!1,u.value="",d.value=0,p.value=!1,f.value=null,s.value=""},S=()=>{l.value=!0},P=()=>{l.value=!1,w()},C=tn(),{productContextType:A,productContext:F}=Ut(C),D=async B=>{var N;if(c.value=!0,!a.topicData){c.value=!1;return}const k=new FormData;k.append("content",B),k.append("rating",`${d.value}`),k.append("subscribed",`${g.value}`),s.value&&k.append("category",`${s.value}`);const M=(N=vt(F))==null?void 0:N._id;n.name!=="documentPreview"&&M&&(vt(A)==="model"?k.append("modelId",M):vt(A)==="product"&&k.append("productId",M)),y.value&&y.value.forEach(T=>{k.append("files",T)});try{B||(p.value=!0),await Oo.post(`/feedback/${a.topicData.parentDocument._id}/${a.topicData._id}`,k),w(),P(),ll("positive")}catch(T){sl(T,!0,r("errors.failedToSave",[r("entityTypes.feedback")])),ll("negative")}},O=me([]);return is(async()=>{if(n.name&&["document","documentPreview"].includes(n.name.toString()))try{await Oo.get("/feedback-categories").then(({data:B})=>{O.value=[...B,{_id:null,displayName:{[vh.en_gb]:r("forms.other")}}]}),o==null||o.on("openFeedback",S)}catch(B){sl(B)}}),Ra(()=>{o==null||o.off("openFeedback")}),(B,k)=>(G(),oe(ts,{"model-value":l.value,maximized:"",position:"right",onHide:P},{default:V(()=>[I(Rr,{style:{width:"500px"}},{default:V(()=>[I(Ea,{class:"bg-primary text-white"},{default:V(()=>[I(Oa,null,{default:V(()=>[Re(fe(U(r)("feedback.featureName")),1)]),_:1}),I(Uu,{modelValue:g.value,"onUpdate:modelValue":k[0]||(k[0]=M=>g.value=M),"checked-icon":"fas fa-bell","unchecked-icon":"fas fa-bell-slash"},{default:V(()=>[I(it,null,{default:V(()=>[Re(fe(U(r)("feedback.subscribeHint")),1)]),_:1})]),_:1},8,["modelValue"]),I(Ve,{flat:"",stretch:"",icon:"close",onClick:P})]),_:1}),I(jh,{enctype:"multipart/form-data",onSubmit:k[5]||(k[5]=M=>D(u.value)),onReset:w},{default:V(()=>[I(Yt,{class:"q-gutter-y-sm"},{default:V(()=>[O.value.length?(G(),oe(Sh,{key:0,modelValue:s.value,"onUpdate:modelValue":k[1]||(k[1]=M=>s.value=M),options:O.value,label:U(r)("feedback.category"),"emit-value":"","map-options":"","option-label":M=>M?U(i)(M.displayName):"","option-value":"_id",rules:[M=>M===null||U(t)(M)]},null,8,["modelValue","options","label","option-label","rules"])):Me("",!0),I(qu,{ref:"editor",modelValue:u.value,"onUpdate:modelValue":k[2]||(k[2]=M=>u.value=M),toolbar:[["left","center","right","justify"],["bold","italic","strike","underline"]],"min-height":"5rem",placeholder:U(r)("feedback.placeholder")},null,8,["modelValue","placeholder"]),p.value?(G(),xe("p",C0,fe(v.value),1)):Me("",!0),ue("div",k0,[I(Mh,{ref:"uploader",disable:!u.value,"hide-upload-btn":"",label:U(r)("feedback.uploadImages"),multiple:"",accept:".jpeg, .jpg, .png","max-files":"5",class:"full-width",flat:"",bordered:"",onAdded:k[3]||(k[3]=M=>y.value=[...M])},null,8,["disable","label"])]),I(Nh,{label:U(r)("feedback.rateTopic"),"stack-label":"",borderless:"",outlined:!1},{control:V(()=>[I(Bh,{modelValue:d.value,"onUpdate:modelValue":k[4]||(k[4]=M=>d.value=M),"color-selected":h.value,color:"orange",size:"2.5em",icon:"star","no-reset":""},null,8,["modelValue","color-selected"])]),_:1},8,["label"]),ue("div",T0,[I(Ve,{label:U(r)("buttons.submit"),loading:c.value,type:"submit",color:"primary"},null,8,["label","loading"]),I(Ve,{label:U(r)("buttons.reset"),type:"reset",color:"primary",flat:""},null,8,["label"])])]),_:1})]),_:1})]),_:1}),I(os,{showing:c.value},{default:V(()=>[I(as,{size:"50px",color:"primary"})]),_:1},8,["showing"])]),_:1},8,["model-value"]))}}),P0={class:"q-my-md q-gutter-x-md"},D0=["innerHTML"],E0={style:{"font-size":"12px","font-style":"italic"}},O0={key:0,style:{"font-size":"10px","font-style":"italic"}},R0={key:0},M0=dt({__name:"NotesDialog",props:{topicData:{}},setup(e){const{t}=Lt(),r=e,n=me(!1),i=me(""),a=me(!1),o=me(void 0),l=me(!1),u=Qt("auth"),s=Ae(()=>{var D,O;return(O=(D=vt(u))==null?void 0:D.user)==null?void 0:O._id}),f=Ae(()=>{var O;const D=(O=vt(u))==null?void 0:O.user;return`${D==null?void 0:D.firstName} ${D==null?void 0:D.lastName}`}),c=Ae(()=>{var D;return((D=vt(u))==null?void 0:D.organisation.orgAdmin)===s.value}),d=ph(),{notes:h}=Ut(d),{createNote:p,updateNote:v,deleteNote:y}=d,g=()=>{n.value=!0},w=()=>{n.value=!1,o.value=void 0,l.value=!1,i.value=""},S=()=>{i.value="",a.value=!1,o.value=void 0,l.value=!1},P=D=>{var B;o.value=D;const O=(B=h.value)==null?void 0:B.find(k=>k._id===D);!O||(i.value=O.content)},C=D=>{gh({title:t("documents.notes.deleteNoteTitle"),message:t("documents.notes.deleteNoteMessage"),submit:t("buttons.delete"),cancel:t("buttons.cancel")}).onOk(async()=>{y(D)})},A=async(D,O)=>{if(!D)return;a.value=!0;const B=!!o.value,k={document:B?void 0:r.topicData.parentDocument._id,topic:B?void 0:r.topicData._id,noteId:B?O:void 0,content:D,shared:B?void 0:l.value};B?v(k):p(k),setTimeout(()=>{S()},500)},F=Qt("event-bus");return Yr(()=>r.topicData,async D=>{await d.getNotes(D.parentDocument._id,D._id)},{immediate:!0}),is(()=>F==null?void 0:F.on("openNotes",g)),Ra(()=>F==null?void 0:F.off("openNotes")),(D,O)=>(G(),oe(ts,{"model-value":n.value,maximized:"",position:"right",onHide:w},{default:V(()=>[I(Rr,{style:{width:"500px"}},{default:V(()=>[I(Ea,{class:"bg-primary text-white"},{default:V(()=>[I(Oa,null,{default:V(()=>[Re(fe(U(t)("documents.notes.featureName")),1)]),_:1}),I(Ve,{flat:"",stretch:"",icon:"close",onClick:w})]),_:1}),I(Yt,null,{default:V(()=>[ue("p",null,fe(U(t)("documents.notes.newNoteLabel")),1),I(qu,{modelValue:i.value,"onUpdate:modelValue":O[0]||(O[0]=B=>i.value=B),"min-height":"5rem"},null,8,["modelValue"]),I(Uu,{modelValue:l.value,"onUpdate:modelValue":O[1]||(O[1]=B=>l.value=B),label:U(t)("buttons.isPublic"),color:"accent"},null,8,["modelValue","label"]),ue("div",P0,[I(Ve,{label:U(t)("buttons.save"),color:"primary",onClick:O[2]||(O[2]=B=>A(i.value,o.value))},null,8,["label"]),I(Ve,{label:U(t)("buttons.reset"),flat:"",color:"primary",onClick:S},null,8,["label"])]),U(h).length?(G(),oe(ju,{key:0,separator:""},{default:V(()=>[I(Iu,{header:""},{default:V(()=>[Re(fe(U(t)("documents.notes.existingNotes")),1)]),_:1}),(G(!0),xe(Ke,null,st(U(h),B=>(G(),oe(zu,{key:B._id},{default:V(()=>[I(Ro,null,{default:V(()=>{var k,M;return[ue("div",{innerHTML:B.content},null,8,D0),ue("div",E0,fe(U(t)("documents.notes.postedBy",[`${((k=B.createdBy)==null?void 0:k.firstName)||D.$t("deletedUser")} ${((M=B.createdBy)==null?void 0:M.lastName)||""}`,`${new Date(B.createdAt).toLocaleDateString()}`])),1),B.updatedBy&&B.updatedAt?(G(),xe("div",O0,fe(U(t)("documents.notes.updatedBy",[B.ownedBy?`${B.updatedBy.firstName} ${B.updatedBy.lastName}`:f.value,`${new Date(B.updatedAt).toLocaleDateString()}`])),1)):Me("",!0)]}),_:2},1024),I(Ro,{side:"",top:""},{default:V(()=>{var k;return[((k=B.createdBy)==null?void 0:k._id)==s.value||c.value?(G(),xe("div",R0,[I(Ve,{color:"primary",icon:"fad fa-edit",round:"",flat:"",size:"sm",onClick:M=>P(B._id)},null,8,["onClick"]),I(Ve,{color:"primary",icon:"fad fa-trash",round:"",flat:"",size:"sm",onClick:M=>C(B._id)},null,8,["onClick"])])):Me("",!0)]}),_:2},1024)]),_:2},1024))),128))]),_:1})):Me("",!0)]),_:1})]),_:1}),I(os,{showing:a.value},{default:V(()=>[I(as,{size:"50px",color:"primary"})]),_:1},8,["showing"])]),_:1},8,["model-value"]))}});/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */var Bo=function(e,t){return Bo=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,n){r.__proto__=n}||function(r,n){for(var i in n)n.hasOwnProperty(i)&&(r[i]=n[i])},Bo(e,t)};function K(e,t){Bo(e,t);function r(){this.constructor=e}e.prototype=t===null?Object.create(t):(r.prototype=t.prototype,new r)}var te=function(){return te=Object.assign||function(t){for(var r,n=1,i=arguments.length;n<i;n++){r=arguments[n];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(t[a]=r[a])}return t},te.apply(this,arguments)};function B0(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(e!=null&&typeof Object.getOwnPropertySymbols=="function")for(var i=0,n=Object.getOwnPropertySymbols(e);i<n.length;i++)t.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(e,n[i])&&(r[n[i]]=e[n[i]]);return r}function ie(e,t,r,n){function i(a){return a instanceof r?a:new r(function(o){o(a)})}return new(r||(r=Promise))(function(a,o){function l(f){try{s(n.next(f))}catch(c){o(c)}}function u(f){try{s(n.throw(f))}catch(c){o(c)}}function s(f){f.done?a(f.value):i(f.value).then(l,u)}s((n=n.apply(e,t||[])).next())})}function ae(e,t){var r={label:0,sent:function(){if(a[0]&1)throw a[1];return a[1]},trys:[],ops:[]},n,i,a,o;return o={next:l(0),throw:l(1),return:l(2)},typeof Symbol=="function"&&(o[Symbol.iterator]=function(){return this}),o;function l(s){return function(f){return u([s,f])}}function u(s){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,i&&(a=s[0]&2?i.return:s[0]?i.throw||((a=i.return)&&a.call(i),0):i.next)&&!(a=a.call(i,s[1])).done)return a;switch(i=0,a&&(s=[s[0]&2,a.value]),s[0]){case 0:case 1:a=s;break;case 4:return r.label++,{value:s[1],done:!1};case 5:r.label++,i=s[1],s=[0];continue;case 7:s=r.ops.pop(),r.trys.pop();continue;default:if(a=r.trys,!(a=a.length>0&&a[a.length-1])&&(s[0]===6||s[0]===2)){r=0;continue}if(s[0]===3&&(!a||s[1]>a[0]&&s[1]<a[3])){r.label=s[1];break}if(s[0]===6&&r.label<a[1]){r.label=a[1],a=s;break}if(a&&r.label<a[2]){r.label=a[2],r.ops.push(s);break}a[2]&&r.ops.pop(),r.trys.pop();continue}s=t.call(e,r)}catch(f){s=[6,f],i=0}finally{n=a=0}if(s[0]&5)throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}}function ge(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;for(var n=Array(e),i=0,t=0;t<r;t++)for(var a=arguments[t],o=0,l=a.length;o<l;o++,i++)n[i]=a[o];return n}var yn="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Zn=new Uint8Array(256);for(var Vi=0;Vi<yn.length;Vi++)Zn[yn.charCodeAt(Vi)]=Vi;var Hu=function(e){for(var t="",r=e.length,n=0;n<r;n+=3)t+=yn[e[n]>>2],t+=yn[(e[n]&3)<<4|e[n+1]>>4],t+=yn[(e[n+1]&15)<<2|e[n+2]>>6],t+=yn[e[n+2]&63];return r%3===2?t=t.substring(0,t.length-1)+"=":r%3===1&&(t=t.substring(0,t.length-2)+"=="),t},dl=function(e){var t=e.length*.75,r=e.length,n,i=0,a,o,l,u;e[e.length-1]==="="&&(t--,e[e.length-2]==="="&&t--);var s=new Uint8Array(t);for(n=0;n<r;n+=4)a=Zn[e.charCodeAt(n)],o=Zn[e.charCodeAt(n+1)],l=Zn[e.charCodeAt(n+2)],u=Zn[e.charCodeAt(n+3)],s[i++]=a<<2|o>>4,s[i++]=(o&15)<<4|l>>2,s[i++]=(l&3)<<6|u&63;return s},N0=/^(data)?:?([\w\/\+]+)?;?(charset=[\w-]+|base64)?.*,/i,j0=function(e){var t=e.trim(),r=t.substring(0,100),n=r.match(N0);if(!n)return dl(t);var i=n[0],a=t.substring(i.length);return dl(a)},ee=function(e){return e.charCodeAt(0)},I0=function(e){return e.codePointAt(0)},wi=function(e,t){return It(e.toString(16),t,"0").toUpperCase()},Ba=function(e){return wi(e,2)},lr=function(e){return String.fromCharCode(e)},z0=function(e){return lr(parseInt(e,16))},It=function(e,t,r){for(var n="",i=0,a=t-e.length;i<a;i++)n+=r;return n+e},et=function(e,t,r){for(var n=e.length,i=0;i<n;i++)t[r++]=e.charCodeAt(i);return n},U0=function(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")},Si=function(e){return e.replace(/\t|\u0085|\u2028|\u2029/g,"    ").replace(/[\b\v]/g,"")},V0=["\\n","\\f","\\r","\\u000B"],Xu=function(e){return/^[\n\f\r\u000B]$/.test(e)},Zu=function(e){return e.split(/[\n\f\r\u000B]/)},Yu=function(e){return e.replace(/[\n\f\r\u000B]/g," ")},Qu=function(e,t){var r=e.charCodeAt(t),n,i=t+1,a=1;return r>=55296&&r<=56319&&e.length>i&&(n=e.charCodeAt(i),n>=56320&&n<=57343&&(a=2)),[e.slice(t,t+a),a]},L0=function(e){for(var t=[],r=0,n=e.length;r<n;){var i=Qu(e,r),a=i[0],o=i[1];t.push(a),r+=o}return t},W0=function(e){for(var t=V0.join("|"),r=["$"],n=0,i=e.length;n<i;n++){var a=e[n];if(Xu(a))throw new TypeError("`wordBreak` must not include "+t);r.push(a===""?".":U0(a))}var o=r.join("|");return new RegExp("("+t+")|((.*?)("+o+"))","gm")},q0=function(e,t,r,n){for(var i=W0(t),a=Si(e).match(i),o="",l=0,u=[],s=function(){o!==""&&u.push(o),o="",l=0},f=0,c=a.length;f<c;f++){var d=a[f];if(Xu(d))s();else{var h=n(d);l+h>r&&s(),o+=d,l+=h}}return s(),u},K0=/^D:(\d\d\d\d)(\d\d)?(\d\d)?(\d\d)?(\d\d)?(\d\d)?([+\-Z])?(\d\d)?'?(\d\d)?'?$/,Ju=function(e){var t=e.match(K0);if(!!t){var r=t[1],n=t[2],i=n===void 0?"01":n,a=t[3],o=a===void 0?"01":a,l=t[4],u=l===void 0?"00":l,s=t[5],f=s===void 0?"00":s,c=t[6],d=c===void 0?"00":c,h=t[7],p=h===void 0?"Z":h,v=t[8],y=v===void 0?"00":v,g=t[9],w=g===void 0?"00":g,S=p==="Z"?"Z":""+p+y+":"+w,P=new Date(r+"-"+i+"-"+o+"T"+u+":"+f+":"+d+S);return P}},ls=function(e,t){for(var r,n=0,i;n<e.length;){var a=e.substring(n).match(t);if(!a)return{match:i,pos:n};i=a,n+=((r=a.index)!==null&&r!==void 0?r:0)+a[0].length}return{match:i,pos:n}},va=function(e){return e[e.length-1]},No=function(e){if(e instanceof Uint8Array)return e;for(var t=e.length,r=new Uint8Array(t),n=0;n<t;n++)r[n]=e.charCodeAt(n);return r},G0=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var r=e.length,n=[],i=0;i<r;i++){var a=e[i];n[i]=a instanceof Uint8Array?a:No(a)}for(var o=0,i=0;i<r;i++)o+=e[i].length;for(var l=new Uint8Array(o),u=0,s=0;s<r;s++)for(var f=n[s],c=0,d=f.length;c<d;c++)l[u++]=f[c];return l},H0=function(e){for(var t=0,r=0,n=e.length;r<n;r++)t+=e[r].length;for(var i=new Uint8Array(t),a=0,r=0,n=e.length;r<n;r++){var o=e[r];i.set(o,a),a+=o.length}return i},_u=function(e){for(var t="",r=0,n=e.length;r<n;r++)t+=lr(e[r]);return t},X0=function(e,t){return e.id-t.id},Z0=function(e,t){for(var r=[],n=0,i=e.length;n<i;n++){var a=e[n],o=e[n-1];(n===0||t(a)!==t(o))&&r.push(a)}return r},fn=function(e){for(var t=e.length,r=0,n=Math.floor(t/2);r<n;r++){var i=r,a=t-r-1,o=e[r];e[i]=e[a],e[a]=o}return e},Y0=function(e){for(var t=0,r=0,n=e.length;r<n;r++)t+=e[r];return t},Q0=function(e,t){for(var r=new Array(t-e),n=0,i=r.length;n<i;n++)r[n]=e+n;return r},J0=function(e,t){for(var r=new Array(t.length),n=0,i=t.length;n<i;n++)r[n]=e[t[n]];return r},_0=function(e){return e instanceof Uint8Array||e instanceof ArrayBuffer||typeof e=="string"},Vn=function(e){if(typeof e=="string")return j0(e);if(e instanceof ArrayBuffer)return new Uint8Array(e);if(e instanceof Uint8Array)return e;throw new TypeError("`input` must be one of `string | ArrayBuffer | Uint8Array`")},Cn=function(){return new Promise(function(e){setTimeout(function(){return e()},0)})},$0=function(e,t){t===void 0&&(t=!0);var r=[];t&&r.push(65279);for(var n=0,i=e.length;n<i;){var a=e.codePointAt(n);if(a<65536)r.push(a),n+=1;else if(a<1114112)r.push($u(a),ef(a)),n+=2;else throw new Error("Invalid code point: 0x"+Ba(a))}return new Uint16Array(r)},ev=function(e){return e>=0&&e<=65535},tv=function(e){return e>=65536&&e<=1114111},$u=function(e){return Math.floor((e-65536)/1024)+55296},ef=function(e){return(e-65536)%1024+56320},Dr;(function(e){e.BigEndian="BigEndian",e.LittleEndian="LittleEndian"})(Dr||(Dr={}));var Ln="\uFFFD".codePointAt(0),tf=function(e,t){if(t===void 0&&(t=!0),e.length<=1)return String.fromCodePoint(Ln);for(var r=t?nv(e):Dr.BigEndian,n=t?2:0,i=[];e.length-n>=2;){var a=vl(e[n++],e[n++],r);if(rv(a))if(e.length-n<2)i.push(Ln);else{var o=vl(e[n++],e[n++],r);hl(o)?i.push(a,o):i.push(Ln)}else hl(a)?(n+=2,i.push(Ln)):i.push(a)}return n<e.length&&i.push(Ln),String.fromCodePoint.apply(String,i)},rv=function(e){return e>=55296&&e<=56319},hl=function(e){return e>=56320&&e<=57343},vl=function(e,t,r){if(r===Dr.LittleEndian)return t<<8|e;if(r===Dr.BigEndian)return e<<8|t;throw new Error("Invalid byteOrder: "+r)},nv=function(e){return rf(e)?Dr.BigEndian:nf(e)?Dr.LittleEndian:Dr.BigEndian},rf=function(e){return e[0]===254&&e[1]===255},nf=function(e){return e[0]===255&&e[1]===254},af=function(e){return rf(e)||nf(e)},iv=function(e){var t=String(e);if(Math.abs(e)<1){var r=parseInt(e.toString().split("e-")[1]);if(r){var n=e<0;n&&(e*=-1),e*=Math.pow(10,r-1),t="0."+new Array(r).join("0")+e.toString().substring(2),n&&(t="-"+t)}}else{var r=parseInt(e.toString().split("+")[1]);r>20&&(r-=20,e/=Math.pow(10,r),t=e.toString()+new Array(r+1).join("0"))}return t},ra=function(e){return Math.ceil(e.toString(2).length/8)},cn=function(e){for(var t=new Uint8Array(ra(e)),r=1;r<=t.length;r++)t[r-1]=e>>(t.length-r)*8;return t},Fi=function(e){throw new Error(e)},dr={};(function(e){var t=typeof Uint8Array!="undefined"&&typeof Uint16Array!="undefined"&&typeof Int32Array!="undefined";function r(a,o){return Object.prototype.hasOwnProperty.call(a,o)}e.assign=function(a){for(var o=Array.prototype.slice.call(arguments,1);o.length;){var l=o.shift();if(!!l){if(typeof l!="object")throw new TypeError(l+"must be non-object");for(var u in l)r(l,u)&&(a[u]=l[u])}}return a},e.shrinkBuf=function(a,o){return a.length===o?a:a.subarray?a.subarray(0,o):(a.length=o,a)};var n={arraySet:function(a,o,l,u,s){if(o.subarray&&a.subarray){a.set(o.subarray(l,l+u),s);return}for(var f=0;f<u;f++)a[s+f]=o[l+f]},flattenChunks:function(a){var o,l,u,s,f,c;for(u=0,o=0,l=a.length;o<l;o++)u+=a[o].length;for(c=new Uint8Array(u),s=0,o=0,l=a.length;o<l;o++)f=a[o],c.set(f,s),s+=f.length;return c}},i={arraySet:function(a,o,l,u,s){for(var f=0;f<u;f++)a[s+f]=o[l+f]},flattenChunks:function(a){return[].concat.apply([],a)}};e.setTyped=function(a){a?(e.Buf8=Uint8Array,e.Buf16=Uint16Array,e.Buf32=Int32Array,e.assign(e,n)):(e.Buf8=Array,e.Buf16=Array,e.Buf32=Array,e.assign(e,i))},e.setTyped(t)})(dr);var Ci={},_t={},Pn={},av=dr,ov=4,pl=0,gl=1,sv=2;function Dn(e){for(var t=e.length;--t>=0;)e[t]=0}var lv=0,of=1,uv=2,fv=3,cv=258,us=29,ki=256,di=ki+1+us,xn=30,fs=19,sf=2*di+1,Hr=15,ho=16,dv=7,cs=256,lf=16,uf=17,ff=18,jo=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],na=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],hv=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],cf=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],vv=512,sr=new Array((di+2)*2);Dn(sr);var ri=new Array(xn*2);Dn(ri);var hi=new Array(vv);Dn(hi);var vi=new Array(cv-fv+1);Dn(vi);var ds=new Array(us);Dn(ds);var pa=new Array(xn);Dn(pa);function vo(e,t,r,n,i){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=e&&e.length}var df,hf,vf;function po(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function pf(e){return e<256?hi[e]:hi[256+(e>>>7)]}function pi(e,t){e.pending_buf[e.pending++]=t&255,e.pending_buf[e.pending++]=t>>>8&255}function ct(e,t,r){e.bi_valid>ho-r?(e.bi_buf|=t<<e.bi_valid&65535,pi(e,e.bi_buf),e.bi_buf=t>>ho-e.bi_valid,e.bi_valid+=r-ho):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r)}function Xt(e,t,r){ct(e,r[t*2],r[t*2+1])}function gf(e,t){var r=0;do r|=e&1,e>>>=1,r<<=1;while(--t>0);return r>>>1}function pv(e){e.bi_valid===16?(pi(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=e.bi_buf&255,e.bi_buf>>=8,e.bi_valid-=8)}function gv(e,t){var r=t.dyn_tree,n=t.max_code,i=t.stat_desc.static_tree,a=t.stat_desc.has_stree,o=t.stat_desc.extra_bits,l=t.stat_desc.extra_base,u=t.stat_desc.max_length,s,f,c,d,h,p,v=0;for(d=0;d<=Hr;d++)e.bl_count[d]=0;for(r[e.heap[e.heap_max]*2+1]=0,s=e.heap_max+1;s<sf;s++)f=e.heap[s],d=r[r[f*2+1]*2+1]+1,d>u&&(d=u,v++),r[f*2+1]=d,!(f>n)&&(e.bl_count[d]++,h=0,f>=l&&(h=o[f-l]),p=r[f*2],e.opt_len+=p*(d+h),a&&(e.static_len+=p*(i[f*2+1]+h)));if(v!==0){do{for(d=u-1;e.bl_count[d]===0;)d--;e.bl_count[d]--,e.bl_count[d+1]+=2,e.bl_count[u]--,v-=2}while(v>0);for(d=u;d!==0;d--)for(f=e.bl_count[d];f!==0;)c=e.heap[--s],!(c>n)&&(r[c*2+1]!==d&&(e.opt_len+=(d-r[c*2+1])*r[c*2],r[c*2+1]=d),f--)}}function yf(e,t,r){var n=new Array(Hr+1),i=0,a,o;for(a=1;a<=Hr;a++)n[a]=i=i+r[a-1]<<1;for(o=0;o<=t;o++){var l=e[o*2+1];l!==0&&(e[o*2]=gf(n[l]++,l))}}function yv(){var e,t,r,n,i,a=new Array(Hr+1);for(r=0,n=0;n<us-1;n++)for(ds[n]=r,e=0;e<1<<jo[n];e++)vi[r++]=n;for(vi[r-1]=n,i=0,n=0;n<16;n++)for(pa[n]=i,e=0;e<1<<na[n];e++)hi[i++]=n;for(i>>=7;n<xn;n++)for(pa[n]=i<<7,e=0;e<1<<na[n]-7;e++)hi[256+i++]=n;for(t=0;t<=Hr;t++)a[t]=0;for(e=0;e<=143;)sr[e*2+1]=8,e++,a[8]++;for(;e<=255;)sr[e*2+1]=9,e++,a[9]++;for(;e<=279;)sr[e*2+1]=7,e++,a[7]++;for(;e<=287;)sr[e*2+1]=8,e++,a[8]++;for(yf(sr,di+1,a),e=0;e<xn;e++)ri[e*2+1]=5,ri[e*2]=gf(e,5);df=new vo(sr,jo,ki+1,di,Hr),hf=new vo(ri,na,0,xn,Hr),vf=new vo(new Array(0),hv,0,fs,dv)}function mf(e){var t;for(t=0;t<di;t++)e.dyn_ltree[t*2]=0;for(t=0;t<xn;t++)e.dyn_dtree[t*2]=0;for(t=0;t<fs;t++)e.bl_tree[t*2]=0;e.dyn_ltree[cs*2]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function bf(e){e.bi_valid>8?pi(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function mv(e,t,r,n){bf(e),n&&(pi(e,r),pi(e,~r)),av.arraySet(e.pending_buf,e.window,t,r,e.pending),e.pending+=r}function yl(e,t,r,n){var i=t*2,a=r*2;return e[i]<e[a]||e[i]===e[a]&&n[t]<=n[r]}function go(e,t,r){for(var n=e.heap[r],i=r<<1;i<=e.heap_len&&(i<e.heap_len&&yl(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!yl(t,n,e.heap[i],e.depth));)e.heap[r]=e.heap[i],r=i,i<<=1;e.heap[r]=n}function ml(e,t,r){var n,i,a=0,o,l;if(e.last_lit!==0)do n=e.pending_buf[e.d_buf+a*2]<<8|e.pending_buf[e.d_buf+a*2+1],i=e.pending_buf[e.l_buf+a],a++,n===0?Xt(e,i,t):(o=vi[i],Xt(e,o+ki+1,t),l=jo[o],l!==0&&(i-=ds[o],ct(e,i,l)),n--,o=pf(n),Xt(e,o,r),l=na[o],l!==0&&(n-=pa[o],ct(e,n,l)));while(a<e.last_lit);Xt(e,cs,t)}function Io(e,t){var r=t.dyn_tree,n=t.stat_desc.static_tree,i=t.stat_desc.has_stree,a=t.stat_desc.elems,o,l,u=-1,s;for(e.heap_len=0,e.heap_max=sf,o=0;o<a;o++)r[o*2]!==0?(e.heap[++e.heap_len]=u=o,e.depth[o]=0):r[o*2+1]=0;for(;e.heap_len<2;)s=e.heap[++e.heap_len]=u<2?++u:0,r[s*2]=1,e.depth[s]=0,e.opt_len--,i&&(e.static_len-=n[s*2+1]);for(t.max_code=u,o=e.heap_len>>1;o>=1;o--)go(e,r,o);s=a;do o=e.heap[1],e.heap[1]=e.heap[e.heap_len--],go(e,r,1),l=e.heap[1],e.heap[--e.heap_max]=o,e.heap[--e.heap_max]=l,r[s*2]=r[o*2]+r[l*2],e.depth[s]=(e.depth[o]>=e.depth[l]?e.depth[o]:e.depth[l])+1,r[o*2+1]=r[l*2+1]=s,e.heap[1]=s++,go(e,r,1);while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],gv(e,t),yf(r,u,e.bl_count)}function bl(e,t,r){var n,i=-1,a,o=t[0*2+1],l=0,u=7,s=4;for(o===0&&(u=138,s=3),t[(r+1)*2+1]=65535,n=0;n<=r;n++)a=o,o=t[(n+1)*2+1],!(++l<u&&a===o)&&(l<s?e.bl_tree[a*2]+=l:a!==0?(a!==i&&e.bl_tree[a*2]++,e.bl_tree[lf*2]++):l<=10?e.bl_tree[uf*2]++:e.bl_tree[ff*2]++,l=0,i=a,o===0?(u=138,s=3):a===o?(u=6,s=3):(u=7,s=4))}function xl(e,t,r){var n,i=-1,a,o=t[0*2+1],l=0,u=7,s=4;for(o===0&&(u=138,s=3),n=0;n<=r;n++)if(a=o,o=t[(n+1)*2+1],!(++l<u&&a===o)){if(l<s)do Xt(e,a,e.bl_tree);while(--l!==0);else a!==0?(a!==i&&(Xt(e,a,e.bl_tree),l--),Xt(e,lf,e.bl_tree),ct(e,l-3,2)):l<=10?(Xt(e,uf,e.bl_tree),ct(e,l-3,3)):(Xt(e,ff,e.bl_tree),ct(e,l-11,7));l=0,i=a,o===0?(u=138,s=3):a===o?(u=6,s=3):(u=7,s=4)}}function bv(e){var t;for(bl(e,e.dyn_ltree,e.l_desc.max_code),bl(e,e.dyn_dtree,e.d_desc.max_code),Io(e,e.bl_desc),t=fs-1;t>=3&&e.bl_tree[cf[t]*2+1]===0;t--);return e.opt_len+=3*(t+1)+5+5+4,t}function xv(e,t,r,n){var i;for(ct(e,t-257,5),ct(e,r-1,5),ct(e,n-4,4),i=0;i<n;i++)ct(e,e.bl_tree[cf[i]*2+1],3);xl(e,e.dyn_ltree,t-1),xl(e,e.dyn_dtree,r-1)}function wv(e){var t=4093624447,r;for(r=0;r<=31;r++,t>>>=1)if(t&1&&e.dyn_ltree[r*2]!==0)return pl;if(e.dyn_ltree[9*2]!==0||e.dyn_ltree[10*2]!==0||e.dyn_ltree[13*2]!==0)return gl;for(r=32;r<ki;r++)if(e.dyn_ltree[r*2]!==0)return gl;return pl}var wl=!1;function Sv(e){wl||(yv(),wl=!0),e.l_desc=new po(e.dyn_ltree,df),e.d_desc=new po(e.dyn_dtree,hf),e.bl_desc=new po(e.bl_tree,vf),e.bi_buf=0,e.bi_valid=0,mf(e)}function xf(e,t,r,n){ct(e,(lv<<1)+(n?1:0),3),mv(e,t,r,!0)}function Fv(e){ct(e,of<<1,3),Xt(e,cs,sr),pv(e)}function Cv(e,t,r,n){var i,a,o=0;e.level>0?(e.strm.data_type===sv&&(e.strm.data_type=wv(e)),Io(e,e.l_desc),Io(e,e.d_desc),o=bv(e),i=e.opt_len+3+7>>>3,a=e.static_len+3+7>>>3,a<=i&&(i=a)):i=a=r+5,r+4<=i&&t!==-1?xf(e,t,r,n):e.strategy===ov||a===i?(ct(e,(of<<1)+(n?1:0),3),ml(e,sr,ri)):(ct(e,(uv<<1)+(n?1:0),3),xv(e,e.l_desc.max_code+1,e.d_desc.max_code+1,o+1),ml(e,e.dyn_ltree,e.dyn_dtree)),mf(e),n&&bf(e)}function kv(e,t,r){return e.pending_buf[e.d_buf+e.last_lit*2]=t>>>8&255,e.pending_buf[e.d_buf+e.last_lit*2+1]=t&255,e.pending_buf[e.l_buf+e.last_lit]=r&255,e.last_lit++,t===0?e.dyn_ltree[r*2]++:(e.matches++,t--,e.dyn_ltree[(vi[r]+ki+1)*2]++,e.dyn_dtree[pf(t)*2]++),e.last_lit===e.lit_bufsize-1}Pn._tr_init=Sv;Pn._tr_stored_block=xf;Pn._tr_flush_block=Cv;Pn._tr_tally=kv;Pn._tr_align=Fv;function Tv(e,t,r,n){for(var i=e&65535|0,a=e>>>16&65535|0,o=0;r!==0;){o=r>2e3?2e3:r,r-=o;do i=i+t[n++]|0,a=a+i|0;while(--o);i%=65521,a%=65521}return i|a<<16|0}var wf=Tv;function Av(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=e&1?3988292384^e>>>1:e>>>1;t[r]=e}return t}var Pv=Av();function Dv(e,t,r,n){var i=Pv,a=n+r;e^=-1;for(var o=n;o<a;o++)e=e>>>8^i[(e^t[o])&255];return e^-1}var Sf=Dv,hs={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},ot=dr,At=Pn,Ff=wf,wr=Sf,Ev=hs,rn=0,Ov=1,Rv=3,Er=4,Sl=5,Zt=0,Fl=1,Pt=-2,Mv=-3,yo=-5,Bv=-1,Nv=1,Li=2,jv=3,Iv=4,zv=0,Uv=2,Na=8,Vv=9,Lv=15,Wv=8,qv=29,Kv=256,zo=Kv+1+qv,Gv=30,Hv=19,Xv=2*zo+1,Zv=15,pe=3,Tr=258,Vt=Tr+pe+1,Yv=32,ja=42,Uo=69,ia=73,aa=91,oa=103,Xr=113,Yn=666,Xe=1,Ti=2,Qr=3,En=4,Qv=3;function Ar(e,t){return e.msg=Ev[t],t}function Cl(e){return(e<<1)-(e>4?9:0)}function Cr(e){for(var t=e.length;--t>=0;)e[t]=0}function Sr(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),r!==0&&(ot.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,t.pending===0&&(t.pending_out=0))}function tt(e,t){At._tr_flush_block(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,Sr(e.strm)}function Se(e,t){e.pending_buf[e.pending++]=t}function Wn(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=t&255}function Jv(e,t,r,n){var i=e.avail_in;return i>n&&(i=n),i===0?0:(e.avail_in-=i,ot.arraySet(t,e.input,e.next_in,i,r),e.state.wrap===1?e.adler=Ff(e.adler,t,i,r):e.state.wrap===2&&(e.adler=wr(e.adler,t,i,r)),e.next_in+=i,e.total_in+=i,i)}function Cf(e,t){var r=e.max_chain_length,n=e.strstart,i,a,o=e.prev_length,l=e.nice_match,u=e.strstart>e.w_size-Vt?e.strstart-(e.w_size-Vt):0,s=e.window,f=e.w_mask,c=e.prev,d=e.strstart+Tr,h=s[n+o-1],p=s[n+o];e.prev_length>=e.good_match&&(r>>=2),l>e.lookahead&&(l=e.lookahead);do if(i=t,!(s[i+o]!==p||s[i+o-1]!==h||s[i]!==s[n]||s[++i]!==s[n+1])){n+=2,i++;do;while(s[++n]===s[++i]&&s[++n]===s[++i]&&s[++n]===s[++i]&&s[++n]===s[++i]&&s[++n]===s[++i]&&s[++n]===s[++i]&&s[++n]===s[++i]&&s[++n]===s[++i]&&n<d);if(a=Tr-(d-n),n=d-Tr,a>o){if(e.match_start=t,o=a,a>=l)break;h=s[n+o-1],p=s[n+o]}}while((t=c[t&f])>u&&--r!==0);return o<=e.lookahead?o:e.lookahead}function Jr(e){var t=e.w_size,r,n,i,a,o;do{if(a=e.window_size-e.lookahead-e.strstart,e.strstart>=t+(t-Vt)){ot.arraySet(e.window,e.window,t,t,0),e.match_start-=t,e.strstart-=t,e.block_start-=t,n=e.hash_size,r=n;do i=e.head[--r],e.head[r]=i>=t?i-t:0;while(--n);n=t,r=n;do i=e.prev[--r],e.prev[r]=i>=t?i-t:0;while(--n);a+=t}if(e.strm.avail_in===0)break;if(n=Jv(e.strm,e.window,e.strstart+e.lookahead,a),e.lookahead+=n,e.lookahead+e.insert>=pe)for(o=e.strstart-e.insert,e.ins_h=e.window[o],e.ins_h=(e.ins_h<<e.hash_shift^e.window[o+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[o+pe-1])&e.hash_mask,e.prev[o&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=o,o++,e.insert--,!(e.lookahead+e.insert<pe)););}while(e.lookahead<Vt&&e.strm.avail_in!==0)}function _v(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(Jr(e),e.lookahead===0&&t===rn)return Xe;if(e.lookahead===0)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((e.strstart===0||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,tt(e,!1),e.strm.avail_out===0)||e.strstart-e.block_start>=e.w_size-Vt&&(tt(e,!1),e.strm.avail_out===0))return Xe}return e.insert=0,t===Er?(tt(e,!0),e.strm.avail_out===0?Qr:En):(e.strstart>e.block_start&&(tt(e,!1),e.strm.avail_out===0),Xe)}function mo(e,t){for(var r,n;;){if(e.lookahead<Vt){if(Jr(e),e.lookahead<Vt&&t===rn)return Xe;if(e.lookahead===0)break}if(r=0,e.lookahead>=pe&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+pe-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),r!==0&&e.strstart-r<=e.w_size-Vt&&(e.match_length=Cf(e,r)),e.match_length>=pe)if(n=At._tr_tally(e,e.strstart-e.match_start,e.match_length-pe),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=pe){e.match_length--;do e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+pe-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart;while(--e.match_length!==0);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=At._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(tt(e,!1),e.strm.avail_out===0))return Xe}return e.insert=e.strstart<pe-1?e.strstart:pe-1,t===Er?(tt(e,!0),e.strm.avail_out===0?Qr:En):e.last_lit&&(tt(e,!1),e.strm.avail_out===0)?Xe:Ti}function dn(e,t){for(var r,n,i;;){if(e.lookahead<Vt){if(Jr(e),e.lookahead<Vt&&t===rn)return Xe;if(e.lookahead===0)break}if(r=0,e.lookahead>=pe&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+pe-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=pe-1,r!==0&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-Vt&&(e.match_length=Cf(e,r),e.match_length<=5&&(e.strategy===Nv||e.match_length===pe&&e.strstart-e.match_start>4096)&&(e.match_length=pe-1)),e.prev_length>=pe&&e.match_length<=e.prev_length){i=e.strstart+e.lookahead-pe,n=At._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-pe),e.lookahead-=e.prev_length-1,e.prev_length-=2;do++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+pe-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart);while(--e.prev_length!==0);if(e.match_available=0,e.match_length=pe-1,e.strstart++,n&&(tt(e,!1),e.strm.avail_out===0))return Xe}else if(e.match_available){if(n=At._tr_tally(e,0,e.window[e.strstart-1]),n&&tt(e,!1),e.strstart++,e.lookahead--,e.strm.avail_out===0)return Xe}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=At._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<pe-1?e.strstart:pe-1,t===Er?(tt(e,!0),e.strm.avail_out===0?Qr:En):e.last_lit&&(tt(e,!1),e.strm.avail_out===0)?Xe:Ti}function $v(e,t){for(var r,n,i,a,o=e.window;;){if(e.lookahead<=Tr){if(Jr(e),e.lookahead<=Tr&&t===rn)return Xe;if(e.lookahead===0)break}if(e.match_length=0,e.lookahead>=pe&&e.strstart>0&&(i=e.strstart-1,n=o[i],n===o[++i]&&n===o[++i]&&n===o[++i])){a=e.strstart+Tr;do;while(n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&i<a);e.match_length=Tr-(a-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=pe?(r=At._tr_tally(e,1,e.match_length-pe),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=At._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(tt(e,!1),e.strm.avail_out===0))return Xe}return e.insert=0,t===Er?(tt(e,!0),e.strm.avail_out===0?Qr:En):e.last_lit&&(tt(e,!1),e.strm.avail_out===0)?Xe:Ti}function ep(e,t){for(var r;;){if(e.lookahead===0&&(Jr(e),e.lookahead===0)){if(t===rn)return Xe;break}if(e.match_length=0,r=At._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(tt(e,!1),e.strm.avail_out===0))return Xe}return e.insert=0,t===Er?(tt(e,!0),e.strm.avail_out===0?Qr:En):e.last_lit&&(tt(e,!1),e.strm.avail_out===0)?Xe:Ti}function Kt(e,t,r,n,i){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=i}var mn;mn=[new Kt(0,0,0,0,_v),new Kt(4,4,8,4,mo),new Kt(4,5,16,8,mo),new Kt(4,6,32,32,mo),new Kt(4,4,16,16,dn),new Kt(8,16,32,32,dn),new Kt(8,16,128,128,dn),new Kt(8,32,128,256,dn),new Kt(32,128,258,1024,dn),new Kt(32,258,258,4096,dn)];function tp(e){e.window_size=2*e.w_size,Cr(e.head),e.max_lazy_match=mn[e.level].max_lazy,e.good_match=mn[e.level].good_length,e.nice_match=mn[e.level].nice_length,e.max_chain_length=mn[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=pe-1,e.match_available=0,e.ins_h=0}function rp(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=Na,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new ot.Buf16(Xv*2),this.dyn_dtree=new ot.Buf16((2*Gv+1)*2),this.bl_tree=new ot.Buf16((2*Hv+1)*2),Cr(this.dyn_ltree),Cr(this.dyn_dtree),Cr(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new ot.Buf16(Zv+1),this.heap=new ot.Buf16(2*zo+1),Cr(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new ot.Buf16(2*zo+1),Cr(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function kf(e){var t;return!e||!e.state?Ar(e,Pt):(e.total_in=e.total_out=0,e.data_type=Uv,t=e.state,t.pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?ja:Xr,e.adler=t.wrap===2?0:1,t.last_flush=rn,At._tr_init(t),Zt)}function Tf(e){var t=kf(e);return t===Zt&&tp(e.state),t}function np(e,t){return!e||!e.state||e.state.wrap!==2?Pt:(e.state.gzhead=t,Zt)}function Af(e,t,r,n,i,a){if(!e)return Pt;var o=1;if(t===Bv&&(t=6),n<0?(o=0,n=-n):n>15&&(o=2,n-=16),i<1||i>Vv||r!==Na||n<8||n>15||t<0||t>9||a<0||a>Iv)return Ar(e,Pt);n===8&&(n=9);var l=new rp;return e.state=l,l.strm=e,l.wrap=o,l.gzhead=null,l.w_bits=n,l.w_size=1<<l.w_bits,l.w_mask=l.w_size-1,l.hash_bits=i+7,l.hash_size=1<<l.hash_bits,l.hash_mask=l.hash_size-1,l.hash_shift=~~((l.hash_bits+pe-1)/pe),l.window=new ot.Buf8(l.w_size*2),l.head=new ot.Buf16(l.hash_size),l.prev=new ot.Buf16(l.w_size),l.lit_bufsize=1<<i+6,l.pending_buf_size=l.lit_bufsize*4,l.pending_buf=new ot.Buf8(l.pending_buf_size),l.d_buf=1*l.lit_bufsize,l.l_buf=(1+2)*l.lit_bufsize,l.level=t,l.strategy=a,l.method=r,Tf(e)}function ip(e,t){return Af(e,t,Na,Lv,Wv,zv)}function ap(e,t){var r,n,i,a;if(!e||!e.state||t>Sl||t<0)return e?Ar(e,Pt):Pt;if(n=e.state,!e.output||!e.input&&e.avail_in!==0||n.status===Yn&&t!==Er)return Ar(e,e.avail_out===0?yo:Pt);if(n.strm=e,r=n.last_flush,n.last_flush=t,n.status===ja)if(n.wrap===2)e.adler=0,Se(n,31),Se(n,139),Se(n,8),n.gzhead?(Se(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),Se(n,n.gzhead.time&255),Se(n,n.gzhead.time>>8&255),Se(n,n.gzhead.time>>16&255),Se(n,n.gzhead.time>>24&255),Se(n,n.level===9?2:n.strategy>=Li||n.level<2?4:0),Se(n,n.gzhead.os&255),n.gzhead.extra&&n.gzhead.extra.length&&(Se(n,n.gzhead.extra.length&255),Se(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(e.adler=wr(e.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=Uo):(Se(n,0),Se(n,0),Se(n,0),Se(n,0),Se(n,0),Se(n,n.level===9?2:n.strategy>=Li||n.level<2?4:0),Se(n,Qv),n.status=Xr);else{var o=Na+(n.w_bits-8<<4)<<8,l=-1;n.strategy>=Li||n.level<2?l=0:n.level<6?l=1:n.level===6?l=2:l=3,o|=l<<6,n.strstart!==0&&(o|=Yv),o+=31-o%31,n.status=Xr,Wn(n,o),n.strstart!==0&&(Wn(n,e.adler>>>16),Wn(n,e.adler&65535)),e.adler=1}if(n.status===Uo)if(n.gzhead.extra){for(i=n.pending;n.gzindex<(n.gzhead.extra.length&65535)&&!(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=wr(e.adler,n.pending_buf,n.pending-i,i)),Sr(e),i=n.pending,n.pending===n.pending_buf_size));)Se(n,n.gzhead.extra[n.gzindex]&255),n.gzindex++;n.gzhead.hcrc&&n.pending>i&&(e.adler=wr(e.adler,n.pending_buf,n.pending-i,i)),n.gzindex===n.gzhead.extra.length&&(n.gzindex=0,n.status=ia)}else n.status=ia;if(n.status===ia)if(n.gzhead.name){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=wr(e.adler,n.pending_buf,n.pending-i,i)),Sr(e),i=n.pending,n.pending===n.pending_buf_size)){a=1;break}n.gzindex<n.gzhead.name.length?a=n.gzhead.name.charCodeAt(n.gzindex++)&255:a=0,Se(n,a)}while(a!==0);n.gzhead.hcrc&&n.pending>i&&(e.adler=wr(e.adler,n.pending_buf,n.pending-i,i)),a===0&&(n.gzindex=0,n.status=aa)}else n.status=aa;if(n.status===aa)if(n.gzhead.comment){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=wr(e.adler,n.pending_buf,n.pending-i,i)),Sr(e),i=n.pending,n.pending===n.pending_buf_size)){a=1;break}n.gzindex<n.gzhead.comment.length?a=n.gzhead.comment.charCodeAt(n.gzindex++)&255:a=0,Se(n,a)}while(a!==0);n.gzhead.hcrc&&n.pending>i&&(e.adler=wr(e.adler,n.pending_buf,n.pending-i,i)),a===0&&(n.status=oa)}else n.status=oa;if(n.status===oa&&(n.gzhead.hcrc?(n.pending+2>n.pending_buf_size&&Sr(e),n.pending+2<=n.pending_buf_size&&(Se(n,e.adler&255),Se(n,e.adler>>8&255),e.adler=0,n.status=Xr)):n.status=Xr),n.pending!==0){if(Sr(e),e.avail_out===0)return n.last_flush=-1,Zt}else if(e.avail_in===0&&Cl(t)<=Cl(r)&&t!==Er)return Ar(e,yo);if(n.status===Yn&&e.avail_in!==0)return Ar(e,yo);if(e.avail_in!==0||n.lookahead!==0||t!==rn&&n.status!==Yn){var u=n.strategy===Li?ep(n,t):n.strategy===jv?$v(n,t):mn[n.level].func(n,t);if((u===Qr||u===En)&&(n.status=Yn),u===Xe||u===Qr)return e.avail_out===0&&(n.last_flush=-1),Zt;if(u===Ti&&(t===Ov?At._tr_align(n):t!==Sl&&(At._tr_stored_block(n,0,0,!1),t===Rv&&(Cr(n.head),n.lookahead===0&&(n.strstart=0,n.block_start=0,n.insert=0))),Sr(e),e.avail_out===0))return n.last_flush=-1,Zt}return t!==Er?Zt:n.wrap<=0?Fl:(n.wrap===2?(Se(n,e.adler&255),Se(n,e.adler>>8&255),Se(n,e.adler>>16&255),Se(n,e.adler>>24&255),Se(n,e.total_in&255),Se(n,e.total_in>>8&255),Se(n,e.total_in>>16&255),Se(n,e.total_in>>24&255)):(Wn(n,e.adler>>>16),Wn(n,e.adler&65535)),Sr(e),n.wrap>0&&(n.wrap=-n.wrap),n.pending!==0?Zt:Fl)}function op(e){var t;return!e||!e.state?Pt:(t=e.state.status,t!==ja&&t!==Uo&&t!==ia&&t!==aa&&t!==oa&&t!==Xr&&t!==Yn?Ar(e,Pt):(e.state=null,t===Xr?Ar(e,Mv):Zt))}function sp(e,t){var r=t.length,n,i,a,o,l,u,s,f;if(!e||!e.state||(n=e.state,o=n.wrap,o===2||o===1&&n.status!==ja||n.lookahead))return Pt;for(o===1&&(e.adler=Ff(e.adler,t,r,0)),n.wrap=0,r>=n.w_size&&(o===0&&(Cr(n.head),n.strstart=0,n.block_start=0,n.insert=0),f=new ot.Buf8(n.w_size),ot.arraySet(f,t,r-n.w_size,n.w_size,0),t=f,r=n.w_size),l=e.avail_in,u=e.next_in,s=e.input,e.avail_in=r,e.next_in=0,e.input=t,Jr(n);n.lookahead>=pe;){i=n.strstart,a=n.lookahead-(pe-1);do n.ins_h=(n.ins_h<<n.hash_shift^n.window[i+pe-1])&n.hash_mask,n.prev[i&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=i,i++;while(--a);n.strstart=i,n.lookahead=pe-1,Jr(n)}return n.strstart+=n.lookahead,n.block_start=n.strstart,n.insert=n.lookahead,n.lookahead=0,n.match_length=n.prev_length=pe-1,n.match_available=0,e.next_in=u,e.input=s,e.avail_in=l,n.wrap=o,Zt}_t.deflateInit=ip;_t.deflateInit2=Af;_t.deflateReset=Tf;_t.deflateResetKeep=kf;_t.deflateSetHeader=np;_t.deflate=ap;_t.deflateEnd=op;_t.deflateSetDictionary=sp;_t.deflateInfo="pako deflate (from Nodeca project)";var nn={},Ia=dr,Pf=!0,Df=!0;try{String.fromCharCode.apply(null,[0])}catch{Pf=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{Df=!1}var gi=new Ia.Buf8(256);for(var br=0;br<256;br++)gi[br]=br>=252?6:br>=248?5:br>=240?4:br>=224?3:br>=192?2:1;gi[254]=gi[254]=1;nn.string2buf=function(e){var t,r,n,i,a,o=e.length,l=0;for(i=0;i<o;i++)r=e.charCodeAt(i),(r&64512)===55296&&i+1<o&&(n=e.charCodeAt(i+1),(n&64512)===56320&&(r=65536+(r-55296<<10)+(n-56320),i++)),l+=r<128?1:r<2048?2:r<65536?3:4;for(t=new Ia.Buf8(l),a=0,i=0;a<l;i++)r=e.charCodeAt(i),(r&64512)===55296&&i+1<o&&(n=e.charCodeAt(i+1),(n&64512)===56320&&(r=65536+(r-55296<<10)+(n-56320),i++)),r<128?t[a++]=r:r<2048?(t[a++]=192|r>>>6,t[a++]=128|r&63):r<65536?(t[a++]=224|r>>>12,t[a++]=128|r>>>6&63,t[a++]=128|r&63):(t[a++]=240|r>>>18,t[a++]=128|r>>>12&63,t[a++]=128|r>>>6&63,t[a++]=128|r&63);return t};function Ef(e,t){if(t<65534&&(e.subarray&&Df||!e.subarray&&Pf))return String.fromCharCode.apply(null,Ia.shrinkBuf(e,t));for(var r="",n=0;n<t;n++)r+=String.fromCharCode(e[n]);return r}nn.buf2binstring=function(e){return Ef(e,e.length)};nn.binstring2buf=function(e){for(var t=new Ia.Buf8(e.length),r=0,n=t.length;r<n;r++)t[r]=e.charCodeAt(r);return t};nn.buf2string=function(e,t){var r,n,i,a,o=t||e.length,l=new Array(o*2);for(n=0,r=0;r<o;){if(i=e[r++],i<128){l[n++]=i;continue}if(a=gi[i],a>4){l[n++]=65533,r+=a-1;continue}for(i&=a===2?31:a===3?15:7;a>1&&r<o;)i=i<<6|e[r++]&63,a--;if(a>1){l[n++]=65533;continue}i<65536?l[n++]=i:(i-=65536,l[n++]=55296|i>>10&1023,l[n++]=56320|i&1023)}return Ef(l,n)};nn.utf8border=function(e,t){var r;for(t=t||e.length,t>e.length&&(t=e.length),r=t-1;r>=0&&(e[r]&192)===128;)r--;return r<0||r===0?t:r+gi[e[r]]>t?r:t};function lp(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}var Of=lp,ni=_t,ii=dr,Vo=nn,Lo=hs,up=Of,Rf=Object.prototype.toString,fp=0,bo=4,wn=0,kl=1,Tl=2,cp=-1,dp=0,hp=8;function _r(e){if(!(this instanceof _r))return new _r(e);this.options=ii.assign({level:cp,method:hp,chunkSize:16384,windowBits:15,memLevel:8,strategy:dp,to:""},e||{});var t=this.options;t.raw&&t.windowBits>0?t.windowBits=-t.windowBits:t.gzip&&t.windowBits>0&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new up,this.strm.avail_out=0;var r=ni.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(r!==wn)throw new Error(Lo[r]);if(t.header&&ni.deflateSetHeader(this.strm,t.header),t.dictionary){var n;if(typeof t.dictionary=="string"?n=Vo.string2buf(t.dictionary):Rf.call(t.dictionary)==="[object ArrayBuffer]"?n=new Uint8Array(t.dictionary):n=t.dictionary,r=ni.deflateSetDictionary(this.strm,n),r!==wn)throw new Error(Lo[r]);this._dict_set=!0}}_r.prototype.push=function(e,t){var r=this.strm,n=this.options.chunkSize,i,a;if(this.ended)return!1;a=t===~~t?t:t===!0?bo:fp,typeof e=="string"?r.input=Vo.string2buf(e):Rf.call(e)==="[object ArrayBuffer]"?r.input=new Uint8Array(e):r.input=e,r.next_in=0,r.avail_in=r.input.length;do{if(r.avail_out===0&&(r.output=new ii.Buf8(n),r.next_out=0,r.avail_out=n),i=ni.deflate(r,a),i!==kl&&i!==wn)return this.onEnd(i),this.ended=!0,!1;(r.avail_out===0||r.avail_in===0&&(a===bo||a===Tl))&&(this.options.to==="string"?this.onData(Vo.buf2binstring(ii.shrinkBuf(r.output,r.next_out))):this.onData(ii.shrinkBuf(r.output,r.next_out)))}while((r.avail_in>0||r.avail_out===0)&&i!==kl);return a===bo?(i=ni.deflateEnd(this.strm),this.onEnd(i),this.ended=!0,i===wn):(a===Tl&&(this.onEnd(wn),r.avail_out=0),!0)};_r.prototype.onData=function(e){this.chunks.push(e)};_r.prototype.onEnd=function(e){e===wn&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=ii.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};function vs(e,t){var r=new _r(t);if(r.push(e,!0),r.err)throw r.msg||Lo[r.err];return r.result}function vp(e,t){return t=t||{},t.raw=!0,vs(e,t)}function pp(e,t){return t=t||{},t.gzip=!0,vs(e,t)}Ci.Deflate=_r;Ci.deflate=vs;Ci.deflateRaw=vp;Ci.gzip=pp;var Ai={},Wt={},Wi=30,gp=12,yp=function(t,r){var n,i,a,o,l,u,s,f,c,d,h,p,v,y,g,w,S,P,C,A,F,D,O,B,k;n=t.state,i=t.next_in,B=t.input,a=i+(t.avail_in-5),o=t.next_out,k=t.output,l=o-(r-t.avail_out),u=o+(t.avail_out-257),s=n.dmax,f=n.wsize,c=n.whave,d=n.wnext,h=n.window,p=n.hold,v=n.bits,y=n.lencode,g=n.distcode,w=(1<<n.lenbits)-1,S=(1<<n.distbits)-1;e:do{v<15&&(p+=B[i++]<<v,v+=8,p+=B[i++]<<v,v+=8),P=y[p&w];t:for(;;){if(C=P>>>24,p>>>=C,v-=C,C=P>>>16&255,C===0)k[o++]=P&65535;else if(C&16){A=P&65535,C&=15,C&&(v<C&&(p+=B[i++]<<v,v+=8),A+=p&(1<<C)-1,p>>>=C,v-=C),v<15&&(p+=B[i++]<<v,v+=8,p+=B[i++]<<v,v+=8),P=g[p&S];r:for(;;){if(C=P>>>24,p>>>=C,v-=C,C=P>>>16&255,C&16){if(F=P&65535,C&=15,v<C&&(p+=B[i++]<<v,v+=8,v<C&&(p+=B[i++]<<v,v+=8)),F+=p&(1<<C)-1,F>s){t.msg="invalid distance too far back",n.mode=Wi;break e}if(p>>>=C,v-=C,C=o-l,F>C){if(C=F-C,C>c&&n.sane){t.msg="invalid distance too far back",n.mode=Wi;break e}if(D=0,O=h,d===0){if(D+=f-C,C<A){A-=C;do k[o++]=h[D++];while(--C);D=o-F,O=k}}else if(d<C){if(D+=f+d-C,C-=d,C<A){A-=C;do k[o++]=h[D++];while(--C);if(D=0,d<A){C=d,A-=C;do k[o++]=h[D++];while(--C);D=o-F,O=k}}}else if(D+=d-C,C<A){A-=C;do k[o++]=h[D++];while(--C);D=o-F,O=k}for(;A>2;)k[o++]=O[D++],k[o++]=O[D++],k[o++]=O[D++],A-=3;A&&(k[o++]=O[D++],A>1&&(k[o++]=O[D++]))}else{D=o-F;do k[o++]=k[D++],k[o++]=k[D++],k[o++]=k[D++],A-=3;while(A>2);A&&(k[o++]=k[D++],A>1&&(k[o++]=k[D++]))}}else if((C&64)===0){P=g[(P&65535)+(p&(1<<C)-1)];continue r}else{t.msg="invalid distance code",n.mode=Wi;break e}break}}else if((C&64)===0){P=y[(P&65535)+(p&(1<<C)-1)];continue t}else if(C&32){n.mode=gp;break e}else{t.msg="invalid literal/length code",n.mode=Wi;break e}break}}while(i<a&&o<u);A=v>>3,i-=A,v-=A<<3,p&=(1<<v)-1,t.next_in=i,t.next_out=o,t.avail_in=i<a?5+(a-i):5-(i-a),t.avail_out=o<u?257+(u-o):257-(o-u),n.hold=p,n.bits=v},Al=dr,hn=15,Pl=852,Dl=592,El=0,xo=1,Ol=2,mp=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],bp=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],xp=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],wp=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64],Sp=function(t,r,n,i,a,o,l,u){var s=u.bits,f=0,c=0,d=0,h=0,p=0,v=0,y=0,g=0,w=0,S=0,P,C,A,F,D,O=null,B=0,k,M=new Al.Buf16(hn+1),N=new Al.Buf16(hn+1),T=null,W=0,L,X,Ee;for(f=0;f<=hn;f++)M[f]=0;for(c=0;c<i;c++)M[r[n+c]]++;for(p=s,h=hn;h>=1&&M[h]===0;h--);if(p>h&&(p=h),h===0)return a[o++]=1<<24|64<<16|0,a[o++]=1<<24|64<<16|0,u.bits=1,0;for(d=1;d<h&&M[d]===0;d++);for(p<d&&(p=d),g=1,f=1;f<=hn;f++)if(g<<=1,g-=M[f],g<0)return-1;if(g>0&&(t===El||h!==1))return-1;for(N[1]=0,f=1;f<hn;f++)N[f+1]=N[f]+M[f];for(c=0;c<i;c++)r[n+c]!==0&&(l[N[r[n+c]]++]=c);if(t===El?(O=T=l,k=19):t===xo?(O=mp,B-=257,T=bp,W-=257,k=256):(O=xp,T=wp,k=-1),S=0,c=0,f=d,D=o,v=p,y=0,A=-1,w=1<<p,F=w-1,t===xo&&w>Pl||t===Ol&&w>Dl)return 1;for(;;){L=f-y,l[c]<k?(X=0,Ee=l[c]):l[c]>k?(X=T[W+l[c]],Ee=O[B+l[c]]):(X=32+64,Ee=0),P=1<<f-y,C=1<<v,d=C;do C-=P,a[D+(S>>y)+C]=L<<24|X<<16|Ee|0;while(C!==0);for(P=1<<f-1;S&P;)P>>=1;if(P!==0?(S&=P-1,S+=P):S=0,c++,--M[f]===0){if(f===h)break;f=r[n+l[c]]}if(f>p&&(S&F)!==A){for(y===0&&(y=p),D+=d,v=f-y,g=1<<v;v+y<h&&(g-=M[v+y],!(g<=0));)v++,g<<=1;if(w+=1<<v,t===xo&&w>Pl||t===Ol&&w>Dl)return 1;A=S&F,a[A]=p<<24|v<<16|D-o|0}}return S!==0&&(a[D+S]=f-y<<24|64<<16|0),u.bits=p,0},pt=dr,Wo=wf,Gt=Sf,Fp=yp,ai=Sp,Cp=0,Mf=1,Bf=2,Rl=4,kp=5,qi=6,$r=0,Tp=1,Ap=2,Dt=-2,Nf=-3,jf=-4,Pp=-5,Ml=8,If=1,Bl=2,Nl=3,jl=4,Il=5,zl=6,Ul=7,Vl=8,Ll=9,Wl=10,ga=11,ar=12,wo=13,ql=14,So=15,Kl=16,Gl=17,Hl=18,Xl=19,Ki=20,Gi=21,Zl=22,Yl=23,Ql=24,Jl=25,_l=26,Fo=27,$l=28,eu=29,je=30,zf=31,Dp=32,Ep=852,Op=592,Rp=15,Mp=Rp;function tu(e){return(e>>>24&255)+(e>>>8&65280)+((e&65280)<<8)+((e&255)<<24)}function Bp(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new pt.Buf16(320),this.work=new pt.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function Uf(e){var t;return!e||!e.state?Dt:(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=t.wrap&1),t.mode=If,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new pt.Buf32(Ep),t.distcode=t.distdyn=new pt.Buf32(Op),t.sane=1,t.back=-1,$r)}function Vf(e){var t;return!e||!e.state?Dt:(t=e.state,t.wsize=0,t.whave=0,t.wnext=0,Uf(e))}function Lf(e,t){var r,n;return!e||!e.state||(n=e.state,t<0?(r=0,t=-t):(r=(t>>4)+1,t<48&&(t&=15)),t&&(t<8||t>15))?Dt:(n.window!==null&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,Vf(e))}function Wf(e,t){var r,n;return e?(n=new Bp,e.state=n,n.window=null,r=Lf(e,t),r!==$r&&(e.state=null),r):Dt}function Np(e){return Wf(e,Mp)}var ru=!0,Co,ko;function jp(e){if(ru){var t;for(Co=new pt.Buf32(512),ko=new pt.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(ai(Mf,e.lens,0,288,Co,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;ai(Bf,e.lens,0,32,ko,0,e.work,{bits:5}),ru=!1}e.lencode=Co,e.lenbits=9,e.distcode=ko,e.distbits=5}function qf(e,t,r,n){var i,a=e.state;return a.window===null&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new pt.Buf8(a.wsize)),n>=a.wsize?(pt.arraySet(a.window,t,r-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):(i=a.wsize-a.wnext,i>n&&(i=n),pt.arraySet(a.window,t,r-n,i,a.wnext),n-=i,n?(pt.arraySet(a.window,t,r-n,n,0),a.wnext=n,a.whave=a.wsize):(a.wnext+=i,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=i))),0}function Ip(e,t){var r,n,i,a,o,l,u,s,f,c,d,h,p,v,y=0,g,w,S,P,C,A,F,D,O=new pt.Buf8(4),B,k,M=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&e.avail_in!==0)return Dt;r=e.state,r.mode===ar&&(r.mode=wo),o=e.next_out,i=e.output,u=e.avail_out,a=e.next_in,n=e.input,l=e.avail_in,s=r.hold,f=r.bits,c=l,d=u,D=$r;e:for(;;)switch(r.mode){case If:if(r.wrap===0){r.mode=wo;break}for(;f<16;){if(l===0)break e;l--,s+=n[a++]<<f,f+=8}if(r.wrap&2&&s===35615){r.check=0,O[0]=s&255,O[1]=s>>>8&255,r.check=Gt(r.check,O,2,0),s=0,f=0,r.mode=Bl;break}if(r.flags=0,r.head&&(r.head.done=!1),!(r.wrap&1)||(((s&255)<<8)+(s>>8))%31){e.msg="incorrect header check",r.mode=je;break}if((s&15)!==Ml){e.msg="unknown compression method",r.mode=je;break}if(s>>>=4,f-=4,F=(s&15)+8,r.wbits===0)r.wbits=F;else if(F>r.wbits){e.msg="invalid window size",r.mode=je;break}r.dmax=1<<F,e.adler=r.check=1,r.mode=s&512?Wl:ar,s=0,f=0;break;case Bl:for(;f<16;){if(l===0)break e;l--,s+=n[a++]<<f,f+=8}if(r.flags=s,(r.flags&255)!==Ml){e.msg="unknown compression method",r.mode=je;break}if(r.flags&57344){e.msg="unknown header flags set",r.mode=je;break}r.head&&(r.head.text=s>>8&1),r.flags&512&&(O[0]=s&255,O[1]=s>>>8&255,r.check=Gt(r.check,O,2,0)),s=0,f=0,r.mode=Nl;case Nl:for(;f<32;){if(l===0)break e;l--,s+=n[a++]<<f,f+=8}r.head&&(r.head.time=s),r.flags&512&&(O[0]=s&255,O[1]=s>>>8&255,O[2]=s>>>16&255,O[3]=s>>>24&255,r.check=Gt(r.check,O,4,0)),s=0,f=0,r.mode=jl;case jl:for(;f<16;){if(l===0)break e;l--,s+=n[a++]<<f,f+=8}r.head&&(r.head.xflags=s&255,r.head.os=s>>8),r.flags&512&&(O[0]=s&255,O[1]=s>>>8&255,r.check=Gt(r.check,O,2,0)),s=0,f=0,r.mode=Il;case Il:if(r.flags&1024){for(;f<16;){if(l===0)break e;l--,s+=n[a++]<<f,f+=8}r.length=s,r.head&&(r.head.extra_len=s),r.flags&512&&(O[0]=s&255,O[1]=s>>>8&255,r.check=Gt(r.check,O,2,0)),s=0,f=0}else r.head&&(r.head.extra=null);r.mode=zl;case zl:if(r.flags&1024&&(h=r.length,h>l&&(h=l),h&&(r.head&&(F=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),pt.arraySet(r.head.extra,n,a,h,F)),r.flags&512&&(r.check=Gt(r.check,n,h,a)),l-=h,a+=h,r.length-=h),r.length))break e;r.length=0,r.mode=Ul;case Ul:if(r.flags&2048){if(l===0)break e;h=0;do F=n[a+h++],r.head&&F&&r.length<65536&&(r.head.name+=String.fromCharCode(F));while(F&&h<l);if(r.flags&512&&(r.check=Gt(r.check,n,h,a)),l-=h,a+=h,F)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=Vl;case Vl:if(r.flags&4096){if(l===0)break e;h=0;do F=n[a+h++],r.head&&F&&r.length<65536&&(r.head.comment+=String.fromCharCode(F));while(F&&h<l);if(r.flags&512&&(r.check=Gt(r.check,n,h,a)),l-=h,a+=h,F)break e}else r.head&&(r.head.comment=null);r.mode=Ll;case Ll:if(r.flags&512){for(;f<16;){if(l===0)break e;l--,s+=n[a++]<<f,f+=8}if(s!==(r.check&65535)){e.msg="header crc mismatch",r.mode=je;break}s=0,f=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=ar;break;case Wl:for(;f<32;){if(l===0)break e;l--,s+=n[a++]<<f,f+=8}e.adler=r.check=tu(s),s=0,f=0,r.mode=ga;case ga:if(r.havedict===0)return e.next_out=o,e.avail_out=u,e.next_in=a,e.avail_in=l,r.hold=s,r.bits=f,Ap;e.adler=r.check=1,r.mode=ar;case ar:if(t===kp||t===qi)break e;case wo:if(r.last){s>>>=f&7,f-=f&7,r.mode=Fo;break}for(;f<3;){if(l===0)break e;l--,s+=n[a++]<<f,f+=8}switch(r.last=s&1,s>>>=1,f-=1,s&3){case 0:r.mode=ql;break;case 1:if(jp(r),r.mode=Ki,t===qi){s>>>=2,f-=2;break e}break;case 2:r.mode=Gl;break;case 3:e.msg="invalid block type",r.mode=je}s>>>=2,f-=2;break;case ql:for(s>>>=f&7,f-=f&7;f<32;){if(l===0)break e;l--,s+=n[a++]<<f,f+=8}if((s&65535)!==(s>>>16^65535)){e.msg="invalid stored block lengths",r.mode=je;break}if(r.length=s&65535,s=0,f=0,r.mode=So,t===qi)break e;case So:r.mode=Kl;case Kl:if(h=r.length,h){if(h>l&&(h=l),h>u&&(h=u),h===0)break e;pt.arraySet(i,n,a,h,o),l-=h,a+=h,u-=h,o+=h,r.length-=h;break}r.mode=ar;break;case Gl:for(;f<14;){if(l===0)break e;l--,s+=n[a++]<<f,f+=8}if(r.nlen=(s&31)+257,s>>>=5,f-=5,r.ndist=(s&31)+1,s>>>=5,f-=5,r.ncode=(s&15)+4,s>>>=4,f-=4,r.nlen>286||r.ndist>30){e.msg="too many length or distance symbols",r.mode=je;break}r.have=0,r.mode=Hl;case Hl:for(;r.have<r.ncode;){for(;f<3;){if(l===0)break e;l--,s+=n[a++]<<f,f+=8}r.lens[M[r.have++]]=s&7,s>>>=3,f-=3}for(;r.have<19;)r.lens[M[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,B={bits:r.lenbits},D=ai(Cp,r.lens,0,19,r.lencode,0,r.work,B),r.lenbits=B.bits,D){e.msg="invalid code lengths set",r.mode=je;break}r.have=0,r.mode=Xl;case Xl:for(;r.have<r.nlen+r.ndist;){for(;y=r.lencode[s&(1<<r.lenbits)-1],g=y>>>24,w=y>>>16&255,S=y&65535,!(g<=f);){if(l===0)break e;l--,s+=n[a++]<<f,f+=8}if(S<16)s>>>=g,f-=g,r.lens[r.have++]=S;else{if(S===16){for(k=g+2;f<k;){if(l===0)break e;l--,s+=n[a++]<<f,f+=8}if(s>>>=g,f-=g,r.have===0){e.msg="invalid bit length repeat",r.mode=je;break}F=r.lens[r.have-1],h=3+(s&3),s>>>=2,f-=2}else if(S===17){for(k=g+3;f<k;){if(l===0)break e;l--,s+=n[a++]<<f,f+=8}s>>>=g,f-=g,F=0,h=3+(s&7),s>>>=3,f-=3}else{for(k=g+7;f<k;){if(l===0)break e;l--,s+=n[a++]<<f,f+=8}s>>>=g,f-=g,F=0,h=11+(s&127),s>>>=7,f-=7}if(r.have+h>r.nlen+r.ndist){e.msg="invalid bit length repeat",r.mode=je;break}for(;h--;)r.lens[r.have++]=F}}if(r.mode===je)break;if(r.lens[256]===0){e.msg="invalid code -- missing end-of-block",r.mode=je;break}if(r.lenbits=9,B={bits:r.lenbits},D=ai(Mf,r.lens,0,r.nlen,r.lencode,0,r.work,B),r.lenbits=B.bits,D){e.msg="invalid literal/lengths set",r.mode=je;break}if(r.distbits=6,r.distcode=r.distdyn,B={bits:r.distbits},D=ai(Bf,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,B),r.distbits=B.bits,D){e.msg="invalid distances set",r.mode=je;break}if(r.mode=Ki,t===qi)break e;case Ki:r.mode=Gi;case Gi:if(l>=6&&u>=258){e.next_out=o,e.avail_out=u,e.next_in=a,e.avail_in=l,r.hold=s,r.bits=f,Fp(e,d),o=e.next_out,i=e.output,u=e.avail_out,a=e.next_in,n=e.input,l=e.avail_in,s=r.hold,f=r.bits,r.mode===ar&&(r.back=-1);break}for(r.back=0;y=r.lencode[s&(1<<r.lenbits)-1],g=y>>>24,w=y>>>16&255,S=y&65535,!(g<=f);){if(l===0)break e;l--,s+=n[a++]<<f,f+=8}if(w&&(w&240)===0){for(P=g,C=w,A=S;y=r.lencode[A+((s&(1<<P+C)-1)>>P)],g=y>>>24,w=y>>>16&255,S=y&65535,!(P+g<=f);){if(l===0)break e;l--,s+=n[a++]<<f,f+=8}s>>>=P,f-=P,r.back+=P}if(s>>>=g,f-=g,r.back+=g,r.length=S,w===0){r.mode=_l;break}if(w&32){r.back=-1,r.mode=ar;break}if(w&64){e.msg="invalid literal/length code",r.mode=je;break}r.extra=w&15,r.mode=Zl;case Zl:if(r.extra){for(k=r.extra;f<k;){if(l===0)break e;l--,s+=n[a++]<<f,f+=8}r.length+=s&(1<<r.extra)-1,s>>>=r.extra,f-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=Yl;case Yl:for(;y=r.distcode[s&(1<<r.distbits)-1],g=y>>>24,w=y>>>16&255,S=y&65535,!(g<=f);){if(l===0)break e;l--,s+=n[a++]<<f,f+=8}if((w&240)===0){for(P=g,C=w,A=S;y=r.distcode[A+((s&(1<<P+C)-1)>>P)],g=y>>>24,w=y>>>16&255,S=y&65535,!(P+g<=f);){if(l===0)break e;l--,s+=n[a++]<<f,f+=8}s>>>=P,f-=P,r.back+=P}if(s>>>=g,f-=g,r.back+=g,w&64){e.msg="invalid distance code",r.mode=je;break}r.offset=S,r.extra=w&15,r.mode=Ql;case Ql:if(r.extra){for(k=r.extra;f<k;){if(l===0)break e;l--,s+=n[a++]<<f,f+=8}r.offset+=s&(1<<r.extra)-1,s>>>=r.extra,f-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){e.msg="invalid distance too far back",r.mode=je;break}r.mode=Jl;case Jl:if(u===0)break e;if(h=d-u,r.offset>h){if(h=r.offset-h,h>r.whave&&r.sane){e.msg="invalid distance too far back",r.mode=je;break}h>r.wnext?(h-=r.wnext,p=r.wsize-h):p=r.wnext-h,h>r.length&&(h=r.length),v=r.window}else v=i,p=o-r.offset,h=r.length;h>u&&(h=u),u-=h,r.length-=h;do i[o++]=v[p++];while(--h);r.length===0&&(r.mode=Gi);break;case _l:if(u===0)break e;i[o++]=r.length,u--,r.mode=Gi;break;case Fo:if(r.wrap){for(;f<32;){if(l===0)break e;l--,s|=n[a++]<<f,f+=8}if(d-=u,e.total_out+=d,r.total+=d,d&&(e.adler=r.check=r.flags?Gt(r.check,i,d,o-d):Wo(r.check,i,d,o-d)),d=u,(r.flags?s:tu(s))!==r.check){e.msg="incorrect data check",r.mode=je;break}s=0,f=0}r.mode=$l;case $l:if(r.wrap&&r.flags){for(;f<32;){if(l===0)break e;l--,s+=n[a++]<<f,f+=8}if(s!==(r.total&4294967295)){e.msg="incorrect length check",r.mode=je;break}s=0,f=0}r.mode=eu;case eu:D=Tp;break e;case je:D=Nf;break e;case zf:return jf;case Dp:default:return Dt}return e.next_out=o,e.avail_out=u,e.next_in=a,e.avail_in=l,r.hold=s,r.bits=f,(r.wsize||d!==e.avail_out&&r.mode<je&&(r.mode<Fo||t!==Rl))&&qf(e,e.output,e.next_out,d-e.avail_out),c-=e.avail_in,d-=e.avail_out,e.total_in+=c,e.total_out+=d,r.total+=d,r.wrap&&d&&(e.adler=r.check=r.flags?Gt(r.check,i,d,e.next_out-d):Wo(r.check,i,d,e.next_out-d)),e.data_type=r.bits+(r.last?64:0)+(r.mode===ar?128:0)+(r.mode===Ki||r.mode===So?256:0),(c===0&&d===0||t===Rl)&&D===$r&&(D=Pp),D}function zp(e){if(!e||!e.state)return Dt;var t=e.state;return t.window&&(t.window=null),e.state=null,$r}function Up(e,t){var r;return!e||!e.state||(r=e.state,(r.wrap&2)===0)?Dt:(r.head=t,t.done=!1,$r)}function Vp(e,t){var r=t.length,n,i,a;return!e||!e.state||(n=e.state,n.wrap!==0&&n.mode!==ga)?Dt:n.mode===ga&&(i=1,i=Wo(i,t,r,0),i!==n.check)?Nf:(a=qf(e,t,r,r),a?(n.mode=zf,jf):(n.havedict=1,$r))}Wt.inflateReset=Vf;Wt.inflateReset2=Lf;Wt.inflateResetKeep=Uf;Wt.inflateInit=Np;Wt.inflateInit2=Wf;Wt.inflate=Ip;Wt.inflateEnd=zp;Wt.inflateGetHeader=Up;Wt.inflateSetDictionary=Vp;Wt.inflateInfo="pako inflate (from Nodeca project)";var Kf={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};function Lp(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}var Wp=Lp,Sn=Wt,oi=dr,sa=nn,We=Kf,qo=hs,qp=Of,Kp=Wp,Gf=Object.prototype.toString;function en(e){if(!(this instanceof en))return new en(e);this.options=oi.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&t.windowBits>=0&&t.windowBits<16&&(t.windowBits=-t.windowBits,t.windowBits===0&&(t.windowBits=-15)),t.windowBits>=0&&t.windowBits<16&&!(e&&e.windowBits)&&(t.windowBits+=32),t.windowBits>15&&t.windowBits<48&&(t.windowBits&15)===0&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new qp,this.strm.avail_out=0;var r=Sn.inflateInit2(this.strm,t.windowBits);if(r!==We.Z_OK)throw new Error(qo[r]);if(this.header=new Kp,Sn.inflateGetHeader(this.strm,this.header),t.dictionary&&(typeof t.dictionary=="string"?t.dictionary=sa.string2buf(t.dictionary):Gf.call(t.dictionary)==="[object ArrayBuffer]"&&(t.dictionary=new Uint8Array(t.dictionary)),t.raw&&(r=Sn.inflateSetDictionary(this.strm,t.dictionary),r!==We.Z_OK)))throw new Error(qo[r])}en.prototype.push=function(e,t){var r=this.strm,n=this.options.chunkSize,i=this.options.dictionary,a,o,l,u,s,f=!1;if(this.ended)return!1;o=t===~~t?t:t===!0?We.Z_FINISH:We.Z_NO_FLUSH,typeof e=="string"?r.input=sa.binstring2buf(e):Gf.call(e)==="[object ArrayBuffer]"?r.input=new Uint8Array(e):r.input=e,r.next_in=0,r.avail_in=r.input.length;do{if(r.avail_out===0&&(r.output=new oi.Buf8(n),r.next_out=0,r.avail_out=n),a=Sn.inflate(r,We.Z_NO_FLUSH),a===We.Z_NEED_DICT&&i&&(a=Sn.inflateSetDictionary(this.strm,i)),a===We.Z_BUF_ERROR&&f===!0&&(a=We.Z_OK,f=!1),a!==We.Z_STREAM_END&&a!==We.Z_OK)return this.onEnd(a),this.ended=!0,!1;r.next_out&&(r.avail_out===0||a===We.Z_STREAM_END||r.avail_in===0&&(o===We.Z_FINISH||o===We.Z_SYNC_FLUSH))&&(this.options.to==="string"?(l=sa.utf8border(r.output,r.next_out),u=r.next_out-l,s=sa.buf2string(r.output,l),r.next_out=u,r.avail_out=n-u,u&&oi.arraySet(r.output,r.output,l,u,0),this.onData(s)):this.onData(oi.shrinkBuf(r.output,r.next_out))),r.avail_in===0&&r.avail_out===0&&(f=!0)}while((r.avail_in>0||r.avail_out===0)&&a!==We.Z_STREAM_END);return a===We.Z_STREAM_END&&(o=We.Z_FINISH),o===We.Z_FINISH?(a=Sn.inflateEnd(this.strm),this.onEnd(a),this.ended=!0,a===We.Z_OK):(o===We.Z_SYNC_FLUSH&&(this.onEnd(We.Z_OK),r.avail_out=0),!0)};en.prototype.onData=function(e){this.chunks.push(e)};en.prototype.onEnd=function(e){e===We.Z_OK&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=oi.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};function ps(e,t){var r=new en(t);if(r.push(e,!0),r.err)throw r.msg||qo[r.err];return r.result}function Gp(e,t){return t=t||{},t.raw=!0,ps(e,t)}Ai.Inflate=en;Ai.inflate=ps;Ai.inflateRaw=Gp;Ai.ungzip=ps;var Hp=dr.assign,Xp=Ci,Zp=Ai,Yp=Kf,Hf={};Hp(Hf,Xp,Zp,Yp);var za=Hf,nu="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Qn=new Uint8Array(256);for(var Hi=0;Hi<nu.length;Hi++)Qn[nu.charCodeAt(Hi)]=Hi;var Qp=function(e){var t=e.length*.75,r=e.length,n,i=0,a,o,l,u;e[e.length-1]==="="&&(t--,e[e.length-2]==="="&&t--);var s=new Uint8Array(t);for(n=0;n<r;n+=4)a=Qn[e.charCodeAt(n)],o=Qn[e.charCodeAt(n+1)],l=Qn[e.charCodeAt(n+2)],u=Qn[e.charCodeAt(n+3)],s[i++]=a<<2|o>>4,s[i++]=(o&15)<<4|l>>2,s[i++]=(l&3)<<6|u&63;return s},Jp=function(e){for(var t="",r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return t},Xf=function(e){return Jp(za.inflate(Qp(e)))},_p=function(e,t,r){for(var n="",i=0,a=t-e.length;i<a;i++)n+=r;return n+e},$p="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",eg="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",tg="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",rg="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",ng="",ig="",ag="",og="",sg="",lg="",ug="",fg="",cg="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",dg="eJxtmNtu20YQhl+F4FULyMGeD7pz3AY1ChtG7NpFA18w1NomIlECSRcxgrx7SVk7+wOdG8H5OJydf2Z2d5gf9cV+t0v9VK/r+6vXsXlOlbHe28paq229qj/t++m62aXZ4J/m8PRb1z9/baZxefK63Z6eXN5dVMvTCh83u277xr/6kLrnl2XNq7TpXnczuZyabdee98/b2VzM/x4/dd/T5qab2pd6PQ2vaVVfvDRD005puE3Lu7eH1HbN9hTjx4/77/X6y5lcnUmjVzHIVVDicVX/1W/SsO36dLMfu6nb9/X6TAoBD+5euvZbn8axXtuZ36dhPJrVQqgPQoh5hev91LWLkIv94W1Ygq9+aX+tZAx2tfz64284/sblN/rqfLP/mqrbt3FKu7G67Nv9cNgPzZQ2H6rz7bb6vLgZq89pTMO/M/xfEqturJpqSM/d7GJIm2oamk3aNcO3av80O5xh3yyKmm1193ZIT02bqovTKjP+MAf++7zsZvZ3276kYyWWXB0z99S18/PbafPHQ71W4fjn/fxnFO+ZvkrT0LVzTr78qB/+nk38bHM9exgP8zr1z9U7jt6840YW5uSJKcZOCaBBnKgm5mU8MVNYyMwWFvO7Ukagkmgg6sDWQ5yFFqjzUrLEaQ3BEmiwNsMSaZS0vgWfOkPHWQowNeTUc0kumnxZvsgPxlGai6VTGUqAVCTQ6QkWnc77DKEiLktSUBJKqHIQZ86d8gCpHYoiEzMsb1ubYy8vW50DChB5ZhGqrijD0EqUIeiaEHIfCg5Kpuu0ApiToaGPSY0uaQsyr65L2oKi1yFt1PLaQ3lzfXTgXodGoJYzglndSLDMPg1sTPJpQJHJigw0QrGERqD9YhyTOgONQDUyuF1zaxuokc/BW2ztXCMrGZ9WMW1oQZHIXWNBkSCfRZEL5BMUiZw6CzVSFCfUSGZFNjIldoKDkonTKQiJIGzWmFd3BizJJ9SINoLDriOfUCOZS+zg+KGD1qGiLNMLxtJD1/ns00ON6EzyUCM6vbxhoBKaqbG3DFQCNiL1iHccBPV0DHhQH/JW8EW90dkyFKGywCJU0WkVSvSGeiSUODWFFD0HYdPQVoiRgfPMA+/nnRgiAyNYSjpWNQcNSMrtFCUH4ZIRpSCWocFCSuhCEY6hoUClc0WC52BJlCYYLQdhN+hygRRRlo5BKRRLS6oihSqh+ZzzRGG1Mo4Iz1LoP0qsxDGFzk0JE42ji0jCPejomJKCuwil4m5CiRMEUMVSzVLDUstSx1Juc0oVWMpqY295qVltmtWmWW2a1aZZbZrVplltmtWmWW2G1WZYbYbVZlhthtVmWG2G1WZYbYbVZlhtltVmWW2W1WZZbZbVZlltltVmWW2W1QYjQCh7E2aAQHeGhCFgPoNoy8KNb2wxBhmGKBxoUZXlLGsLI6AsftEDHV0wIURVbANLcTKlGGBIKPOAxCmhePCKUwFzAmpDFRQvjA9R06Hq8TONvshgKDCuRAZTXigUxjxNFfKRo3CLhnIJBMFRvMZpqpNBMlQJzGT5WFQMVQI/AikPMIhEU1aDjqJvQwmjSHB05cC9jbYwc5UtAHNLhDw41ha+lEqF4JaH3gmB61SYcqInxTDmQK8v08vjqv4zDf1N0w3Lf4A8/vwPpfK11w==",hg={Courier:rg,"Courier-Bold":$p,"Courier-Oblique":tg,"Courier-BoldOblique":eg,Helvetica:og,"Helvetica-Bold":ng,"Helvetica-Oblique":ag,"Helvetica-BoldOblique":ig,"Times-Roman":fg,"Times-Bold":sg,"Times-Italic":ug,"Times-BoldItalic":lg,Symbol:cg,ZapfDingbats:dg},yi;(function(e){e.Courier="Courier",e.CourierBold="Courier-Bold",e.CourierOblique="Courier-Oblique",e.CourierBoldOblique="Courier-BoldOblique",e.Helvetica="Helvetica",e.HelveticaBold="Helvetica-Bold",e.HelveticaOblique="Helvetica-Oblique",e.HelveticaBoldOblique="Helvetica-BoldOblique",e.TimesRoman="Times-Roman",e.TimesRomanBold="Times-Bold",e.TimesRomanItalic="Times-Italic",e.TimesRomanBoldItalic="Times-BoldItalic",e.Symbol="Symbol",e.ZapfDingbats="ZapfDingbats"})(yi||(yi={}));var iu={},vg=function(){function e(){var t=this;this.getWidthOfGlyph=function(r){return t.CharWidths[r]},this.getXAxisKerningForPair=function(r,n){return(t.KernPairXAmounts[r]||{})[n]}}return e.load=function(t){var r=iu[t];if(r)return r;var n=Xf(hg[t]),i=Object.assign(new e,JSON.parse(n));return i.CharWidths=i.CharMetrics.reduce(function(a,o){return a[o.N]=o.WX,a},{}),i.KernPairXAmounts=i.KernPairs.reduce(function(a,o){var l=o[0],u=o[1],s=o[2];return a[l]||(a[l]={}),a[l][u]=s,a},{}),iu[t]=i,i},e}(),pg="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",gg=Xf(pg),To=JSON.parse(gg),Ao=function(){function e(t,r){var n=this;this.canEncodeUnicodeCodePoint=function(i){return i in n.unicodeMappings},this.encodeUnicodeCodePoint=function(i){var a=n.unicodeMappings[i];if(!a){var o=String.fromCharCode(i),l="0x"+_p(i.toString(16),4,"0"),u=n.name+' cannot encode "'+o+'" ('+l+")";throw new Error(u)}return{code:a[0],name:a[1]}},this.name=t,this.supportedCodePoints=Object.keys(r).map(Number).sort(function(i,a){return i-a}),this.unicodeMappings=r}return e}(),Xi={Symbol:new Ao("Symbol",To.symbol),ZapfDingbats:new Ao("ZapfDingbats",To.zapfdingbats),WinAnsi:new Ao("WinAnsi",To.win1252)},Ua=function(e){return Object.keys(e).map(function(t){return e[t]})},yg=Ua(yi),au=function(e){return yg.includes(e)},Zi=function(e,t){return e.x===t.x&&e.y===t.y&&e.width===t.width&&e.height===t.height},Ge=function(e){return"`"+e+"`"},mg=function(e){return"'"+e+"'"},ou=function(e){var t=typeof e;return t==="string"?mg(e):t==="undefined"?Ge(e):e},bg=function(e,t,r){for(var n=new Array(r.length),i=0,a=r.length;i<a;i++){var o=r[i];n[i]=ou(o)}var l=n.join(" or ");return Ge(t)+" must be one of "+l+", but was actually "+ou(e)},Pr=function(e,t,r){Array.isArray(r)||(r=Ua(r));for(var n=0,i=r.length;n<i;n++)if(e===r[n])return;throw new TypeError(bg(e,t,r))},St=function(e,t,r){Array.isArray(r)||(r=Ua(r)),Pr(e,t,r.concat(void 0))},xg=function(e,t,r){Array.isArray(r)||(r=Ua(r));for(var n=0,i=e.length;n<i;n++)Pr(e[n],t,r)},wg=function(e){return e===null?"null":e===void 0?"undefined":typeof e=="string"?"string":isNaN(e)?"NaN":typeof e=="number"?"number":typeof e=="boolean"?"boolean":typeof e=="symbol"?"symbol":typeof e=="bigint"?"bigint":e.constructor&&e.constructor.name?e.constructor.name:e.name?e.name:e.constructor?String(e.constructor):String(e)},Sg=function(e,t){return t==="null"?e===null:t==="undefined"?e===void 0:t==="string"?typeof e=="string":t==="number"?typeof e=="number"&&!isNaN(e):t==="boolean"?typeof e=="boolean":t==="symbol"?typeof e=="symbol":t==="bigint"?typeof e=="bigint":t===Date?e instanceof Date:t===Array?e instanceof Array:t===Uint8Array?e instanceof Uint8Array:t===ArrayBuffer?e instanceof ArrayBuffer:t===Function?e instanceof Function:e instanceof t[0]},Fg=function(e,t,r){for(var n=new Array(r.length),i=0,a=r.length;i<a;i++){var o=r[i];o==="null"&&(n[i]=Ge("null")),o==="undefined"&&(n[i]=Ge("undefined")),o==="string"?n[i]=Ge("string"):o==="number"?n[i]=Ge("number"):o==="boolean"?n[i]=Ge("boolean"):o==="symbol"?n[i]=Ge("symbol"):o==="bigint"?n[i]=Ge("bigint"):o===Array?n[i]=Ge("Array"):o===Uint8Array?n[i]=Ge("Uint8Array"):o===ArrayBuffer?n[i]=Ge("ArrayBuffer"):n[i]=Ge(o[1])}var l=n.join(" or ");return Ge(t)+" must be of type "+l+", but was actually of type "+Ge(wg(e))},R=function(e,t,r){for(var n=0,i=r.length;n<i;n++)if(Sg(e,r[n]))return;throw new TypeError(Fg(e,t,r))},q=function(e,t,r){R(e,t,r.concat("undefined"))},Zf=function(e,t,r){for(var n=0,i=e.length;n<i;n++)R(e[n],t,r)},gt=function(e,t,r,n){if(R(e,t,["number"]),R(r,"min",["number"]),R(n,"max",["number"]),n=Math.max(r,n),e<r||e>n)throw new Error(Ge(t)+" must be at least "+r+" and at most "+n+", but was actually "+e)},Nt=function(e,t,r,n){R(e,t,["number","undefined"]),typeof e=="number"&&gt(e,t,r,n)},Yf=function(e,t,r){if(R(e,t,["number"]),e%r!==0)throw new Error(Ge(t)+" must be a multiple of "+r+", but was actually "+e)},Cg=function(e,t){if(!Number.isInteger(e))throw new Error(Ge(t)+" must be an integer, but was actually "+e)},Va=function(e,t){if(![1,0].includes(Math.sign(e)))throw new Error(Ge(t)+" must be a positive number or 0, but was actually "+e)},re=new Uint16Array(256);for(var Yi=0;Yi<256;Yi++)re[Yi]=Yi;re[22]=ee("");re[24]=ee("\u02D8");re[25]=ee("\u02C7");re[26]=ee("\u02C6");re[27]=ee("\u02D9");re[28]=ee("\u02DD");re[29]=ee("\u02DB");re[30]=ee("\u02DA");re[31]=ee("\u02DC");re[127]=ee("\uFFFD");re[128]=ee("\u2022");re[129]=ee("\u2020");re[130]=ee("\u2021");re[131]=ee("\u2026");re[132]=ee("\u2014");re[133]=ee("\u2013");re[134]=ee("\u0192");re[135]=ee("\u2044");re[136]=ee("\u2039");re[137]=ee("\u203A");re[138]=ee("\u2212");re[139]=ee("\u2030");re[140]=ee("\u201E");re[141]=ee("\u201C");re[142]=ee("\u201D");re[143]=ee("\u2018");re[144]=ee("\u2019");re[145]=ee("\u201A");re[146]=ee("\u2122");re[147]=ee("\uFB01");re[148]=ee("\uFB02");re[149]=ee("\u0141");re[150]=ee("\u0152");re[151]=ee("\u0160");re[152]=ee("\u0178");re[153]=ee("\u017D");re[154]=ee("\u0131");re[155]=ee("\u0142");re[156]=ee("\u0153");re[157]=ee("\u0161");re[158]=ee("\u017E");re[159]=ee("\uFFFD");re[160]=ee("\u20AC");re[173]=ee("\uFFFD");var Qf=function(e){for(var t=new Array(e.length),r=0,n=e.length;r<n;r++)t[r]=re[e[r]];return String.fromCodePoint.apply(String,t)},ur=function(){function e(t){this.populate=t,this.value=void 0}return e.prototype.getValue=function(){return this.value},e.prototype.access=function(){return this.value||(this.value=this.populate()),this.value},e.prototype.invalidate=function(){this.value=void 0},e.populatedBy=function(t){return new e(t)},e}(),kt=function(e){K(t,e);function t(r,n){var i=this,a="Method "+r+"."+n+"() not implemented";return i=e.call(this,a)||this,i}return t}(Error),gs=function(e){K(t,e);function t(r){var n=this,i="Cannot construct "+r+" - it has a private constructor";return n=e.call(this,i)||this,n}return t}(Error),ya=function(e){K(t,e);function t(r,n){var i=this,a=function(u){var s,f;return(s=u==null?void 0:u.name)!==null&&s!==void 0?s:(f=u==null?void 0:u.constructor)===null||f===void 0?void 0:f.name},o=Array.isArray(r)?r.map(a):[a(r)],l="Expected instance of "+o.join(" or ")+", "+("but got instance of "+(n&&a(n)));return i=e.call(this,l)||this,i}return t}(Error),kg=function(e){K(t,e);function t(r){var n=this,i=r+" stream encoding not supported";return n=e.call(this,i)||this,n}return t}(Error),ys=function(e){K(t,e);function t(r,n){var i=this,a="Cannot call "+r+"."+n+"() more than once";return i=e.call(this,a)||this,i}return t}(Error);(function(e){K(t,e);function t(r){var n=this,i="Missing catalog (ref="+r+")";return n=e.call(this,i)||this,n}return t})(Error);var Tg=function(e){K(t,e);function t(){var r=this,n="Can't embed page with missing Contents";return r=e.call(this,n)||this,r}return t}(Error),Ag=function(e){K(t,e);function t(r){var n,i,a,o=this,l=(a=(i=(n=r==null?void 0:r.contructor)===null||n===void 0?void 0:n.name)!==null&&i!==void 0?i:r==null?void 0:r.name)!==null&&a!==void 0?a:r,u="Unrecognized stream type: "+l;return o=e.call(this,u)||this,o}return t}(Error),Pg=function(e){K(t,e);function t(){var r=this,n="Found mismatched contexts while embedding pages. All pages in the array passed to `PDFDocument.embedPages()` must be from the same document.";return r=e.call(this,n)||this,r}return t}(Error),Dg=function(e){K(t,e);function t(r){var n=this,i="Attempted to convert PDFArray with "+r+" elements to rectangle, but must have exactly 4 elements.";return n=e.call(this,i)||this,n}return t}(Error),Jf=function(e){K(t,e);function t(r){var n=this,i='Attempted to convert "'+r+'" to a date, but it does not match the PDF date string format.';return n=e.call(this,i)||this,n}return t}(Error),su=function(e){K(t,e);function t(r,n){var i=this,a="Invalid targetIndex specified: targetIndex="+r+" must be less than Count="+n;return i=e.call(this,a)||this,i}return t}(Error),lu=function(e){K(t,e);function t(r,n){var i=this,a="Failed to "+n+" at targetIndex="+r+" due to corrupt page tree: It is likely that one or more 'Count' entries are invalid";return i=e.call(this,a)||this,i}return t}(Error),ma=function(e){K(t,e);function t(r,n,i){var a=this,o="index should be at least "+n+" and at most "+i+", but was actually "+r;return a=e.call(this,o)||this,a}return t}(Error),ms=function(e){K(t,e);function t(){var r=this,n="Attempted to set invalid field value";return r=e.call(this,n)||this,r}return t}(Error),Eg=function(e){K(t,e);function t(){var r=this,n="Attempted to select multiple values for single-select field";return r=e.call(this,n)||this,r}return t}(Error),Og=function(e){K(t,e);function t(r){var n=this,i="No /DA (default appearance) entry found for field: "+r;return n=e.call(this,i)||this,n}return t}(Error),Rg=function(e){K(t,e);function t(r){var n=this,i="No Tf operator found for DA of field: "+r;return n=e.call(this,i)||this,n}return t}(Error),uu=function(e){K(t,e);function t(r,n){var i=this,a="Failed to parse number "+("(line:"+r.line+" col:"+r.column+" offset="+r.offset+'): "'+n+'"');return i=e.call(this,a)||this,i}return t}(Error),jr=function(e){K(t,e);function t(r,n){var i=this,a="Failed to parse PDF document "+("(line:"+r.line+" col:"+r.column+" offset="+r.offset+"): "+n);return i=e.call(this,a)||this,i}return t}(Error),Mg=function(e){K(t,e);function t(r,n,i){var a=this,o="Expected next byte to be "+n+" but it was actually "+i;return a=e.call(this,r,o)||this,a}return t}(jr),Bg=function(e){K(t,e);function t(r,n){var i=this,a="Failed to parse PDF object starting with the following byte: "+n;return i=e.call(this,r,a)||this,i}return t}(jr),Ng=function(e){K(t,e);function t(r){var n=this,i="Failed to parse invalid PDF object";return n=e.call(this,r,i)||this,n}return t}(jr),jg=function(e){K(t,e);function t(r){var n=this,i="Failed to parse PDF stream";return n=e.call(this,r,i)||this,n}return t}(jr),Ig=function(e){K(t,e);function t(r){var n=this,i="Failed to parse PDF literal string due to unbalanced parenthesis";return n=e.call(this,r,i)||this,n}return t}(jr),zg=function(e){K(t,e);function t(r){var n=this,i="Parser stalled";return n=e.call(this,r,i)||this,n}return t}(jr),Ug=function(e){K(t,e);function t(r){var n=this,i="No PDF header found";return n=e.call(this,r,i)||this,n}return t}(jr),Vg=function(e){K(t,e);function t(r,n){var i=this,a="Did not find expected keyword '"+_u(n)+"'";return i=e.call(this,r,a)||this,i}return t}(jr),Ko;(function(e){e[e.Null=0]="Null",e[e.Backspace=8]="Backspace",e[e.Tab=9]="Tab",e[e.Newline=10]="Newline",e[e.FormFeed=12]="FormFeed",e[e.CarriageReturn=13]="CarriageReturn",e[e.Space=32]="Space",e[e.ExclamationPoint=33]="ExclamationPoint",e[e.Hash=35]="Hash",e[e.Percent=37]="Percent",e[e.LeftParen=40]="LeftParen",e[e.RightParen=41]="RightParen",e[e.Plus=43]="Plus",e[e.Minus=45]="Minus",e[e.Dash=45]="Dash",e[e.Period=46]="Period",e[e.ForwardSlash=47]="ForwardSlash",e[e.Zero=48]="Zero",e[e.One=49]="One",e[e.Two=50]="Two",e[e.Three=51]="Three",e[e.Four=52]="Four",e[e.Five=53]="Five",e[e.Six=54]="Six",e[e.Seven=55]="Seven",e[e.Eight=56]="Eight",e[e.Nine=57]="Nine",e[e.LessThan=60]="LessThan",e[e.GreaterThan=62]="GreaterThan",e[e.A=65]="A",e[e.D=68]="D",e[e.E=69]="E",e[e.F=70]="F",e[e.O=79]="O",e[e.P=80]="P",e[e.R=82]="R",e[e.LeftSquareBracket=91]="LeftSquareBracket",e[e.BackSlash=92]="BackSlash",e[e.RightSquareBracket=93]="RightSquareBracket",e[e.a=97]="a",e[e.b=98]="b",e[e.d=100]="d",e[e.e=101]="e",e[e.f=102]="f",e[e.i=105]="i",e[e.j=106]="j",e[e.l=108]="l",e[e.m=109]="m",e[e.n=110]="n",e[e.o=111]="o",e[e.r=114]="r",e[e.s=115]="s",e[e.t=116]="t",e[e.u=117]="u",e[e.x=120]="x",e[e.LeftCurly=123]="LeftCurly",e[e.RightCurly=125]="RightCurly",e[e.Tilde=126]="Tilde"})(Ko||(Ko={}));var b=Ko,La=function(){function e(t,r){this.major=String(t),this.minor=String(r)}return e.prototype.toString=function(){var t=lr(129);return"%PDF-"+this.major+"."+this.minor+`
%`+t+t+t+t},e.prototype.sizeInBytes=function(){return 12+this.major.length+this.minor.length},e.prototype.copyBytesInto=function(t,r){var n=r;return t[r++]=b.Percent,t[r++]=b.P,t[r++]=b.D,t[r++]=b.F,t[r++]=b.Dash,r+=et(this.major,t,r),t[r++]=b.Period,r+=et(this.minor,t,r),t[r++]=b.Newline,t[r++]=b.Percent,t[r++]=129,t[r++]=129,t[r++]=129,t[r++]=129,r-n},e.forVersion=function(t,r){return new e(t,r)},e}(),lt=function(){function e(){}return e.prototype.clone=function(t){throw new kt(this.constructor.name,"clone")},e.prototype.toString=function(){throw new kt(this.constructor.name,"toString")},e.prototype.sizeInBytes=function(){throw new kt(this.constructor.name,"sizeInBytes")},e.prototype.copyBytesInto=function(t,r){throw new kt(this.constructor.name,"copyBytesInto")},e}(),_=function(e){K(t,e);function t(r){var n=e.call(this)||this;return n.numberValue=r,n.stringValue=iv(r),n}return t.prototype.asNumber=function(){return this.numberValue},t.prototype.value=function(){return this.numberValue},t.prototype.clone=function(){return t.of(this.numberValue)},t.prototype.toString=function(){return this.stringValue},t.prototype.sizeInBytes=function(){return this.stringValue.length},t.prototype.copyBytesInto=function(r,n){return n+=et(this.stringValue,r,n),this.stringValue.length},t.of=function(r){return new t(r)},t}(lt),be=function(e){K(t,e);function t(r){var n=e.call(this)||this;return n.array=[],n.context=r,n}return t.prototype.size=function(){return this.array.length},t.prototype.push=function(r){this.array.push(r)},t.prototype.insert=function(r,n){this.array.splice(r,0,n)},t.prototype.indexOf=function(r){var n=this.array.indexOf(r);return n===-1?void 0:n},t.prototype.remove=function(r){this.array.splice(r,1)},t.prototype.set=function(r,n){this.array[r]=n},t.prototype.get=function(r){return this.array[r]},t.prototype.lookupMaybe=function(r){for(var n,i=[],a=1;a<arguments.length;a++)i[a-1]=arguments[a];return(n=this.context).lookupMaybe.apply(n,ge([this.get(r)],i))},t.prototype.lookup=function(r){for(var n,i=[],a=1;a<arguments.length;a++)i[a-1]=arguments[a];return(n=this.context).lookup.apply(n,ge([this.get(r)],i))},t.prototype.asRectangle=function(){if(this.size()!==4)throw new Dg(this.size());var r=this.lookup(0,_).asNumber(),n=this.lookup(1,_).asNumber(),i=this.lookup(2,_).asNumber(),a=this.lookup(3,_).asNumber(),o=r,l=n,u=i-r,s=a-n;return{x:o,y:l,width:u,height:s}},t.prototype.asArray=function(){return this.array.slice()},t.prototype.clone=function(r){for(var n=t.withContext(r||this.context),i=0,a=this.size();i<a;i++)n.push(this.array[i]);return n},t.prototype.toString=function(){for(var r="[ ",n=0,i=this.size();n<i;n++)r+=this.get(n).toString(),r+=" ";return r+="]",r},t.prototype.sizeInBytes=function(){for(var r=3,n=0,i=this.size();n<i;n++)r+=this.get(n).sizeInBytes()+1;return r},t.prototype.copyBytesInto=function(r,n){var i=n;r[n++]=b.LeftSquareBracket,r[n++]=b.Space;for(var a=0,o=this.size();a<o;a++)n+=this.get(a).copyBytesInto(r,n),r[n++]=b.Space;return r[n++]=b.RightSquareBracket,n-i},t.prototype.scalePDFNumbers=function(r,n){for(var i=0,a=this.size();i<a;i++){var o=this.lookup(i);if(o instanceof _){var l=i%2===0?r:n;this.set(i,_.of(o.asNumber()*l))}}},t.withContext=function(r){return new t(r)},t}(lt),Po={},mi=function(e){K(t,e);function t(r,n){var i=this;if(r!==Po)throw new gs("PDFBool");return i=e.call(this)||this,i.value=n,i}return t.prototype.asBoolean=function(){return this.value},t.prototype.clone=function(){return this},t.prototype.toString=function(){return String(this.value)},t.prototype.sizeInBytes=function(){return this.value?4:5},t.prototype.copyBytesInto=function(r,n){return this.value?(r[n++]=b.t,r[n++]=b.r,r[n++]=b.u,r[n++]=b.e,4):(r[n++]=b.f,r[n++]=b.a,r[n++]=b.l,r[n++]=b.s,r[n++]=b.e,5)},t.True=new t(Po,!0),t.False=new t(Po,!1),t}(lt),Rt=new Uint8Array(256);Rt[b.LeftParen]=1;Rt[b.RightParen]=1;Rt[b.LessThan]=1;Rt[b.GreaterThan]=1;Rt[b.LeftSquareBracket]=1;Rt[b.RightSquareBracket]=1;Rt[b.LeftCurly]=1;Rt[b.RightCurly]=1;Rt[b.ForwardSlash]=1;Rt[b.Percent]=1;var hr=new Uint8Array(256);hr[b.Null]=1;hr[b.Tab]=1;hr[b.Newline]=1;hr[b.FormFeed]=1;hr[b.CarriageReturn]=1;hr[b.Space]=1;var bs=new Uint8Array(256);for(var qn=0,Lg=256;qn<Lg;qn++)bs[qn]=hr[qn]||Rt[qn]?1:0;bs[b.Hash]=1;var Wg=function(e){return e.replace(/#([\dABCDEF]{2})/g,function(t,r){return z0(r)})},qg=function(e){return e>=b.ExclamationPoint&&e<=b.Tilde&&!bs[e]},fu={},cu=new Map,m=function(e){K(t,e);function t(r,n){var i=this;if(r!==fu)throw new gs("PDFName");i=e.call(this)||this;for(var a="/",o=0,l=n.length;o<l;o++){var u=n[o],s=ee(u);a+=qg(s)?u:"#"+Ba(s)}return i.encodedName=a,i}return t.prototype.asBytes=function(){for(var r=[],n="",i=!1,a=function(c){c!==void 0&&r.push(c),i=!1},o=1,l=this.encodedName.length;o<l;o++){var u=this.encodedName[o],s=ee(u),f=this.encodedName[o+1];i?s>=b.Zero&&s<=b.Nine||s>=b.a&&s<=b.f||s>=b.A&&s<=b.F?(n+=u,(n.length===2||!(f>="0"&&f<="9"||f>="a"&&f<="f"||f>="A"&&f<="F"))&&(a(parseInt(n,16)),n="")):a(s):s===b.Hash?i=!0:a(s)}return new Uint8Array(r)},t.prototype.decodeText=function(){var r=this.asBytes();return String.fromCharCode.apply(String,Array.from(r))},t.prototype.asString=function(){return this.encodedName},t.prototype.value=function(){return this.encodedName},t.prototype.clone=function(){return this},t.prototype.toString=function(){return this.encodedName},t.prototype.sizeInBytes=function(){return this.encodedName.length},t.prototype.copyBytesInto=function(r,n){return n+=et(this.encodedName,r,n),this.encodedName.length},t.of=function(r){var n=Wg(r),i=cu.get(n);return i||(i=new t(fu,n),cu.set(n,i)),i},t.Length=t.of("Length"),t.FlateDecode=t.of("FlateDecode"),t.Resources=t.of("Resources"),t.Font=t.of("Font"),t.XObject=t.of("XObject"),t.ExtGState=t.of("ExtGState"),t.Contents=t.of("Contents"),t.Type=t.of("Type"),t.Parent=t.of("Parent"),t.MediaBox=t.of("MediaBox"),t.Page=t.of("Page"),t.Annots=t.of("Annots"),t.TrimBox=t.of("TrimBox"),t.ArtBox=t.of("ArtBox"),t.BleedBox=t.of("BleedBox"),t.CropBox=t.of("CropBox"),t.Rotate=t.of("Rotate"),t.Title=t.of("Title"),t.Author=t.of("Author"),t.Subject=t.of("Subject"),t.Creator=t.of("Creator"),t.Keywords=t.of("Keywords"),t.Producer=t.of("Producer"),t.CreationDate=t.of("CreationDate"),t.ModDate=t.of("ModDate"),t}(lt),Kg=function(e){K(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.prototype.asNull=function(){return null},t.prototype.clone=function(){return this},t.prototype.toString=function(){return"null"},t.prototype.sizeInBytes=function(){return 4},t.prototype.copyBytesInto=function(r,n){return r[n++]=b.n,r[n++]=b.u,r[n++]=b.l,r[n++]=b.l,4},t}(lt),ft=new Kg,ne=function(e){K(t,e);function t(r,n){var i=e.call(this)||this;return i.dict=r,i.context=n,i}return t.prototype.keys=function(){return Array.from(this.dict.keys())},t.prototype.values=function(){return Array.from(this.dict.values())},t.prototype.entries=function(){return Array.from(this.dict.entries())},t.prototype.set=function(r,n){this.dict.set(r,n)},t.prototype.get=function(r,n){n===void 0&&(n=!1);var i=this.dict.get(r);if(!(i===ft&&!n))return i},t.prototype.has=function(r){var n=this.dict.get(r);return n!==void 0&&n!==ft},t.prototype.lookupMaybe=function(r){for(var n,i=[],a=1;a<arguments.length;a++)i[a-1]=arguments[a];var o=i.includes(ft),l=(n=this.context).lookupMaybe.apply(n,ge([this.get(r,o)],i));if(!(l===ft&&!o))return l},t.prototype.lookup=function(r){for(var n,i=[],a=1;a<arguments.length;a++)i[a-1]=arguments[a];var o=i.includes(ft),l=(n=this.context).lookup.apply(n,ge([this.get(r,o)],i));if(!(l===ft&&!o))return l},t.prototype.delete=function(r){return this.dict.delete(r)},t.prototype.asMap=function(){return new Map(this.dict)},t.prototype.uniqueKey=function(r){r===void 0&&(r="");for(var n=this.keys(),i=m.of(this.context.addRandomSuffix(r,10));n.includes(i);)i=m.of(this.context.addRandomSuffix(r,10));return i},t.prototype.clone=function(r){for(var n=t.withContext(r||this.context),i=this.entries(),a=0,o=i.length;a<o;a++){var l=i[a],u=l[0],s=l[1];n.set(u,s)}return n},t.prototype.toString=function(){for(var r=`<<
`,n=this.entries(),i=0,a=n.length;i<a;i++){var o=n[i],l=o[0],u=o[1];r+=l.toString()+" "+u.toString()+`
`}return r+=">>",r},t.prototype.sizeInBytes=function(){for(var r=5,n=this.entries(),i=0,a=n.length;i<a;i++){var o=n[i],l=o[0],u=o[1];r+=l.sizeInBytes()+u.sizeInBytes()+2}return r},t.prototype.copyBytesInto=function(r,n){var i=n;r[n++]=b.LessThan,r[n++]=b.LessThan,r[n++]=b.Newline;for(var a=this.entries(),o=0,l=a.length;o<l;o++){var u=a[o],s=u[0],f=u[1];n+=s.copyBytesInto(r,n),r[n++]=b.Space,n+=f.copyBytesInto(r,n),r[n++]=b.Newline}return r[n++]=b.GreaterThan,r[n++]=b.GreaterThan,n-i},t.withContext=function(r){return new t(new Map,r)},t.fromMapWithContext=function(r,n){return new t(r,n)},t}(lt),mt=function(e){K(t,e);function t(r){var n=e.call(this)||this;return n.dict=r,n}return t.prototype.clone=function(r){throw new kt(this.constructor.name,"clone")},t.prototype.getContentsString=function(){throw new kt(this.constructor.name,"getContentsString")},t.prototype.getContents=function(){throw new kt(this.constructor.name,"getContents")},t.prototype.getContentsSize=function(){throw new kt(this.constructor.name,"getContentsSize")},t.prototype.updateDict=function(){var r=this.getContentsSize();this.dict.set(m.Length,_.of(r))},t.prototype.sizeInBytes=function(){return this.updateDict(),this.dict.sizeInBytes()+this.getContentsSize()+18},t.prototype.toString=function(){this.updateDict();var r=this.dict.toString();return r+=`
stream
`,r+=this.getContentsString(),r+=`
endstream`,r},t.prototype.copyBytesInto=function(r,n){this.updateDict();var i=n;n+=this.dict.copyBytesInto(r,n),r[n++]=b.Newline,r[n++]=b.s,r[n++]=b.t,r[n++]=b.r,r[n++]=b.e,r[n++]=b.a,r[n++]=b.m,r[n++]=b.Newline;for(var a=this.getContents(),o=0,l=a.length;o<l;o++)r[n++]=a[o];return r[n++]=b.Newline,r[n++]=b.e,r[n++]=b.n,r[n++]=b.d,r[n++]=b.s,r[n++]=b.t,r[n++]=b.r,r[n++]=b.e,r[n++]=b.a,r[n++]=b.m,n-i},t}(lt),bi=function(e){K(t,e);function t(r,n){var i=e.call(this,r)||this;return i.contents=n,i}return t.prototype.asUint8Array=function(){return this.contents.slice()},t.prototype.clone=function(r){return t.of(this.dict.clone(r),this.contents.slice())},t.prototype.getContentsString=function(){return _u(this.contents)},t.prototype.getContents=function(){return this.contents},t.prototype.getContentsSize=function(){return this.contents.length},t.of=function(r,n){return new t(r,n)},t}(mt),du={},hu=new Map,ke=function(e){K(t,e);function t(r,n,i){var a=this;if(r!==du)throw new gs("PDFRef");return a=e.call(this)||this,a.objectNumber=n,a.generationNumber=i,a.tag=n+" "+i+" R",a}return t.prototype.clone=function(){return this},t.prototype.toString=function(){return this.tag},t.prototype.sizeInBytes=function(){return this.tag.length},t.prototype.copyBytesInto=function(r,n){return n+=et(this.tag,r,n),this.tag.length},t.of=function(r,n){n===void 0&&(n=0);var i=r+" "+n+" R",a=hu.get(i);return a||(a=new t(du,r,n),hu.set(i,a)),a},t}(lt),he=function(){function e(t,r){this.name=t,this.args=r||[]}return e.prototype.clone=function(t){for(var r=new Array(this.args.length),n=0,i=r.length;n<i;n++){var a=this.args[n];r[n]=a instanceof lt?a.clone(t):a}return e.of(this.name,r)},e.prototype.toString=function(){for(var t="",r=0,n=this.args.length;r<n;r++)t+=String(this.args[r])+" ";return t+=this.name,t},e.prototype.sizeInBytes=function(){for(var t=0,r=0,n=this.args.length;r<n;r++){var i=this.args[r];t+=(i instanceof lt?i.sizeInBytes():i.length)+1}return t+=this.name.length,t},e.prototype.copyBytesInto=function(t,r){for(var n=r,i=0,a=this.args.length;i<a;i++){var o=this.args[i];o instanceof lt?r+=o.copyBytesInto(t,r):r+=et(o,t,r),t[r++]=b.Space}return r+=et(this.name,t,r),r-n},e.of=function(t,r){return new e(t,r)},e}(),Go;(function(e){e.NonStrokingColor="sc",e.NonStrokingColorN="scn",e.NonStrokingColorRgb="rg",e.NonStrokingColorGray="g",e.NonStrokingColorCmyk="k",e.NonStrokingColorspace="cs",e.StrokingColor="SC",e.StrokingColorN="SCN",e.StrokingColorRgb="RG",e.StrokingColorGray="G",e.StrokingColorCmyk="K",e.StrokingColorspace="CS",e.BeginMarkedContentSequence="BDC",e.BeginMarkedContent="BMC",e.EndMarkedContent="EMC",e.MarkedContentPointWithProps="DP",e.MarkedContentPoint="MP",e.DrawObject="Do",e.ConcatTransformationMatrix="cm",e.PopGraphicsState="Q",e.PushGraphicsState="q",e.SetFlatness="i",e.SetGraphicsStateParams="gs",e.SetLineCapStyle="J",e.SetLineDashPattern="d",e.SetLineJoinStyle="j",e.SetLineMiterLimit="M",e.SetLineWidth="w",e.SetTextMatrix="Tm",e.SetRenderingIntent="ri",e.AppendRectangle="re",e.BeginInlineImage="BI",e.BeginInlineImageData="ID",e.EndInlineImage="EI",e.ClipEvenOdd="W*",e.ClipNonZero="W",e.CloseAndStroke="s",e.CloseFillEvenOddAndStroke="b*",e.CloseFillNonZeroAndStroke="b",e.ClosePath="h",e.AppendBezierCurve="c",e.CurveToReplicateFinalPoint="y",e.CurveToReplicateInitialPoint="v",e.EndPath="n",e.FillEvenOddAndStroke="B*",e.FillEvenOdd="f*",e.FillNonZeroAndStroke="B",e.FillNonZero="f",e.LegacyFillNonZero="F",e.LineTo="l",e.MoveTo="m",e.ShadingFill="sh",e.StrokePath="S",e.BeginText="BT",e.EndText="ET",e.MoveText="Td",e.MoveTextSetLeading="TD",e.NextLine="T*",e.SetCharacterSpacing="Tc",e.SetFontAndSize="Tf",e.SetTextHorizontalScaling="Tz",e.SetTextLineHeight="TL",e.SetTextRenderingMode="Tr",e.SetTextRise="Ts",e.SetWordSpacing="Tw",e.ShowText="Tj",e.ShowTextAdjusted="TJ",e.ShowTextLine="'",e.ShowTextLineAndSpace='"',e.Type3D0="d0",e.Type3D1="d1",e.BeginCompatibilitySection="BX",e.EndCompatibilitySection="EX"})(Go||(Go={}));var ye=Go,xs=function(e){K(t,e);function t(r,n){var i=e.call(this,r)||this;return i.computeContents=function(){var a=i.getUnencodedContents();return i.encode?za.deflate(a):a},i.encode=n,n&&r.set(m.of("Filter"),m.of("FlateDecode")),i.contentsCache=ur.populatedBy(i.computeContents),i}return t.prototype.getContents=function(){return this.contentsCache.access()},t.prototype.getContentsSize=function(){return this.contentsCache.access().length},t.prototype.getUnencodedContents=function(){throw new kt(this.constructor.name,"getUnencodedContents")},t}(mt),si=function(e){K(t,e);function t(r,n,i){i===void 0&&(i=!0);var a=e.call(this,r,i)||this;return a.operators=n,a}return t.prototype.push=function(){for(var r,n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];(r=this.operators).push.apply(r,n)},t.prototype.clone=function(r){for(var n=new Array(this.operators.length),i=0,a=this.operators.length;i<a;i++)n[i]=this.operators[i].clone(r);var o=this,l=o.dict,u=o.encode;return t.of(l.clone(r),n,u)},t.prototype.getContentsString=function(){for(var r="",n=0,i=this.operators.length;n<i;n++)r+=this.operators[n]+`
`;return r},t.prototype.getUnencodedContents=function(){for(var r=new Uint8Array(this.getUnencodedContentsSize()),n=0,i=0,a=this.operators.length;i<a;i++)n+=this.operators[i].copyBytesInto(r,n),r[n++]=b.Newline;return r},t.prototype.getUnencodedContentsSize=function(){for(var r=0,n=0,i=this.operators.length;n<i;n++)r+=this.operators[n].sizeInBytes()+1;return r},t.of=function(r,n,i){return i===void 0&&(i=!0),new t(r,n,i)},t}(xs),Gg=function(){function e(t){this.seed=t}return e.prototype.nextInt=function(){var t=Math.sin(this.seed++)*1e4;return t-Math.floor(t)},e.withSeed=function(t){return new e(t)},e}(),Hg=function(e,t){var r=e[0],n=t[0];return r.objectNumber-n.objectNumber},Ho=function(){function e(){this.largestObjectNumber=0,this.header=La.forVersion(1,7),this.trailerInfo={},this.indirectObjects=new Map,this.rng=Gg.withSeed(1)}return e.prototype.assign=function(t,r){this.indirectObjects.set(t,r),t.objectNumber>this.largestObjectNumber&&(this.largestObjectNumber=t.objectNumber)},e.prototype.nextRef=function(){return this.largestObjectNumber+=1,ke.of(this.largestObjectNumber)},e.prototype.register=function(t){var r=this.nextRef();return this.assign(r,t),r},e.prototype.delete=function(t){return this.indirectObjects.delete(t)},e.prototype.lookupMaybe=function(t){for(var r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];var i=r.includes(ft),a=t instanceof ke?this.indirectObjects.get(t):t;if(!(!a||a===ft&&!i)){for(var o=0,l=r.length;o<l;o++){var u=r[o];if(u===ft){if(a===ft)return a}else if(a instanceof u)return a}throw new ya(r,a)}},e.prototype.lookup=function(t){for(var r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];var i=t instanceof ke?this.indirectObjects.get(t):t;if(r.length===0)return i;for(var a=0,o=r.length;a<o;a++){var l=r[a];if(l===ft){if(i===ft)return i}else if(i instanceof l)return i}throw new ya(r,i)},e.prototype.getObjectRef=function(t){for(var r=Array.from(this.indirectObjects.entries()),n=0,i=r.length;n<i;n++){var a=r[n],o=a[0],l=a[1];if(l===t)return o}},e.prototype.enumerateIndirectObjects=function(){return Array.from(this.indirectObjects.entries()).sort(Hg)},e.prototype.obj=function(t){if(t instanceof lt)return t;if(t==null)return ft;if(typeof t=="string")return m.of(t);if(typeof t=="number")return _.of(t);if(typeof t=="boolean")return t?mi.True:mi.False;if(Array.isArray(t)){for(var r=be.withContext(this),n=0,i=t.length;n<i;n++)r.push(this.obj(t[n]));return r}else{for(var a=ne.withContext(this),o=Object.keys(t),n=0,i=o.length;n<i;n++){var l=o[n],u=t[l];u!==void 0&&a.set(m.of(l),this.obj(u))}return a}},e.prototype.stream=function(t,r){return r===void 0&&(r={}),bi.of(this.obj(r),No(t))},e.prototype.flateStream=function(t,r){return r===void 0&&(r={}),this.stream(za.deflate(No(t)),te(te({},r),{Filter:"FlateDecode"}))},e.prototype.contentStream=function(t,r){return r===void 0&&(r={}),si.of(this.obj(r),t)},e.prototype.formXObject=function(t,r){return r===void 0&&(r={}),this.contentStream(t,te(te({BBox:this.obj([0,0,0,0]),Matrix:this.obj([1,0,0,1,0,0])},r),{Type:"XObject",Subtype:"Form"}))},e.prototype.getPushGraphicsStateContentStream=function(){if(this.pushGraphicsStateContentStreamRef)return this.pushGraphicsStateContentStreamRef;var t=this.obj({}),r=he.of(ye.PushGraphicsState),n=si.of(t,[r]);return this.pushGraphicsStateContentStreamRef=this.register(n),this.pushGraphicsStateContentStreamRef},e.prototype.getPopGraphicsStateContentStream=function(){if(this.popGraphicsStateContentStreamRef)return this.popGraphicsStateContentStreamRef;var t=this.obj({}),r=he.of(ye.PopGraphicsState),n=si.of(t,[r]);return this.popGraphicsStateContentStreamRef=this.register(n),this.popGraphicsStateContentStreamRef},e.prototype.addRandomSuffix=function(t,r){return r===void 0&&(r=4),t+"-"+Math.floor(this.rng.nextInt()*Math.pow(10,r))},e.create=function(){return new e},e}(),fr=function(e){K(t,e);function t(r,n,i){i===void 0&&(i=!0);var a=e.call(this,r,n)||this;return a.normalized=!1,a.autoNormalizeCTM=i,a}return t.prototype.clone=function(r){for(var n=t.fromMapWithContext(new Map,r||this.context,this.autoNormalizeCTM),i=this.entries(),a=0,o=i.length;a<o;a++){var l=i[a],u=l[0],s=l[1];n.set(u,s)}return n},t.prototype.Parent=function(){return this.lookupMaybe(m.Parent,ne)},t.prototype.Contents=function(){return this.lookup(m.of("Contents"))},t.prototype.Annots=function(){return this.lookupMaybe(m.Annots,be)},t.prototype.BleedBox=function(){return this.lookupMaybe(m.BleedBox,be)},t.prototype.TrimBox=function(){return this.lookupMaybe(m.TrimBox,be)},t.prototype.ArtBox=function(){return this.lookupMaybe(m.ArtBox,be)},t.prototype.Resources=function(){var r=this.getInheritableAttribute(m.Resources);return this.context.lookupMaybe(r,ne)},t.prototype.MediaBox=function(){var r=this.getInheritableAttribute(m.MediaBox);return this.context.lookup(r,be)},t.prototype.CropBox=function(){var r=this.getInheritableAttribute(m.CropBox);return this.context.lookupMaybe(r,be)},t.prototype.Rotate=function(){var r=this.getInheritableAttribute(m.Rotate);return this.context.lookupMaybe(r,_)},t.prototype.getInheritableAttribute=function(r){var n;return this.ascend(function(i){n||(n=i.get(r))}),n},t.prototype.setParent=function(r){this.set(m.Parent,r)},t.prototype.addContentStream=function(r){var n=this.normalizedEntries().Contents||this.context.obj([]);this.set(m.Contents,n),n.push(r)},t.prototype.wrapContentStreams=function(r,n){var i=this.Contents();return i instanceof be?(i.insert(0,r),i.push(n),!0):!1},t.prototype.addAnnot=function(r){var n=this.normalizedEntries().Annots;n.push(r)},t.prototype.removeAnnot=function(r){var n=this.normalizedEntries().Annots,i=n.indexOf(r);i!==void 0&&n.remove(i)},t.prototype.setFontDictionary=function(r,n){var i=this.normalizedEntries().Font;i.set(r,n)},t.prototype.newFontDictionaryKey=function(r){var n=this.normalizedEntries().Font;return n.uniqueKey(r)},t.prototype.newFontDictionary=function(r,n){var i=this.newFontDictionaryKey(r);return this.setFontDictionary(i,n),i},t.prototype.setXObject=function(r,n){var i=this.normalizedEntries().XObject;i.set(r,n)},t.prototype.newXObjectKey=function(r){var n=this.normalizedEntries().XObject;return n.uniqueKey(r)},t.prototype.newXObject=function(r,n){var i=this.newXObjectKey(r);return this.setXObject(i,n),i},t.prototype.setExtGState=function(r,n){var i=this.normalizedEntries().ExtGState;i.set(r,n)},t.prototype.newExtGStateKey=function(r){var n=this.normalizedEntries().ExtGState;return n.uniqueKey(r)},t.prototype.newExtGState=function(r,n){var i=this.newExtGStateKey(r);return this.setExtGState(i,n),i},t.prototype.ascend=function(r){r(this);var n=this.Parent();n&&n.ascend(r)},t.prototype.normalize=function(){if(!this.normalized){var r=this.context,n=this.get(m.Contents),i=this.context.lookup(n);i instanceof mt&&this.set(m.Contents,r.obj([n])),this.autoNormalizeCTM&&this.wrapContentStreams(this.context.getPushGraphicsStateContentStream(),this.context.getPopGraphicsStateContentStream());var a=this.getInheritableAttribute(m.Resources),o=r.lookupMaybe(a,ne)||r.obj({});this.set(m.Resources,o);var l=o.lookupMaybe(m.Font,ne)||r.obj({});o.set(m.Font,l);var u=o.lookupMaybe(m.XObject,ne)||r.obj({});o.set(m.XObject,u);var s=o.lookupMaybe(m.ExtGState,ne)||r.obj({});o.set(m.ExtGState,s);var f=this.Annots()||r.obj([]);this.set(m.Annots,f),this.normalized=!0}},t.prototype.normalizedEntries=function(){this.normalize();var r=this.Annots(),n=this.Resources(),i=this.Contents();return{Annots:r,Resources:n,Contents:i,Font:n.lookup(m.Font,ne),XObject:n.lookup(m.XObject,ne),ExtGState:n.lookup(m.ExtGState,ne)}},t.InheritableEntries=["Resources","MediaBox","CropBox","Rotate"],t.withContextAndParent=function(r,n){var i=new Map;return i.set(m.Type,m.Page),i.set(m.Parent,n),i.set(m.Resources,r.obj({})),i.set(m.MediaBox,r.obj([0,0,612,792])),new t(i,r,!1)},t.fromMapWithContext=function(r,n,i){return i===void 0&&(i=!0),new t(r,n,i)},t}(ne),vu=function(){function e(t,r){var n=this;this.traversedObjects=new Map,this.copy=function(i){return i instanceof fr?n.copyPDFPage(i):i instanceof ne?n.copyPDFDict(i):i instanceof be?n.copyPDFArray(i):i instanceof mt?n.copyPDFStream(i):i instanceof ke?n.copyPDFIndirectObject(i):i.clone()},this.copyPDFPage=function(i){for(var a=i.clone(),o=fr.InheritableEntries,l=0,u=o.length;l<u;l++){var s=m.of(o[l]),f=a.getInheritableAttribute(s);!a.get(s)&&f&&a.set(s,f)}return a.delete(m.of("Parent")),n.copyPDFDict(a)},this.copyPDFDict=function(i){if(n.traversedObjects.has(i))return n.traversedObjects.get(i);var a=i.clone(n.dest);n.traversedObjects.set(i,a);for(var o=i.entries(),l=0,u=o.length;l<u;l++){var s=o[l],f=s[0],c=s[1];a.set(f,n.copy(c))}return a},this.copyPDFArray=function(i){if(n.traversedObjects.has(i))return n.traversedObjects.get(i);var a=i.clone(n.dest);n.traversedObjects.set(i,a);for(var o=0,l=i.size();o<l;o++){var u=i.get(o);a.set(o,n.copy(u))}return a},this.copyPDFStream=function(i){if(n.traversedObjects.has(i))return n.traversedObjects.get(i);var a=i.clone(n.dest);n.traversedObjects.set(i,a);for(var o=i.dict.entries(),l=0,u=o.length;l<u;l++){var s=o[l],f=s[0],c=s[1];a.dict.set(f,n.copy(c))}return a},this.copyPDFIndirectObject=function(i){var a=n.traversedObjects.has(i);if(!a){var o=n.dest.nextRef();n.traversedObjects.set(i,o);var l=n.src.lookup(i);if(l){var u=n.copy(l);n.dest.assign(o,u)}}return n.traversedObjects.get(i)},this.src=t,this.dest=r}return e.for=function(t,r){return new e(t,r)},e}(),_f=function(){function e(t){this.subsections=t?[[t]]:[],this.chunkIdx=0,this.chunkLength=t?1:0}return e.prototype.addEntry=function(t,r){this.append({ref:t,offset:r,deleted:!1})},e.prototype.addDeletedEntry=function(t,r){this.append({ref:t,offset:r,deleted:!0})},e.prototype.toString=function(){for(var t=`xref
`,r=0,n=this.subsections.length;r<n;r++){var i=this.subsections[r];t+=i[0].ref.objectNumber+" "+i.length+`
`;for(var a=0,o=i.length;a<o;a++){var l=i[a];t+=It(String(l.offset),10,"0"),t+=" ",t+=It(String(l.ref.generationNumber),5,"0"),t+=" ",t+=l.deleted?"f":"n",t+=`
`}}return t},e.prototype.sizeInBytes=function(){for(var t=5,r=0,n=this.subsections.length;r<n;r++){var i=this.subsections[r],a=i.length,o=i[0];t+=2,t+=String(o.ref.objectNumber).length,t+=String(a).length,t+=20*a}return t},e.prototype.copyBytesInto=function(t,r){var n=r;return t[r++]=b.x,t[r++]=b.r,t[r++]=b.e,t[r++]=b.f,t[r++]=b.Newline,r+=this.copySubsectionsIntoBuffer(this.subsections,t,r),r-n},e.prototype.copySubsectionsIntoBuffer=function(t,r,n){for(var i=n,a=t.length,o=0;o<a;o++){var l=this.subsections[o],u=String(l[0].ref.objectNumber);n+=et(u,r,n),r[n++]=b.Space;var s=String(l.length);n+=et(s,r,n),r[n++]=b.Newline,n+=this.copyEntriesIntoBuffer(l,r,n)}return n-i},e.prototype.copyEntriesIntoBuffer=function(t,r,n){for(var i=t.length,a=0;a<i;a++){var o=t[a],l=It(String(o.offset),10,"0");n+=et(l,r,n),r[n++]=b.Space;var u=It(String(o.ref.generationNumber),5,"0");n+=et(u,r,n),r[n++]=b.Space,r[n++]=o.deleted?b.f:b.n,r[n++]=b.Space,r[n++]=b.Newline}return 20*i},e.prototype.append=function(t){if(this.chunkLength===0){this.subsections.push([t]),this.chunkIdx=0,this.chunkLength=1;return}var r=this.subsections[this.chunkIdx],n=r[this.chunkLength-1];t.ref.objectNumber-n.ref.objectNumber>1?(this.subsections.push([t]),this.chunkIdx+=1,this.chunkLength=1):(r.push(t),this.chunkLength+=1)},e.create=function(){return new e({ref:ke.of(0,65535),offset:0,deleted:!0})},e.createEmpty=function(){return new e},e}(),ws=function(){function e(t){this.lastXRefOffset=String(t)}return e.prototype.toString=function(){return`startxref
`+this.lastXRefOffset+`
%%EOF`},e.prototype.sizeInBytes=function(){return 16+this.lastXRefOffset.length},e.prototype.copyBytesInto=function(t,r){var n=r;return t[r++]=b.s,t[r++]=b.t,t[r++]=b.a,t[r++]=b.r,t[r++]=b.t,t[r++]=b.x,t[r++]=b.r,t[r++]=b.e,t[r++]=b.f,t[r++]=b.Newline,r+=et(this.lastXRefOffset,t,r),t[r++]=b.Newline,t[r++]=b.Percent,t[r++]=b.Percent,t[r++]=b.E,t[r++]=b.O,t[r++]=b.F,r-n},e.forLastCrossRefSectionOffset=function(t){return new e(t)},e}(),Xg=function(){function e(t){this.dict=t}return e.prototype.toString=function(){return`trailer
`+this.dict.toString()},e.prototype.sizeInBytes=function(){return 8+this.dict.sizeInBytes()},e.prototype.copyBytesInto=function(t,r){var n=r;return t[r++]=b.t,t[r++]=b.r,t[r++]=b.a,t[r++]=b.i,t[r++]=b.l,t[r++]=b.e,t[r++]=b.r,t[r++]=b.Newline,r+=this.dict.copyBytesInto(t,r),r-n},e.of=function(t){return new e(t)},e}(),$f=function(e){K(t,e);function t(r,n,i){i===void 0&&(i=!0);var a=e.call(this,r.obj({}),i)||this;return a.objects=n,a.offsets=a.computeObjectOffsets(),a.offsetsString=a.computeOffsetsString(),a.dict.set(m.of("Type"),m.of("ObjStm")),a.dict.set(m.of("N"),_.of(a.objects.length)),a.dict.set(m.of("First"),_.of(a.offsetsString.length)),a}return t.prototype.getObjectsCount=function(){return this.objects.length},t.prototype.clone=function(r){return t.withContextAndObjects(r||this.dict.context,this.objects.slice(),this.encode)},t.prototype.getContentsString=function(){for(var r=this.offsetsString,n=0,i=this.objects.length;n<i;n++){var a=this.objects[n],o=a[1];r+=o+`
`}return r},t.prototype.getUnencodedContents=function(){for(var r=new Uint8Array(this.getUnencodedContentsSize()),n=et(this.offsetsString,r,0),i=0,a=this.objects.length;i<a;i++){var o=this.objects[i],l=o[1];n+=l.copyBytesInto(r,n),r[n++]=b.Newline}return r},t.prototype.getUnencodedContentsSize=function(){return this.offsetsString.length+va(this.offsets)[1]+va(this.objects)[1].sizeInBytes()+1},t.prototype.computeOffsetsString=function(){for(var r="",n=0,i=this.offsets.length;n<i;n++){var a=this.offsets[n],o=a[0],l=a[1];r+=o+" "+l+" "}return r},t.prototype.computeObjectOffsets=function(){for(var r=0,n=new Array(this.objects.length),i=0,a=this.objects.length;i<a;i++){var o=this.objects[i],l=o[0],u=o[1];n[i]=[l.objectNumber,r],r+=u.sizeInBytes()+1}return n},t.withContextAndObjects=function(r,n,i){return i===void 0&&(i=!0),new t(r,n,i)},t}(xs),ec=function(){function e(t,r){var n=this;this.parsedObjects=0,this.shouldWaitForTick=function(i){return n.parsedObjects+=i,n.parsedObjects%n.objectsPerTick===0},this.context=t,this.objectsPerTick=r}return e.prototype.serializeToBuffer=function(){return ie(this,void 0,void 0,function(){var t,r,n,i,a,o,l,u,s,f,c,d,h,p,v,y,g;return ae(this,function(w){switch(w.label){case 0:return[4,this.computeBufferSize()];case 1:t=w.sent(),r=t.size,n=t.header,i=t.indirectObjects,a=t.xref,o=t.trailerDict,l=t.trailer,u=0,s=new Uint8Array(r),u+=n.copyBytesInto(s,u),s[u++]=b.Newline,s[u++]=b.Newline,f=0,c=i.length,w.label=2;case 2:return f<c?(d=i[f],h=d[0],p=d[1],v=String(h.objectNumber),u+=et(v,s,u),s[u++]=b.Space,y=String(h.generationNumber),u+=et(y,s,u),s[u++]=b.Space,s[u++]=b.o,s[u++]=b.b,s[u++]=b.j,s[u++]=b.Newline,u+=p.copyBytesInto(s,u),s[u++]=b.Newline,s[u++]=b.e,s[u++]=b.n,s[u++]=b.d,s[u++]=b.o,s[u++]=b.b,s[u++]=b.j,s[u++]=b.Newline,s[u++]=b.Newline,g=p instanceof $f?p.getObjectsCount():1,this.shouldWaitForTick(g)?[4,Cn()]:[3,4]):[3,5];case 3:w.sent(),w.label=4;case 4:return f++,[3,2];case 5:return a&&(u+=a.copyBytesInto(s,u),s[u++]=b.Newline),o&&(u+=o.copyBytesInto(s,u),s[u++]=b.Newline,s[u++]=b.Newline),u+=l.copyBytesInto(s,u),[2,s]}})})},e.prototype.computeIndirectObjectSize=function(t){var r=t[0],n=t[1],i=r.sizeInBytes()+3,a=n.sizeInBytes()+9;return i+a},e.prototype.createTrailerDict=function(){return this.context.obj({Size:this.context.largestObjectNumber+1,Root:this.context.trailerInfo.Root,Encrypt:this.context.trailerInfo.Encrypt,Info:this.context.trailerInfo.Info,ID:this.context.trailerInfo.ID})},e.prototype.computeBufferSize=function(){return ie(this,void 0,void 0,function(){var t,r,n,i,a,o,l,u,s,f,c;return ae(this,function(d){switch(d.label){case 0:t=La.forVersion(1,7),r=t.sizeInBytes()+2,n=_f.create(),i=this.context.enumerateIndirectObjects(),a=0,o=i.length,d.label=1;case 1:return a<o?(l=i[a],u=l[0],n.addEntry(u,r),r+=this.computeIndirectObjectSize(l),this.shouldWaitForTick(1)?[4,Cn()]:[3,3]):[3,4];case 2:d.sent(),d.label=3;case 3:return a++,[3,1];case 4:return s=r,r+=n.sizeInBytes()+1,f=Xg.of(this.createTrailerDict()),r+=f.sizeInBytes()+2,c=ws.forLastCrossRefSectionOffset(s),r+=c.sizeInBytes(),[2,{size:r,header:t,indirectObjects:i,xref:n,trailerDict:f,trailer:c}]}})})},e.forContext=function(t,r){return new e(t,r)},e}(),tc=function(e){K(t,e);function t(r){var n=e.call(this)||this;return n.data=r,n}return t.prototype.clone=function(){return t.of(this.data.slice())},t.prototype.toString=function(){return"PDFInvalidObject("+this.data.length+" bytes)"},t.prototype.sizeInBytes=function(){return this.data.length},t.prototype.copyBytesInto=function(r,n){for(var i=this.data.length,a=0;a<i;a++)r[n++]=this.data[a];return i},t.of=function(r){return new t(r)},t}(lt),Fr;(function(e){e[e.Deleted=0]="Deleted",e[e.Uncompressed=1]="Uncompressed",e[e.Compressed=2]="Compressed"})(Fr||(Fr={}));var Zg=function(e){K(t,e);function t(r,n,i){i===void 0&&(i=!0);var a=e.call(this,r,i)||this;return a.computeIndex=function(){for(var o=[],l=0,u=0,s=a.entries.length;u<s;u++){var f=a.entries[u],c=a.entries[u-1];u===0?o.push(f.ref.objectNumber):f.ref.objectNumber-c.ref.objectNumber>1&&(o.push(l),o.push(f.ref.objectNumber),l=0),l+=1}return o.push(l),o},a.computeEntryTuples=function(){for(var o=new Array(a.entries.length),l=0,u=a.entries.length;l<u;l++){var s=a.entries[l];if(s.type===Fr.Deleted){var f=s.type,c=s.nextFreeObjectNumber,d=s.ref;o[l]=[f,c,d.generationNumber]}if(s.type===Fr.Uncompressed){var f=s.type,h=s.offset,d=s.ref;o[l]=[f,h,d.generationNumber]}if(s.type===Fr.Compressed){var f=s.type,p=s.objectStreamRef,v=s.index;o[l]=[f,p.objectNumber,v]}}return o},a.computeMaxEntryByteWidths=function(){for(var o=a.entryTuplesCache.access(),l=[0,0,0],u=0,s=o.length;u<s;u++){var f=o[u],c=f[0],d=f[1],h=f[2],p=ra(c),v=ra(d),y=ra(h);p>l[0]&&(l[0]=p),v>l[1]&&(l[1]=v),y>l[2]&&(l[2]=y)}return l},a.entries=n||[],a.entryTuplesCache=ur.populatedBy(a.computeEntryTuples),a.maxByteWidthsCache=ur.populatedBy(a.computeMaxEntryByteWidths),a.indexCache=ur.populatedBy(a.computeIndex),r.set(m.of("Type"),m.of("XRef")),a}return t.prototype.addDeletedEntry=function(r,n){var i=Fr.Deleted;this.entries.push({type:i,ref:r,nextFreeObjectNumber:n}),this.entryTuplesCache.invalidate(),this.maxByteWidthsCache.invalidate(),this.indexCache.invalidate(),this.contentsCache.invalidate()},t.prototype.addUncompressedEntry=function(r,n){var i=Fr.Uncompressed;this.entries.push({type:i,ref:r,offset:n}),this.entryTuplesCache.invalidate(),this.maxByteWidthsCache.invalidate(),this.indexCache.invalidate(),this.contentsCache.invalidate()},t.prototype.addCompressedEntry=function(r,n,i){var a=Fr.Compressed;this.entries.push({type:a,ref:r,objectStreamRef:n,index:i}),this.entryTuplesCache.invalidate(),this.maxByteWidthsCache.invalidate(),this.indexCache.invalidate(),this.contentsCache.invalidate()},t.prototype.clone=function(r){var n=this,i=n.dict,a=n.entries,o=n.encode;return t.of(i.clone(r),a.slice(),o)},t.prototype.getContentsString=function(){for(var r=this.entryTuplesCache.access(),n=this.maxByteWidthsCache.access(),i="",a=0,o=r.length;a<o;a++){for(var l=r[a],u=l[0],s=l[1],f=l[2],c=fn(cn(u)),d=fn(cn(s)),h=fn(cn(f)),p=n[0]-1;p>=0;p--)i+=(c[p]||0).toString(2);for(var p=n[1]-1;p>=0;p--)i+=(d[p]||0).toString(2);for(var p=n[2]-1;p>=0;p--)i+=(h[p]||0).toString(2)}return i},t.prototype.getUnencodedContents=function(){for(var r=this.entryTuplesCache.access(),n=this.maxByteWidthsCache.access(),i=new Uint8Array(this.getUnencodedContentsSize()),a=0,o=0,l=r.length;o<l;o++){for(var u=r[o],s=u[0],f=u[1],c=u[2],d=fn(cn(s)),h=fn(cn(f)),p=fn(cn(c)),v=n[0]-1;v>=0;v--)i[a++]=d[v]||0;for(var v=n[1]-1;v>=0;v--)i[a++]=h[v]||0;for(var v=n[2]-1;v>=0;v--)i[a++]=p[v]||0}return i},t.prototype.getUnencodedContentsSize=function(){var r=this.maxByteWidthsCache.access(),n=Y0(r);return n*this.entries.length},t.prototype.updateDict=function(){e.prototype.updateDict.call(this);var r=this.maxByteWidthsCache.access(),n=this.indexCache.access(),i=this.dict.context;this.dict.set(m.of("W"),i.obj(r)),this.dict.set(m.of("Index"),i.obj(n))},t.create=function(r,n){n===void 0&&(n=!0);var i=new t(r,[],n);return i.addDeletedEntry(ke.of(0,65535),0),i},t.of=function(r,n,i){return i===void 0&&(i=!0),new t(r,n,i)},t}(xs),Yg=function(e){K(t,e);function t(r,n,i,a){var o=e.call(this,r,n)||this;return o.encodeStreams=i,o.objectsPerStream=a,o}return t.prototype.computeBufferSize=function(){return ie(this,void 0,void 0,function(){var r,n,i,a,o,l,u,s,p,v,f,g,c,d,y,h,p,v,y,g,w,S,P,C;return ae(this,function(A){switch(A.label){case 0:r=this.context.largestObjectNumber+1,n=La.forVersion(1,7),i=n.sizeInBytes()+2,a=Zg.create(this.createTrailerDict(),this.encodeStreams),o=[],l=[],u=[],s=this.context.enumerateIndirectObjects(),p=0,v=s.length,A.label=1;case 1:return p<v?(f=s[p],g=f[0],c=f[1],d=g===this.context.trailerInfo.Encrypt||c instanceof mt||c instanceof tc||g.generationNumber!==0,d?(o.push(f),a.addUncompressedEntry(g,i),i+=this.computeIndirectObjectSize(f),this.shouldWaitForTick(1)?[4,Cn()]:[3,3]):[3,4]):[3,6];case 2:A.sent(),A.label=3;case 3:return[3,5];case 4:y=va(l),h=va(u),(!y||y.length%this.objectsPerStream===0)&&(y=[],l.push(y),h=ke.of(r++),u.push(h)),a.addCompressedEntry(g,h,y.length),y.push(f),A.label=5;case 5:return p++,[3,1];case 6:p=0,v=l.length,A.label=7;case 7:return p<v?(y=l[p],g=u[p],w=$f.withContextAndObjects(this.context,y,this.encodeStreams),a.addUncompressedEntry(g,i),i+=this.computeIndirectObjectSize([g,w]),o.push([g,w]),this.shouldWaitForTick(y.length)?[4,Cn()]:[3,9]):[3,10];case 8:A.sent(),A.label=9;case 9:return p++,[3,7];case 10:return S=ke.of(r++),a.dict.set(m.of("Size"),_.of(r)),a.addUncompressedEntry(S,i),P=i,i+=this.computeIndirectObjectSize([S,a]),o.push([S,a]),C=ws.forLastCrossRefSectionOffset(P),i+=C.sizeInBytes(),[2,{size:i,header:n,indirectObjects:o,trailer:C}]}})})},t.forContext=function(r,n,i,a){return i===void 0&&(i=!0),a===void 0&&(a=50),new t(r,n,i,a)},t}(ec),Q=function(e){K(t,e);function t(r){var n=e.call(this)||this;return n.value=r,n}return t.prototype.asBytes=function(){for(var r=this.value+(this.value.length%2===1?"0":""),n=r.length,i=new Uint8Array(r.length/2),a=0,o=0;a<n;){var l=parseInt(r.substring(a,a+2),16);i[o]=l,a+=2,o+=1}return i},t.prototype.decodeText=function(){var r=this.asBytes();return af(r)?tf(r):Qf(r)},t.prototype.decodeDate=function(){var r=this.decodeText(),n=Ju(r);if(!n)throw new Jf(r);return n},t.prototype.asString=function(){return this.value},t.prototype.clone=function(){return t.of(this.value)},t.prototype.toString=function(){return"<"+this.value+">"},t.prototype.sizeInBytes=function(){return this.value.length+2},t.prototype.copyBytesInto=function(r,n){return r[n++]=b.LessThan,n+=et(this.value,r,n),r[n++]=b.GreaterThan,this.value.length+2},t.of=function(r){return new t(r)},t.fromText=function(r){for(var n=$0(r),i="",a=0,o=n.length;a<o;a++)i+=wi(n[a],4);return new t(i)},t}(lt),ba=function(){function e(t,r){this.encoding=t===yi.ZapfDingbats?Xi.ZapfDingbats:t===yi.Symbol?Xi.Symbol:Xi.WinAnsi,this.font=vg.load(t),this.fontName=this.font.FontName,this.customName=r}return e.prototype.encodeText=function(t){for(var r=this.encodeTextAsGlyphs(t),n=new Array(r.length),i=0,a=r.length;i<a;i++)n[i]=Ba(r[i].code);return Q.of(n.join(""))},e.prototype.widthOfTextAtSize=function(t,r){for(var n=this.encodeTextAsGlyphs(t),i=0,a=0,o=n.length;a<o;a++){var l=n[a].name,u=(n[a+1]||{}).name,s=this.font.getXAxisKerningForPair(l,u)||0;i+=this.widthOfGlyph(l)+s}var f=r/1e3;return i*f},e.prototype.heightOfFontAtSize=function(t,r){r===void 0&&(r={});var n=r.descender,i=n===void 0?!0:n,a=this.font,o=a.Ascender,l=a.Descender,u=a.FontBBox,s=o||u[3],f=l||u[1],c=s-f;return i||(c+=l||0),c/1e3*t},e.prototype.sizeOfFontAtHeight=function(t){var r=this.font,n=r.Ascender,i=r.Descender,a=r.FontBBox,o=n||a[3],l=i||a[1];return 1e3*t/(o-l)},e.prototype.embedIntoContext=function(t,r){var n=t.obj({Type:"Font",Subtype:"Type1",BaseFont:this.customName||this.fontName,Encoding:this.encoding===Xi.WinAnsi?"WinAnsiEncoding":void 0});return r?(t.assign(r,n),r):t.register(n)},e.prototype.widthOfGlyph=function(t){return this.font.getWidthOfGlyph(t)||250},e.prototype.encodeTextAsGlyphs=function(t){for(var r=Array.from(t),n=new Array(r.length),i=0,a=r.length;i<a;i++){var o=I0(r[i]);n[i]=this.encoding.encodeUnicodeCodePoint(o)}return n},e.for=function(t,r){return new e(t,r)},e}(),Qg=function(e,t){for(var r=new Array(e.length),n=0,i=e.length;n<i;n++){var a=e[n],o=pu(la(t(a))),l=pu.apply(void 0,a.codePoints.map(_g));r[n]=[o,l]}return Jg(r)},Jg=function(e){return`/CIDInit /ProcSet findresource begin
12 dict begin
begincmap
/CIDSystemInfo <<
  /Registry (Adobe)
  /Ordering (UCS)
  /Supplement 0
>> def
/CMapName /Adobe-Identity-UCS def
/CMapType 2 def
1 begincodespacerange
<0000><ffff>
endcodespacerange
`+e.length+` beginbfchar
`+e.map(function(t){var r=t[0],n=t[1];return r+" "+n}).join(`
`)+`
endbfchar
endcmap
CMapName currentdict /CMap defineresource pop
end
end`},pu=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return"<"+e.join("")+">"},la=function(e){return wi(e,4)},_g=function(e){if(ev(e))return la(e);if(tv(e)){var t=$u(e),r=ef(e);return""+la(t)+la(r)}var n=Ba(e),i="0x"+n+" is not a valid UTF-8 or UTF-16 codepoint.";throw new Error(i)},$g=function(e){var t=0,r=function(n){t|=1<<n-1};return e.fixedPitch&&r(1),e.serif&&r(2),e.symbolic&&r(3),e.script&&r(4),e.nonsymbolic&&r(6),e.italic&&r(7),e.allCap&&r(17),e.smallCap&&r(18),e.forceBold&&r(19),t},ey=function(e){var t=e["OS/2"]?e["OS/2"].sFamilyClass:0,r=$g({fixedPitch:e.post.isFixedPitch,serif:1<=t&&t<=7,symbolic:!0,script:t===10,italic:e.head.macStyle.italic});return r},Ce=function(e){K(t,e);function t(r){var n=e.call(this)||this;return n.value=r,n}return t.prototype.asBytes=function(){for(var r=[],n="",i=!1,a=function(c){c!==void 0&&r.push(c),i=!1},o=0,l=this.value.length;o<l;o++){var u=this.value[o],s=ee(u),f=this.value[o+1];i?s===b.Newline||s===b.CarriageReturn?a():s===b.n?a(b.Newline):s===b.r?a(b.CarriageReturn):s===b.t?a(b.Tab):s===b.b?a(b.Backspace):s===b.f?a(b.FormFeed):s===b.LeftParen?a(b.LeftParen):s===b.RightParen?a(b.RightParen):s===b.Backspace?a(b.BackSlash):s>=b.Zero&&s<=b.Seven?(n+=u,(n.length===3||!(f>="0"&&f<="7"))&&(a(parseInt(n,8)),n="")):a(s):s===b.BackSlash?i=!0:a(s)}return new Uint8Array(r)},t.prototype.decodeText=function(){var r=this.asBytes();return af(r)?tf(r):Qf(r)},t.prototype.decodeDate=function(){var r=this.decodeText(),n=Ju(r);if(!n)throw new Jf(r);return n},t.prototype.asString=function(){return this.value},t.prototype.clone=function(){return t.of(this.value)},t.prototype.toString=function(){return"("+this.value+")"},t.prototype.sizeInBytes=function(){return this.value.length+2},t.prototype.copyBytesInto=function(r,n){return r[n++]=b.LeftParen,n+=et(this.value,r,n),r[n++]=b.RightParen,this.value.length+2},t.of=function(r){return new t(r)},t.fromDate=function(r){var n=It(String(r.getUTCFullYear()),4,"0"),i=It(String(r.getUTCMonth()+1),2,"0"),a=It(String(r.getUTCDate()),2,"0"),o=It(String(r.getUTCHours()),2,"0"),l=It(String(r.getUTCMinutes()),2,"0"),u=It(String(r.getUTCSeconds()),2,"0");return new t("D:"+n+i+a+o+l+u+"Z")},t}(lt),Ss=function(){function e(t,r,n,i){var a=this;this.allGlyphsInFontSortedById=function(){for(var o=new Array(a.font.characterSet.length),l=0,u=o.length;l<u;l++){var s=a.font.characterSet[l];o[l]=a.font.glyphForCodePoint(s)}return Z0(o.sort(X0),function(f){return f.id})},this.font=t,this.scale=1e3/this.font.unitsPerEm,this.fontData=r,this.fontName=this.font.postscriptName||"Font",this.customName=n,this.fontFeatures=i,this.baseFontName="",this.glyphCache=ur.populatedBy(this.allGlyphsInFontSortedById)}return e.for=function(t,r,n,i){return ie(this,void 0,void 0,function(){var a;return ae(this,function(o){switch(o.label){case 0:return[4,t.create(r)];case 1:return a=o.sent(),[2,new e(a,r,n,i)]}})})},e.prototype.encodeText=function(t){for(var r=this.font.layout(t,this.fontFeatures).glyphs,n=new Array(r.length),i=0,a=r.length;i<a;i++)n[i]=wi(r[i].id,4);return Q.of(n.join(""))},e.prototype.widthOfTextAtSize=function(t,r){for(var n=this.font.layout(t,this.fontFeatures).glyphs,i=0,a=0,o=n.length;a<o;a++)i+=n[a].advanceWidth*this.scale;var l=r/1e3;return i*l},e.prototype.heightOfFontAtSize=function(t,r){r===void 0&&(r={});var n=r.descender,i=n===void 0?!0:n,a=this.font,o=a.ascent,l=a.descent,u=a.bbox,s=(o||u.maxY)*this.scale,f=(l||u.minY)*this.scale,c=s-f;return i||(c-=Math.abs(l)||0),c/1e3*t},e.prototype.sizeOfFontAtHeight=function(t){var r=this.font,n=r.ascent,i=r.descent,a=r.bbox,o=(n||a.maxY)*this.scale,l=(i||a.minY)*this.scale;return 1e3*t/(o-l)},e.prototype.embedIntoContext=function(t,r){return this.baseFontName=this.customName||t.addRandomSuffix(this.fontName),this.embedFontDict(t,r)},e.prototype.embedFontDict=function(t,r){return ie(this,void 0,void 0,function(){var n,i,a;return ae(this,function(o){switch(o.label){case 0:return[4,this.embedCIDFontDict(t)];case 1:return n=o.sent(),i=this.embedUnicodeCmap(t),a=t.obj({Type:"Font",Subtype:"Type0",BaseFont:this.baseFontName,Encoding:"Identity-H",DescendantFonts:[n],ToUnicode:i}),r?(t.assign(r,a),[2,r]):[2,t.register(a)]}})})},e.prototype.isCFF=function(){return this.font.cff},e.prototype.embedCIDFontDict=function(t){return ie(this,void 0,void 0,function(){var r,n;return ae(this,function(i){switch(i.label){case 0:return[4,this.embedFontDescriptor(t)];case 1:return r=i.sent(),n=t.obj({Type:"Font",Subtype:this.isCFF()?"CIDFontType0":"CIDFontType2",CIDToGIDMap:"Identity",BaseFont:this.baseFontName,CIDSystemInfo:{Registry:Ce.of("Adobe"),Ordering:Ce.of("Identity"),Supplement:0},FontDescriptor:r,W:this.computeWidths()}),[2,t.register(n)]}})})},e.prototype.embedFontDescriptor=function(t){return ie(this,void 0,void 0,function(){var r,n,i,a,o,l,u,s,f,c,d,h,p,v,y;return ae(this,function(g){switch(g.label){case 0:return[4,this.embedFontStream(t)];case 1:return r=g.sent(),n=this.scale,i=this.font,a=i.italicAngle,o=i.ascent,l=i.descent,u=i.capHeight,s=i.xHeight,f=this.font.bbox,c=f.minX,d=f.minY,h=f.maxX,p=f.maxY,v=t.obj((y={Type:"FontDescriptor",FontName:this.baseFontName,Flags:ey(this.font),FontBBox:[c*n,d*n,h*n,p*n],ItalicAngle:a,Ascent:o*n,Descent:l*n,CapHeight:(u||o)*n,XHeight:(s||0)*n,StemV:0},y[this.isCFF()?"FontFile3":"FontFile2"]=r,y)),[2,t.register(v)]}})})},e.prototype.serializeFont=function(){return ie(this,void 0,void 0,function(){return ae(this,function(t){return[2,this.fontData]})})},e.prototype.embedFontStream=function(t){return ie(this,void 0,void 0,function(){var r,n,i;return ae(this,function(a){switch(a.label){case 0:return i=(n=t).flateStream,[4,this.serializeFont()];case 1:return r=i.apply(n,[a.sent(),{Subtype:this.isCFF()?"CIDFontType0C":void 0}]),[2,t.register(r)]}})})},e.prototype.embedUnicodeCmap=function(t){var r=Qg(this.glyphCache.access(),this.glyphId.bind(this)),n=t.flateStream(r);return t.register(n)},e.prototype.glyphId=function(t){return t?t.id:-1},e.prototype.computeWidths=function(){for(var t=this.glyphCache.access(),r=[],n=[],i=0,a=t.length;i<a;i++){var o=t[i],l=t[i-1],u=this.glyphId(o),s=this.glyphId(l);i===0?r.push(u):u-s!==1&&(r.push(n),r.push(u),n=[]),n.push(o.advanceWidth*this.scale)}return r.push(n),r},e}(),ty=function(e){K(t,e);function t(r,n,i,a){var o=e.call(this,r,n,i,a)||this;return o.subset=o.font.createSubset(),o.glyphs=[],o.glyphCache=ur.populatedBy(function(){return o.glyphs}),o.glyphIdMap=new Map,o}return t.for=function(r,n,i,a){return ie(this,void 0,void 0,function(){var o;return ae(this,function(l){switch(l.label){case 0:return[4,r.create(n)];case 1:return o=l.sent(),[2,new t(o,n,i,a)]}})})},t.prototype.encodeText=function(r){for(var n=this.font.layout(r,this.fontFeatures).glyphs,i=new Array(n.length),a=0,o=n.length;a<o;a++){var l=n[a],u=this.subset.includeGlyph(l);this.glyphs[u-1]=l,this.glyphIdMap.set(l.id,u),i[a]=wi(u,4)}return this.glyphCache.invalidate(),Q.of(i.join(""))},t.prototype.isCFF=function(){return this.subset.cff},t.prototype.glyphId=function(r){return r?this.glyphIdMap.get(r.id):-1},t.prototype.serializeFont=function(){var r=this;return new Promise(function(n,i){var a=[];r.subset.encodeStream().on("data",function(o){return a.push(o)}).on("end",function(){return n(H0(a))}).on("error",function(o){return i(o)})})},t}(Ss),Xo;(function(e){e.Source="Source",e.Data="Data",e.Alternative="Alternative",e.Supplement="Supplement",e.EncryptedPayload="EncryptedPayload",e.FormData="EncryptedPayload",e.Schema="Schema",e.Unspecified="Unspecified"})(Xo||(Xo={}));var ry=function(){function e(t,r,n){n===void 0&&(n={}),this.fileData=t,this.fileName=r,this.options=n}return e.for=function(t,r,n){return n===void 0&&(n={}),new e(t,r,n)},e.prototype.embedIntoContext=function(t,r){return ie(this,void 0,void 0,function(){var n,i,a,o,l,u,s,f,c;return ae(this,function(d){return n=this.options,i=n.mimeType,a=n.description,o=n.creationDate,l=n.modificationDate,u=n.afRelationship,s=t.flateStream(this.fileData,{Type:"EmbeddedFile",Subtype:i!=null?i:void 0,Params:{Size:this.fileData.length,CreationDate:o?Ce.fromDate(o):void 0,ModDate:l?Ce.fromDate(l):void 0}}),f=t.register(s),c=t.obj({Type:"Filespec",F:Ce.of(this.fileName),UF:Q.fromText(this.fileName),EF:{F:f},Desc:a?Q.fromText(a):void 0,AFRelationship:u!=null?u:void 0}),r?(t.assign(r,c),[2,r]):[2,t.register(c)]})})},e}(),gu=[65472,65473,65474,65475,65477,65478,65479,65480,65481,65482,65483,65484,65485,65486,65487],Fn;(function(e){e.DeviceGray="DeviceGray",e.DeviceRGB="DeviceRGB",e.DeviceCMYK="DeviceCMYK"})(Fn||(Fn={}));var ny={1:Fn.DeviceGray,3:Fn.DeviceRGB,4:Fn.DeviceCMYK},rc=function(){function e(t,r,n,i,a){this.imageData=t,this.bitsPerComponent=r,this.width=n,this.height=i,this.colorSpace=a}return e.for=function(t){return ie(this,void 0,void 0,function(){var r,n,i,a,o,l,u,s,f,c;return ae(this,function(d){if(r=new DataView(t.buffer),n=r.getUint16(0),n!==65496)throw new Error("SOI not found in JPEG");for(i=2;i<r.byteLength&&(a=r.getUint16(i),i+=2,!gu.includes(a));)i+=r.getUint16(i);if(!gu.includes(a))throw new Error("Invalid JPEG");if(i+=2,o=r.getUint8(i++),l=r.getUint16(i),i+=2,u=r.getUint16(i),i+=2,s=r.getUint8(i++),f=ny[s],!f)throw new Error("Unknown JPEG channel.");return c=f,[2,new e(t,o,u,l,c)]})})},e.prototype.embedIntoContext=function(t,r){return ie(this,void 0,void 0,function(){var n;return ae(this,function(i){return n=t.stream(this.imageData,{Type:"XObject",Subtype:"Image",BitsPerComponent:this.bitsPerComponent,Width:this.width,Height:this.height,ColorSpace:this.colorSpace,Filter:"DCTDecode",Decode:this.colorSpace===Fn.DeviceCMYK?[1,0,1,0,1,0,1,0]:void 0}),r?(t.assign(r,n),[2,r]):[2,t.register(n)]})})},e}(),z={};z.toRGBA8=function(e){var t=e.width,r=e.height;if(e.tabs.acTL==null)return[z.toRGBA8.decodeImage(e.data,t,r,e).buffer];var n=[];e.frames[0].data==null&&(e.frames[0].data=e.data);for(var i=t*r*4,a=new Uint8Array(i),o=new Uint8Array(i),l=new Uint8Array(i),u=0;u<e.frames.length;u++){var s=e.frames[u],f=s.rect.x,c=s.rect.y,d=s.rect.width,h=s.rect.height,p=z.toRGBA8.decodeImage(s.data,d,h,e);if(u!=0)for(var v=0;v<i;v++)l[v]=a[v];if(s.blend==0?z._copyTile(p,d,h,a,t,r,f,c,0):s.blend==1&&z._copyTile(p,d,h,a,t,r,f,c,1),n.push(a.buffer.slice(0)),s.dispose!=0){if(s.dispose==1)z._copyTile(o,d,h,a,t,r,f,c,0);else if(s.dispose==2)for(var v=0;v<i;v++)a[v]=l[v]}}return n};z.toRGBA8.decodeImage=function(e,t,r,n){var i=t*r,a=z.decode._getBPP(n),o=Math.ceil(t*a/8),l=new Uint8Array(i*4),u=new Uint32Array(l.buffer),s=n.ctype,f=n.depth,c=z._bin.readUshort;if(s==6){var d=i<<2;if(f==8)for(var h=0;h<d;h+=4)l[h]=e[h],l[h+1]=e[h+1],l[h+2]=e[h+2],l[h+3]=e[h+3];if(f==16)for(var h=0;h<d;h++)l[h]=e[h<<1]}else if(s==2){var p=n.tabs.tRNS;if(p==null){if(f==8)for(var h=0;h<i;h++){var v=h*3;u[h]=255<<24|e[v+2]<<16|e[v+1]<<8|e[v]}if(f==16)for(var h=0;h<i;h++){var v=h*6;u[h]=255<<24|e[v+4]<<16|e[v+2]<<8|e[v]}}else{var y=p[0],g=p[1],w=p[2];if(f==8)for(var h=0;h<i;h++){var S=h<<2,v=h*3;u[h]=255<<24|e[v+2]<<16|e[v+1]<<8|e[v],e[v]==y&&e[v+1]==g&&e[v+2]==w&&(l[S+3]=0)}if(f==16)for(var h=0;h<i;h++){var S=h<<2,v=h*6;u[h]=255<<24|e[v+4]<<16|e[v+2]<<8|e[v],c(e,v)==y&&c(e,v+2)==g&&c(e,v+4)==w&&(l[S+3]=0)}}}else if(s==3){var P=n.tabs.PLTE,C=n.tabs.tRNS,A=C?C.length:0;if(f==1)for(var F=0;F<r;F++)for(var D=F*o,O=F*t,h=0;h<t;h++){var S=O+h<<2,B=e[D+(h>>3)]>>7-((h&7)<<0)&1,k=3*B;l[S]=P[k],l[S+1]=P[k+1],l[S+2]=P[k+2],l[S+3]=B<A?C[B]:255}if(f==2)for(var F=0;F<r;F++)for(var D=F*o,O=F*t,h=0;h<t;h++){var S=O+h<<2,B=e[D+(h>>2)]>>6-((h&3)<<1)&3,k=3*B;l[S]=P[k],l[S+1]=P[k+1],l[S+2]=P[k+2],l[S+3]=B<A?C[B]:255}if(f==4)for(var F=0;F<r;F++)for(var D=F*o,O=F*t,h=0;h<t;h++){var S=O+h<<2,B=e[D+(h>>1)]>>4-((h&1)<<2)&15,k=3*B;l[S]=P[k],l[S+1]=P[k+1],l[S+2]=P[k+2],l[S+3]=B<A?C[B]:255}if(f==8)for(var h=0;h<i;h++){var S=h<<2,B=e[h],k=3*B;l[S]=P[k],l[S+1]=P[k+1],l[S+2]=P[k+2],l[S+3]=B<A?C[B]:255}}else if(s==4){if(f==8)for(var h=0;h<i;h++){var S=h<<2,M=h<<1,N=e[M];l[S]=N,l[S+1]=N,l[S+2]=N,l[S+3]=e[M+1]}if(f==16)for(var h=0;h<i;h++){var S=h<<2,M=h<<2,N=e[M];l[S]=N,l[S+1]=N,l[S+2]=N,l[S+3]=e[M+2]}}else if(s==0)for(var y=n.tabs.tRNS?n.tabs.tRNS:-1,F=0;F<r;F++){var T=F*o,W=F*t;if(f==1)for(var L=0;L<t;L++){var N=255*(e[T+(L>>>3)]>>>7-(L&7)&1),X=N==y*255?0:255;u[W+L]=X<<24|N<<16|N<<8|N}else if(f==2)for(var L=0;L<t;L++){var N=85*(e[T+(L>>>2)]>>>6-((L&3)<<1)&3),X=N==y*85?0:255;u[W+L]=X<<24|N<<16|N<<8|N}else if(f==4)for(var L=0;L<t;L++){var N=17*(e[T+(L>>>1)]>>>4-((L&1)<<2)&15),X=N==y*17?0:255;u[W+L]=X<<24|N<<16|N<<8|N}else if(f==8)for(var L=0;L<t;L++){var N=e[T+L],X=N==y?0:255;u[W+L]=X<<24|N<<16|N<<8|N}else if(f==16)for(var L=0;L<t;L++){var N=e[T+(L<<1)],X=c(e,T+(L<<h))==y?0:255;u[W+L]=X<<24|N<<16|N<<8|N}}return l};z.decode=function(e){for(var t=new Uint8Array(e),r=8,n=z._bin,i=n.readUshort,a=n.readUint,o={tabs:{},frames:[]},l=new Uint8Array(t.length),u=0,s,f=0,c=[137,80,78,71,13,10,26,10],d=0;d<8;d++)if(t[d]!=c[d])throw"The input is not a PNG file!";for(;r<t.length;){var h=n.readUint(t,r);r+=4;var p=n.readASCII(t,r,4);if(r+=4,p=="IHDR")z.decode._IHDR(t,r,o);else if(p=="IDAT"){for(var d=0;d<h;d++)l[u+d]=t[r+d];u+=h}else if(p=="acTL")o.tabs[p]={num_frames:a(t,r),num_plays:a(t,r+4)},s=new Uint8Array(t.length);else if(p=="fcTL"){if(f!=0){var v=o.frames[o.frames.length-1];v.data=z.decode._decompress(o,s.slice(0,f),v.rect.width,v.rect.height),f=0}var y={x:a(t,r+12),y:a(t,r+16),width:a(t,r+4),height:a(t,r+8)},g=i(t,r+22);g=i(t,r+20)/(g==0?100:g);var w={rect:y,delay:Math.round(g*1e3),dispose:t[r+24],blend:t[r+25]};o.frames.push(w)}else if(p=="fdAT"){for(var d=0;d<h-4;d++)s[f+d]=t[r+d+4];f+=h-4}else if(p=="pHYs")o.tabs[p]=[n.readUint(t,r),n.readUint(t,r+4),t[r+8]];else if(p=="cHRM"){o.tabs[p]=[];for(var d=0;d<8;d++)o.tabs[p].push(n.readUint(t,r+d*4))}else if(p=="tEXt"){o.tabs[p]==null&&(o.tabs[p]={});var S=n.nextZero(t,r),P=n.readASCII(t,r,S-r),C=n.readASCII(t,S+1,r+h-S-1);o.tabs[p][P]=C}else if(p=="iTXt"){o.tabs[p]==null&&(o.tabs[p]={});var S=0,A=r;S=n.nextZero(t,A);var P=n.readASCII(t,A,S-A);A=S+1,t[A],t[A+1],A+=2,S=n.nextZero(t,A),n.readASCII(t,A,S-A),A=S+1,S=n.nextZero(t,A),n.readUTF8(t,A,S-A),A=S+1;var C=n.readUTF8(t,A,h-(A-r));o.tabs[p][P]=C}else if(p=="PLTE")o.tabs[p]=n.readBytes(t,r,h);else if(p=="hIST"){var F=o.tabs.PLTE.length/3;o.tabs[p]=[];for(var d=0;d<F;d++)o.tabs[p].push(i(t,r+d*2))}else if(p=="tRNS")o.ctype==3?o.tabs[p]=n.readBytes(t,r,h):o.ctype==0?o.tabs[p]=i(t,r):o.ctype==2&&(o.tabs[p]=[i(t,r),i(t,r+2),i(t,r+4)]);else if(p=="gAMA")o.tabs[p]=n.readUint(t,r)/1e5;else if(p=="sRGB")o.tabs[p]=t[r];else if(p=="bKGD")o.ctype==0||o.ctype==4?o.tabs[p]=[i(t,r)]:o.ctype==2||o.ctype==6?o.tabs[p]=[i(t,r),i(t,r+2),i(t,r+4)]:o.ctype==3&&(o.tabs[p]=t[r]);else if(p=="IEND")break;r+=h,n.readUint(t,r),r+=4}if(f!=0){var v=o.frames[o.frames.length-1];v.data=z.decode._decompress(o,s.slice(0,f),v.rect.width,v.rect.height),f=0}return o.data=z.decode._decompress(o,l,o.width,o.height),delete o.compress,delete o.interlace,delete o.filter,o};z.decode._decompress=function(e,t,r,n){var i=z.decode._getBPP(e),a=Math.ceil(r*i/8),o=new Uint8Array((a+1+e.interlace)*n);return t=z.decode._inflate(t,o),e.interlace==0?t=z.decode._filterZero(t,e,0,r,n):e.interlace==1&&(t=z.decode._readInterlace(t,e)),t};z.decode._inflate=function(e,t){var r=z.inflateRaw(new Uint8Array(e.buffer,2,e.length-6),t);return r};z.inflateRaw=function(){var e={};return e.H={},e.H.N=function(t,r){var n=Uint8Array,i=0,a=0,o=0,l=0,u=0,s=0,f=0,c=0,d=0,h,p;if(t[0]==3&&t[1]==0)return r||new n(0);var v=e.H,y=v.b,g=v.e,w=v.R,S=v.n,P=v.A,C=v.Z,A=v.m,F=r==null;for(F&&(r=new n(t.length>>>2<<3));i==0;){if(i=y(t,d,1),a=y(t,d+1,2),d+=3,a==0){(d&7)!=0&&(d+=8-(d&7));var D=(d>>>3)+4,O=t[D-4]|t[D-3]<<8;F&&(r=e.H.W(r,c+O)),r.set(new n(t.buffer,t.byteOffset+D,O),c),d=D+O<<3,c+=O;continue}if(F&&(r=e.H.W(r,c+(1<<17))),a==1&&(h=A.J,p=A.h,s=(1<<9)-1,f=(1<<5)-1),a==2){o=g(t,d,5)+257,l=g(t,d+5,5)+1,u=g(t,d+10,4)+4,d+=14;for(var B=1,k=0;k<38;k+=2)A.Q[k]=0,A.Q[k+1]=0;for(var k=0;k<u;k++){var M=g(t,d+k*3,3);A.Q[(A.X[k]<<1)+1]=M,M>B&&(B=M)}d+=3*u,S(A.Q,B),P(A.Q,B,A.u),h=A.w,p=A.d,d=w(A.u,(1<<B)-1,o+l,t,d,A.v);var N=v.V(A.v,0,o,A.C);s=(1<<N)-1;var T=v.V(A.v,o,l,A.D);f=(1<<T)-1,S(A.C,N),P(A.C,N,h),S(A.D,T),P(A.D,T,p)}for(;;){var W=h[C(t,d)&s];d+=W&15;var L=W>>>4;if(L>>>8==0)r[c++]=L;else{if(L==256)break;var X=c+L-254;if(L>264){var Ee=A.q[L-257];X=c+(Ee>>>3)+g(t,d,Ee&7),d+=Ee&7}var Pe=p[C(t,d)&f];d+=Pe&15;var we=Pe>>>4,Be=A.c[we],Ie=(Be>>>4)+y(t,d,Be&15);for(d+=Be&15;c<X;)r[c]=r[c++-Ie],r[c]=r[c++-Ie],r[c]=r[c++-Ie],r[c]=r[c++-Ie];c=X}}}return r.length==c?r:r.slice(0,c)},e.H.W=function(t,r){var n=t.length;if(r<=n)return t;var i=new Uint8Array(n<<1);return i.set(t,0),i},e.H.R=function(t,r,n,i,a,o){for(var l=e.H.e,u=e.H.Z,s=0;s<n;){var f=t[u(i,a)&r];a+=f&15;var c=f>>>4;if(c<=15)o[s]=c,s++;else{var d=0,h=0;c==16?(h=3+l(i,a,2),a+=2,d=o[s-1]):c==17?(h=3+l(i,a,3),a+=3):c==18&&(h=11+l(i,a,7),a+=7);for(var p=s+h;s<p;)o[s]=d,s++}}return a},e.H.V=function(t,r,n,i){for(var a=0,o=0,l=i.length>>>1;o<n;){var u=t[o+r];i[o<<1]=0,i[(o<<1)+1]=u,u>a&&(a=u),o++}for(;o<l;)i[o<<1]=0,i[(o<<1)+1]=0,o++;return a},e.H.n=function(t,r){for(var n=e.H.m,i=t.length,a,o,l,u,s,f=n.j,u=0;u<=r;u++)f[u]=0;for(u=1;u<i;u+=2)f[t[u]]++;var c=n.K;for(a=0,f[0]=0,o=1;o<=r;o++)a=a+f[o-1]<<1,c[o]=a;for(l=0;l<i;l+=2)s=t[l+1],s!=0&&(t[l]=c[s],c[s]++)},e.H.A=function(t,r,n){for(var i=t.length,a=e.H.m,o=a.r,l=0;l<i;l+=2)if(t[l+1]!=0)for(var u=l>>1,s=t[l+1],f=u<<4|s,c=r-s,d=t[l]<<c,h=d+(1<<c);d!=h;){var p=o[d]>>>15-r;n[p]=f,d++}},e.H.l=function(t,r){for(var n=e.H.m.r,i=15-r,a=0;a<t.length;a+=2){var o=t[a]<<r-t[a+1];t[a]=n[o]>>>i}},e.H.M=function(t,r,n){n=n<<(r&7);var i=r>>>3;t[i]|=n,t[i+1]|=n>>>8},e.H.I=function(t,r,n){n=n<<(r&7);var i=r>>>3;t[i]|=n,t[i+1]|=n>>>8,t[i+2]|=n>>>16},e.H.e=function(t,r,n){return(t[r>>>3]|t[(r>>>3)+1]<<8)>>>(r&7)&(1<<n)-1},e.H.b=function(t,r,n){return(t[r>>>3]|t[(r>>>3)+1]<<8|t[(r>>>3)+2]<<16)>>>(r&7)&(1<<n)-1},e.H.Z=function(t,r){return(t[r>>>3]|t[(r>>>3)+1]<<8|t[(r>>>3)+2]<<16)>>>(r&7)},e.H.i=function(t,r){return(t[r>>>3]|t[(r>>>3)+1]<<8|t[(r>>>3)+2]<<16|t[(r>>>3)+3]<<24)>>>(r&7)},e.H.m=function(){var t=Uint16Array,r=Uint32Array;return{K:new t(16),j:new t(16),X:[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],S:[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,999,999,999],T:[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0],q:new t(32),p:[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,65535,65535],z:[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0],c:new r(32),J:new t(512),_:[],h:new t(32),$:[],w:new t(32768),C:[],v:[],d:new t(32768),D:[],u:new t(512),Q:[],r:new t(1<<15),s:new r(286),Y:new r(30),a:new r(19),t:new r(15e3),k:new t(1<<16),g:new t(1<<15)}}(),function(){for(var t=e.H.m,r=1<<15,n=0;n<r;n++){var i=n;i=(i&2863311530)>>>1|(i&1431655765)<<1,i=(i&3435973836)>>>2|(i&858993459)<<2,i=(i&4042322160)>>>4|(i&252645135)<<4,i=(i&4278255360)>>>8|(i&16711935)<<8,t.r[n]=(i>>>16|i<<16)>>>17}function a(o,l,u){for(;l--!=0;)o.push(0,u)}for(var n=0;n<32;n++)t.q[n]=t.S[n]<<3|t.T[n],t.c[n]=t.p[n]<<4|t.z[n];a(t._,144,8),a(t._,255-143,9),a(t._,279-255,7),a(t._,287-279,8),e.H.n(t._,9),e.H.A(t._,9,t.J),e.H.l(t._,9),a(t.$,32,5),e.H.n(t.$,5),e.H.A(t.$,5,t.h),e.H.l(t.$,5),a(t.Q,19,0),a(t.C,286,0),a(t.D,30,0),a(t.v,320,0)}(),e.H.N}();z.decode._readInterlace=function(e,t){for(var r=t.width,n=t.height,i=z.decode._getBPP(t),a=i>>3,o=Math.ceil(r*i/8),l=new Uint8Array(n*o),u=0,s=[0,0,4,0,2,0,1],f=[0,4,0,2,0,1,0],c=[8,8,8,4,4,2,2],d=[8,8,4,4,2,2,1],h=0;h<7;){for(var p=c[h],v=d[h],y=0,g=0,w=s[h];w<n;)w+=p,g++;for(var S=f[h];S<r;)S+=v,y++;var P=Math.ceil(y*i/8);z.decode._filterZero(e,t,u,y,g);for(var C=0,A=s[h];A<n;){for(var F=f[h],D=u+C*P<<3;F<r;){if(i==1){var O=e[D>>3];O=O>>7-(D&7)&1,l[A*o+(F>>3)]|=O<<7-((F&7)<<0)}if(i==2){var O=e[D>>3];O=O>>6-(D&7)&3,l[A*o+(F>>2)]|=O<<6-((F&3)<<1)}if(i==4){var O=e[D>>3];O=O>>4-(D&7)&15,l[A*o+(F>>1)]|=O<<4-((F&1)<<2)}if(i>=8)for(var B=A*o+F*a,k=0;k<a;k++)l[B+k]=e[(D>>3)+k];D+=i,F+=v}C++,A+=p}y*g!=0&&(u+=g*(1+P)),h=h+1}return l};z.decode._getBPP=function(e){var t=[1,null,3,1,2,null,4][e.ctype];return t*e.depth};z.decode._filterZero=function(e,t,r,n,i){var a=z.decode._getBPP(t),o=Math.ceil(n*a/8),l=z.decode._paeth;a=Math.ceil(a/8);var u=0,s=1,f=e[r],c=0;if(f>1&&(e[r]=[0,0,1][f-2]),f==3)for(c=a;c<o;c++)e[c+1]=e[c+1]+(e[c+1-a]>>>1)&255;for(var d=0;d<i;d++)if(u=r+d*o,s=u+d+1,f=e[s-1],c=0,f==0)for(;c<o;c++)e[u+c]=e[s+c];else if(f==1){for(;c<a;c++)e[u+c]=e[s+c];for(;c<o;c++)e[u+c]=e[s+c]+e[u+c-a]}else if(f==2)for(;c<o;c++)e[u+c]=e[s+c]+e[u+c-o];else if(f==3){for(;c<a;c++)e[u+c]=e[s+c]+(e[u+c-o]>>>1);for(;c<o;c++)e[u+c]=e[s+c]+(e[u+c-o]+e[u+c-a]>>>1)}else{for(;c<a;c++)e[u+c]=e[s+c]+l(0,e[u+c-o],0);for(;c<o;c++)e[u+c]=e[s+c]+l(e[u+c-a],e[u+c-o],e[u+c-a-o])}return e};z.decode._paeth=function(e,t,r){var n=e+t-r,i=n-e,a=n-t,o=n-r;return i*i<=a*a&&i*i<=o*o?e:a*a<=o*o?t:r};z.decode._IHDR=function(e,t,r){var n=z._bin;r.width=n.readUint(e,t),t+=4,r.height=n.readUint(e,t),t+=4,r.depth=e[t],t++,r.ctype=e[t],t++,r.compress=e[t],t++,r.filter=e[t],t++,r.interlace=e[t],t++};z._bin={nextZero:function(e,t){for(;e[t]!=0;)t++;return t},readUshort:function(e,t){return e[t]<<8|e[t+1]},writeUshort:function(e,t,r){e[t]=r>>8&255,e[t+1]=r&255},readUint:function(e,t){return e[t]*(256*256*256)+(e[t+1]<<16|e[t+2]<<8|e[t+3])},writeUint:function(e,t,r){e[t]=r>>24&255,e[t+1]=r>>16&255,e[t+2]=r>>8&255,e[t+3]=r&255},readASCII:function(e,t,r){for(var n="",i=0;i<r;i++)n+=String.fromCharCode(e[t+i]);return n},writeASCII:function(e,t,r){for(var n=0;n<r.length;n++)e[t+n]=r.charCodeAt(n)},readBytes:function(e,t,r){for(var n=[],i=0;i<r;i++)n.push(e[t+i]);return n},pad:function(e){return e.length<2?"0"+e:e},readUTF8:function(e,t,r){for(var n="",i,a=0;a<r;a++)n+="%"+z._bin.pad(e[t+a].toString(16));try{i=decodeURIComponent(n)}catch{return z._bin.readASCII(e,t,r)}return i}};z._copyTile=function(e,t,r,n,i,a,o,l,u){for(var s=Math.min(t,i),f=Math.min(r,a),c=0,d=0,h=0;h<f;h++)for(var p=0;p<s;p++)if(o>=0&&l>=0?(c=h*t+p<<2,d=(l+h)*i+o+p<<2):(c=(-l+h)*t-o+p<<2,d=h*i+p<<2),u==0)n[d]=e[c],n[d+1]=e[c+1],n[d+2]=e[c+2],n[d+3]=e[c+3];else if(u==1){var v=e[c+3]*.00392156862745098,y=e[c]*v,g=e[c+1]*v,w=e[c+2]*v,S=n[d+3]*(1/255),P=n[d]*S,C=n[d+1]*S,A=n[d+2]*S,F=1-v,D=v+S*F,O=D==0?0:1/D;n[d+3]=255*D,n[d+0]=(y+P*F)*O,n[d+1]=(g+C*F)*O,n[d+2]=(w+A*F)*O}else if(u==2){var v=e[c+3],y=e[c],g=e[c+1],w=e[c+2],S=n[d+3],P=n[d],C=n[d+1],A=n[d+2];v==S&&y==P&&g==C&&w==A?(n[d]=0,n[d+1]=0,n[d+2]=0,n[d+3]=0):(n[d]=y,n[d+1]=g,n[d+2]=w,n[d+3]=v)}else if(u==3){var v=e[c+3],y=e[c],g=e[c+1],w=e[c+2],S=n[d+3],P=n[d],C=n[d+1],A=n[d+2];if(v==S&&y==P&&g==C&&w==A)continue;if(v<220&&S>20)return!1}return!0};z.encode=function(e,t,r,n,i,a,o){n==null&&(n=0),o==null&&(o=!1);var l=z.encode.compress(e,t,r,n,[!1,!1,!1,0,o]);return z.encode.compressPNG(l,-1),z.encode._main(l,t,r,i,a)};z.encodeLL=function(e,t,r,n,i,a,o,l){for(var u={ctype:0+(n==1?0:2)+(i==0?0:4),depth:a,frames:[]},s=(n+i)*a,f=s*t,c=0;c<e.length;c++)u.frames.push({rect:{x:0,y:0,width:t,height:r},img:new Uint8Array(e[c]),blend:0,dispose:1,bpp:Math.ceil(s/8),bpl:Math.ceil(f/8)});z.encode.compressPNG(u,0,!0);var d=z.encode._main(u,t,r,o,l);return d};z.encode._main=function(e,t,r,n,i){i==null&&(i={});var a=z.crc.crc,o=z._bin.writeUint,l=z._bin.writeUshort,u=z._bin.writeASCII,s=8,f=e.frames.length>1,c=!1,d=8+(16+5+4)+(f?20:0);if(i.sRGB!=null&&(d+=8+1+4),i.pHYs!=null&&(d+=8+9+4),e.ctype==3){for(var h=e.plte.length,p=0;p<h;p++)e.plte[p]>>>24!=255&&(c=!0);d+=8+h*3+4+(c?8+h*1+4:0)}for(var v=0;v<e.frames.length;v++){var y=e.frames[v];f&&(d+=38),d+=y.cimg.length+12,v!=0&&(d+=4)}d+=12;for(var g=new Uint8Array(d),w=[137,80,78,71,13,10,26,10],p=0;p<8;p++)g[p]=w[p];if(o(g,s,13),s+=4,u(g,s,"IHDR"),s+=4,o(g,s,t),s+=4,o(g,s,r),s+=4,g[s]=e.depth,s++,g[s]=e.ctype,s++,g[s]=0,s++,g[s]=0,s++,g[s]=0,s++,o(g,s,a(g,s-17,17)),s+=4,i.sRGB!=null&&(o(g,s,1),s+=4,u(g,s,"sRGB"),s+=4,g[s]=i.sRGB,s++,o(g,s,a(g,s-5,5)),s+=4),i.pHYs!=null&&(o(g,s,9),s+=4,u(g,s,"pHYs"),s+=4,o(g,s,i.pHYs[0]),s+=4,o(g,s,i.pHYs[1]),s+=4,g[s]=i.pHYs[2],s++,o(g,s,a(g,s-13,13)),s+=4),f&&(o(g,s,8),s+=4,u(g,s,"acTL"),s+=4,o(g,s,e.frames.length),s+=4,o(g,s,i.loop!=null?i.loop:0),s+=4,o(g,s,a(g,s-12,12)),s+=4),e.ctype==3){var h=e.plte.length;o(g,s,h*3),s+=4,u(g,s,"PLTE"),s+=4;for(var p=0;p<h;p++){var S=p*3,P=e.plte[p],C=P&255,A=P>>>8&255,F=P>>>16&255;g[s+S+0]=C,g[s+S+1]=A,g[s+S+2]=F}if(s+=h*3,o(g,s,a(g,s-h*3-4,h*3+4)),s+=4,c){o(g,s,h),s+=4,u(g,s,"tRNS"),s+=4;for(var p=0;p<h;p++)g[s+p]=e.plte[p]>>>24&255;s+=h,o(g,s,a(g,s-h-4,h+4)),s+=4}}for(var D=0,v=0;v<e.frames.length;v++){var y=e.frames[v];f&&(o(g,s,26),s+=4,u(g,s,"fcTL"),s+=4,o(g,s,D++),s+=4,o(g,s,y.rect.width),s+=4,o(g,s,y.rect.height),s+=4,o(g,s,y.rect.x),s+=4,o(g,s,y.rect.y),s+=4,l(g,s,n[v]),s+=2,l(g,s,1e3),s+=2,g[s]=y.dispose,s++,g[s]=y.blend,s++,o(g,s,a(g,s-30,30)),s+=4);var O=y.cimg,h=O.length;o(g,s,h+(v==0?0:4)),s+=4;var B=s;u(g,s,v==0?"IDAT":"fdAT"),s+=4,v!=0&&(o(g,s,D++),s+=4),g.set(O,s),s+=h,o(g,s,a(g,B,s-B)),s+=4}return o(g,s,0),s+=4,u(g,s,"IEND"),s+=4,o(g,s,a(g,s-4,4)),s+=4,g.buffer};z.encode.compressPNG=function(e,t,r){for(var n=0;n<e.frames.length;n++){var i=e.frames[n];i.rect.width;var a=i.rect.height,o=new Uint8Array(a*i.bpl+a);i.cimg=z.encode._filterZero(i.img,a,i.bpp,i.bpl,o,t,r)}};z.encode.compress=function(e,t,r,n,i){for(var a=i[0],o=i[1],l=i[2],u=i[3],s=i[4],f=6,c=8,d=255,h=0;h<e.length;h++)for(var p=new Uint8Array(e[h]),v=p.length,y=0;y<v;y+=4)d&=p[y+3];var g=d!=255,w=z.encode.framize(e,t,r,a,o,l),S={},P=[],C=[];if(n!=0){for(var A=[],y=0;y<w.length;y++)A.push(w[y].img.buffer);for(var F=z.encode.concatRGBA(A),D=z.quantize(F,n),O=0,B=new Uint8Array(D.abuf),y=0;y<w.length;y++){var k=w[y].img,M=k.length;C.push(new Uint8Array(D.inds.buffer,O>>2,M>>2));for(var h=0;h<M;h+=4)k[h]=B[O+h],k[h+1]=B[O+h+1],k[h+2]=B[O+h+2],k[h+3]=B[O+h+3];O+=M}for(var y=0;y<D.plte.length;y++)P.push(D.plte[y].est.rgba)}else for(var h=0;h<w.length;h++){var N=w[h],T=new Uint32Array(N.img.buffer),W=N.rect.width,v=T.length,L=new Uint8Array(v);C.push(L);for(var y=0;y<v;y++){var X=T[y];if(y!=0&&X==T[y-1])L[y]=L[y-1];else if(y>W&&X==T[y-W])L[y]=L[y-W];else{var Ee=S[X];if(Ee==null&&(S[X]=Ee=P.length,P.push(X),P.length>=300))break;L[y]=Ee}}}var Pe=P.length;Pe<=256&&s==!1&&(Pe<=2?c=1:Pe<=4?c=2:Pe<=16?c=4:c=8,c=Math.max(c,u));for(var h=0;h<w.length;h++){var N=w[h];N.rect.x,N.rect.y;var W=N.rect.width,we=N.rect.height,Be=N.img;new Uint32Array(Be.buffer);var Ie=4*W,Mt=4;if(Pe<=256&&s==!1){Ie=Math.ceil(c*W/8);for(var Qe=new Uint8Array(Ie*we),$t=C[h],er=0;er<we;er++){var y=er*Ie,tr=er*W;if(c==8)for(var De=0;De<W;De++)Qe[y+De]=$t[tr+De];else if(c==4)for(var De=0;De<W;De++)Qe[y+(De>>1)]|=$t[tr+De]<<4-(De&1)*4;else if(c==2)for(var De=0;De<W;De++)Qe[y+(De>>2)]|=$t[tr+De]<<6-(De&3)*2;else if(c==1)for(var De=0;De<W;De++)Qe[y+(De>>3)]|=$t[tr+De]<<7-(De&7)*1}Be=Qe,f=3,Mt=1}else if(g==!1&&w.length==1){for(var Qe=new Uint8Array(W*we*3),pr=W*we,y=0;y<pr;y++){var k=y*3,ve=y*4;Qe[k]=Be[ve],Qe[k+1]=Be[ve+1],Qe[k+2]=Be[ve+2]}Be=Qe,f=2,Mt=3,Ie=3*W}N.img=Be,N.bpl=Ie,N.bpp=Mt}return{ctype:f,depth:c,plte:P,frames:w}};z.encode.framize=function(e,t,r,n,i,a){for(var o=[],l=0;l<e.length;l++){var u=new Uint8Array(e[l]),s=new Uint32Array(u.buffer),f,c=0,d=0,h=t,p=r,v=n?1:0;if(l!=0){for(var y=a||n||l==1||o[l-2].dispose!=0?1:2,g=0,w=1e9,S=0;S<y;S++){for(var N=new Uint8Array(e[l-1-S]),P=new Uint32Array(e[l-1-S]),C=t,A=r,F=-1,D=-1,O=0;O<r;O++)for(var B=0;B<t;B++){var k=O*t+B;s[k]!=P[k]&&(B<C&&(C=B),B>F&&(F=B),O<A&&(A=O),O>D&&(D=O))}F==-1&&(C=A=F=D=0),i&&((C&1)==1&&C--,(A&1)==1&&A--);var M=(F-C+1)*(D-A+1);M<w&&(w=M,g=S,c=C,d=A,h=F-C+1,p=D-A+1)}var N=new Uint8Array(e[l-1-g]);g==1&&(o[l-1].dispose=2),f=new Uint8Array(h*p*4),z._copyTile(N,t,r,f,h,p,-c,-d,0),v=z._copyTile(u,t,r,f,h,p,-c,-d,3)?1:0,v==1?z.encode._prepareDiff(u,t,r,f,{x:c,y:d,width:h,height:p}):z._copyTile(u,t,r,f,h,p,-c,-d,0)}else f=u.slice(0);o.push({rect:{x:c,y:d,width:h,height:p},img:f,blend:v,dispose:0})}if(n)for(var l=0;l<o.length;l++){var T=o[l];if(T.blend!=1){var W=T.rect,L=o[l-1].rect,X=Math.min(W.x,L.x),Ee=Math.min(W.y,L.y),Pe=Math.max(W.x+W.width,L.x+L.width),we=Math.max(W.y+W.height,L.y+L.height),Be={x:X,y:Ee,width:Pe-X,height:we-Ee};o[l-1].dispose=1,l-1!=0&&z.encode._updateFrame(e,t,r,o,l-1,Be,i),z.encode._updateFrame(e,t,r,o,l,Be,i)}}var Ie=0;if(e.length!=1)for(var k=0;k<o.length;k++){var T=o[k];Ie+=T.rect.width*T.rect.height}return o};z.encode._updateFrame=function(e,t,r,n,i,a,o){for(var l=Uint8Array,u=Uint32Array,s=new l(e[i-1]),f=new u(e[i-1]),c=i+1<e.length?new l(e[i+1]):null,d=new l(e[i]),h=new u(d.buffer),p=t,v=r,y=-1,g=-1,w=0;w<a.height;w++)for(var S=0;S<a.width;S++){var P=a.x+S,C=a.y+w,A=C*t+P,F=h[A];F==0||n[i-1].dispose==0&&f[A]==F&&(c==null||c[A*4+3]!=0)||(P<p&&(p=P),P>y&&(y=P),C<v&&(v=C),C>g&&(g=C))}y==-1&&(p=v=y=g=0),o&&((p&1)==1&&p--,(v&1)==1&&v--),a={x:p,y:v,width:y-p+1,height:g-v+1};var D=n[i];D.rect=a,D.blend=1,D.img=new Uint8Array(a.width*a.height*4),n[i-1].dispose==0?(z._copyTile(s,t,r,D.img,a.width,a.height,-a.x,-a.y,0),z.encode._prepareDiff(d,t,r,D.img,a)):z._copyTile(d,t,r,D.img,a.width,a.height,-a.x,-a.y,0)};z.encode._prepareDiff=function(e,t,r,n,i){z._copyTile(e,t,r,n,i.width,i.height,-i.x,-i.y,2)};z.encode._filterZero=function(e,t,r,n,i,a,o){var l=[],u=[0,1,2,3,4];a!=-1?u=[a]:(t*n>5e5||r==1)&&(u=[0]);var s;o&&(s={level:0});for(var f=o&&UZIP!=null?UZIP:za,c=0;c<u.length;c++){for(var d=0;d<t;d++)z.encode._filterLine(i,e,d,n,r,u[c]);l.push(f.deflate(i,s))}for(var h,p=1e9,c=0;c<l.length;c++)l[c].length<p&&(h=c,p=l[c].length);return l[h]};z.encode._filterLine=function(e,t,r,n,i,a){var o=r*n,l=o+r,u=z.decode._paeth;if(e[l]=a,l++,a==0)if(n<500)for(var s=0;s<n;s++)e[l+s]=t[o+s];else e.set(new Uint8Array(t.buffer,o,n),l);else if(a==1){for(var s=0;s<i;s++)e[l+s]=t[o+s];for(var s=i;s<n;s++)e[l+s]=t[o+s]-t[o+s-i]+256&255}else if(r==0){for(var s=0;s<i;s++)e[l+s]=t[o+s];if(a==2)for(var s=i;s<n;s++)e[l+s]=t[o+s];if(a==3)for(var s=i;s<n;s++)e[l+s]=t[o+s]-(t[o+s-i]>>1)+256&255;if(a==4)for(var s=i;s<n;s++)e[l+s]=t[o+s]-u(t[o+s-i],0,0)+256&255}else{if(a==2)for(var s=0;s<n;s++)e[l+s]=t[o+s]+256-t[o+s-n]&255;if(a==3){for(var s=0;s<i;s++)e[l+s]=t[o+s]+256-(t[o+s-n]>>1)&255;for(var s=i;s<n;s++)e[l+s]=t[o+s]+256-(t[o+s-n]+t[o+s-i]>>1)&255}if(a==4){for(var s=0;s<i;s++)e[l+s]=t[o+s]+256-u(0,t[o+s-n],0)&255;for(var s=i;s<n;s++)e[l+s]=t[o+s]+256-u(t[o+s-i],t[o+s-n],t[o+s-i-n])&255}}};z.crc={table:function(){for(var e=new Uint32Array(256),t=0;t<256;t++){for(var r=t,n=0;n<8;n++)r&1?r=3988292384^r>>>1:r=r>>>1;e[t]=r}return e}(),update:function(e,t,r,n){for(var i=0;i<n;i++)e=z.crc.table[(e^t[r+i])&255]^e>>>8;return e},crc:function(e,t,r){return z.crc.update(4294967295,e,t,r)^4294967295}};z.quantize=function(e,t){var r=new Uint8Array(e),n=r.slice(0),i=new Uint32Array(n.buffer),a=z.quantize.getKDtree(n,t),o=a[0],l=a[1];z.quantize.planeDst;for(var u=r,s=i,f=u.length,c=new Uint8Array(r.length>>2),d=0;d<f;d+=4){var h=u[d]*.00392156862745098,p=u[d+1]*(1/255),v=u[d+2]*(1/255),y=u[d+3]*(1/255),g=z.quantize.getNearest(o,h,p,v,y);c[d>>2]=g.ind,s[d>>2]=g.est.rgba}return{abuf:n.buffer,inds:c,plte:l}};z.quantize.getKDtree=function(e,t,r){r==null&&(r=1e-4);var n=new Uint32Array(e.buffer),i={i0:0,i1:e.length,bst:null,est:null,tdst:0,left:null,right:null};i.bst=z.quantize.stats(e,i.i0,i.i1),i.est=z.quantize.estats(i.bst);for(var a=[i];a.length<t;){for(var o=0,l=0,u=0;u<a.length;u++)a[u].est.L>o&&(o=a[u].est.L,l=u);if(o<r)break;var s=a[l],f=z.quantize.splitPixels(e,n,s.i0,s.i1,s.est.e,s.est.eMq255),c=s.i0>=f||s.i1<=f;if(c){s.est.L=0;continue}var d={i0:s.i0,i1:f,bst:null,est:null,tdst:0,left:null,right:null};d.bst=z.quantize.stats(e,d.i0,d.i1),d.est=z.quantize.estats(d.bst);var h={i0:f,i1:s.i1,bst:null,est:null,tdst:0,left:null,right:null};h.bst={R:[],m:[],N:s.bst.N-d.bst.N};for(var u=0;u<16;u++)h.bst.R[u]=s.bst.R[u]-d.bst.R[u];for(var u=0;u<4;u++)h.bst.m[u]=s.bst.m[u]-d.bst.m[u];h.est=z.quantize.estats(h.bst),s.left=d,s.right=h,a[l]=d,a.push(h)}a.sort(function(p,v){return v.bst.N-p.bst.N});for(var u=0;u<a.length;u++)a[u].ind=u;return[i,a]};z.quantize.getNearest=function(e,t,r,n,i){if(e.left==null)return e.tdst=z.quantize.dist(e.est.q,t,r,n,i),e;var a=z.quantize.planeDst(e.est,t,r,n,i),o=e.left,l=e.right;a>0&&(o=e.right,l=e.left);var u=z.quantize.getNearest(o,t,r,n,i);if(u.tdst<=a*a)return u;var s=z.quantize.getNearest(l,t,r,n,i);return s.tdst<u.tdst?s:u};z.quantize.planeDst=function(e,t,r,n,i){var a=e.e;return a[0]*t+a[1]*r+a[2]*n+a[3]*i-e.eMq};z.quantize.dist=function(e,t,r,n,i){var a=t-e[0],o=r-e[1],l=n-e[2],u=i-e[3];return a*a+o*o+l*l+u*u};z.quantize.splitPixels=function(e,t,r,n,i,a){var o=z.quantize.vecDot;for(n-=4;r<n;){for(;o(e,r,i)<=a;)r+=4;for(;o(e,n,i)>a;)n-=4;if(r>=n)break;var l=t[r>>2];t[r>>2]=t[n>>2],t[n>>2]=l,r+=4,n-=4}for(;o(e,r,i)>a;)r-=4;return r+4};z.quantize.vecDot=function(e,t,r){return e[t]*r[0]+e[t+1]*r[1]+e[t+2]*r[2]+e[t+3]*r[3]};z.quantize.stats=function(e,t,r){for(var n=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],i=[0,0,0,0],a=r-t>>2,o=t;o<r;o+=4){var l=e[o]*.00392156862745098,u=e[o+1]*(1/255),s=e[o+2]*(1/255),f=e[o+3]*(1/255);i[0]+=l,i[1]+=u,i[2]+=s,i[3]+=f,n[0]+=l*l,n[1]+=l*u,n[2]+=l*s,n[3]+=l*f,n[5]+=u*u,n[6]+=u*s,n[7]+=u*f,n[10]+=s*s,n[11]+=s*f,n[15]+=f*f}return n[4]=n[1],n[8]=n[2],n[9]=n[6],n[12]=n[3],n[13]=n[7],n[14]=n[11],{R:n,m:i,N:a}};z.quantize.estats=function(e){var t=e.R,r=e.m,n=e.N,i=r[0],a=r[1],o=r[2],l=r[3],u=n==0?0:1/n,s=[t[0]-i*i*u,t[1]-i*a*u,t[2]-i*o*u,t[3]-i*l*u,t[4]-a*i*u,t[5]-a*a*u,t[6]-a*o*u,t[7]-a*l*u,t[8]-o*i*u,t[9]-o*a*u,t[10]-o*o*u,t[11]-o*l*u,t[12]-l*i*u,t[13]-l*a*u,t[14]-l*o*u,t[15]-l*l*u],f=s,c=z.M4,d=[.5,.5,.5,.5],h=0,p=0;if(n!=0)for(var v=0;v<10&&(d=c.multVec(f,d),p=Math.sqrt(c.dot(d,d)),d=c.sml(1/p,d),!(Math.abs(p-h)<1e-9));v++)h=p;var y=[i*u,a*u,o*u,l*u],g=c.dot(c.sml(255,y),d);return{Cov:s,q:y,e:d,L:h,eMq255:g,eMq:c.dot(d,y),rgba:(Math.round(255*y[3])<<24|Math.round(255*y[2])<<16|Math.round(255*y[1])<<8|Math.round(255*y[0])<<0)>>>0}};z.M4={multVec:function(e,t){return[e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3],e[4]*t[0]+e[5]*t[1]+e[6]*t[2]+e[7]*t[3],e[8]*t[0]+e[9]*t[1]+e[10]*t[2]+e[11]*t[3],e[12]*t[0]+e[13]*t[1]+e[14]*t[2]+e[15]*t[3]]},dot:function(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]},sml:function(e,t){return[e*t[0],e*t[1],e*t[2],e*t[3]]}};z.encode.concatRGBA=function(e){for(var t=0,r=0;r<e.length;r++)t+=e[r].byteLength;for(var n=new Uint8Array(t),i=0,r=0;r<e.length;r++){for(var a=new Uint8Array(e[r]),o=a.length,l=0;l<o;l+=4){var u=a[l],s=a[l+1],f=a[l+2],c=a[l+3];c==0&&(u=s=f=0),n[i+l]=u,n[i+l+1]=s,n[i+l+2]=f,n[i+l+3]=c}i+=o}return n.buffer};var iy=function(e){if(e===0)return Gr.Greyscale;if(e===2)return Gr.Truecolour;if(e===3)return Gr.IndexedColour;if(e===4)return Gr.GreyscaleWithAlpha;if(e===6)return Gr.TruecolourWithAlpha;throw new Error("Unknown color type: "+e)},ay=function(e){for(var t=Math.floor(e.length/4),r=new Uint8Array(t*3),n=new Uint8Array(t*1),i=0,a=0,o=0;i<e.length;)r[a++]=e[i++],r[a++]=e[i++],r[a++]=e[i++],n[o++]=e[i++];return{rgbChannel:r,alphaChannel:n}},Gr;(function(e){e.Greyscale="Greyscale",e.Truecolour="Truecolour",e.IndexedColour="IndexedColour",e.GreyscaleWithAlpha="GreyscaleWithAlpha",e.TruecolourWithAlpha="TruecolourWithAlpha"})(Gr||(Gr={}));var oy=function(){function e(t){var r=z.decode(t),n=z.toRGBA8(r);if(n.length>1)throw new Error("Animated PNGs are not supported");var i=new Uint8Array(n[0]),a=ay(i),o=a.rgbChannel,l=a.alphaChannel;this.rgbChannel=o;var u=l.some(function(s){return s<255});u&&(this.alphaChannel=l),this.type=iy(r.ctype),this.width=r.width,this.height=r.height,this.bitsPerComponent=8}return e.load=function(t){return new e(t)},e}(),nc=function(){function e(t){this.image=t,this.bitsPerComponent=t.bitsPerComponent,this.width=t.width,this.height=t.height,this.colorSpace="DeviceRGB"}return e.for=function(t){return ie(this,void 0,void 0,function(){var r;return ae(this,function(n){return r=oy.load(t),[2,new e(r)]})})},e.prototype.embedIntoContext=function(t,r){return ie(this,void 0,void 0,function(){var n,i;return ae(this,function(a){return n=this.embedAlphaChannel(t),i=t.flateStream(this.image.rgbChannel,{Type:"XObject",Subtype:"Image",BitsPerComponent:this.image.bitsPerComponent,Width:this.image.width,Height:this.image.height,ColorSpace:this.colorSpace,SMask:n}),r?(t.assign(r,i),[2,r]):[2,t.register(i)]})})},e.prototype.embedAlphaChannel=function(t){if(!!this.image.alphaChannel){var r=t.flateStream(this.image.alphaChannel,{Type:"XObject",Subtype:"Image",Height:this.image.height,Width:this.image.width,BitsPerComponent:this.image.bitsPerComponent,ColorSpace:"DeviceGray",Decode:[0,1]});return t.register(r)}},e}(),ic=function(){function e(t,r,n){this.bytes=t,this.start=r||0,this.pos=this.start,this.end=!!r&&!!n?r+n:this.bytes.length}return Object.defineProperty(e.prototype,"length",{get:function(){return this.end-this.start},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isEmpty",{get:function(){return this.length===0},enumerable:!1,configurable:!0}),e.prototype.getByte=function(){return this.pos>=this.end?-1:this.bytes[this.pos++]},e.prototype.getUint16=function(){var t=this.getByte(),r=this.getByte();return t===-1||r===-1?-1:(t<<8)+r},e.prototype.getInt32=function(){var t=this.getByte(),r=this.getByte(),n=this.getByte(),i=this.getByte();return(t<<24)+(r<<16)+(n<<8)+i},e.prototype.getBytes=function(t,r){r===void 0&&(r=!1);var n=this.bytes,i=this.pos,a=this.end;if(t){var l=i+t;l>a&&(l=a),this.pos=l;var o=n.subarray(i,l);return r?new Uint8ClampedArray(o):o}else{var o=n.subarray(i,a);return r?new Uint8ClampedArray(o):o}},e.prototype.peekByte=function(){var t=this.getByte();return this.pos--,t},e.prototype.peekBytes=function(t,r){r===void 0&&(r=!1);var n=this.getBytes(t,r);return this.pos-=n.length,n},e.prototype.skip=function(t){t||(t=1),this.pos+=t},e.prototype.reset=function(){this.pos=this.start},e.prototype.moveStart=function(){this.start=this.pos},e.prototype.makeSubStream=function(t,r){return new e(this.bytes,t,r)},e.prototype.decode=function(){return this.bytes},e}(),sy=new Uint8Array(0),Pi=function(){function e(t){if(this.pos=0,this.bufferLength=0,this.eof=!1,this.buffer=sy,this.minBufferLength=512,t)for(;this.minBufferLength<t;)this.minBufferLength*=2}return Object.defineProperty(e.prototype,"isEmpty",{get:function(){for(;!this.eof&&this.bufferLength===0;)this.readBlock();return this.bufferLength===0},enumerable:!1,configurable:!0}),e.prototype.getByte=function(){for(var t=this.pos;this.bufferLength<=t;){if(this.eof)return-1;this.readBlock()}return this.buffer[this.pos++]},e.prototype.getUint16=function(){var t=this.getByte(),r=this.getByte();return t===-1||r===-1?-1:(t<<8)+r},e.prototype.getInt32=function(){var t=this.getByte(),r=this.getByte(),n=this.getByte(),i=this.getByte();return(t<<24)+(r<<16)+(n<<8)+i},e.prototype.getBytes=function(t,r){r===void 0&&(r=!1);var n,i=this.pos;if(t){for(this.ensureBuffer(i+t),n=i+t;!this.eof&&this.bufferLength<n;)this.readBlock();var a=this.bufferLength;n>a&&(n=a)}else{for(;!this.eof;)this.readBlock();n=this.bufferLength}this.pos=n;var o=this.buffer.subarray(i,n);return r&&!(o instanceof Uint8ClampedArray)?new Uint8ClampedArray(o):o},e.prototype.peekByte=function(){var t=this.getByte();return this.pos--,t},e.prototype.peekBytes=function(t,r){r===void 0&&(r=!1);var n=this.getBytes(t,r);return this.pos-=n.length,n},e.prototype.skip=function(t){t||(t=1),this.pos+=t},e.prototype.reset=function(){this.pos=0},e.prototype.makeSubStream=function(t,r){for(var n=t+r;this.bufferLength<=n&&!this.eof;)this.readBlock();return new ic(this.buffer,t,r)},e.prototype.decode=function(){for(;!this.eof;)this.readBlock();return this.buffer.subarray(0,this.bufferLength)},e.prototype.readBlock=function(){throw new kt(this.constructor.name,"readBlock")},e.prototype.ensureBuffer=function(t){var r=this.buffer;if(t<=r.byteLength)return r;for(var n=this.minBufferLength;n<t;)n*=2;var i=new Uint8Array(n);return i.set(r),this.buffer=i},e}(),yu=function(e){return e===32||e===9||e===13||e===10},ly=function(e){K(t,e);function t(r,n){var i=e.call(this,n)||this;return i.stream=r,i.input=new Uint8Array(5),n&&(n=.8*n),i}return t.prototype.readBlock=function(){for(var r=126,n=122,i=-1,a=this.stream,o=a.getByte();yu(o);)o=a.getByte();if(o===i||o===r){this.eof=!0;return}var l=this.bufferLength,u,s;if(o===n){for(u=this.ensureBuffer(l+4),s=0;s<4;++s)u[l+s]=0;this.bufferLength+=4}else{var f=this.input;for(f[0]=o,s=1;s<5;++s){for(o=a.getByte();yu(o);)o=a.getByte();if(f[s]=o,o===i||o===r)break}if(u=this.ensureBuffer(l+s-1),this.bufferLength+=s-1,s<5){for(;s<5;++s)f[s]=33+84;this.eof=!0}var c=0;for(s=0;s<5;++s)c=c*85+(f[s]-33);for(s=3;s>=0;--s)u[l+s]=c&255,c>>=8}},t}(Pi),uy=function(e){K(t,e);function t(r,n){var i=e.call(this,n)||this;return i.stream=r,i.firstDigit=-1,n&&(n=.5*n),i}return t.prototype.readBlock=function(){var r=8e3,n=this.stream.getBytes(r);if(!n.length){this.eof=!0;return}for(var i=n.length+1>>1,a=this.ensureBuffer(this.bufferLength+i),o=this.bufferLength,l=this.firstDigit,u=0,s=n.length;u<s;u++){var f=n[u],c=void 0;if(f>=48&&f<=57)c=f&15;else if(f>=65&&f<=70||f>=97&&f<=102)c=(f&15)+9;else if(f===62){this.eof=!0;break}else continue;l<0?l=c:(a[o++]=l<<4|c,l=-1)}l>=0&&this.eof&&(a[o++]=l<<4,l=-1),this.firstDigit=l,this.bufferLength=o},t}(Pi),mu=new Int32Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),fy=new Int32Array([3,4,5,6,7,8,9,10,65547,65549,65551,65553,131091,131095,131099,131103,196643,196651,196659,196667,262211,262227,262243,262259,327811,327843,327875,327907,258,258,258]),cy=new Int32Array([1,2,3,4,65541,65543,131081,131085,196625,196633,262177,262193,327745,327777,393345,393409,459009,459137,524801,525057,590849,591361,657409,658433,724993,727041,794625,798721,868353,876545]),dy=[new Int32Array([459008,524368,524304,524568,459024,524400,524336,590016,459016,524384,524320,589984,524288,524416,524352,590048,459012,524376,524312,589968,459028,524408,524344,590032,459020,524392,524328,59e4,524296,524424,524360,590064,459010,524372,524308,524572,459026,524404,524340,590024,459018,524388,524324,589992,524292,524420,524356,590056,459014,524380,524316,589976,459030,524412,524348,590040,459022,524396,524332,590008,524300,524428,524364,590072,459009,524370,524306,524570,459025,524402,524338,590020,459017,524386,524322,589988,524290,524418,524354,590052,459013,524378,524314,589972,459029,524410,524346,590036,459021,524394,524330,590004,524298,524426,524362,590068,459011,524374,524310,524574,459027,524406,524342,590028,459019,524390,524326,589996,524294,524422,524358,590060,459015,524382,524318,589980,459031,524414,524350,590044,459023,524398,524334,590012,524302,524430,524366,590076,459008,524369,524305,524569,459024,524401,524337,590018,459016,524385,524321,589986,524289,524417,524353,590050,459012,524377,524313,589970,459028,524409,524345,590034,459020,524393,524329,590002,524297,524425,524361,590066,459010,524373,524309,524573,459026,524405,524341,590026,459018,524389,524325,589994,524293,524421,524357,590058,459014,524381,524317,589978,459030,524413,524349,590042,459022,524397,524333,590010,524301,524429,524365,590074,459009,524371,524307,524571,459025,524403,524339,590022,459017,524387,524323,589990,524291,524419,524355,590054,459013,524379,524315,589974,459029,524411,524347,590038,459021,524395,524331,590006,524299,524427,524363,590070,459011,524375,524311,524575,459027,524407,524343,590030,459019,524391,524327,589998,524295,524423,524359,590062,459015,524383,524319,589982,459031,524415,524351,590046,459023,524399,524335,590014,524303,524431,524367,590078,459008,524368,524304,524568,459024,524400,524336,590017,459016,524384,524320,589985,524288,524416,524352,590049,459012,524376,524312,589969,459028,524408,524344,590033,459020,524392,524328,590001,524296,524424,524360,590065,459010,524372,524308,524572,459026,524404,524340,590025,459018,524388,524324,589993,524292,524420,524356,590057,459014,524380,524316,589977,459030,524412,524348,590041,459022,524396,524332,590009,524300,524428,524364,590073,459009,524370,524306,524570,459025,524402,524338,590021,459017,524386,524322,589989,524290,524418,524354,590053,459013,524378,524314,589973,459029,524410,524346,590037,459021,524394,524330,590005,524298,524426,524362,590069,459011,524374,524310,524574,459027,524406,524342,590029,459019,524390,524326,589997,524294,524422,524358,590061,459015,524382,524318,589981,459031,524414,524350,590045,459023,524398,524334,590013,524302,524430,524366,590077,459008,524369,524305,524569,459024,524401,524337,590019,459016,524385,524321,589987,524289,524417,524353,590051,459012,524377,524313,589971,459028,524409,524345,590035,459020,524393,524329,590003,524297,524425,524361,590067,459010,524373,524309,524573,459026,524405,524341,590027,459018,524389,524325,589995,524293,524421,524357,590059,459014,524381,524317,589979,459030,524413,524349,590043,459022,524397,524333,590011,524301,524429,524365,590075,459009,524371,524307,524571,459025,524403,524339,590023,459017,524387,524323,589991,524291,524419,524355,590055,459013,524379,524315,589975,459029,524411,524347,590039,459021,524395,524331,590007,524299,524427,524363,590071,459011,524375,524311,524575,459027,524407,524343,590031,459019,524391,524327,589999,524295,524423,524359,590063,459015,524383,524319,589983,459031,524415,524351,590047,459023,524399,524335,590015,524303,524431,524367,590079]),9],hy=[new Int32Array([327680,327696,327688,327704,327684,327700,327692,327708,327682,327698,327690,327706,327686,327702,327694,0,327681,327697,327689,327705,327685,327701,327693,327709,327683,327699,327691,327707,327687,327703,327695,0]),5],vy=function(e){K(t,e);function t(r,n){var i=e.call(this,n)||this;i.stream=r;var a=r.getByte(),o=r.getByte();if(a===-1||o===-1)throw new Error("Invalid header in flate stream: "+a+", "+o);if((a&15)!==8)throw new Error("Unknown compression method in flate stream: "+a+", "+o);if(((a<<8)+o)%31!==0)throw new Error("Bad FCHECK in flate stream: "+a+", "+o);if(o&32)throw new Error("FDICT bit set in flate stream: "+a+", "+o);return i.codeSize=0,i.codeBuf=0,i}return t.prototype.readBlock=function(){var r,n,i=this.stream,a=this.getBits(3);if(a&1&&(this.eof=!0),a>>=1,a===0){var o=void 0;if((o=i.getByte())===-1)throw new Error("Bad block header in flate stream");var l=o;if((o=i.getByte())===-1)throw new Error("Bad block header in flate stream");if(l|=o<<8,(o=i.getByte())===-1)throw new Error("Bad block header in flate stream");var u=o;if((o=i.getByte())===-1)throw new Error("Bad block header in flate stream");if(u|=o<<8,u!==(~l&65535)&&(l!==0||u!==0))throw new Error("Bad uncompressed block length in flate stream");this.codeBuf=0,this.codeSize=0;var s=this.bufferLength;r=this.ensureBuffer(s+l);var f=s+l;if(this.bufferLength=f,l===0)i.peekByte()===-1&&(this.eof=!0);else for(var c=s;c<f;++c){if((o=i.getByte())===-1){this.eof=!0;break}r[c]=o}return}var d,h;if(a===1)d=dy,h=hy;else if(a===2){var p=this.getBits(5)+257,v=this.getBits(5)+1,y=this.getBits(4)+4,g=new Uint8Array(mu.length),w=void 0;for(w=0;w<y;++w)g[mu[w]]=this.getBits(3);var S=this.generateHuffmanTable(g);n=0,w=0;for(var P=p+v,C=new Uint8Array(P),A=void 0,F=void 0,D=void 0;w<P;){var O=this.getCode(S);if(O===16)A=2,F=3,D=n;else if(O===17)A=3,F=3,D=n=0;else if(O===18)A=7,F=11,D=n=0;else{C[w++]=n=O;continue}for(var B=this.getBits(A)+F;B-- >0;)C[w++]=D}d=this.generateHuffmanTable(C.subarray(0,p)),h=this.generateHuffmanTable(C.subarray(p,P))}else throw new Error("Unknown block type in flate stream");r=this.buffer;for(var k=r?r.length:0,M=this.bufferLength;;){var N=this.getCode(d);if(N<256){M+1>=k&&(r=this.ensureBuffer(M+1),k=r.length),r[M++]=N;continue}if(N===256){this.bufferLength=M;return}N-=257,N=fy[N];var T=N>>16;T>0&&(T=this.getBits(T)),n=(N&65535)+T,N=this.getCode(h),N=cy[N],T=N>>16,T>0&&(T=this.getBits(T));var W=(N&65535)+T;M+n>=k&&(r=this.ensureBuffer(M+n),k=r.length);for(var L=0;L<n;++L,++M)r[M]=r[M-W]}},t.prototype.getBits=function(r){for(var n=this.stream,i=this.codeSize,a=this.codeBuf,o;i<r;){if((o=n.getByte())===-1)throw new Error("Bad encoding in flate stream");a|=o<<i,i+=8}return o=a&(1<<r)-1,this.codeBuf=a>>r,this.codeSize=i-=r,o},t.prototype.getCode=function(r){for(var n=this.stream,i=r[0],a=r[1],o=this.codeSize,l=this.codeBuf,u;o<a&&(u=n.getByte())!==-1;)l|=u<<o,o+=8;var s=i[l&(1<<a)-1];typeof i=="number"&&console.log("FLATE:",s);var f=s>>16,c=s&65535;if(f<1||o<f)throw new Error("Bad encoding in flate stream");return this.codeBuf=l>>f,this.codeSize=o-f,c},t.prototype.generateHuffmanTable=function(r){var n=r.length,i=0,a;for(a=0;a<n;++a)r[a]>i&&(i=r[a]);for(var o=1<<i,l=new Int32Array(o),u=1,s=0,f=2;u<=i;++u,s<<=1,f<<=1)for(var c=0;c<n;++c)if(r[c]===u){var d=0,h=s;for(a=0;a<u;++a)d=d<<1|h&1,h>>=1;for(a=d;a<o;a+=f)l[a]=u<<16|c;++s}return[l,i]},t}(Pi),py=function(e){K(t,e);function t(r,n,i){var a=e.call(this,n)||this;a.stream=r,a.cachedData=0,a.bitsCached=0;for(var o=4096,l={earlyChange:i,codeLength:9,nextCode:258,dictionaryValues:new Uint8Array(o),dictionaryLengths:new Uint16Array(o),dictionaryPrevCodes:new Uint16Array(o),currentSequence:new Uint8Array(o),currentSequenceLength:0},u=0;u<256;++u)l.dictionaryValues[u]=u,l.dictionaryLengths[u]=1;return a.lzwState=l,a}return t.prototype.readBlock=function(){var r=512,n=r*2,i=r,a,o,l,u=this.lzwState;if(!!u){var s=u.earlyChange,f=u.nextCode,c=u.dictionaryValues,d=u.dictionaryLengths,h=u.dictionaryPrevCodes,p=u.codeLength,v=u.prevCode,y=u.currentSequence,g=u.currentSequenceLength,w=0,S=this.bufferLength,P=this.ensureBuffer(this.bufferLength+n);for(a=0;a<r;a++){var C=this.readBits(p),A=g>0;if(!C||C<256)y[0]=C,g=1;else if(C>=258)if(C<f)for(g=d[C],o=g-1,l=C;o>=0;o--)y[o]=c[l],l=h[l];else y[g++]=y[0];else if(C===256){p=9,f=258,g=0;continue}else{this.eof=!0,delete this.lzwState;break}if(A&&(h[f]=v,d[f]=d[v]+1,c[f]=y[0],f++,p=f+s&f+s-1?p:Math.min(Math.log(f+s)/.6931471805599453+1,12)|0),v=C,w+=g,n<w){do n+=i;while(n<w);P=this.ensureBuffer(this.bufferLength+n)}for(o=0;o<g;o++)P[S++]=y[o]}u.nextCode=f,u.codeLength=p,u.prevCode=v,u.currentSequenceLength=g,this.bufferLength=S}},t.prototype.readBits=function(r){for(var n=this.bitsCached,i=this.cachedData;n<r;){var a=this.stream.getByte();if(a===-1)return this.eof=!0,null;i=i<<8|a,n+=8}return this.bitsCached=n-=r,this.cachedData=i,i>>>n&(1<<r)-1},t}(Pi),gy=function(e){K(t,e);function t(r,n){var i=e.call(this,n)||this;return i.stream=r,i}return t.prototype.readBlock=function(){var r=this.stream.getBytes(2);if(!r||r.length<2||r[0]===128){this.eof=!0;return}var n,i=this.bufferLength,a=r[0];if(a<128){if(n=this.ensureBuffer(i+a+1),n[i++]=r[1],a>0){var o=this.stream.getBytes(a);n.set(o,i),i+=a}}else{a=257-a;var l=r[1];n=this.ensureBuffer(i+a+1);for(var u=0;u<a;u++)n[i++]=l}this.bufferLength=i},t}(Pi),bu=function(e,t,r){if(t===m.of("FlateDecode"))return new vy(e);if(t===m.of("LZWDecode")){var n=1;if(r instanceof ne){var i=r.lookup(m.of("EarlyChange"));i instanceof _&&(n=i.asNumber())}return new py(e,void 0,n)}if(t===m.of("ASCII85Decode"))return new ly(e);if(t===m.of("ASCIIHexDecode"))return new uy(e);if(t===m.of("RunLengthDecode"))return new gy(e);throw new kg(t.asString())},ac=function(e){var t=e.dict,r=e.contents,n=new ic(r),i=t.lookup(m.of("Filter")),a=t.lookup(m.of("DecodeParms"));if(i instanceof m)n=bu(n,i,a);else if(i instanceof be)for(var o=0,l=i.size();o<l;o++)n=bu(n,i.lookup(o,m),a&&a.lookupMaybe(o,ne));else if(i)throw new ya([m,be],i);return n},yy=function(e){var t=e.MediaBox(),r=t.lookup(2,_).asNumber()-t.lookup(0,_).asNumber(),n=t.lookup(3,_).asNumber()-t.lookup(1,_).asNumber();return{left:0,bottom:0,right:r,top:n}},my=function(e){return[1,0,0,1,-e.left,-e.bottom]},oc=function(){function e(t,r,n){this.page=t;var i=r!=null?r:yy(t);this.width=i.right-i.left,this.height=i.top-i.bottom,this.boundingBox=i,this.transformationMatrix=n!=null?n:my(i)}return e.for=function(t,r,n){return ie(this,void 0,void 0,function(){return ae(this,function(i){return[2,new e(t,r,n)]})})},e.prototype.embedIntoContext=function(t,r){return ie(this,void 0,void 0,function(){var n,i,a,o,l,u,s,f,c,d;return ae(this,function(h){if(n=this.page.normalizedEntries(),i=n.Contents,a=n.Resources,!i)throw new Tg;return o=this.decodeContents(i),l=this.boundingBox,u=l.left,s=l.bottom,f=l.right,c=l.top,d=t.flateStream(o,{Type:"XObject",Subtype:"Form",FormType:1,BBox:[u,s,f,c],Matrix:this.transformationMatrix,Resources:a}),r?(t.assign(r,d),[2,r]):[2,t.register(d)]})})},e.prototype.decodeContents=function(t){for(var r=Uint8Array.of(b.Newline),n=[],i=0,a=t.size();i<a;i++){var o=t.lookup(i,mt),l=void 0;if(o instanceof bi)l=ac(o).decode();else if(o instanceof si)l=o.getUnencodedContents();else throw new Ag(o);n.push(l,r)}return G0.apply(void 0,n)},e}(),Qi=function(e,t){if(e!==void 0)return t[e]},li;(function(e){e.UseNone="UseNone",e.UseOutlines="UseOutlines",e.UseThumbs="UseThumbs",e.UseOC="UseOC"})(li||(li={}));var ui;(function(e){e.L2R="L2R",e.R2L="R2L"})(ui||(ui={}));var fi;(function(e){e.None="None",e.AppDefault="AppDefault"})(fi||(fi={}));var xa;(function(e){e.Simplex="Simplex",e.DuplexFlipShortEdge="DuplexFlipShortEdge",e.DuplexFlipLongEdge="DuplexFlipLongEdge"})(xa||(xa={}));var xu=function(){function e(t){this.dict=t}return e.prototype.lookupBool=function(t){var r=this.dict.lookup(m.of(t));if(r instanceof mi)return r},e.prototype.lookupName=function(t){var r=this.dict.lookup(m.of(t));if(r instanceof m)return r},e.prototype.HideToolbar=function(){return this.lookupBool("HideToolbar")},e.prototype.HideMenubar=function(){return this.lookupBool("HideMenubar")},e.prototype.HideWindowUI=function(){return this.lookupBool("HideWindowUI")},e.prototype.FitWindow=function(){return this.lookupBool("FitWindow")},e.prototype.CenterWindow=function(){return this.lookupBool("CenterWindow")},e.prototype.DisplayDocTitle=function(){return this.lookupBool("DisplayDocTitle")},e.prototype.NonFullScreenPageMode=function(){return this.lookupName("NonFullScreenPageMode")},e.prototype.Direction=function(){return this.lookupName("Direction")},e.prototype.PrintScaling=function(){return this.lookupName("PrintScaling")},e.prototype.Duplex=function(){return this.lookupName("Duplex")},e.prototype.PickTrayByPDFSize=function(){return this.lookupBool("PickTrayByPDFSize")},e.prototype.PrintPageRange=function(){var t=this.dict.lookup(m.of("PrintPageRange"));if(t instanceof be)return t},e.prototype.NumCopies=function(){var t=this.dict.lookup(m.of("NumCopies"));if(t instanceof _)return t},e.prototype.getHideToolbar=function(){var t,r;return(r=(t=this.HideToolbar())===null||t===void 0?void 0:t.asBoolean())!==null&&r!==void 0?r:!1},e.prototype.getHideMenubar=function(){var t,r;return(r=(t=this.HideMenubar())===null||t===void 0?void 0:t.asBoolean())!==null&&r!==void 0?r:!1},e.prototype.getHideWindowUI=function(){var t,r;return(r=(t=this.HideWindowUI())===null||t===void 0?void 0:t.asBoolean())!==null&&r!==void 0?r:!1},e.prototype.getFitWindow=function(){var t,r;return(r=(t=this.FitWindow())===null||t===void 0?void 0:t.asBoolean())!==null&&r!==void 0?r:!1},e.prototype.getCenterWindow=function(){var t,r;return(r=(t=this.CenterWindow())===null||t===void 0?void 0:t.asBoolean())!==null&&r!==void 0?r:!1},e.prototype.getDisplayDocTitle=function(){var t,r;return(r=(t=this.DisplayDocTitle())===null||t===void 0?void 0:t.asBoolean())!==null&&r!==void 0?r:!1},e.prototype.getNonFullScreenPageMode=function(){var t,r,n=(t=this.NonFullScreenPageMode())===null||t===void 0?void 0:t.decodeText();return(r=Qi(n,li))!==null&&r!==void 0?r:li.UseNone},e.prototype.getReadingDirection=function(){var t,r,n=(t=this.Direction())===null||t===void 0?void 0:t.decodeText();return(r=Qi(n,ui))!==null&&r!==void 0?r:ui.L2R},e.prototype.getPrintScaling=function(){var t,r,n=(t=this.PrintScaling())===null||t===void 0?void 0:t.decodeText();return(r=Qi(n,fi))!==null&&r!==void 0?r:fi.AppDefault},e.prototype.getDuplex=function(){var t,r=(t=this.Duplex())===null||t===void 0?void 0:t.decodeText();return Qi(r,xa)},e.prototype.getPickTrayByPDFSize=function(){var t;return(t=this.PickTrayByPDFSize())===null||t===void 0?void 0:t.asBoolean()},e.prototype.getPrintPageRange=function(){var t=this.PrintPageRange();if(!t)return[];for(var r=[],n=0;n<t.size();n+=2){var i=t.lookup(n,_).asNumber(),a=t.lookup(n+1,_).asNumber();r.push({start:i,end:a})}return r},e.prototype.getNumCopies=function(){var t,r;return(r=(t=this.NumCopies())===null||t===void 0?void 0:t.asNumber())!==null&&r!==void 0?r:1},e.prototype.setHideToolbar=function(t){var r=this.dict.context.obj(t);this.dict.set(m.of("HideToolbar"),r)},e.prototype.setHideMenubar=function(t){var r=this.dict.context.obj(t);this.dict.set(m.of("HideMenubar"),r)},e.prototype.setHideWindowUI=function(t){var r=this.dict.context.obj(t);this.dict.set(m.of("HideWindowUI"),r)},e.prototype.setFitWindow=function(t){var r=this.dict.context.obj(t);this.dict.set(m.of("FitWindow"),r)},e.prototype.setCenterWindow=function(t){var r=this.dict.context.obj(t);this.dict.set(m.of("CenterWindow"),r)},e.prototype.setDisplayDocTitle=function(t){var r=this.dict.context.obj(t);this.dict.set(m.of("DisplayDocTitle"),r)},e.prototype.setNonFullScreenPageMode=function(t){Pr(t,"nonFullScreenPageMode",li);var r=m.of(t);this.dict.set(m.of("NonFullScreenPageMode"),r)},e.prototype.setReadingDirection=function(t){Pr(t,"readingDirection",ui);var r=m.of(t);this.dict.set(m.of("Direction"),r)},e.prototype.setPrintScaling=function(t){Pr(t,"printScaling",fi);var r=m.of(t);this.dict.set(m.of("PrintScaling"),r)},e.prototype.setDuplex=function(t){Pr(t,"duplex",xa);var r=m.of(t);this.dict.set(m.of("Duplex"),r)},e.prototype.setPickTrayByPDFSize=function(t){var r=this.dict.context.obj(t);this.dict.set(m.of("PickTrayByPDFSize"),r)},e.prototype.setPrintPageRange=function(t){Array.isArray(t)||(t=[t]);for(var r=[],n=0,i=t.length;n<i;n++)r.push(t[n].start),r.push(t[n].end);Zf(r,"printPageRange",["number"]);var a=this.dict.context.obj(r);this.dict.set(m.of("PrintPageRange"),a)},e.prototype.setNumCopies=function(t){gt(t,"numCopies",1,Number.MAX_VALUE),Cg(t,"numCopies");var r=this.dict.context.obj(t);this.dict.set(m.of("NumCopies"),r)},e.fromDict=function(t){return new e(t)},e.create=function(t){var r=t.obj({});return new e(r)},e}(),by=/\/([^\0\t\n\f\r\ ]+)[\0\t\n\f\r\ ]*(\d*\.\d+|\d+)?[\0\t\n\f\r\ ]+Tf/,sc=function(){function e(t,r){this.dict=t,this.ref=r}return e.prototype.T=function(){return this.dict.lookupMaybe(m.of("T"),Ce,Q)},e.prototype.Ff=function(){var t=this.getInheritableAttribute(m.of("Ff"));return this.dict.context.lookupMaybe(t,_)},e.prototype.V=function(){var t=this.getInheritableAttribute(m.of("V"));return this.dict.context.lookup(t)},e.prototype.Kids=function(){return this.dict.lookupMaybe(m.of("Kids"),be)},e.prototype.DA=function(){var t=this.dict.lookup(m.of("DA"));if(t instanceof Ce||t instanceof Q)return t},e.prototype.setKids=function(t){this.dict.set(m.of("Kids"),this.dict.context.obj(t))},e.prototype.getParent=function(){var t=this.dict.get(m.of("Parent"));if(t instanceof ke){var r=this.dict.lookup(m.of("Parent"),ne);return new e(r,t)}},e.prototype.setParent=function(t){t?this.dict.set(m.of("Parent"),t):this.dict.delete(m.of("Parent"))},e.prototype.getFullyQualifiedName=function(){var t=this.getParent();return t?t.getFullyQualifiedName()+"."+this.getPartialName():this.getPartialName()},e.prototype.getPartialName=function(){var t;return(t=this.T())===null||t===void 0?void 0:t.decodeText()},e.prototype.setPartialName=function(t){t?this.dict.set(m.of("T"),Q.fromText(t)):this.dict.delete(m.of("T"))},e.prototype.setDefaultAppearance=function(t){this.dict.set(m.of("DA"),Ce.of(t))},e.prototype.getDefaultAppearance=function(){var t=this.DA();return t instanceof Q?t.decodeText():t==null?void 0:t.asString()},e.prototype.setFontSize=function(t){var r,n=(r=this.getFullyQualifiedName())!==null&&r!==void 0?r:"",i=this.getDefaultAppearance();if(!i)throw new Og(n);var a=ls(i,by);if(!a.match)throw new Rg(n);var o=i.slice(0,a.pos-a.match[0].length),l=a.pos<=i.length?i.slice(a.pos):"",u=a.match[1],s=o+" /"+u+" "+t+" Tf "+l;this.setDefaultAppearance(s)},e.prototype.getFlags=function(){var t,r;return(r=(t=this.Ff())===null||t===void 0?void 0:t.asNumber())!==null&&r!==void 0?r:0},e.prototype.setFlags=function(t){this.dict.set(m.of("Ff"),_.of(t))},e.prototype.hasFlag=function(t){var r=this.getFlags();return(r&t)!==0},e.prototype.setFlag=function(t){var r=this.getFlags();this.setFlags(r|t)},e.prototype.clearFlag=function(t){var r=this.getFlags();this.setFlags(r&~t)},e.prototype.setFlagTo=function(t,r){r?this.setFlag(t):this.clearFlag(t)},e.prototype.getInheritableAttribute=function(t){var r;return this.ascend(function(n){r||(r=n.dict.get(t))}),r},e.prototype.ascend=function(t){t(this);var r=this.getParent();r&&r.ascend(t)},e}(),Do=function(){function e(t){this.dict=t}return e.prototype.W=function(){var t=this.dict.lookup(m.of("W"));if(t instanceof _)return t},e.prototype.getWidth=function(){var t,r;return(r=(t=this.W())===null||t===void 0?void 0:t.asNumber())!==null&&r!==void 0?r:1},e.prototype.setWidth=function(t){var r=this.dict.context.obj(t);this.dict.set(m.of("W"),r)},e.fromDict=function(t){return new e(t)},e}(),xy=function(){function e(t){this.dict=t}return e.prototype.Rect=function(){return this.dict.lookup(m.of("Rect"),be)},e.prototype.AP=function(){return this.dict.lookupMaybe(m.of("AP"),ne)},e.prototype.F=function(){var t=this.dict.lookup(m.of("F"));return this.dict.context.lookupMaybe(t,_)},e.prototype.getRectangle=function(){var t,r=this.Rect();return(t=r==null?void 0:r.asRectangle())!==null&&t!==void 0?t:{x:0,y:0,width:0,height:0}},e.prototype.setRectangle=function(t){var r=t.x,n=t.y,i=t.width,a=t.height,o=this.dict.context.obj([r,n,r+i,n+a]);this.dict.set(m.of("Rect"),o)},e.prototype.getAppearanceState=function(){var t=this.dict.lookup(m.of("AS"));if(t instanceof m)return t},e.prototype.setAppearanceState=function(t){this.dict.set(m.of("AS"),t)},e.prototype.setAppearances=function(t){this.dict.set(m.of("AP"),t)},e.prototype.ensureAP=function(){var t=this.AP();return t||(t=this.dict.context.obj({}),this.dict.set(m.of("AP"),t)),t},e.prototype.getNormalAppearance=function(){var t=this.ensureAP(),r=t.get(m.of("N"));if(r instanceof ke||r instanceof ne)return r;throw new Error("Unexpected N type: "+(r==null?void 0:r.constructor.name))},e.prototype.setNormalAppearance=function(t){var r=this.ensureAP();r.set(m.of("N"),t)},e.prototype.setRolloverAppearance=function(t){var r=this.ensureAP();r.set(m.of("R"),t)},e.prototype.setDownAppearance=function(t){var r=this.ensureAP();r.set(m.of("D"),t)},e.prototype.removeRolloverAppearance=function(){var t=this.AP();t==null||t.delete(m.of("R"))},e.prototype.removeDownAppearance=function(){var t=this.AP();t==null||t.delete(m.of("D"))},e.prototype.getAppearances=function(){var t=this.AP();if(!!t){var r=t.lookup(m.of("N"),ne,mt),n=t.lookupMaybe(m.of("R"),ne,mt),i=t.lookupMaybe(m.of("D"),ne,mt);return{normal:r,rollover:n,down:i}}},e.prototype.getFlags=function(){var t,r;return(r=(t=this.F())===null||t===void 0?void 0:t.asNumber())!==null&&r!==void 0?r:0},e.prototype.setFlags=function(t){this.dict.set(m.of("F"),_.of(t))},e.prototype.hasFlag=function(t){var r=this.getFlags();return(r&t)!==0},e.prototype.setFlag=function(t){var r=this.getFlags();this.setFlags(r|t)},e.prototype.clearFlag=function(t){var r=this.getFlags();this.setFlags(r&~t)},e.prototype.setFlagTo=function(t,r){r?this.setFlag(t):this.clearFlag(t)},e.fromDict=function(t){return new e(t)},e}(),Eo=function(){function e(t){this.dict=t}return e.prototype.R=function(){var t=this.dict.lookup(m.of("R"));if(t instanceof _)return t},e.prototype.BC=function(){var t=this.dict.lookup(m.of("BC"));if(t instanceof be)return t},e.prototype.BG=function(){var t=this.dict.lookup(m.of("BG"));if(t instanceof be)return t},e.prototype.CA=function(){var t=this.dict.lookup(m.of("CA"));if(t instanceof Q||t instanceof Ce)return t},e.prototype.RC=function(){var t=this.dict.lookup(m.of("RC"));if(t instanceof Q||t instanceof Ce)return t},e.prototype.AC=function(){var t=this.dict.lookup(m.of("AC"));if(t instanceof Q||t instanceof Ce)return t},e.prototype.getRotation=function(){var t;return(t=this.R())===null||t===void 0?void 0:t.asNumber()},e.prototype.getBorderColor=function(){var t=this.BC();if(!!t){for(var r=[],n=0,i=t==null?void 0:t.size();n<i;n++){var a=t.get(n);a instanceof _&&r.push(a.asNumber())}return r}},e.prototype.getBackgroundColor=function(){var t=this.BG();if(!!t){for(var r=[],n=0,i=t==null?void 0:t.size();n<i;n++){var a=t.get(n);a instanceof _&&r.push(a.asNumber())}return r}},e.prototype.getCaptions=function(){var t=this.CA(),r=this.RC(),n=this.AC();return{normal:t==null?void 0:t.decodeText(),rollover:r==null?void 0:r.decodeText(),down:n==null?void 0:n.decodeText()}},e.prototype.setRotation=function(t){var r=this.dict.context.obj(t);this.dict.set(m.of("R"),r)},e.prototype.setBorderColor=function(t){var r=this.dict.context.obj(t);this.dict.set(m.of("BC"),r)},e.prototype.setBackgroundColor=function(t){var r=this.dict.context.obj(t);this.dict.set(m.of("BG"),r)},e.prototype.setCaptions=function(t){var r=Q.fromText(t.normal);if(this.dict.set(m.of("CA"),r),t.rollover){var n=Q.fromText(t.rollover);this.dict.set(m.of("RC"),n)}else this.dict.delete(m.of("RC"));if(t.down){var i=Q.fromText(t.down);this.dict.set(m.of("AC"),i)}else this.dict.delete(m.of("AC"))},e.fromDict=function(t){return new e(t)},e}(),Zo=function(e){K(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.prototype.MK=function(){var r=this.dict.lookup(m.of("MK"));if(r instanceof ne)return r},t.prototype.BS=function(){var r=this.dict.lookup(m.of("BS"));if(r instanceof ne)return r},t.prototype.DA=function(){var r=this.dict.lookup(m.of("DA"));if(r instanceof Ce||r instanceof Q)return r},t.prototype.P=function(){var r=this.dict.get(m.of("P"));if(r instanceof ke)return r},t.prototype.setP=function(r){this.dict.set(m.of("P"),r)},t.prototype.setDefaultAppearance=function(r){this.dict.set(m.of("DA"),Ce.of(r))},t.prototype.getDefaultAppearance=function(){var r=this.DA();return r instanceof Q?r.decodeText():r==null?void 0:r.asString()},t.prototype.getAppearanceCharacteristics=function(){var r=this.MK();if(r)return Eo.fromDict(r)},t.prototype.getOrCreateAppearanceCharacteristics=function(){var r=this.MK();if(r)return Eo.fromDict(r);var n=Eo.fromDict(this.dict.context.obj({}));return this.dict.set(m.of("MK"),n.dict),n},t.prototype.getBorderStyle=function(){var r=this.BS();if(r)return Do.fromDict(r)},t.prototype.getOrCreateBorderStyle=function(){var r=this.BS();if(r)return Do.fromDict(r);var n=Do.fromDict(this.dict.context.obj({}));return this.dict.set(m.of("BS"),n.dict),n},t.prototype.getOnValue=function(){var r,n=(r=this.getAppearances())===null||r===void 0?void 0:r.normal;if(n instanceof ne)for(var i=n.keys(),a=0,o=i.length;a<o;a++){var l=i[a];if(l!==m.of("Off"))return l}},t.fromDict=function(r){return new t(r)},t.create=function(r,n){var i=r.obj({Type:"Annot",Subtype:"Widget",Rect:[0,0,0,0],Parent:n});return new t(i)},t}(xy),On=function(e){K(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.prototype.FT=function(){var r=this.getInheritableAttribute(m.of("FT"));return this.dict.context.lookup(r,m)},t.prototype.getWidgets=function(){var r=this.Kids();if(!r)return[Zo.fromDict(this.dict)];for(var n=new Array(r.size()),i=0,a=r.size();i<a;i++){var o=r.lookup(i,ne);n[i]=Zo.fromDict(o)}return n},t.prototype.addWidget=function(r){var n=this.normalizedEntries().Kids;n.push(r)},t.prototype.removeWidget=function(r){var n=this.Kids();if(n){if(r<0||r>n.size())throw new ma(r,0,n.size());n.remove(r)}else{if(r!==0)throw new ma(r,0,0);this.setKids([])}},t.prototype.normalizedEntries=function(){var r=this.Kids();return r||(r=this.dict.context.obj([this.ref]),this.dict.set(m.of("Kids"),r)),{Kids:r}},t.fromDict=function(r,n){return new t(r,n)},t}(sc),Fs=function(e){K(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.prototype.Opt=function(){return this.dict.lookupMaybe(m.of("Opt"),Ce,Q,be)},t.prototype.setOpt=function(r){this.dict.set(m.of("Opt"),this.dict.context.obj(r))},t.prototype.getExportValues=function(){var r=this.Opt();if(!!r){if(r instanceof Ce||r instanceof Q)return[r];for(var n=[],i=0,a=r.size();i<a;i++){var o=r.lookup(i);(o instanceof Ce||o instanceof Q)&&n.push(o)}return n}},t.prototype.removeExportValue=function(r){var n=this.Opt();if(!!n)if(n instanceof Ce||n instanceof Q){if(r!==0)throw new ma(r,0,0);this.setOpt([])}else{if(r<0||r>n.size())throw new ma(r,0,n.size());n.remove(r)}},t.prototype.normalizeExportValues=function(){for(var r,n,i,a,o=(r=this.getExportValues())!==null&&r!==void 0?r:[],l=[],u=this.getWidgets(),s=0,f=u.length;s<f;s++){var c=u[s],d=(n=o[s])!==null&&n!==void 0?n:Q.fromText((a=(i=c.getOnValue())===null||i===void 0?void 0:i.decodeText())!==null&&a!==void 0?a:"");l.push(d)}this.setOpt(l)},t.prototype.addOpt=function(r,n){var i;this.normalizeExportValues();var a=r.decodeText(),o;if(n)for(var l=(i=this.getExportValues())!==null&&i!==void 0?i:[],u=0,s=l.length;u<s;u++){var f=l[u];f.decodeText()===a&&(o=u)}var c=this.Opt();return c.push(r),o!=null?o:c.size()-1},t.prototype.addWidgetWithOpt=function(r,n,i){var a=this.addOpt(n,i),o=m.of(String(a));return this.addWidget(r),o},t}(On),Wa=function(e){K(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.prototype.setValue=function(r){var n,i=(n=this.getOnValue())!==null&&n!==void 0?n:m.of("Yes");if(r!==i&&r!==m.of("Off"))throw new ms;this.dict.set(m.of("V"),r);for(var a=this.getWidgets(),o=0,l=a.length;o<l;o++){var u=a[o],s=u.getOnValue()===r?r:m.of("Off");u.setAppearanceState(s)}},t.prototype.getValue=function(){var r=this.V();return r instanceof m?r:m.of("Off")},t.prototype.getOnValue=function(){var r=this.getWidgets()[0];return r==null?void 0:r.getOnValue()},t.fromDict=function(r,n){return new t(r,n)},t.create=function(r){var n=r.obj({FT:"Btn",Kids:[]}),i=r.register(n);return new t(n,i)},t}(Fs),qe=function(e){return 1<<e},jt;(function(e){e[e.ReadOnly=qe(1-1)]="ReadOnly",e[e.Required=qe(2-1)]="Required",e[e.NoExport=qe(3-1)]="NoExport"})(jt||(jt={}));var Ft;(function(e){e[e.NoToggleToOff=qe(15-1)]="NoToggleToOff",e[e.Radio=qe(16-1)]="Radio",e[e.PushButton=qe(17-1)]="PushButton",e[e.RadiosInUnison=qe(26-1)]="RadiosInUnison"})(Ft||(Ft={}));var Ue;(function(e){e[e.Multiline=qe(13-1)]="Multiline",e[e.Password=qe(14-1)]="Password",e[e.FileSelect=qe(21-1)]="FileSelect",e[e.DoNotSpellCheck=qe(23-1)]="DoNotSpellCheck",e[e.DoNotScroll=qe(24-1)]="DoNotScroll",e[e.Comb=qe(25-1)]="Comb",e[e.RichText=qe(26-1)]="RichText"})(Ue||(Ue={}));var Fe;(function(e){e[e.Combo=qe(18-1)]="Combo",e[e.Edit=qe(19-1)]="Edit",e[e.Sort=qe(20-1)]="Sort",e[e.MultiSelect=qe(22-1)]="MultiSelect",e[e.DoNotSpellCheck=qe(23-1)]="DoNotSpellCheck",e[e.CommitOnSelChange=qe(27-1)]="CommitOnSelChange"})(Fe||(Fe={}));var lc=function(e){K(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.prototype.setValues=function(r){if(this.hasFlag(Fe.Combo)&&!this.hasFlag(Fe.Edit)&&!this.valuesAreValid(r))throw new ms;if(r.length===0&&this.dict.delete(m.of("V")),r.length===1&&this.dict.set(m.of("V"),r[0]),r.length>1){if(!this.hasFlag(Fe.MultiSelect))throw new Eg;this.dict.set(m.of("V"),this.dict.context.obj(r))}this.updateSelectedIndices(r)},t.prototype.valuesAreValid=function(r){for(var n=this.getOptions(),i=function(u,s){var f=r[u].decodeText();if(!n.find(function(c){return f===(c.display||c.value).decodeText()}))return{value:!1}},a=0,o=r.length;a<o;a++){var l=i(a);if(typeof l=="object")return l.value}return!0},t.prototype.updateSelectedIndices=function(r){if(r.length>1){for(var n=new Array(r.length),i=this.getOptions(),a=function(u,s){var f=r[u].decodeText();n[u]=i.findIndex(function(c){return f===(c.display||c.value).decodeText()})},o=0,l=r.length;o<l;o++)a(o,l);this.dict.set(m.of("I"),this.dict.context.obj(n.sort()))}else this.dict.delete(m.of("I"))},t.prototype.getValues=function(){var r=this.V();if(r instanceof Ce||r instanceof Q)return[r];if(r instanceof be){for(var n=[],i=0,a=r.size();i<a;i++){var o=r.lookup(i);(o instanceof Ce||o instanceof Q)&&n.push(o)}return n}return[]},t.prototype.Opt=function(){return this.dict.lookupMaybe(m.of("Opt"),Ce,Q,be)},t.prototype.setOptions=function(r){for(var n=new Array(r.length),i=0,a=r.length;i<a;i++){var o=r[i],l=o.value,u=o.display;n[i]=this.dict.context.obj([l,u||l])}this.dict.set(m.of("Opt"),this.dict.context.obj(n))},t.prototype.getOptions=function(){var r=this.Opt();if(r instanceof Ce||r instanceof Q)return[{value:r,display:r}];if(r instanceof be){for(var n=[],i=0,a=r.size();i<a;i++){var o=r.lookup(i);if((o instanceof Ce||o instanceof Q)&&n.push({value:o,display:o}),o instanceof be&&o.size()>0){var l=o.lookup(0,Ce,Q),u=o.lookupMaybe(1,Ce,Q);n.push({value:l,display:u||l})}}return n}return[]},t}(On),qa=function(e){K(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.fromDict=function(r,n){return new t(r,n)},t.create=function(r){var n=r.obj({FT:"Ch",Ff:Fe.Combo,Kids:[]}),i=r.register(n);return new t(n,i)},t}(lc),wa=function(e){K(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.prototype.addField=function(r){var n=this.normalizedEntries().Kids;n==null||n.push(r)},t.prototype.normalizedEntries=function(){var r=this.Kids();return r||(r=this.dict.context.obj([]),this.dict.set(m.of("Kids"),r)),{Kids:r}},t.fromDict=function(r,n){return new t(r,n)},t.create=function(r){var n=r.obj({}),i=r.register(n);return new t(n,i)},t}(sc),Cs=function(e){K(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.fromDict=function(r,n){return new t(r,n)},t}(On),Ka=function(e){K(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.prototype.MaxLen=function(){var r=this.dict.lookup(m.of("MaxLen"));if(r instanceof _)return r},t.prototype.Q=function(){var r=this.dict.lookup(m.of("Q"));if(r instanceof _)return r},t.prototype.setMaxLength=function(r){this.dict.set(m.of("MaxLen"),_.of(r))},t.prototype.removeMaxLength=function(){this.dict.delete(m.of("MaxLen"))},t.prototype.getMaxLength=function(){var r;return(r=this.MaxLen())===null||r===void 0?void 0:r.asNumber()},t.prototype.setQuadding=function(r){this.dict.set(m.of("Q"),_.of(r))},t.prototype.getQuadding=function(){var r;return(r=this.Q())===null||r===void 0?void 0:r.asNumber()},t.prototype.setValue=function(r){this.dict.set(m.of("V"),r)},t.prototype.removeValue=function(){this.dict.delete(m.of("V"))},t.prototype.getValue=function(){var r=this.V();if(r instanceof Ce||r instanceof Q)return r},t.fromDict=function(r,n){return new t(r,n)},t.create=function(r){var n=r.obj({FT:"Tx",Kids:[]}),i=r.register(n);return new t(n,i)},t}(On),Ga=function(e){K(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.fromDict=function(r,n){return new t(r,n)},t.create=function(r){var n=r.obj({FT:"Btn",Ff:Ft.PushButton,Kids:[]}),i=r.register(n);return new t(n,i)},t}(Fs),Ha=function(e){K(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.prototype.setValue=function(r){var n=this.getOnValues();if(!n.includes(r)&&r!==m.of("Off"))throw new ms;this.dict.set(m.of("V"),r);for(var i=this.getWidgets(),a=0,o=i.length;a<o;a++){var l=i[a],u=l.getOnValue()===r?r:m.of("Off");l.setAppearanceState(u)}},t.prototype.getValue=function(){var r=this.V();return r instanceof m?r:m.of("Off")},t.prototype.getOnValues=function(){for(var r=this.getWidgets(),n=[],i=0,a=r.length;i<a;i++){var o=r[i].getOnValue();o&&n.push(o)}return n},t.fromDict=function(r,n){return new t(r,n)},t.create=function(r){var n=r.obj({FT:"Btn",Ff:Ft.Radio,Kids:[]}),i=r.register(n);return new t(n,i)},t}(Fs),Xa=function(e){K(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.fromDict=function(r,n){return new t(r,n)},t.create=function(r){var n=r.obj({FT:"Ch",Kids:[]}),i=r.register(n);return new t(n,i)},t}(lc),ks=function(e){if(!e)return[];for(var t=[],r=0,n=e.size();r<n;r++){var i=e.get(r),a=e.lookup(r);i instanceof ke&&a instanceof ne&&t.push([uc(a,i),i])}return t},uc=function(e,t){var r=wy(e);return r?wa.fromDict(e,t):Sy(e,t)},wy=function(e){var t=e.lookup(m.of("Kids"));if(t instanceof be)for(var r=0,n=t.size();r<n;r++){var i=t.lookup(r),a=i instanceof ne&&i.has(m.of("T"));if(a)return!0}return!1},Sy=function(e,t){var r=Ts(e,m.of("FT")),n=e.context.lookup(r,m);return n===m.of("Btn")?Fy(e,t):n===m.of("Ch")?Cy(e,t):n===m.of("Tx")?Ka.fromDict(e,t):n===m.of("Sig")?Cs.fromDict(e,t):On.fromDict(e,t)},Fy=function(e,t){var r,n=Ts(e,m.of("Ff")),i=e.context.lookupMaybe(n,_),a=(r=i==null?void 0:i.asNumber())!==null&&r!==void 0?r:0;return Yo(a,Ft.PushButton)?Ga.fromDict(e,t):Yo(a,Ft.Radio)?Ha.fromDict(e,t):Wa.fromDict(e,t)},Cy=function(e,t){var r,n=Ts(e,m.of("Ff")),i=e.context.lookupMaybe(n,_),a=(r=i==null?void 0:i.asNumber())!==null&&r!==void 0?r:0;return Yo(a,Fe.Combo)?qa.fromDict(e,t):Xa.fromDict(e,t)},Yo=function(e,t){return(e&t)!==0},Ts=function(e,t){var r;return fc(e,function(n){r||(r=n.get(t))}),r},fc=function(e,t){t(e);var r=e.lookupMaybe(m.of("Parent"),ne);r&&fc(r,t)},Sa=function(){function e(t){this.dict=t}return e.prototype.Fields=function(){var t=this.dict.lookup(m.of("Fields"));if(t instanceof be)return t},e.prototype.getFields=function(){for(var t=this.normalizedEntries().Fields,r=new Array(t.size()),n=0,i=t.size();n<i;n++){var a=t.get(n),o=t.lookup(n,ne);r[n]=[uc(o,a),a]}return r},e.prototype.getAllFields=function(){var t=[],r=function(n){if(!!n)for(var i=0,a=n.length;i<a;i++){var o=n[i];t.push(o);var l=o[0];l instanceof wa&&r(ks(l.Kids()))}};return r(this.getFields()),t},e.prototype.addField=function(t){var r=this.normalizedEntries().Fields;r==null||r.push(t)},e.prototype.removeField=function(t){var r=t.getParent(),n=r===void 0?this.normalizedEntries().Fields:r.Kids(),i=n==null?void 0:n.indexOf(t.ref);if(n===void 0||i===void 0)throw new Error("Tried to remove inexistent field "+t.getFullyQualifiedName());n.remove(i),r!==void 0&&n.size()===0&&this.removeField(r)},e.prototype.normalizedEntries=function(){var t=this.Fields();return t||(t=this.dict.context.obj([]),this.dict.set(m.of("Fields"),t)),{Fields:t}},e.fromDict=function(t){return new e(t)},e.create=function(t){var r=t.obj({Fields:[]});return new e(r)},e}(),cc=function(e){K(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.prototype.Pages=function(){return this.lookup(m.of("Pages"),ne)},t.prototype.AcroForm=function(){return this.lookupMaybe(m.of("AcroForm"),ne)},t.prototype.getAcroForm=function(){var r=this.AcroForm();if(!!r)return Sa.fromDict(r)},t.prototype.getOrCreateAcroForm=function(){var r=this.getAcroForm();if(!r){r=Sa.create(this.context);var n=this.context.register(r.dict);this.set(m.of("AcroForm"),n)}return r},t.prototype.ViewerPreferences=function(){return this.lookupMaybe(m.of("ViewerPreferences"),ne)},t.prototype.getViewerPreferences=function(){var r=this.ViewerPreferences();if(!!r)return xu.fromDict(r)},t.prototype.getOrCreateViewerPreferences=function(){var r=this.getViewerPreferences();if(!r){r=xu.create(this.context);var n=this.context.register(r.dict);this.set(m.of("ViewerPreferences"),n)}return r},t.prototype.insertLeafNode=function(r,n){var i=this.get(m.of("Pages")),a=this.Pages().insertLeafNode(r,n);return a||i},t.prototype.removeLeafNode=function(r){this.Pages().removeLeafNode(r)},t.withContextAndPages=function(r,n){var i=new Map;return i.set(m.of("Type"),m.of("Catalog")),i.set(m.of("Pages"),n),new t(i,r)},t.fromMapWithContext=function(r,n){return new t(r,n)},t}(ne),dc=function(e){K(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.prototype.Parent=function(){return this.lookup(m.of("Parent"))},t.prototype.Kids=function(){return this.lookup(m.of("Kids"),be)},t.prototype.Count=function(){return this.lookup(m.of("Count"),_)},t.prototype.pushTreeNode=function(r){var n=this.Kids();n.push(r)},t.prototype.pushLeafNode=function(r){var n=this.Kids();this.insertLeafKid(n.size(),r)},t.prototype.insertLeafNode=function(r,n){var i=this.Kids(),a=this.Count().asNumber();if(n>a)throw new su(n,a);for(var o=n,l=0,u=i.size();l<u;l++){if(o===0){this.insertLeafKid(l,r);return}var s=i.get(l),f=this.context.lookup(s);if(f instanceof t){if(f.Count().asNumber()>o)return f.insertLeafNode(r,o)||s;o-=f.Count().asNumber()}f instanceof fr&&(o-=1)}if(o===0){this.insertLeafKid(i.size(),r);return}throw new lu(n,"insertLeafNode")},t.prototype.removeLeafNode=function(r,n){n===void 0&&(n=!0);var i=this.Kids(),a=this.Count().asNumber();if(r>=a)throw new su(r,a);for(var o=r,l=0,u=i.size();l<u;l++){var s=i.get(l),f=this.context.lookup(s);if(f instanceof t)if(f.Count().asNumber()>o){f.removeLeafNode(o,n),n&&f.Kids().size()===0&&i.remove(l);return}else o-=f.Count().asNumber();if(f instanceof fr)if(o===0){this.removeKid(l);return}else o-=1}throw new lu(r,"removeLeafNode")},t.prototype.ascend=function(r){r(this);var n=this.Parent();n&&n.ascend(r)},t.prototype.traverse=function(r){for(var n=this.Kids(),i=0,a=n.size();i<a;i++){var o=n.get(i),l=this.context.lookup(o);l instanceof t&&l.traverse(r),r(l,o)}},t.prototype.insertLeafKid=function(r,n){var i=this.Kids();this.ascend(function(a){var o=a.Count().asNumber()+1;a.set(m.of("Count"),_.of(o))}),i.insert(r,n)},t.prototype.removeKid=function(r){var n=this.Kids(),i=n.lookup(r);i instanceof fr&&this.ascend(function(a){var o=a.Count().asNumber()-1;a.set(m.of("Count"),_.of(o))}),n.remove(r)},t.withContext=function(r,n){var i=new Map;return i.set(m.of("Type"),m.of("Pages")),i.set(m.of("Kids"),r.obj([])),i.set(m.of("Count"),r.obj(0)),n&&i.set(m.of("Parent"),n),new t(i,r)},t.fromMapWithContext=function(r,n){return new t(r,n)},t}(ne),at=new Uint8Array(256);at[b.Zero]=1;at[b.One]=1;at[b.Two]=1;at[b.Three]=1;at[b.Four]=1;at[b.Five]=1;at[b.Six]=1;at[b.Seven]=1;at[b.Eight]=1;at[b.Nine]=1;var Za=new Uint8Array(256);Za[b.Period]=1;Za[b.Plus]=1;Za[b.Minus]=1;var As=new Uint8Array(256);for(var Kn=0,ky=256;Kn<ky;Kn++)As[Kn]=at[Kn]||Za[Kn]?1:0;var wu=b.Newline,Su=b.CarriageReturn,Ty=function(){function e(t,r){r===void 0&&(r=!1),this.bytes=t,this.capNumbers=r}return e.prototype.parseRawInt=function(){for(var t="";!this.bytes.done();){var r=this.bytes.peek();if(!at[r])break;t+=lr(this.bytes.next())}var n=Number(t);if(!t||!isFinite(n))throw new uu(this.bytes.position(),t);return n},e.prototype.parseRawNumber=function(){for(var t="";!this.bytes.done();){var r=this.bytes.peek();if(!As[r]||(t+=lr(this.bytes.next()),r===b.Period))break}for(;!this.bytes.done();){var r=this.bytes.peek();if(!at[r])break;t+=lr(this.bytes.next())}var n=Number(t);if(!t||!isFinite(n))throw new uu(this.bytes.position(),t);if(n>Number.MAX_SAFE_INTEGER)if(this.capNumbers){var i="Parsed number that is too large for some PDF readers: "+t+", using Number.MAX_SAFE_INTEGER instead.";return console.warn(i),Number.MAX_SAFE_INTEGER}else{var i="Parsed number that is too large for some PDF readers: "+t+", not capping.";console.warn(i)}return n},e.prototype.skipWhitespace=function(){for(;!this.bytes.done()&&hr[this.bytes.peek()];)this.bytes.next()},e.prototype.skipLine=function(){for(;!this.bytes.done();){var t=this.bytes.peek();if(t===wu||t===Su)return;this.bytes.next()}},e.prototype.skipComment=function(){if(this.bytes.peek()!==b.Percent)return!1;for(;!this.bytes.done();){var t=this.bytes.peek();if(t===wu||t===Su)return!0;this.bytes.next()}return!0},e.prototype.skipWhitespaceAndComments=function(){for(this.skipWhitespace();this.skipComment();)this.skipWhitespace()},e.prototype.matchKeyword=function(t){for(var r=this.bytes.offset(),n=0,i=t.length;n<i;n++)if(this.bytes.done()||this.bytes.next()!==t[n])return this.bytes.moveTo(r),!1;return!0},e}(),Ya=function(){function e(t){this.idx=0,this.line=0,this.column=0,this.bytes=t,this.length=this.bytes.length}return e.prototype.moveTo=function(t){this.idx=t},e.prototype.next=function(){var t=this.bytes[this.idx++];return t===b.Newline?(this.line+=1,this.column=0):this.column+=1,t},e.prototype.assertNext=function(t){if(this.peek()!==t)throw new Mg(this.position(),t,this.peek());return this.next()},e.prototype.peek=function(){return this.bytes[this.idx]},e.prototype.peekAhead=function(t){return this.bytes[this.idx+t]},e.prototype.peekAt=function(t){return this.bytes[t]},e.prototype.done=function(){return this.idx>=this.length},e.prototype.offset=function(){return this.idx},e.prototype.slice=function(t,r){return this.bytes.slice(t,r)},e.prototype.position=function(){return{line:this.line,column:this.column,offset:this.idx}},e.of=function(t){return new e(t)},e.fromPDFRawStream=function(t){return e.of(ac(t).decode())},e}(),Ay=b.Space,Gn=b.CarriageReturn,Hn=b.Newline,Xn=[b.s,b.t,b.r,b.e,b.a,b.m],Ji=[b.e,b.n,b.d,b.s,b.t,b.r,b.e,b.a,b.m],Oe={header:[b.Percent,b.P,b.D,b.F,b.Dash],eof:[b.Percent,b.Percent,b.E,b.O,b.F],obj:[b.o,b.b,b.j],endobj:[b.e,b.n,b.d,b.o,b.b,b.j],xref:[b.x,b.r,b.e,b.f],trailer:[b.t,b.r,b.a,b.i,b.l,b.e,b.r],startxref:[b.s,b.t,b.a,b.r,b.t,b.x,b.r,b.e,b.f],true:[b.t,b.r,b.u,b.e],false:[b.f,b.a,b.l,b.s,b.e],null:[b.n,b.u,b.l,b.l],stream:Xn,streamEOF1:ge(Xn,[Ay,Gn,Hn]),streamEOF2:ge(Xn,[Gn,Hn]),streamEOF3:ge(Xn,[Gn]),streamEOF4:ge(Xn,[Hn]),endstream:Ji,EOF1endstream:ge([Gn,Hn],Ji),EOF2endstream:ge([Gn],Ji),EOF3endstream:ge([Hn],Ji)},hc=function(e){K(t,e);function t(r,n,i){i===void 0&&(i=!1);var a=e.call(this,r,i)||this;return a.context=n,a}return t.prototype.parseObject=function(){if(this.skipWhitespaceAndComments(),this.matchKeyword(Oe.true))return mi.True;if(this.matchKeyword(Oe.false))return mi.False;if(this.matchKeyword(Oe.null))return ft;var r=this.bytes.peek();if(r===b.LessThan&&this.bytes.peekAhead(1)===b.LessThan)return this.parseDictOrStream();if(r===b.LessThan)return this.parseHexString();if(r===b.LeftParen)return this.parseString();if(r===b.ForwardSlash)return this.parseName();if(r===b.LeftSquareBracket)return this.parseArray();if(As[r])return this.parseNumberOrRef();throw new Bg(this.bytes.position(),r)},t.prototype.parseNumberOrRef=function(){var r=this.parseRawNumber();this.skipWhitespaceAndComments();var n=this.bytes.offset();if(at[this.bytes.peek()]){var i=this.parseRawNumber();if(this.skipWhitespaceAndComments(),this.bytes.peek()===b.R)return this.bytes.assertNext(b.R),ke.of(r,i)}return this.bytes.moveTo(n),_.of(r)},t.prototype.parseHexString=function(){var r="";for(this.bytes.assertNext(b.LessThan);!this.bytes.done()&&this.bytes.peek()!==b.GreaterThan;)r+=lr(this.bytes.next());return this.bytes.assertNext(b.GreaterThan),Q.of(r)},t.prototype.parseString=function(){for(var r=0,n=!1,i="";!this.bytes.done();){var a=this.bytes.next();if(i+=lr(a),n||(a===b.LeftParen&&(r+=1),a===b.RightParen&&(r-=1)),a===b.BackSlash?n=!n:n&&(n=!1),r===0)return Ce.of(i.substring(1,i.length-1))}throw new Ig(this.bytes.position())},t.prototype.parseName=function(){this.bytes.assertNext(b.ForwardSlash);for(var r="";!this.bytes.done();){var n=this.bytes.peek();if(hr[n]||Rt[n])break;r+=lr(n),this.bytes.next()}return m.of(r)},t.prototype.parseArray=function(){this.bytes.assertNext(b.LeftSquareBracket),this.skipWhitespaceAndComments();for(var r=be.withContext(this.context);this.bytes.peek()!==b.RightSquareBracket;){var n=this.parseObject();r.push(n),this.skipWhitespaceAndComments()}return this.bytes.assertNext(b.RightSquareBracket),r},t.prototype.parseDict=function(){this.bytes.assertNext(b.LessThan),this.bytes.assertNext(b.LessThan),this.skipWhitespaceAndComments();for(var r=new Map;!this.bytes.done()&&this.bytes.peek()!==b.GreaterThan&&this.bytes.peekAhead(1)!==b.GreaterThan;){var n=this.parseName(),i=this.parseObject();r.set(n,i),this.skipWhitespaceAndComments()}this.skipWhitespaceAndComments(),this.bytes.assertNext(b.GreaterThan),this.bytes.assertNext(b.GreaterThan);var a=r.get(m.of("Type"));return a===m.of("Catalog")?cc.fromMapWithContext(r,this.context):a===m.of("Pages")?dc.fromMapWithContext(r,this.context):a===m.of("Page")?fr.fromMapWithContext(r,this.context):ne.fromMapWithContext(r,this.context)},t.prototype.parseDictOrStream=function(){var r=this.bytes.position(),n=this.parseDict();if(this.skipWhitespaceAndComments(),!this.matchKeyword(Oe.streamEOF1)&&!this.matchKeyword(Oe.streamEOF2)&&!this.matchKeyword(Oe.streamEOF3)&&!this.matchKeyword(Oe.streamEOF4)&&!this.matchKeyword(Oe.stream))return n;var i=this.bytes.offset(),a,o=n.get(m.of("Length"));o instanceof _?(a=i+o.asNumber(),this.bytes.moveTo(a),this.skipWhitespaceAndComments(),this.matchKeyword(Oe.endstream)||(this.bytes.moveTo(i),a=this.findEndOfStreamFallback(r))):a=this.findEndOfStreamFallback(r);var l=this.bytes.slice(i,a);return bi.of(n,l)},t.prototype.findEndOfStreamFallback=function(r){for(var n=1,i=this.bytes.offset();!this.bytes.done()&&(i=this.bytes.offset(),this.matchKeyword(Oe.stream)?n+=1:this.matchKeyword(Oe.EOF1endstream)||this.matchKeyword(Oe.EOF2endstream)||this.matchKeyword(Oe.EOF3endstream)||this.matchKeyword(Oe.endstream)?n-=1:this.bytes.next(),n!==0););if(n!==0)throw new jg(r);return i},t.forBytes=function(r,n,i){return new t(Ya.of(r),n,i)},t.forByteStream=function(r,n,i){return i===void 0&&(i=!1),new t(r,n,i)},t}(Ty),Py=function(e){K(t,e);function t(r,n){var i=e.call(this,Ya.fromPDFRawStream(r),r.dict.context)||this,a=r.dict;return i.alreadyParsed=!1,i.shouldWaitForTick=n||function(){return!1},i.firstOffset=a.lookup(m.of("First"),_).asNumber(),i.objectCount=a.lookup(m.of("N"),_).asNumber(),i}return t.prototype.parseIntoContext=function(){return ie(this,void 0,void 0,function(){var r,n,i,a,o,l,u,s;return ae(this,function(f){switch(f.label){case 0:if(this.alreadyParsed)throw new ys("PDFObjectStreamParser","parseIntoContext");this.alreadyParsed=!0,r=this.parseOffsetsAndObjectNumbers(),n=0,i=r.length,f.label=1;case 1:return n<i?(a=r[n],o=a.objectNumber,l=a.offset,this.bytes.moveTo(this.firstOffset+l),u=this.parseObject(),s=ke.of(o,0),this.context.assign(s,u),this.shouldWaitForTick()?[4,Cn()]:[3,3]):[3,4];case 2:f.sent(),f.label=3;case 3:return n++,[3,1];case 4:return[2]}})})},t.prototype.parseOffsetsAndObjectNumbers=function(){for(var r=[],n=0,i=this.objectCount;n<i;n++){this.skipWhitespaceAndComments();var a=this.parseRawInt();this.skipWhitespaceAndComments();var o=this.parseRawInt();r.push({objectNumber:a,offset:o})}return r},t.forStream=function(r,n){return new t(r,n)},t}(hc),Dy=function(){function e(t){this.alreadyParsed=!1,this.dict=t.dict,this.bytes=Ya.fromPDFRawStream(t),this.context=this.dict.context;var r=this.dict.lookup(m.of("Size"),_),n=this.dict.lookup(m.of("Index"));if(n instanceof be){this.subsections=[];for(var i=0,a=n.size();i<a;i+=2){var o=n.lookup(i+0,_).asNumber(),l=n.lookup(i+1,_).asNumber();this.subsections.push({firstObjectNumber:o,length:l})}}else this.subsections=[{firstObjectNumber:0,length:r.asNumber()}];var u=this.dict.lookup(m.of("W"),be);this.byteWidths=[-1,-1,-1];for(var i=0,a=u.size();i<a;i++)this.byteWidths[i]=u.lookup(i,_).asNumber()}return e.prototype.parseIntoContext=function(){if(this.alreadyParsed)throw new ys("PDFXRefStreamParser","parseIntoContext");this.alreadyParsed=!0,this.context.trailerInfo={Root:this.dict.get(m.of("Root")),Encrypt:this.dict.get(m.of("Encrypt")),Info:this.dict.get(m.of("Info")),ID:this.dict.get(m.of("ID"))};var t=this.parseEntries();return t},e.prototype.parseEntries=function(){for(var t=[],r=this.byteWidths,n=r[0],i=r[1],a=r[2],o=0,l=this.subsections.length;o<l;o++)for(var u=this.subsections[o],s=u.firstObjectNumber,f=u.length,c=0;c<f;c++){for(var d=0,h=0,p=n;h<p;h++)d=d<<8|this.bytes.next();for(var v=0,h=0,p=i;h<p;h++)v=v<<8|this.bytes.next();for(var y=0,h=0,p=a;h<p;h++)y=y<<8|this.bytes.next();n===0&&(d=1);var g=s+c,w={ref:ke.of(g,y),offset:v,deleted:d===0,inObjectStream:d===2};t.push(w)}return t},e.forStream=function(t){return new e(t)},e}(),Ey=function(e){K(t,e);function t(r,n,i,a){n===void 0&&(n=1/0),i===void 0&&(i=!1),a===void 0&&(a=!1);var o=e.call(this,Ya.of(r),Ho.create(),a)||this;return o.alreadyParsed=!1,o.parsedObjects=0,o.shouldWaitForTick=function(){return o.parsedObjects+=1,o.parsedObjects%o.objectsPerTick===0},o.objectsPerTick=n,o.throwOnInvalidObject=i,o}return t.prototype.parseDocument=function(){return ie(this,void 0,void 0,function(){var r,n;return ae(this,function(i){switch(i.label){case 0:if(this.alreadyParsed)throw new ys("PDFParser","parseDocument");this.alreadyParsed=!0,this.context.header=this.parseHeader(),i.label=1;case 1:return this.bytes.done()?[3,3]:[4,this.parseDocumentSection()];case 2:if(i.sent(),n=this.bytes.offset(),n===r)throw new zg(this.bytes.position());return r=n,[3,1];case 3:return this.maybeRecoverRoot(),this.context.lookup(ke.of(0))&&(console.warn("Removing parsed object: 0 0 R"),this.context.delete(ke.of(0))),[2,this.context]}})})},t.prototype.maybeRecoverRoot=function(){var r=function(f){return f instanceof ne&&f.lookup(m.of("Type"))===m.of("Catalog")},n=this.context.lookup(this.context.trailerInfo.Root);if(!r(n))for(var i=this.context.enumerateIndirectObjects(),a=0,o=i.length;a<o;a++){var l=i[a],u=l[0],s=l[1];r(s)&&(this.context.trailerInfo.Root=u)}},t.prototype.parseHeader=function(){for(;!this.bytes.done();){if(this.matchKeyword(Oe.header)){var r=this.parseRawInt();this.bytes.assertNext(b.Period);var n=this.parseRawInt(),i=La.forVersion(r,n);return this.skipBinaryHeaderComment(),i}this.bytes.next()}throw new Ug(this.bytes.position())},t.prototype.parseIndirectObjectHeader=function(){this.skipWhitespaceAndComments();var r=this.parseRawInt();this.skipWhitespaceAndComments();var n=this.parseRawInt();if(this.skipWhitespaceAndComments(),!this.matchKeyword(Oe.obj))throw new Vg(this.bytes.position(),Oe.obj);return ke.of(r,n)},t.prototype.matchIndirectObjectHeader=function(){var r=this.bytes.offset();try{return this.parseIndirectObjectHeader(),!0}catch{return this.bytes.moveTo(r),!1}},t.prototype.parseIndirectObject=function(){return ie(this,void 0,void 0,function(){var r,n;return ae(this,function(i){switch(i.label){case 0:return r=this.parseIndirectObjectHeader(),this.skipWhitespaceAndComments(),n=this.parseObject(),this.skipWhitespaceAndComments(),this.matchKeyword(Oe.endobj),n instanceof bi&&n.dict.lookup(m.of("Type"))===m.of("ObjStm")?[4,Py.forStream(n,this.shouldWaitForTick).parseIntoContext()]:[3,2];case 1:return i.sent(),[3,3];case 2:n instanceof bi&&n.dict.lookup(m.of("Type"))===m.of("XRef")?Dy.forStream(n).parseIntoContext():this.context.assign(r,n),i.label=3;case 3:return[2,r]}})})},t.prototype.tryToParseInvalidIndirectObject=function(){var r=this.bytes.position(),n="Trying to parse invalid object: "+JSON.stringify(r)+")";if(this.throwOnInvalidObject)throw new Error(n);console.warn(n);var i=this.parseIndirectObjectHeader();console.warn("Invalid object ref: "+i),this.skipWhitespaceAndComments();for(var a=this.bytes.offset(),o=!0;!this.bytes.done()&&(this.matchKeyword(Oe.endobj)&&(o=!1),!!o);)this.bytes.next();if(o)throw new Ng(r);var l=this.bytes.offset()-Oe.endobj.length,u=tc.of(this.bytes.slice(a,l));return this.context.assign(i,u),i},t.prototype.parseIndirectObjects=function(){return ie(this,void 0,void 0,function(){var r;return ae(this,function(n){switch(n.label){case 0:this.skipWhitespaceAndComments(),n.label=1;case 1:if(!(!this.bytes.done()&&at[this.bytes.peek()]))return[3,8];r=this.bytes.offset(),n.label=2;case 2:return n.trys.push([2,4,,5]),[4,this.parseIndirectObject()];case 3:return n.sent(),[3,5];case 4:return n.sent(),this.bytes.moveTo(r),this.tryToParseInvalidIndirectObject(),[3,5];case 5:return this.skipWhitespaceAndComments(),this.skipJibberish(),this.shouldWaitForTick()?[4,Cn()]:[3,7];case 6:n.sent(),n.label=7;case 7:return[3,1];case 8:return[2]}})})},t.prototype.maybeParseCrossRefSection=function(){if(this.skipWhitespaceAndComments(),!!this.matchKeyword(Oe.xref)){this.skipWhitespaceAndComments();for(var r=-1,n=_f.createEmpty();!this.bytes.done()&&at[this.bytes.peek()];){var i=this.parseRawInt();this.skipWhitespaceAndComments();var a=this.parseRawInt();this.skipWhitespaceAndComments();var o=this.bytes.peek();if(o===b.n||o===b.f){var l=ke.of(r,a);this.bytes.next()===b.n?n.addEntry(l,i):n.addDeletedEntry(l,i),r+=1}else r=i;this.skipWhitespaceAndComments()}return n}},t.prototype.maybeParseTrailerDict=function(){if(this.skipWhitespaceAndComments(),!!this.matchKeyword(Oe.trailer)){this.skipWhitespaceAndComments();var r=this.parseDict(),n=this.context;n.trailerInfo={Root:r.get(m.of("Root"))||n.trailerInfo.Root,Encrypt:r.get(m.of("Encrypt"))||n.trailerInfo.Encrypt,Info:r.get(m.of("Info"))||n.trailerInfo.Info,ID:r.get(m.of("ID"))||n.trailerInfo.ID}}},t.prototype.maybeParseTrailer=function(){if(this.skipWhitespaceAndComments(),!!this.matchKeyword(Oe.startxref)){this.skipWhitespaceAndComments();var r=this.parseRawInt();return this.skipWhitespace(),this.matchKeyword(Oe.eof),this.skipWhitespaceAndComments(),this.matchKeyword(Oe.eof),this.skipWhitespaceAndComments(),ws.forLastCrossRefSectionOffset(r)}},t.prototype.parseDocumentSection=function(){return ie(this,void 0,void 0,function(){return ae(this,function(r){switch(r.label){case 0:return[4,this.parseIndirectObjects()];case 1:return r.sent(),this.maybeParseCrossRefSection(),this.maybeParseTrailerDict(),this.maybeParseTrailer(),this.skipJibberish(),[2]}})})},t.prototype.skipJibberish=function(){for(this.skipWhitespaceAndComments();!this.bytes.done();){var r=this.bytes.offset(),n=this.bytes.peek(),i=n>=b.Space&&n<=b.Tilde;if(i&&(this.matchKeyword(Oe.xref)||this.matchKeyword(Oe.trailer)||this.matchKeyword(Oe.startxref)||this.matchIndirectObjectHeader())){this.bytes.moveTo(r);break}this.bytes.next()}},t.prototype.skipBinaryHeaderComment=function(){this.skipWhitespaceAndComments();try{var r=this.bytes.offset();this.parseIndirectObjectHeader(),this.bytes.moveTo(r)}catch{this.bytes.next(),this.skipWhitespaceAndComments()}},t.forBytesWithOptions=function(r,n,i,a){return new t(r,n,i,a)},t}(hc),Ht=function(e){return 1<<e},ci;(function(e){e[e.Invisible=Ht(1-1)]="Invisible",e[e.Hidden=Ht(2-1)]="Hidden",e[e.Print=Ht(3-1)]="Print",e[e.NoZoom=Ht(4-1)]="NoZoom",e[e.NoRotate=Ht(5-1)]="NoRotate",e[e.NoView=Ht(6-1)]="NoView",e[e.ReadOnly=Ht(7-1)]="ReadOnly",e[e.Locked=Ht(8-1)]="Locked",e[e.ToggleNoView=Ht(9-1)]="ToggleNoView",e[e.LockedContents=Ht(10-1)]="LockedContents"})(ci||(ci={}));var Qa=function(e){return e instanceof m?e:m.of(e)},$=function(e){return e instanceof _?e:_.of(e)},se=function(e){return e instanceof _?e.asNumber():e},kn;(function(e){e.Degrees="degrees",e.Radians="radians"})(kn||(kn={}));var J=function(e){return R(e,"degreeAngle",["number"]),{type:kn.Degrees,angle:e}},vc=kn.Radians,pc=kn.Degrees,gc=function(e){return e*Math.PI/180},Oy=function(e){return e*180/Math.PI},rt=function(e){return e.type===vc?e.angle:e.type===pc?gc(e.angle):Fi("Invalid rotation: "+JSON.stringify(e))},yc=function(e){return e.type===vc?Oy(e.angle):e.type===pc?e.angle:Fi("Invalid rotation: "+JSON.stringify(e))},vr=function(e){e===void 0&&(e=0);var t=e/90%4;return t===0?0:t===1?90:t===2?180:t===3?270:0},an=function(e,t){t===void 0&&(t=0);var r=vr(t);return r===90||r===270?{width:e.height,height:e.width}:{width:e.width,height:e.height}},Ry=function(e,t,r){t===void 0&&(t=0),r===void 0&&(r=0);var n=e.x,i=e.y,a=e.width,o=e.height,l=vr(r),u=t/2;return l===0?{x:n-u,y:i-u,width:a,height:o}:l===90?{x:n-o+u,y:i-u,width:o,height:a}:l===180?{x:n-a+u,y:i-o+u,width:a,height:o}:l===270?{x:n-u,y:i-a+u,width:o,height:a}:{x:n-u,y:i-u,width:a,height:o}},mc=function(){return he.of(ye.ClipNonZero)},Fa=Math.cos,Ca=Math.sin,ka=Math.tan,Ja=function(e,t,r,n,i,a){return he.of(ye.ConcatTransformationMatrix,[$(e),$(t),$(r),$(n),$(i),$(a)])},Tt=function(e,t){return Ja(1,0,0,1,e,t)},xi=function(e,t){return Ja(e,0,0,t,0,0)},Rn=function(e){return Ja(Fa(se(e)),Ca(se(e)),-Ca(se(e)),Fa(se(e)),0,0)},_i=function(e){return Rn(gc(se(e)))},Ps=function(e,t){return Ja(1,ka(se(e)),ka(se(t)),1,0,0)},_a=function(e,t){return he.of(ye.SetLineDashPattern,["["+e.map($).join(" ")+"]",$(t)])},bn;(function(e){e[e.Butt=0]="Butt",e[e.Round=1]="Round",e[e.Projecting=2]="Projecting"})(bn||(bn={}));var $a=function(e){return he.of(ye.SetLineCapStyle,[$(e)])},Fu;(function(e){e[e.Miter=0]="Miter",e[e.Round=1]="Round",e[e.Bevel=2]="Bevel"})(Fu||(Fu={}));var on=function(e){return he.of(ye.SetGraphicsStateParams,[Qa(e)])},Ze=function(){return he.of(ye.PushGraphicsState)},Ye=function(){return he.of(ye.PopGraphicsState)},Di=function(e){return he.of(ye.SetLineWidth,[$(e)])},yt=function(e,t,r,n,i,a){return he.of(ye.AppendBezierCurve,[$(e),$(t),$(r),$(n),$(i),$(a)])},$i=function(e,t,r,n){return he.of(ye.CurveToReplicateInitialPoint,[$(e),$(t),$(r),$(n)])},Mr=function(){return he.of(ye.ClosePath)},Jt=function(e,t){return he.of(ye.MoveTo,[$(e),$(t)])},_e=function(e,t){return he.of(ye.LineTo,[$(e),$(t)])},Ei=function(){return he.of(ye.StrokePath)},Ds=function(){return he.of(ye.FillNonZero)},Es=function(){return he.of(ye.FillNonZeroAndStroke)},bc=function(){return he.of(ye.EndPath)},My=function(){return he.of(ye.NextLine)},xc=function(e){return he.of(ye.ShowText,[e])},wc=function(){return he.of(ye.BeginText)},Sc=function(){return he.of(ye.EndText)},Os=function(e,t){return he.of(ye.SetFontAndSize,[Qa(e),$(t)])},By=function(e){return he.of(ye.SetTextLineHeight,[$(e)])},Cu;(function(e){e[e.Fill=0]="Fill",e[e.Outline=1]="Outline",e[e.FillAndOutline=2]="FillAndOutline",e[e.Invisible=3]="Invisible",e[e.FillAndClip=4]="FillAndClip",e[e.OutlineAndClip=5]="OutlineAndClip",e[e.FillAndOutlineAndClip=6]="FillAndOutlineAndClip",e[e.Clip=7]="Clip"})(Cu||(Cu={}));var Ny=function(e,t,r,n,i,a){return he.of(ye.SetTextMatrix,[$(e),$(t),$(r),$(n),$(i),$(a)])},Fc=function(e,t,r,n,i){return Ny(Fa(se(e)),Ca(se(e))+ka(se(t)),-Ca(se(e))+ka(se(r)),Fa(se(e)),n,i)},Rs=function(e){return he.of(ye.DrawObject,[Qa(e)])},jy=function(e){return he.of(ye.NonStrokingColorGray,[$(e)])},Iy=function(e){return he.of(ye.StrokingColorGray,[$(e)])},zy=function(e,t,r){return he.of(ye.NonStrokingColorRgb,[$(e),$(t),$(r)])},Uy=function(e,t,r){return he.of(ye.StrokingColorRgb,[$(e),$(t),$(r)])},Vy=function(e,t,r,n){return he.of(ye.NonStrokingColorCmyk,[$(e),$(t),$(r),$(n)])},Ly=function(e,t,r,n){return he.of(ye.StrokingColorCmyk,[$(e),$(t),$(r),$(n)])},Cc=function(e){return he.of(ye.BeginMarkedContent,[Qa(e)])},kc=function(){return he.of(ye.EndMarkedContent)},Br;(function(e){e.Grayscale="Grayscale",e.RGB="RGB",e.CMYK="CMYK"})(Br||(Br={}));var Tc=function(e){return gt(e,"gray",0,1),{type:Br.Grayscale,gray:e}},Te=function(e,t,r){return gt(e,"red",0,1),gt(t,"green",0,1),gt(r,"blue",0,1),{type:Br.RGB,red:e,green:t,blue:r}},Ac=function(e,t,r,n){return gt(e,"cyan",0,1),gt(t,"magenta",0,1),gt(r,"yellow",0,1),gt(n,"key",0,1),{type:Br.CMYK,cyan:e,magenta:t,yellow:r,key:n}},Ms=Br.Grayscale,Bs=Br.RGB,Ns=Br.CMYK,sn=function(e){return e.type===Ms?jy(e.gray):e.type===Bs?zy(e.red,e.green,e.blue):e.type===Ns?Vy(e.cyan,e.magenta,e.yellow,e.key):Fi("Invalid color: "+JSON.stringify(e))},Oi=function(e){return e.type===Ms?Iy(e.gray):e.type===Bs?Uy(e.red,e.green,e.blue):e.type===Ns?Ly(e.cyan,e.magenta,e.yellow,e.key):Fi("Invalid color: "+JSON.stringify(e))},ut=function(e,t){return t===void 0&&(t=1),(e==null?void 0:e.length)===1?Tc(e[0]*t):(e==null?void 0:e.length)===3?Te(e[0]*t,e[1]*t,e[2]*t):(e==null?void 0:e.length)===4?Ac(e[0]*t,e[1]*t,e[2]*t,e[3]*t):void 0},ku=function(e){return e.type===Ms?[e.gray]:e.type===Bs?[e.red,e.green,e.blue]:e.type===Ns?[e.cyan,e.magenta,e.yellow,e.key]:Fi("Invalid color: "+JSON.stringify(e))},Z=0,Y=0,ce=0,de=0,Jn=0,_n=0,Tu=new Map([["A",7],["a",7],["C",6],["c",6],["H",1],["h",1],["L",2],["l",2],["M",2],["m",2],["Q",4],["q",4],["S",4],["s",4],["T",2],["t",2],["V",1],["v",1],["Z",0],["z",0]]),Wy=function(e){for(var t,r=[],n=[],i="",a=!1,o=0,l=0,u=e;l<u.length;l++){var s=u[l];if(Tu.has(s))o=Tu.get(s),t&&(i.length>0&&(n[n.length]=+i),r[r.length]={cmd:t,args:n},n=[],i="",a=!1),t=s;else if([" ",","].includes(s)||s==="-"&&i.length>0&&i[i.length-1]!=="e"||s==="."&&a){if(i.length===0)continue;n.length===o?(r[r.length]={cmd:t,args:n},n=[+i],t==="M"&&(t="L"),t==="m"&&(t="l")):n[n.length]=+i,a=s===".",i=["-","."].includes(s)?s:""}else i+=s,s==="."&&(a=!0)}return i.length>0&&(n.length===o?(r[r.length]={cmd:t,args:n},n=[+i],t==="M"&&(t="L"),t==="m"&&(t="l")):n[n.length]=+i),r[r.length]={cmd:t,args:n},r},qy=function(e){Z=Y=ce=de=Jn=_n=0;for(var t=[],r=0;r<e.length;r++){var n=e[r];if(n.cmd&&typeof Au[n.cmd]=="function"){var i=Au[n.cmd](n.args);Array.isArray(i)?t=t.concat(i):t.push(i)}}return t},Au={M:function(e){return Z=e[0],Y=e[1],ce=de=null,Jn=Z,_n=Y,Jt(Z,Y)},m:function(e){return Z+=e[0],Y+=e[1],ce=de=null,Jn=Z,_n=Y,Jt(Z,Y)},C:function(e){return Z=e[4],Y=e[5],ce=e[2],de=e[3],yt(e[0],e[1],e[2],e[3],e[4],e[5])},c:function(e){var t=yt(e[0]+Z,e[1]+Y,e[2]+Z,e[3]+Y,e[4]+Z,e[5]+Y);return ce=Z+e[2],de=Y+e[3],Z+=e[4],Y+=e[5],t},S:function(e){(ce===null||de===null)&&(ce=Z,de=Y);var t=yt(Z-(ce-Z),Y-(de-Y),e[0],e[1],e[2],e[3]);return ce=e[0],de=e[1],Z=e[2],Y=e[3],t},s:function(e){(ce===null||de===null)&&(ce=Z,de=Y);var t=yt(Z-(ce-Z),Y-(de-Y),Z+e[0],Y+e[1],Z+e[2],Y+e[3]);return ce=Z+e[0],de=Y+e[1],Z+=e[2],Y+=e[3],t},Q:function(e){return ce=e[0],de=e[1],Z=e[2],Y=e[3],$i(e[0],e[1],Z,Y)},q:function(e){var t=$i(e[0]+Z,e[1]+Y,e[2]+Z,e[3]+Y);return ce=Z+e[0],de=Y+e[1],Z+=e[2],Y+=e[3],t},T:function(e){ce===null||de===null?(ce=Z,de=Y):(ce=Z-(ce-Z),de=Y-(de-Y));var t=$i(ce,de,e[0],e[1]);return ce=Z-(ce-Z),de=Y-(de-Y),Z=e[0],Y=e[1],t},t:function(e){ce===null||de===null?(ce=Z,de=Y):(ce=Z-(ce-Z),de=Y-(de-Y));var t=$i(ce,de,Z+e[0],Y+e[1]);return Z+=e[0],Y+=e[1],t},A:function(e){var t=Pu(Z,Y,e);return Z=e[5],Y=e[6],t},a:function(e){e[5]+=Z,e[6]+=Y;var t=Pu(Z,Y,e);return Z=e[5],Y=e[6],t},L:function(e){return Z=e[0],Y=e[1],ce=de=null,_e(Z,Y)},l:function(e){return Z+=e[0],Y+=e[1],ce=de=null,_e(Z,Y)},H:function(e){return Z=e[0],ce=de=null,_e(Z,Y)},h:function(e){return Z+=e[0],ce=de=null,_e(Z,Y)},V:function(e){return Y=e[0],ce=de=null,_e(Z,Y)},v:function(e){return Y+=e[0],ce=de=null,_e(Z,Y)},Z:function(){var e=Mr();return Z=Jn,Y=_n,e},z:function(){var e=Mr();return Z=Jn,Y=_n,e}},Pu=function(e,t,r){for(var n=r[0],i=r[1],a=r[2],o=r[3],l=r[4],u=r[5],s=r[6],f=Ky(u,s,n,i,o,l,a,e,t),c=[],d=0,h=f;d<h.length;d++){var p=h[d],v=Gy.apply(void 0,p);c.push(yt.apply(void 0,v))}return c},Ky=function(e,t,r,n,i,a,o,l,u){var s=o*(Math.PI/180),f=Math.sin(s),c=Math.cos(s);r=Math.abs(r),n=Math.abs(n),ce=c*(l-e)*.5+f*(u-t)*.5,de=c*(u-t)*.5-f*(l-e)*.5;var d=ce*ce/(r*r)+de*de/(n*n);d>1&&(d=Math.sqrt(d),r*=d,n*=d);var h=c/r,p=f/r,v=-f/n,y=c/n,g=h*l+p*u,w=v*l+y*u,S=h*e+p*t,P=v*e+y*t,C=(S-g)*(S-g)+(P-w)*(P-w),A=1/C-.25;A<0&&(A=0);var F=Math.sqrt(A);a===i&&(F=-F);var D=.5*(g+S)-F*(P-w),O=.5*(w+P)+F*(S-g),B=Math.atan2(w-O,g-D),k=Math.atan2(P-O,S-D),M=k-B;M<0&&a===1?M+=2*Math.PI:M>0&&a===0&&(M-=2*Math.PI);for(var N=Math.ceil(Math.abs(M/(Math.PI*.5+.001))),T=[],W=0;W<N;W++){var L=B+W*M/N,X=B+(W+1)*M/N;T[W]=[D,O,L,X,r,n,f,c]}return T},Gy=function(e,t,r,n,i,a,o,l){var u=l*i,s=-o*a,f=o*i,c=l*a,d=.5*(n-r),h=8/3*Math.sin(d*.5)*Math.sin(d*.5)/Math.sin(d),p=e+Math.cos(r)-h*Math.sin(r),v=t+Math.sin(r)+h*Math.cos(r),y=e+Math.cos(n),g=t+Math.sin(n),w=y+h*Math.sin(n),S=g-h*Math.cos(n),P=[u*p+s*v,f*p+c*v,u*w+s*S,f*w+c*S,u*y+s*g,f*y+c*g];return P},Hy=function(e){return qy(Wy(e))},Xy=function(e,t){for(var r=[Ze(),t.graphicsState&&on(t.graphicsState),wc(),sn(t.color),Os(t.font,t.size),By(t.lineHeight),Fc(rt(t.rotate),rt(t.xSkew),rt(t.ySkew),t.x,t.y)].filter(Boolean),n=0,i=e.length;n<i;n++)r.push(xc(e[n]),My());return r.push(Sc(),Ye()),r},Pc=function(e,t){return[Ze(),t.graphicsState&&on(t.graphicsState),Tt(t.x,t.y),Rn(rt(t.rotate)),xi(t.width,t.height),Ps(rt(t.xSkew),rt(t.ySkew)),Rs(e),Ye()].filter(Boolean)},Zy=function(e,t){return[Ze(),t.graphicsState&&on(t.graphicsState),Tt(t.x,t.y),Rn(rt(t.rotate)),xi(t.xScale,t.yScale),Ps(rt(t.xSkew),rt(t.ySkew)),Rs(e),Ye()].filter(Boolean)},Yy=function(e){var t,r;return[Ze(),e.graphicsState&&on(e.graphicsState),e.color&&Oi(e.color),Di(e.thickness),_a((t=e.dashArray)!==null&&t!==void 0?t:[],(r=e.dashPhase)!==null&&r!==void 0?r:0),Jt(e.start.x,e.start.y),e.lineCap&&$a(e.lineCap),Jt(e.start.x,e.start.y),_e(e.end.x,e.end.y),Ei(),Ye()].filter(Boolean)},Tn=function(e){var t,r;return[Ze(),e.graphicsState&&on(e.graphicsState),e.color&&sn(e.color),e.borderColor&&Oi(e.borderColor),Di(e.borderWidth),e.borderLineCap&&$a(e.borderLineCap),_a((t=e.borderDashArray)!==null&&t!==void 0?t:[],(r=e.borderDashPhase)!==null&&r!==void 0?r:0),Tt(e.x,e.y),Rn(rt(e.rotate)),Ps(rt(e.xSkew),rt(e.ySkew)),Jt(0,0),_e(0,e.height),_e(e.width,e.height),_e(e.width,0),Mr(),e.color&&e.borderWidth?Es():e.color?Ds():e.borderColor?Ei():Mr(),Ye()].filter(Boolean)},Ta=4*((Math.sqrt(2)-1)/3),Qy=function(e){var t=se(e.x),r=se(e.y),n=se(e.xScale),i=se(e.yScale);t-=n,r-=i;var a=n*Ta,o=i*Ta,l=t+n*2,u=r+i*2,s=t+n,f=r+i;return[Ze(),Jt(t,f),yt(t,f-o,s-a,r,s,r),yt(s+a,r,l,f-o,l,f),yt(l,f+o,s+a,u,s,u),yt(s-a,u,t,f+o,t,f),Ye()]},Jy=function(e){var t=se(e.x),r=se(e.y),n=se(e.xScale),i=se(e.yScale),a=-n,o=-i,l=n*Ta,u=i*Ta,s=a+n*2,f=o+i*2,c=a+n,d=o+i;return[Tt(t,r),Rn(rt(e.rotate)),Jt(a,d),yt(a,d-u,c-l,o,c,o),yt(c+l,o,s,d-u,s,d),yt(s,d+u,c+l,f,c,f),yt(c-l,f,a,d+u,a,d)]},Qo=function(e){var t,r,n;return ge([Ze(),e.graphicsState&&on(e.graphicsState),e.color&&sn(e.color),e.borderColor&&Oi(e.borderColor),Di(e.borderWidth),e.borderLineCap&&$a(e.borderLineCap),_a((t=e.borderDashArray)!==null&&t!==void 0?t:[],(r=e.borderDashPhase)!==null&&r!==void 0?r:0)],e.rotate===void 0?Qy({x:e.x,y:e.y,xScale:e.xScale,yScale:e.yScale}):Jy({x:e.x,y:e.y,xScale:e.xScale,yScale:e.yScale,rotate:(n=e.rotate)!==null&&n!==void 0?n:J(0)}),[e.color&&e.borderWidth?Es():e.color?Ds():e.borderColor?Ei():Mr(),Ye()]).filter(Boolean)},_y=function(e,t){var r,n,i;return ge([Ze(),t.graphicsState&&on(t.graphicsState),Tt(t.x,t.y),Rn(rt((r=t.rotate)!==null&&r!==void 0?r:J(0))),t.scale?xi(t.scale,-t.scale):xi(1,-1),t.color&&sn(t.color),t.borderColor&&Oi(t.borderColor),t.borderWidth&&Di(t.borderWidth),t.borderLineCap&&$a(t.borderLineCap),_a((n=t.borderDashArray)!==null&&n!==void 0?n:[],(i=t.borderDashPhase)!==null&&i!==void 0?i:0)],Hy(e),[t.color&&t.borderWidth?Es():t.color?Ds():t.borderColor?Ei():Mr(),Ye()]).filter(Boolean)},$y=function(e){var t=se(e.size),r=-1+.75,n=-1+.51,i=1-.525,a=1-.31,o=-1+.325,l=-((o-r)*(a-r))/(i-n)+n;return[Ze(),e.color&&Oi(e.color),Di(e.thickness),Tt(e.x,e.y),Jt(o*t,l*t),_e(r*t,n*t),_e(a*t,i*t),Ei(),Ye()].filter(Boolean)},Ir=function(e){return e.rotation===0?[Tt(0,0),_i(0)]:e.rotation===90?[Tt(e.width,0),_i(90)]:e.rotation===180?[Tt(e.width,e.height),_i(180)]:e.rotation===270?[Tt(0,e.height),_i(270)]:[]},ea=function(e){var t=Tn({x:e.x,y:e.y,width:e.width,height:e.height,borderWidth:e.borderWidth,color:e.color,borderColor:e.borderColor,rotate:J(0),xSkew:J(0),ySkew:J(0)});if(!e.filled)return t;var r=se(e.width),n=se(e.height),i=Math.min(r,n)/2,a=$y({x:r/2,y:n/2,size:i,thickness:e.thickness,color:e.markColor});return ge([Ze()],t,a,[Ye()])},ta=function(e){var t=se(e.width),r=se(e.height),n=Math.min(t,r)/2,i=Qo({x:e.x,y:e.y,xScale:n,yScale:n,color:e.color,borderColor:e.borderColor,borderWidth:e.borderWidth});if(!e.filled)return i;var a=Qo({x:e.x,y:e.y,xScale:n*.45,yScale:n*.45,color:e.dotColor,borderColor:void 0,borderWidth:0});return ge([Ze()],i,a,[Ye()])},Du=function(e){var t=se(e.x),r=se(e.y),n=se(e.width),i=se(e.height),a=Tn({x:t,y:r,width:n,height:i,borderWidth:e.borderWidth,color:e.color,borderColor:e.borderColor,rotate:J(0),xSkew:J(0),ySkew:J(0)}),o=js(e.textLines,{color:e.textColor,font:e.font,size:e.fontSize,rotate:J(0),xSkew:J(0),ySkew:J(0)});return ge([Ze()],a,o,[Ye()])},js=function(e,t){for(var r=[wc(),sn(t.color),Os(t.font,t.size)],n=0,i=e.length;n<i;n++){var a=e[n],o=a.encoded,l=a.x,u=a.y;r.push(Fc(rt(t.rotate),rt(t.xSkew),rt(t.ySkew),l,u),xc(o))}return r.push(Sc()),r},Dc=function(e){var t=se(e.x),r=se(e.y),n=se(e.width),i=se(e.height),a=se(e.borderWidth),o=se(e.padding),l=t+a/2+o,u=r+a/2+o,s=n-(a/2+o)*2,f=i-(a/2+o)*2,c=[Jt(l,u),_e(l,u+f),_e(l+s,u+f),_e(l+s,u),Mr(),mc(),bc()],d=Tn({x:t,y:r,width:n,height:i,borderWidth:e.borderWidth,color:e.color,borderColor:e.borderColor,rotate:J(0),xSkew:J(0),ySkew:J(0)}),h=js(e.textLines,{color:e.textColor,font:e.font,size:e.fontSize,rotate:J(0),xSkew:J(0),ySkew:J(0)}),p=ge([Cc("Tx"),Ze()],h,[Ye(),kc()]);return ge([Ze()],d,c,p,[Ye()])},em=function(e){for(var t=se(e.x),r=se(e.y),n=se(e.width),i=se(e.height),a=se(e.lineHeight),o=se(e.borderWidth),l=se(e.padding),u=t+o/2+l,s=r+o/2+l,f=n-(o/2+l)*2,c=i-(o/2+l)*2,d=[Jt(u,s),_e(u,s+c),_e(u+f,s+c),_e(u+f,s),Mr(),mc(),bc()],h=Tn({x:t,y:r,width:n,height:i,borderWidth:e.borderWidth,color:e.color,borderColor:e.borderColor,rotate:J(0),xSkew:J(0),ySkew:J(0)}),p=[],v=0,y=e.selectedLines.length;v<y;v++){var g=e.textLines[e.selectedLines[v]];p.push.apply(p,Tn({x:g.x-l,y:g.y-(a-g.height)/2,width:n-o,height:g.height+(a-g.height)/2,borderWidth:0,color:e.selectedColor,borderColor:void 0,rotate:J(0),xSkew:J(0),ySkew:J(0)}))}var w=js(e.textLines,{color:e.textColor,font:e.font,size:e.fontSize,rotate:J(0),xSkew:J(0),ySkew:J(0)}),S=ge([Cc("Tx"),Ze()],w,[Ye(),kc()]);return ge([Ze()],h,p,d,S,[Ye()])},tm=function(e){K(t,e);function t(){var r=this,n="Input document to `PDFDocument.load` is encrypted. You can use `PDFDocument.load(..., { ignoreEncryption: true })` if you wish to load the document anyways.";return r=e.call(this,n)||this,r}return t}(Error),rm=function(e){K(t,e);function t(){var r=this,n="Input to `PDFDocument.embedFont` was a custom font, but no `fontkit` instance was found. You must register a `fontkit` instance with `PDFDocument.registerFontkit(...)` before embedding custom fonts.";return r=e.call(this,n)||this,r}return t}(Error),nm=function(e){K(t,e);function t(){var r=this,n="A `page` passed to `PDFDocument.addPage` or `PDFDocument.insertPage` was from a different (foreign) PDF document. If you want to copy pages from one PDFDocument to another, you must use `PDFDocument.copyPages(...)` to copy the pages before adding or inserting them.";return r=e.call(this,n)||this,r}return t}(Error),im=function(e){K(t,e);function t(){var r=this,n="PDFDocument has no pages so `PDFDocument.removePage` cannot be called";return r=e.call(this,n)||this,r}return t}(Error),am=function(e){K(t,e);function t(r){var n=this,i='PDFDocument has no form field with the name "'+r+'"';return n=e.call(this,i)||this,n}return t}(Error),qr=function(e){K(t,e);function t(r,n,i){var a,o,l=this,u=n==null?void 0:n.name,s=(o=(a=i==null?void 0:i.constructor)===null||a===void 0?void 0:a.name)!==null&&o!==void 0?o:i,f='Expected field "'+r+'" to be of type '+u+", "+("but it is actually of type "+s);return l=e.call(this,f)||this,l}return t}(Error);(function(e){K(t,e);function t(r){var n=this,i='Failed to select check box due to missing onValue: "'+r+'"';return n=e.call(this,i)||this,n}return t})(Error);var Ec=function(e){K(t,e);function t(r){var n=this,i='A field already exists with the specified name: "'+r+'"';return n=e.call(this,i)||this,n}return t}(Error),om=function(e){K(t,e);function t(r){var n=this,i='Field name contains invalid component: "'+r+'"';return n=e.call(this,i)||this,n}return t}(Error);(function(e){K(t,e);function t(r){var n=this,i='A non-terminal field already exists with the specified name: "'+r+'"';return n=e.call(this,i)||this,n}return t})(Error);var sm=function(e){K(t,e);function t(r){var n=this,i="Reading rich text fields is not supported: Attempted to read rich text field: "+r;return n=e.call(this,i)||this,n}return t}(Error),lm=function(e){K(t,e);function t(r,n){var i=this,a="Failed to layout combed text as lineLength="+r+" is greater than cellCount="+n;return i=e.call(this,a)||this,i}return t}(Error),um=function(e){K(t,e);function t(r,n,i){var a=this,o="Attempted to set text with length="+r+" for TextField with maxLength="+n+" and name="+i;return a=e.call(this,o)||this,a}return t}(Error),fm=function(e){K(t,e);function t(r,n,i){var a=this,o="Attempted to set maxLength="+n+", which is less than "+r+", the length of this field's current value (name="+i+")";return a=e.call(this,o)||this,a}return t}(Error),He;(function(e){e[e.Left=0]="Left",e[e.Center=1]="Center",e[e.Right=2]="Right"})(He||(He={}));var Oc=4,Rc=500,Mc=function(e,t,r,n){n===void 0&&(n=!1);for(var i=Oc;i<Rc;){for(var a=0,o=0,l=e.length;o<l;o++){a+=1;for(var u=e[o],s=u.split(" "),f=r.width,c=0,d=s.length;c<d;c++){var h=c===d-1,p=h?s[c]:s[c]+" ",v=t.widthOfTextAtSize(p,i);f-=v,f<=0&&(a+=1,f=r.width-v)}}if(!n&&a>e.length)return i-1;var y=t.heightAtSize(i),g=y+y*.2,w=g*a;if(w>Math.abs(r.height))return i-1;i+=1}return i},cm=function(e,t,r,n){for(var i=r.width/n,a=r.height,o=Oc,l=L0(e);o<Rc;){for(var u=0,s=l.length;u<s;u++){var f=l[u],c=t.widthOfTextAtSize(f,o)>i*.75;if(c)return o-1}var d=t.heightAtSize(o,{descender:!1});if(d>a)return o-1;o+=1}return o},dm=function(e){for(var t=e.length;t>0;t--)if(/\s/.test(e[t]))return t},hm=function(e,t,r,n){for(var i,a=e.length;a>0;){var o=e.substring(0,a),l=r.encodeText(o),u=r.widthOfTextAtSize(o,n);if(u<t){var s=e.substring(a)||void 0;return{line:o,encoded:l,width:u,remainder:s}}a=(i=dm(o))!==null&&i!==void 0?i:0}return{line:e,encoded:r.encodeText(e),width:r.widthOfTextAtSize(e,n),remainder:void 0}},Bc=function(e,t){var r=t.alignment,n=t.fontSize,i=t.font,a=t.bounds,o=Zu(Si(e));(n===void 0||n===0)&&(n=Mc(o,i,a,!0));for(var l=i.heightAtSize(n),u=l+l*.2,s=[],f=a.x,c=a.y,d=a.x+a.width,h=a.y+a.height,p=a.y+a.height,v=0,y=o.length;v<y;v++)for(var g=o[v];g!==void 0;){var w=hm(g,a.width,i,n),S=w.line,P=w.encoded,C=w.width,A=w.remainder,F=r===He.Left?a.x:r===He.Center?a.x+a.width/2-C/2:r===He.Right?a.x+a.width-C:a.x;p-=u,F<f&&(f=F),p<c&&(c=p),F+C>d&&(d=F+C),p+l>h&&(h=p+l),s.push({text:S,encoded:P,width:C,height:l,x:F,y:p}),g=A==null?void 0:A.trim()}return{fontSize:n,lineHeight:u,lines:s,bounds:{x:f,y:c,width:d-f,height:h-c}}},vm=function(e,t){var r=t.fontSize,n=t.font,i=t.bounds,a=t.cellCount,o=Yu(Si(e));if(o.length>a)throw new lm(o.length,a);(r===void 0||r===0)&&(r=cm(o,n,i,a));for(var l=i.width/a,u=n.heightAtSize(r,{descender:!1}),s=i.y+(i.height/2-u/2),f=[],c=i.x,d=i.y,h=i.x+i.width,p=i.y+i.height,v=0,y=0;v<a;){var g=Qu(o,y),w=g[0],S=g[1],P=n.encodeText(w),C=n.widthOfTextAtSize(w,r),A=i.x+(l*v+l/2),F=A-C/2;F<c&&(c=F),s<d&&(d=s),F+C>h&&(h=F+C),s+u>p&&(p=s+u),f.push({text:o,encoded:P,width:C,height:u,x:F,y:s}),v+=1,y+=S}return{fontSize:r,cells:f,bounds:{x:c,y:d,width:h-c,height:p-d}}},Aa=function(e,t){var r=t.alignment,n=t.fontSize,i=t.font,a=t.bounds,o=Yu(Si(e));(n===void 0||n===0)&&(n=Mc([o],i,a));var l=i.encodeText(o),u=i.widthOfTextAtSize(o,n),s=i.heightAtSize(n,{descender:!1}),f=r===He.Left?a.x:r===He.Center?a.x+a.width/2-u/2:r===He.Right?a.x+a.width-u:a.x,c=a.y+(a.height/2-s/2);return{fontSize:n,line:{text:o,encoded:l,width:u,height:s,x:f,y:c},bounds:{x:f,y:c,width:u,height:s}}},Mn=function(e){return"normal"in e?e:{normal:e}},pm=/\/([^\0\t\n\f\r\ ]+)[\0\t\n\f\r\ ]+(\d*\.\d+|\d+)[\0\t\n\f\r\ ]+Tf/,Nr=function(e){var t,r,n=(t=e.getDefaultAppearance())!==null&&t!==void 0?t:"",i=(r=ls(n,pm).match)!==null&&r!==void 0?r:[],a=Number(i[2]);return isFinite(a)?a:void 0},gm=/(\d*\.\d+|\d+)[\0\t\n\f\r\ ]*(\d*\.\d+|\d+)?[\0\t\n\f\r\ ]*(\d*\.\d+|\d+)?[\0\t\n\f\r\ ]*(\d*\.\d+|\d+)?[\0\t\n\f\r\ ]+(g|rg|k)/,Et=function(e){var t,r=(t=e.getDefaultAppearance())!==null&&t!==void 0?t:"",n=ls(r,gm).match,i=n!=null?n:[],a=i[1],o=i[2],l=i[3],u=i[4],s=i[5];if(s==="g"&&a)return Tc(Number(a));if(s==="rg"&&a&&o&&l)return Te(Number(a),Number(o),Number(l));if(s==="k"&&a&&o&&l&&u)return Ac(Number(a),Number(o),Number(l),Number(u))},Ot=function(e,t,r,n){var i;n===void 0&&(n=0);var a=[sn(t).toString(),Os((i=r==null?void 0:r.name)!==null&&i!==void 0?i:"dummy__noop",n).toString()].join(`
`);e.setDefaultAppearance(a)},ym=function(e,t){var r,n,i,a=Et(t),o=Et(e.acroField),l=t.getRectangle(),u=t.getAppearanceCharacteristics(),s=t.getBorderStyle(),f=(r=s==null?void 0:s.getWidth())!==null&&r!==void 0?r:0,c=vr(u==null?void 0:u.getRotation()),d=an(l,c),h=d.width,p=d.height,v=Ir(te(te({},l),{rotation:c})),y=Te(0,0,0),g=(n=ut(u==null?void 0:u.getBorderColor()))!==null&&n!==void 0?n:y,w=ut(u==null?void 0:u.getBackgroundColor()),S=ut(u==null?void 0:u.getBackgroundColor(),.8),P=(i=a!=null?a:o)!==null&&i!==void 0?i:y;Ot(a?t:e.acroField,P);var C={x:0+f/2,y:0+f/2,width:h-f,height:p-f,thickness:1.5,borderWidth:f,borderColor:g,markColor:P};return{normal:{on:ge(v,ea(te(te({},C),{color:w,filled:!0}))),off:ge(v,ea(te(te({},C),{color:w,filled:!1})))},down:{on:ge(v,ea(te(te({},C),{color:S,filled:!0}))),off:ge(v,ea(te(te({},C),{color:S,filled:!1})))}}},mm=function(e,t){var r,n,i,a=Et(t),o=Et(e.acroField),l=t.getRectangle(),u=t.getAppearanceCharacteristics(),s=t.getBorderStyle(),f=(r=s==null?void 0:s.getWidth())!==null&&r!==void 0?r:0,c=vr(u==null?void 0:u.getRotation()),d=an(l,c),h=d.width,p=d.height,v=Ir(te(te({},l),{rotation:c})),y=Te(0,0,0),g=(n=ut(u==null?void 0:u.getBorderColor()))!==null&&n!==void 0?n:y,w=ut(u==null?void 0:u.getBackgroundColor()),S=ut(u==null?void 0:u.getBackgroundColor(),.8),P=(i=a!=null?a:o)!==null&&i!==void 0?i:y;Ot(a?t:e.acroField,P);var C={x:h/2,y:p/2,width:h-f,height:p-f,borderWidth:f,borderColor:g,dotColor:P};return{normal:{on:ge(v,ta(te(te({},C),{color:w,filled:!0}))),off:ge(v,ta(te(te({},C),{color:w,filled:!1})))},down:{on:ge(v,ta(te(te({},C),{color:S,filled:!0}))),off:ge(v,ta(te(te({},C),{color:S,filled:!1})))}}},bm=function(e,t,r){var n,i,a,o,l,u=Et(t),s=Et(e.acroField),f=Nr(t),c=Nr(e.acroField),d=t.getRectangle(),h=t.getAppearanceCharacteristics(),p=t.getBorderStyle(),v=h==null?void 0:h.getCaptions(),y=(n=v==null?void 0:v.normal)!==null&&n!==void 0?n:"",g=(a=(i=v==null?void 0:v.down)!==null&&i!==void 0?i:y)!==null&&a!==void 0?a:"",w=(o=p==null?void 0:p.getWidth())!==null&&o!==void 0?o:0,S=vr(h==null?void 0:h.getRotation()),P=an(d,S),C=P.width,A=P.height,F=Ir(te(te({},d),{rotation:S})),D=Te(0,0,0),O=ut(h==null?void 0:h.getBorderColor()),B=ut(h==null?void 0:h.getBackgroundColor()),k=ut(h==null?void 0:h.getBackgroundColor(),.8),M={x:w,y:w,width:C-w*2,height:A-w*2},N=Aa(y,{alignment:He.Center,fontSize:f!=null?f:c,font:r,bounds:M}),T=Aa(g,{alignment:He.Center,fontSize:f!=null?f:c,font:r,bounds:M}),W=Math.min(N.fontSize,T.fontSize),L=(l=u!=null?u:s)!==null&&l!==void 0?l:D;Ot(u||f!==void 0?t:e.acroField,L,r,W);var X={x:0+w/2,y:0+w/2,width:C-w,height:A-w,borderWidth:w,borderColor:O,textColor:L,font:r.name,fontSize:W};return{normal:ge(F,Du(te(te({},X),{color:B,textLines:[N.line]}))),down:ge(F,Du(te(te({},X),{color:k,textLines:[T.line]})))}},xm=function(e,t,r){var n,i,a,o,l=Et(t),u=Et(e.acroField),s=Nr(t),f=Nr(e.acroField),c=t.getRectangle(),d=t.getAppearanceCharacteristics(),h=t.getBorderStyle(),p=(n=e.getText())!==null&&n!==void 0?n:"",v=(i=h==null?void 0:h.getWidth())!==null&&i!==void 0?i:0,y=vr(d==null?void 0:d.getRotation()),g=an(c,y),w=g.width,S=g.height,P=Ir(te(te({},c),{rotation:y})),C=Te(0,0,0),A=ut(d==null?void 0:d.getBorderColor()),F=ut(d==null?void 0:d.getBackgroundColor()),D,O,B=e.isCombed()?0:1,k={x:v+B,y:v+B,width:w-(v+B)*2,height:S-(v+B)*2};if(e.isMultiline()){var M=Bc(p,{alignment:e.getAlignment(),fontSize:s!=null?s:f,font:r,bounds:k});D=M.lines,O=M.fontSize}else if(e.isCombed()){var M=vm(p,{fontSize:s!=null?s:f,font:r,bounds:k,cellCount:(a=e.getMaxLength())!==null&&a!==void 0?a:0});D=M.cells,O=M.fontSize}else{var M=Aa(p,{alignment:e.getAlignment(),fontSize:s!=null?s:f,font:r,bounds:k});D=[M.line],O=M.fontSize}var N=(o=l!=null?l:u)!==null&&o!==void 0?o:C;Ot(l||s!==void 0?t:e.acroField,N,r,O);var T={x:0+v/2,y:0+v/2,width:w-v,height:S-v,borderWidth:v!=null?v:0,borderColor:A,textColor:N,font:r.name,fontSize:O,color:F,textLines:D,padding:B};return ge(P,Dc(T))},wm=function(e,t,r){var n,i,a,o=Et(t),l=Et(e.acroField),u=Nr(t),s=Nr(e.acroField),f=t.getRectangle(),c=t.getAppearanceCharacteristics(),d=t.getBorderStyle(),h=(n=e.getSelected()[0])!==null&&n!==void 0?n:"",p=(i=d==null?void 0:d.getWidth())!==null&&i!==void 0?i:0,v=vr(c==null?void 0:c.getRotation()),y=an(f,v),g=y.width,w=y.height,S=Ir(te(te({},f),{rotation:v})),P=Te(0,0,0),C=ut(c==null?void 0:c.getBorderColor()),A=ut(c==null?void 0:c.getBackgroundColor()),F=1,D={x:p+F,y:p+F,width:g-(p+F)*2,height:w-(p+F)*2},O=Aa(h,{alignment:He.Left,fontSize:u!=null?u:s,font:r,bounds:D}),B=O.line,k=O.fontSize,M=(a=o!=null?o:l)!==null&&a!==void 0?a:P;Ot(o||u!==void 0?t:e.acroField,M,r,k);var N={x:0+p/2,y:0+p/2,width:g-p,height:w-p,borderWidth:p!=null?p:0,borderColor:C,textColor:M,font:r.name,fontSize:k,color:A,textLines:[B],padding:F};return ge(S,Dc(N))},Sm=function(e,t,r){var n,i,a=Et(t),o=Et(e.acroField),l=Nr(t),u=Nr(e.acroField),s=t.getRectangle(),f=t.getAppearanceCharacteristics(),c=t.getBorderStyle(),d=(n=c==null?void 0:c.getWidth())!==null&&n!==void 0?n:0,h=vr(f==null?void 0:f.getRotation()),p=an(s,h),v=p.width,y=p.height,g=Ir(te(te({},s),{rotation:h})),w=Te(0,0,0),S=ut(f==null?void 0:f.getBorderColor()),P=ut(f==null?void 0:f.getBackgroundColor()),C=e.getOptions(),A=e.getSelected();e.isSorted()&&C.sort();for(var F="",D=0,O=C.length;D<O;D++)F+=C[D],D<O-1&&(F+=`
`);for(var B=1,k={x:d+B,y:d+B,width:v-(d+B)*2,height:y-(d+B)*2},M=Bc(F,{alignment:He.Left,fontSize:l!=null?l:u,font:r,bounds:k}),N=M.lines,T=M.fontSize,W=M.lineHeight,L=[],D=0,O=N.length;D<O;D++){var X=N[D];A.includes(X.text)&&L.push(D)}var Ee=Te(153/255,193/255,218/255),Pe=(i=a!=null?a:o)!==null&&i!==void 0?i:w;return Ot(a||l!==void 0?t:e.acroField,Pe,r,T),ge(g,em({x:0+d/2,y:0+d/2,width:v-d,height:y-d,borderWidth:d!=null?d:0,borderColor:S,textColor:Pe,font:r.name,fontSize:T,color:P,textLines:N,lineHeight:W,selectedColor:Ee,selectedLines:L,padding:B}))},Nc=function(){function e(t,r,n){this.alreadyEmbedded=!1,R(t,"ref",[[ke,"PDFRef"]]),R(r,"doc",[[cr,"PDFDocument"]]),R(n,"embedder",[[oc,"PDFPageEmbedder"]]),this.ref=t,this.doc=r,this.width=n.width,this.height=n.height,this.embedder=n}return e.prototype.scale=function(t){return R(t,"factor",["number"]),{width:this.width*t,height:this.height*t}},e.prototype.size=function(){return this.scale(1)},e.prototype.embed=function(){return ie(this,void 0,void 0,function(){return ae(this,function(t){switch(t.label){case 0:return this.alreadyEmbedded?[3,2]:[4,this.embedder.embedIntoContext(this.doc.context,this.ref)];case 1:t.sent(),this.alreadyEmbedded=!0,t.label=2;case 2:return[2]}})})},e.of=function(t,r,n){return new e(t,r,n)},e}(),bt=function(){function e(t,r,n){this.modified=!0,R(t,"ref",[[ke,"PDFRef"]]),R(r,"doc",[[cr,"PDFDocument"]]),R(n,"embedder",[[Ss,"CustomFontEmbedder"],[ba,"StandardFontEmbedder"]]),this.ref=t,this.doc=r,this.name=n.fontName,this.embedder=n}return e.prototype.encodeText=function(t){return R(t,"text",["string"]),this.modified=!0,this.embedder.encodeText(t)},e.prototype.widthOfTextAtSize=function(t,r){return R(t,"text",["string"]),R(r,"size",["number"]),this.embedder.widthOfTextAtSize(t,r)},e.prototype.heightAtSize=function(t,r){var n;return R(t,"size",["number"]),q(r==null?void 0:r.descender,"options.descender",["boolean"]),this.embedder.heightOfFontAtSize(t,{descender:(n=r==null?void 0:r.descender)!==null&&n!==void 0?n:!0})},e.prototype.sizeAtHeight=function(t){return R(t,"height",["number"]),this.embedder.sizeOfFontAtHeight(t)},e.prototype.getCharacterSet=function(){return this.embedder instanceof ba?this.embedder.encoding.supportedCodePoints:this.embedder.font.characterSet},e.prototype.embed=function(){return ie(this,void 0,void 0,function(){return ae(this,function(t){switch(t.label){case 0:return this.modified?[4,this.embedder.embedIntoContext(this.doc.context,this.ref)]:[3,2];case 1:t.sent(),this.modified=!1,t.label=2;case 2:return[2]}})})},e.of=function(t,r,n){return new e(t,r,n)},e}(),Jo=function(){function e(t,r,n){R(t,"ref",[[ke,"PDFRef"]]),R(r,"doc",[[cr,"PDFDocument"]]),R(n,"embedder",[[rc,"JpegEmbedder"],[nc,"PngEmbedder"]]),this.ref=t,this.doc=r,this.width=n.width,this.height=n.height,this.embedder=n}return e.prototype.scale=function(t){return R(t,"factor",["number"]),{width:this.width*t,height:this.height*t}},e.prototype.scaleToFit=function(t,r){R(t,"width",["number"]),R(r,"height",["number"]);var n=t/this.width,i=r/this.height,a=Math.min(n,i);return this.scale(a)},e.prototype.size=function(){return this.scale(1)},e.prototype.embed=function(){return ie(this,void 0,void 0,function(){var t,r,n;return ae(this,function(i){switch(i.label){case 0:return this.embedder?(this.embedTask||(t=this,r=t.doc,n=t.ref,this.embedTask=this.embedder.embedIntoContext(r.context,n)),[4,this.embedTask]):[2];case 1:return i.sent(),this.embedder=void 0,[2]}})})},e.of=function(t,r,n){return new e(t,r,n)},e}(),Or;(function(e){e[e.Left=0]="Left",e[e.Center=1]="Center",e[e.Right=2]="Right"})(Or||(Or={}));var Bn=function(e){q(e==null?void 0:e.x,"options.x",["number"]),q(e==null?void 0:e.y,"options.y",["number"]),q(e==null?void 0:e.width,"options.width",["number"]),q(e==null?void 0:e.height,"options.height",["number"]),q(e==null?void 0:e.textColor,"options.textColor",[[Object,"Color"]]),q(e==null?void 0:e.backgroundColor,"options.backgroundColor",[[Object,"Color"]]),q(e==null?void 0:e.borderColor,"options.borderColor",[[Object,"Color"]]),q(e==null?void 0:e.borderWidth,"options.borderWidth",["number"]),q(e==null?void 0:e.rotate,"options.rotate",[[Object,"Rotation"]])},ln=function(){function e(t,r,n){R(t,"acroField",[[On,"PDFAcroTerminal"]]),R(r,"ref",[[ke,"PDFRef"]]),R(n,"doc",[[cr,"PDFDocument"]]),this.acroField=t,this.ref=r,this.doc=n}return e.prototype.getName=function(){var t;return(t=this.acroField.getFullyQualifiedName())!==null&&t!==void 0?t:""},e.prototype.isReadOnly=function(){return this.acroField.hasFlag(jt.ReadOnly)},e.prototype.enableReadOnly=function(){this.acroField.setFlagTo(jt.ReadOnly,!0)},e.prototype.disableReadOnly=function(){this.acroField.setFlagTo(jt.ReadOnly,!1)},e.prototype.isRequired=function(){return this.acroField.hasFlag(jt.Required)},e.prototype.enableRequired=function(){this.acroField.setFlagTo(jt.Required,!0)},e.prototype.disableRequired=function(){this.acroField.setFlagTo(jt.Required,!1)},e.prototype.isExported=function(){return!this.acroField.hasFlag(jt.NoExport)},e.prototype.enableExporting=function(){this.acroField.setFlagTo(jt.NoExport,!1)},e.prototype.disableExporting=function(){this.acroField.setFlagTo(jt.NoExport,!0)},e.prototype.needsAppearancesUpdate=function(){throw new kt(this.constructor.name,"needsAppearancesUpdate")},e.prototype.defaultUpdateAppearances=function(t){throw new kt(this.constructor.name,"defaultUpdateAppearances")},e.prototype.markAsDirty=function(){this.doc.getForm().markFieldAsDirty(this.ref)},e.prototype.markAsClean=function(){this.doc.getForm().markFieldAsClean(this.ref)},e.prototype.isDirty=function(){return this.doc.getForm().fieldIsDirty(this.ref)},e.prototype.createWidget=function(t){var r,n=t.textColor,i=t.backgroundColor,a=t.borderColor,o=t.borderWidth,l=yc(t.rotate),u=t.caption,s=t.x,f=t.y,c=t.width+o,d=t.height+o,h=Boolean(t.hidden),p=t.page;Yf(l,"degreesAngle",90);var v=Zo.create(this.doc.context,this.ref),y=Ry({x:s,y:f,width:c,height:d},o,l);v.setRectangle(y),p&&v.setP(p);var g=v.getOrCreateAppearanceCharacteristics();i&&g.setBackgroundColor(ku(i)),g.setRotation(l),u&&g.setCaptions({normal:u}),a&&g.setBorderColor(ku(a));var w=v.getOrCreateBorderStyle();if(o!==void 0&&w.setWidth(o),v.setFlagTo(ci.Print,!0),v.setFlagTo(ci.Hidden,h),v.setFlagTo(ci.Invisible,!1),n){var S=(r=this.acroField.getDefaultAppearance())!==null&&r!==void 0?r:"",P=S+`
`+sn(n).toString();this.acroField.setDefaultAppearance(P)}return v},e.prototype.updateWidgetAppearanceWithFont=function(t,r,n){var i=n.normal,a=n.rollover,o=n.down;this.updateWidgetAppearances(t,{normal:this.createAppearanceStream(t,i,r),rollover:a&&this.createAppearanceStream(t,a,r),down:o&&this.createAppearanceStream(t,o,r)})},e.prototype.updateOnOffWidgetAppearance=function(t,r,n){var i=n.normal,a=n.rollover,o=n.down;this.updateWidgetAppearances(t,{normal:this.createAppearanceDict(t,i,r),rollover:a&&this.createAppearanceDict(t,a,r),down:o&&this.createAppearanceDict(t,o,r)})},e.prototype.updateWidgetAppearances=function(t,r){var n=r.normal,i=r.rollover,a=r.down;t.setNormalAppearance(n),i?t.setRolloverAppearance(i):t.removeRolloverAppearance(),a?t.setDownAppearance(a):t.removeDownAppearance()},e.prototype.createAppearanceStream=function(t,r,n){var i,a=this.acroField.dict.context,o=t.getRectangle(),l=o.width,u=o.height,s=n&&{Font:(i={},i[n.name]=n.ref,i)},f=a.formXObject(r,{Resources:s,BBox:a.obj([0,0,l,u]),Matrix:a.obj([1,0,0,1,0,0])}),c=a.register(f);return c},e.prototype.createImageAppearanceStream=function(t,r,n){var i,a,o=this.acroField.dict.context,l=t.getRectangle(),u=t.getAppearanceCharacteristics(),s=t.getBorderStyle(),f=(a=s==null?void 0:s.getWidth())!==null&&a!==void 0?a:0,c=vr(u==null?void 0:u.getRotation()),d=Ir(te(te({},l),{rotation:c})),h=an(l,c),p=r.scaleToFit(h.width-f*2,h.height-f*2),v={x:f,y:f,width:p.width,height:p.height,rotate:J(0),xSkew:J(0),ySkew:J(0)};n===Or.Center?(v.x+=(h.width-f*2)/2-p.width/2,v.y+=(h.height-f*2)/2-p.height/2):n===Or.Right&&(v.x=h.width-f-p.width,v.y=h.height-f-p.height);var y=this.doc.context.addRandomSuffix("Image",10),g=ge(d,Pc(y,v)),w={XObject:(i={},i[y]=r.ref,i)},S=o.formXObject(g,{Resources:w,BBox:o.obj([0,0,l.width,l.height]),Matrix:o.obj([1,0,0,1,0,0])});return o.register(S)},e.prototype.createAppearanceDict=function(t,r,n){var i=this.acroField.dict.context,a=this.createAppearanceStream(t,r.on),o=this.createAppearanceStream(t,r.off),l=i.obj({});return l.set(n,a),l.set(m.of("Off"),o),l},e}(),$n=function(e){K(t,e);function t(r,n,i){var a=e.call(this,r,n,i)||this;return R(r,"acroCheckBox",[[Wa,"PDFAcroCheckBox"]]),a.acroField=r,a}return t.prototype.check=function(){var r,n=(r=this.acroField.getOnValue())!==null&&r!==void 0?r:m.of("Yes");this.markAsDirty(),this.acroField.setValue(n)},t.prototype.uncheck=function(){this.markAsDirty(),this.acroField.setValue(m.of("Off"))},t.prototype.isChecked=function(){var r=this.acroField.getOnValue();return!!r&&r===this.acroField.getValue()},t.prototype.addToPage=function(r,n){var i,a,o,l,u,s;R(r,"page",[[Ct,"PDFPage"]]),Bn(n),n||(n={}),"textColor"in n||(n.textColor=Te(0,0,0)),"backgroundColor"in n||(n.backgroundColor=Te(1,1,1)),"borderColor"in n||(n.borderColor=Te(0,0,0)),"borderWidth"in n||(n.borderWidth=1);var f=this.createWidget({x:(i=n.x)!==null&&i!==void 0?i:0,y:(a=n.y)!==null&&a!==void 0?a:0,width:(o=n.width)!==null&&o!==void 0?o:50,height:(l=n.height)!==null&&l!==void 0?l:50,textColor:n.textColor,backgroundColor:n.backgroundColor,borderColor:n.borderColor,borderWidth:(u=n.borderWidth)!==null&&u!==void 0?u:0,rotate:(s=n.rotate)!==null&&s!==void 0?s:J(0),hidden:n.hidden,page:r.ref}),c=this.doc.context.register(f.dict);this.acroField.addWidget(c),f.setAppearanceState(m.of("Off")),this.updateWidgetAppearance(f,m.of("Yes")),r.node.addAnnot(c)},t.prototype.needsAppearancesUpdate=function(){for(var r,n=this.acroField.getWidgets(),i=0,a=n.length;i<a;i++){var o=n[i],l=o.getAppearanceState(),u=(r=o.getAppearances())===null||r===void 0?void 0:r.normal;if(!(u instanceof ne)||l&&!u.has(l))return!0}return!1},t.prototype.defaultUpdateAppearances=function(){this.updateAppearances()},t.prototype.updateAppearances=function(r){var n;q(r,"provider",[Function]);for(var i=this.acroField.getWidgets(),a=0,o=i.length;a<o;a++){var l=i[a],u=(n=l.getOnValue())!==null&&n!==void 0?n:m.of("Yes");!u||this.updateWidgetAppearance(l,u,r)}this.markAsClean()},t.prototype.updateWidgetAppearance=function(r,n,i){var a=i!=null?i:ym,o=Mn(a(this,r));this.updateOnOffWidgetAppearance(r,n,o)},t.of=function(r,n,i){return new t(r,n,i)},t}(ln),ua=function(e){K(t,e);function t(r,n,i){var a=e.call(this,r,n,i)||this;return R(r,"acroComboBox",[[qa,"PDFAcroComboBox"]]),a.acroField=r,a}return t.prototype.getOptions=function(){for(var r=this.acroField.getOptions(),n=new Array(r.length),i=0,a=n.length;i<a;i++){var o=r[i],l=o.display,u=o.value;n[i]=(l!=null?l:u).decodeText()}return n},t.prototype.getSelected=function(){for(var r=this.acroField.getValues(),n=new Array(r.length),i=0,a=r.length;i<a;i++)n[i]=r[i].decodeText();return n},t.prototype.setOptions=function(r){R(r,"options",[Array]);for(var n=new Array(r.length),i=0,a=r.length;i<a;i++)n[i]={value:Q.fromText(r[i])};this.acroField.setOptions(n)},t.prototype.addOptions=function(r){R(r,"options",["string",Array]);for(var n=Array.isArray(r)?r:[r],i=this.acroField.getOptions(),a=new Array(n.length),o=0,l=n.length;o<l;o++)a[o]={value:Q.fromText(n[o])};this.acroField.setOptions(i.concat(a))},t.prototype.select=function(r,n){n===void 0&&(n=!1),R(r,"options",["string",Array]),R(n,"merge",["boolean"]);var i=Array.isArray(r)?r:[r],a=this.getOptions(),o=i.find(function(c){return!a.includes(c)});o&&this.enableEditing(),this.markAsDirty(),(i.length>1||i.length===1&&n)&&this.enableMultiselect();for(var l=new Array(i.length),u=0,s=i.length;u<s;u++)l[u]=Q.fromText(i[u]);if(n){var f=this.acroField.getValues();this.acroField.setValues(f.concat(l))}else this.acroField.setValues(l)},t.prototype.clear=function(){this.markAsDirty(),this.acroField.setValues([])},t.prototype.setFontSize=function(r){Va(r,"fontSize"),this.acroField.setFontSize(r),this.markAsDirty()},t.prototype.isEditable=function(){return this.acroField.hasFlag(Fe.Edit)},t.prototype.enableEditing=function(){this.acroField.setFlagTo(Fe.Edit,!0)},t.prototype.disableEditing=function(){this.acroField.setFlagTo(Fe.Edit,!1)},t.prototype.isSorted=function(){return this.acroField.hasFlag(Fe.Sort)},t.prototype.enableSorting=function(){this.acroField.setFlagTo(Fe.Sort,!0)},t.prototype.disableSorting=function(){this.acroField.setFlagTo(Fe.Sort,!1)},t.prototype.isMultiselect=function(){return this.acroField.hasFlag(Fe.MultiSelect)},t.prototype.enableMultiselect=function(){this.acroField.setFlagTo(Fe.MultiSelect,!0)},t.prototype.disableMultiselect=function(){this.acroField.setFlagTo(Fe.MultiSelect,!1)},t.prototype.isSpellChecked=function(){return!this.acroField.hasFlag(Fe.DoNotSpellCheck)},t.prototype.enableSpellChecking=function(){this.acroField.setFlagTo(Fe.DoNotSpellCheck,!1)},t.prototype.disableSpellChecking=function(){this.acroField.setFlagTo(Fe.DoNotSpellCheck,!0)},t.prototype.isSelectOnClick=function(){return this.acroField.hasFlag(Fe.CommitOnSelChange)},t.prototype.enableSelectOnClick=function(){this.acroField.setFlagTo(Fe.CommitOnSelChange,!0)},t.prototype.disableSelectOnClick=function(){this.acroField.setFlagTo(Fe.CommitOnSelChange,!1)},t.prototype.addToPage=function(r,n){var i,a,o,l,u,s,f;R(r,"page",[[Ct,"PDFPage"]]),Bn(n),n||(n={}),"textColor"in n||(n.textColor=Te(0,0,0)),"backgroundColor"in n||(n.backgroundColor=Te(1,1,1)),"borderColor"in n||(n.borderColor=Te(0,0,0)),"borderWidth"in n||(n.borderWidth=1);var c=this.createWidget({x:(i=n.x)!==null&&i!==void 0?i:0,y:(a=n.y)!==null&&a!==void 0?a:0,width:(o=n.width)!==null&&o!==void 0?o:200,height:(l=n.height)!==null&&l!==void 0?l:50,textColor:n.textColor,backgroundColor:n.backgroundColor,borderColor:n.borderColor,borderWidth:(u=n.borderWidth)!==null&&u!==void 0?u:0,rotate:(s=n.rotate)!==null&&s!==void 0?s:J(0),hidden:n.hidden,page:r.ref}),d=this.doc.context.register(c.dict);this.acroField.addWidget(d);var h=(f=n.font)!==null&&f!==void 0?f:this.doc.getForm().getDefaultFont();this.updateWidgetAppearance(c,h),r.node.addAnnot(d)},t.prototype.needsAppearancesUpdate=function(){var r;if(this.isDirty())return!0;for(var n=this.acroField.getWidgets(),i=0,a=n.length;i<a;i++){var o=n[i],l=((r=o.getAppearances())===null||r===void 0?void 0:r.normal)instanceof mt;if(!l)return!0}return!1},t.prototype.defaultUpdateAppearances=function(r){R(r,"font",[[bt,"PDFFont"]]),this.updateAppearances(r)},t.prototype.updateAppearances=function(r,n){R(r,"font",[[bt,"PDFFont"]]),q(n,"provider",[Function]);for(var i=this.acroField.getWidgets(),a=0,o=i.length;a<o;a++){var l=i[a];this.updateWidgetAppearance(l,r,n)}this.markAsClean()},t.prototype.updateWidgetAppearance=function(r,n,i){var a=i!=null?i:wm,o=Mn(a(this,r,n));this.updateWidgetAppearanceWithFont(r,n,o)},t.of=function(r,n,i){return new t(r,n,i)},t}(ln),fa=function(e){K(t,e);function t(r,n,i){var a=e.call(this,r,n,i)||this;return R(r,"acroListBox",[[Xa,"PDFAcroListBox"]]),a.acroField=r,a}return t.prototype.getOptions=function(){for(var r=this.acroField.getOptions(),n=new Array(r.length),i=0,a=n.length;i<a;i++){var o=r[i],l=o.display,u=o.value;n[i]=(l!=null?l:u).decodeText()}return n},t.prototype.getSelected=function(){for(var r=this.acroField.getValues(),n=new Array(r.length),i=0,a=r.length;i<a;i++)n[i]=r[i].decodeText();return n},t.prototype.setOptions=function(r){R(r,"options",[Array]),this.markAsDirty();for(var n=new Array(r.length),i=0,a=r.length;i<a;i++)n[i]={value:Q.fromText(r[i])};this.acroField.setOptions(n)},t.prototype.addOptions=function(r){R(r,"options",["string",Array]),this.markAsDirty();for(var n=Array.isArray(r)?r:[r],i=this.acroField.getOptions(),a=new Array(n.length),o=0,l=n.length;o<l;o++)a[o]={value:Q.fromText(n[o])};this.acroField.setOptions(i.concat(a))},t.prototype.select=function(r,n){n===void 0&&(n=!1),R(r,"options",["string",Array]),R(n,"merge",["boolean"]);var i=Array.isArray(r)?r:[r],a=this.getOptions();xg(i,"option",a),this.markAsDirty(),(i.length>1||i.length===1&&n)&&this.enableMultiselect();for(var o=new Array(i.length),l=0,u=i.length;l<u;l++)o[l]=Q.fromText(i[l]);if(n){var s=this.acroField.getValues();this.acroField.setValues(s.concat(o))}else this.acroField.setValues(o)},t.prototype.clear=function(){this.markAsDirty(),this.acroField.setValues([])},t.prototype.setFontSize=function(r){Va(r,"fontSize"),this.acroField.setFontSize(r),this.markAsDirty()},t.prototype.isSorted=function(){return this.acroField.hasFlag(Fe.Sort)},t.prototype.enableSorting=function(){this.acroField.setFlagTo(Fe.Sort,!0)},t.prototype.disableSorting=function(){this.acroField.setFlagTo(Fe.Sort,!1)},t.prototype.isMultiselect=function(){return this.acroField.hasFlag(Fe.MultiSelect)},t.prototype.enableMultiselect=function(){this.acroField.setFlagTo(Fe.MultiSelect,!0)},t.prototype.disableMultiselect=function(){this.acroField.setFlagTo(Fe.MultiSelect,!1)},t.prototype.isSelectOnClick=function(){return this.acroField.hasFlag(Fe.CommitOnSelChange)},t.prototype.enableSelectOnClick=function(){this.acroField.setFlagTo(Fe.CommitOnSelChange,!0)},t.prototype.disableSelectOnClick=function(){this.acroField.setFlagTo(Fe.CommitOnSelChange,!1)},t.prototype.addToPage=function(r,n){var i,a,o,l,u,s,f;R(r,"page",[[Ct,"PDFPage"]]),Bn(n),n||(n={}),"textColor"in n||(n.textColor=Te(0,0,0)),"backgroundColor"in n||(n.backgroundColor=Te(1,1,1)),"borderColor"in n||(n.borderColor=Te(0,0,0)),"borderWidth"in n||(n.borderWidth=1);var c=this.createWidget({x:(i=n.x)!==null&&i!==void 0?i:0,y:(a=n.y)!==null&&a!==void 0?a:0,width:(o=n.width)!==null&&o!==void 0?o:200,height:(l=n.height)!==null&&l!==void 0?l:100,textColor:n.textColor,backgroundColor:n.backgroundColor,borderColor:n.borderColor,borderWidth:(u=n.borderWidth)!==null&&u!==void 0?u:0,rotate:(s=n.rotate)!==null&&s!==void 0?s:J(0),hidden:n.hidden,page:r.ref}),d=this.doc.context.register(c.dict);this.acroField.addWidget(d);var h=(f=n.font)!==null&&f!==void 0?f:this.doc.getForm().getDefaultFont();this.updateWidgetAppearance(c,h),r.node.addAnnot(d)},t.prototype.needsAppearancesUpdate=function(){var r;if(this.isDirty())return!0;for(var n=this.acroField.getWidgets(),i=0,a=n.length;i<a;i++){var o=n[i],l=((r=o.getAppearances())===null||r===void 0?void 0:r.normal)instanceof mt;if(!l)return!0}return!1},t.prototype.defaultUpdateAppearances=function(r){R(r,"font",[[bt,"PDFFont"]]),this.updateAppearances(r)},t.prototype.updateAppearances=function(r,n){R(r,"font",[[bt,"PDFFont"]]),q(n,"provider",[Function]);for(var i=this.acroField.getWidgets(),a=0,o=i.length;a<o;a++){var l=i[a];this.updateWidgetAppearance(l,r,n)}this.markAsClean()},t.prototype.updateWidgetAppearance=function(r,n,i){var a=i!=null?i:Sm,o=Mn(a(this,r,n));this.updateWidgetAppearanceWithFont(r,n,o)},t.of=function(r,n,i){return new t(r,n,i)},t}(ln),ei=function(e){K(t,e);function t(r,n,i){var a=e.call(this,r,n,i)||this;return R(r,"acroRadioButton",[[Ha,"PDFAcroRadioButton"]]),a.acroField=r,a}return t.prototype.getOptions=function(){var r=this.acroField.getExportValues();if(r){for(var n=new Array(r.length),i=0,a=r.length;i<a;i++)n[i]=r[i].decodeText();return n}for(var o=this.acroField.getOnValues(),l=new Array(o.length),i=0,a=l.length;i<a;i++)l[i]=o[i].decodeText();return l},t.prototype.getSelected=function(){var r=this.acroField.getValue();if(r!==m.of("Off")){var n=this.acroField.getExportValues();if(n){for(var i=this.acroField.getOnValues(),a=0,o=i.length;a<o;a++)if(i[a]===r)return n[a].decodeText()}return r.decodeText()}},t.prototype.select=function(r){R(r,"option",["string"]);var n=this.getOptions();Pr(r,"option",n),this.markAsDirty();var i=this.acroField.getOnValues(),a=this.acroField.getExportValues();if(a)for(var o=0,l=a.length;o<l;o++)a[o].decodeText()===r&&this.acroField.setValue(i[o]);else for(var o=0,l=i.length;o<l;o++){var u=i[o];u.decodeText()===r&&this.acroField.setValue(u)}},t.prototype.clear=function(){this.markAsDirty(),this.acroField.setValue(m.of("Off"))},t.prototype.isOffToggleable=function(){return!this.acroField.hasFlag(Ft.NoToggleToOff)},t.prototype.enableOffToggling=function(){this.acroField.setFlagTo(Ft.NoToggleToOff,!1)},t.prototype.disableOffToggling=function(){this.acroField.setFlagTo(Ft.NoToggleToOff,!0)},t.prototype.isMutuallyExclusive=function(){return!this.acroField.hasFlag(Ft.RadiosInUnison)},t.prototype.enableMutualExclusion=function(){this.acroField.setFlagTo(Ft.RadiosInUnison,!1)},t.prototype.disableMutualExclusion=function(){this.acroField.setFlagTo(Ft.RadiosInUnison,!0)},t.prototype.addOptionToPage=function(r,n,i){var a,o,l,u,s,f,c,d,h;R(r,"option",["string"]),R(n,"page",[[Ct,"PDFPage"]]),Bn(i);var p=this.createWidget({x:(a=i==null?void 0:i.x)!==null&&a!==void 0?a:0,y:(o=i==null?void 0:i.y)!==null&&o!==void 0?o:0,width:(l=i==null?void 0:i.width)!==null&&l!==void 0?l:50,height:(u=i==null?void 0:i.height)!==null&&u!==void 0?u:50,textColor:(s=i==null?void 0:i.textColor)!==null&&s!==void 0?s:Te(0,0,0),backgroundColor:(f=i==null?void 0:i.backgroundColor)!==null&&f!==void 0?f:Te(1,1,1),borderColor:(c=i==null?void 0:i.borderColor)!==null&&c!==void 0?c:Te(0,0,0),borderWidth:(d=i==null?void 0:i.borderWidth)!==null&&d!==void 0?d:1,rotate:(h=i==null?void 0:i.rotate)!==null&&h!==void 0?h:J(0),hidden:i==null?void 0:i.hidden,page:n.ref}),v=this.doc.context.register(p.dict),y=this.acroField.addWidgetWithOpt(v,Q.fromText(r),!this.isMutuallyExclusive());p.setAppearanceState(m.of("Off")),this.updateWidgetAppearance(p,y),n.node.addAnnot(v)},t.prototype.needsAppearancesUpdate=function(){for(var r,n=this.acroField.getWidgets(),i=0,a=n.length;i<a;i++){var o=n[i],l=o.getAppearanceState(),u=(r=o.getAppearances())===null||r===void 0?void 0:r.normal;if(!(u instanceof ne)||l&&!u.has(l))return!0}return!1},t.prototype.defaultUpdateAppearances=function(){this.updateAppearances()},t.prototype.updateAppearances=function(r){q(r,"provider",[Function]);for(var n=this.acroField.getWidgets(),i=0,a=n.length;i<a;i++){var o=n[i],l=o.getOnValue();!l||this.updateWidgetAppearance(o,l,r)}},t.prototype.updateWidgetAppearance=function(r,n,i){var a=i!=null?i:mm,o=Mn(a(this,r));this.updateOnOffWidgetAppearance(r,n,o)},t.of=function(r,n,i){return new t(r,n,i)},t}(ln),_o=function(e){K(t,e);function t(r,n,i){var a=e.call(this,r,n,i)||this;return R(r,"acroSignature",[[Cs,"PDFAcroSignature"]]),a.acroField=r,a}return t.prototype.needsAppearancesUpdate=function(){return!1},t.of=function(r,n,i){return new t(r,n,i)},t}(ln),ca=function(e){K(t,e);function t(r,n,i){var a=e.call(this,r,n,i)||this;return R(r,"acroText",[[Ka,"PDFAcroText"]]),a.acroField=r,a}return t.prototype.getText=function(){var r=this.acroField.getValue();if(!r&&this.isRichFormatted())throw new sm(this.getName());return r==null?void 0:r.decodeText()},t.prototype.setText=function(r){q(r,"text",["string"]);var n=this.getMaxLength();if(n!==void 0&&r&&r.length>n)throw new um(r.length,n,this.getName());this.markAsDirty(),this.disableRichFormatting(),r?this.acroField.setValue(Q.fromText(r)):this.acroField.removeValue()},t.prototype.getAlignment=function(){var r=this.acroField.getQuadding();return r===0?He.Left:r===1?He.Center:r===2?He.Right:He.Left},t.prototype.setAlignment=function(r){Pr(r,"alignment",He),this.markAsDirty(),this.acroField.setQuadding(r)},t.prototype.getMaxLength=function(){return this.acroField.getMaxLength()},t.prototype.setMaxLength=function(r){if(Nt(r,"maxLength",0,Number.MAX_SAFE_INTEGER),this.markAsDirty(),r===void 0)this.acroField.removeMaxLength();else{var n=this.getText();if(n&&n.length>r)throw new fm(n.length,r,this.getName());this.acroField.setMaxLength(r)}},t.prototype.removeMaxLength=function(){this.markAsDirty(),this.acroField.removeMaxLength()},t.prototype.setImage=function(r){for(var n=this.getAlignment(),i=n===He.Center?Or.Center:n===He.Right?Or.Right:Or.Left,a=this.acroField.getWidgets(),o=0,l=a.length;o<l;o++){var u=a[o],s=this.createImageAppearanceStream(u,r,i);this.updateWidgetAppearances(u,{normal:s})}this.markAsClean()},t.prototype.setFontSize=function(r){Va(r,"fontSize"),this.acroField.setFontSize(r),this.markAsDirty()},t.prototype.isMultiline=function(){return this.acroField.hasFlag(Ue.Multiline)},t.prototype.enableMultiline=function(){this.markAsDirty(),this.acroField.setFlagTo(Ue.Multiline,!0)},t.prototype.disableMultiline=function(){this.markAsDirty(),this.acroField.setFlagTo(Ue.Multiline,!1)},t.prototype.isPassword=function(){return this.acroField.hasFlag(Ue.Password)},t.prototype.enablePassword=function(){this.acroField.setFlagTo(Ue.Password,!0)},t.prototype.disablePassword=function(){this.acroField.setFlagTo(Ue.Password,!1)},t.prototype.isFileSelector=function(){return this.acroField.hasFlag(Ue.FileSelect)},t.prototype.enableFileSelection=function(){this.acroField.setFlagTo(Ue.FileSelect,!0)},t.prototype.disableFileSelection=function(){this.acroField.setFlagTo(Ue.FileSelect,!1)},t.prototype.isSpellChecked=function(){return!this.acroField.hasFlag(Ue.DoNotSpellCheck)},t.prototype.enableSpellChecking=function(){this.acroField.setFlagTo(Ue.DoNotSpellCheck,!1)},t.prototype.disableSpellChecking=function(){this.acroField.setFlagTo(Ue.DoNotSpellCheck,!0)},t.prototype.isScrollable=function(){return!this.acroField.hasFlag(Ue.DoNotScroll)},t.prototype.enableScrolling=function(){this.acroField.setFlagTo(Ue.DoNotScroll,!1)},t.prototype.disableScrolling=function(){this.acroField.setFlagTo(Ue.DoNotScroll,!0)},t.prototype.isCombed=function(){return this.acroField.hasFlag(Ue.Comb)&&!this.isMultiline()&&!this.isPassword()&&!this.isFileSelector()&&this.getMaxLength()!==void 0},t.prototype.enableCombing=function(){if(this.getMaxLength()===void 0){var r="PDFTextFields must have a max length in order to be combed";console.warn(r)}this.markAsDirty(),this.disableMultiline(),this.disablePassword(),this.disableFileSelection(),this.acroField.setFlagTo(Ue.Comb,!0)},t.prototype.disableCombing=function(){this.markAsDirty(),this.acroField.setFlagTo(Ue.Comb,!1)},t.prototype.isRichFormatted=function(){return this.acroField.hasFlag(Ue.RichText)},t.prototype.enableRichFormatting=function(){this.acroField.setFlagTo(Ue.RichText,!0)},t.prototype.disableRichFormatting=function(){this.acroField.setFlagTo(Ue.RichText,!1)},t.prototype.addToPage=function(r,n){var i,a,o,l,u,s,f;R(r,"page",[[Ct,"PDFPage"]]),Bn(n),n||(n={}),"textColor"in n||(n.textColor=Te(0,0,0)),"backgroundColor"in n||(n.backgroundColor=Te(1,1,1)),"borderColor"in n||(n.borderColor=Te(0,0,0)),"borderWidth"in n||(n.borderWidth=1);var c=this.createWidget({x:(i=n.x)!==null&&i!==void 0?i:0,y:(a=n.y)!==null&&a!==void 0?a:0,width:(o=n.width)!==null&&o!==void 0?o:200,height:(l=n.height)!==null&&l!==void 0?l:50,textColor:n.textColor,backgroundColor:n.backgroundColor,borderColor:n.borderColor,borderWidth:(u=n.borderWidth)!==null&&u!==void 0?u:0,rotate:(s=n.rotate)!==null&&s!==void 0?s:J(0),hidden:n.hidden,page:r.ref}),d=this.doc.context.register(c.dict);this.acroField.addWidget(d);var h=(f=n.font)!==null&&f!==void 0?f:this.doc.getForm().getDefaultFont();this.updateWidgetAppearance(c,h),r.node.addAnnot(d)},t.prototype.needsAppearancesUpdate=function(){var r;if(this.isDirty())return!0;for(var n=this.acroField.getWidgets(),i=0,a=n.length;i<a;i++){var o=n[i],l=((r=o.getAppearances())===null||r===void 0?void 0:r.normal)instanceof mt;if(!l)return!0}return!1},t.prototype.defaultUpdateAppearances=function(r){R(r,"font",[[bt,"PDFFont"]]),this.updateAppearances(r)},t.prototype.updateAppearances=function(r,n){R(r,"font",[[bt,"PDFFont"]]),q(n,"provider",[Function]);for(var i=this.acroField.getWidgets(),a=0,o=i.length;a<o;a++){var l=i[a];this.updateWidgetAppearance(l,r,n)}this.markAsClean()},t.prototype.updateWidgetAppearance=function(r,n,i){var a=i!=null?i:xm,o=Mn(a(this,r,n));this.updateWidgetAppearanceWithFont(r,n,o)},t.of=function(r,n,i){return new t(r,n,i)},t}(ln),Pa;(function(e){e.Courier="Courier",e.CourierBold="Courier-Bold",e.CourierOblique="Courier-Oblique",e.CourierBoldOblique="Courier-BoldOblique",e.Helvetica="Helvetica",e.HelveticaBold="Helvetica-Bold",e.HelveticaOblique="Helvetica-Oblique",e.HelveticaBoldOblique="Helvetica-BoldOblique",e.TimesRoman="Times-Roman",e.TimesRomanBold="Times-Bold",e.TimesRomanItalic="Times-Italic",e.TimesRomanBoldItalic="Times-BoldItalic",e.Symbol="Symbol",e.ZapfDingbats="ZapfDingbats"})(Pa||(Pa={}));var Fm=function(){function e(t,r){var n=this;this.embedDefaultFont=function(){return n.doc.embedStandardFont(Pa.Helvetica)},R(t,"acroForm",[[Sa,"PDFAcroForm"]]),R(r,"doc",[[cr,"PDFDocument"]]),this.acroForm=t,this.doc=r,this.dirtyFields=new Set,this.defaultFontCache=ur.populatedBy(this.embedDefaultFont)}return e.prototype.hasXFA=function(){return this.acroForm.dict.has(m.of("XFA"))},e.prototype.deleteXFA=function(){this.acroForm.dict.delete(m.of("XFA"))},e.prototype.getFields=function(){for(var t=this.acroForm.getAllFields(),r=[],n=0,i=t.length;n<i;n++){var a=t[n],o=a[0],l=a[1],u=Cm(o,l,this.doc);u&&r.push(u)}return r},e.prototype.getFieldMaybe=function(t){R(t,"name",["string"]);for(var r=this.getFields(),n=0,i=r.length;n<i;n++){var a=r[n];if(a.getName()===t)return a}},e.prototype.getField=function(t){R(t,"name",["string"]);var r=this.getFieldMaybe(t);if(r)return r;throw new am(t)},e.prototype.getButton=function(t){R(t,"name",["string"]);var r=this.getField(t);if(r instanceof da)return r;throw new qr(t,da,r)},e.prototype.getCheckBox=function(t){R(t,"name",["string"]);var r=this.getField(t);if(r instanceof $n)return r;throw new qr(t,$n,r)},e.prototype.getDropdown=function(t){R(t,"name",["string"]);var r=this.getField(t);if(r instanceof ua)return r;throw new qr(t,ua,r)},e.prototype.getOptionList=function(t){R(t,"name",["string"]);var r=this.getField(t);if(r instanceof fa)return r;throw new qr(t,fa,r)},e.prototype.getRadioGroup=function(t){R(t,"name",["string"]);var r=this.getField(t);if(r instanceof ei)return r;throw new qr(t,ei,r)},e.prototype.getSignature=function(t){R(t,"name",["string"]);var r=this.getField(t);if(r instanceof _o)return r;throw new qr(t,_o,r)},e.prototype.getTextField=function(t){R(t,"name",["string"]);var r=this.getField(t);if(r instanceof ca)return r;throw new qr(t,ca,r)},e.prototype.createButton=function(t){R(t,"name",["string"]);var r=vn(t),n=this.findOrCreateNonTerminals(r.nonTerminal),i=Ga.create(this.doc.context);return i.setPartialName(r.terminal),pn(n,[i,i.ref],r.terminal),da.of(i,i.ref,this.doc)},e.prototype.createCheckBox=function(t){R(t,"name",["string"]);var r=vn(t),n=this.findOrCreateNonTerminals(r.nonTerminal),i=Wa.create(this.doc.context);return i.setPartialName(r.terminal),pn(n,[i,i.ref],r.terminal),$n.of(i,i.ref,this.doc)},e.prototype.createDropdown=function(t){R(t,"name",["string"]);var r=vn(t),n=this.findOrCreateNonTerminals(r.nonTerminal),i=qa.create(this.doc.context);return i.setPartialName(r.terminal),pn(n,[i,i.ref],r.terminal),ua.of(i,i.ref,this.doc)},e.prototype.createOptionList=function(t){R(t,"name",["string"]);var r=vn(t),n=this.findOrCreateNonTerminals(r.nonTerminal),i=Xa.create(this.doc.context);return i.setPartialName(r.terminal),pn(n,[i,i.ref],r.terminal),fa.of(i,i.ref,this.doc)},e.prototype.createRadioGroup=function(t){R(t,"name",["string"]);var r=vn(t),n=this.findOrCreateNonTerminals(r.nonTerminal),i=Ha.create(this.doc.context);return i.setPartialName(r.terminal),pn(n,[i,i.ref],r.terminal),ei.of(i,i.ref,this.doc)},e.prototype.createTextField=function(t){R(t,"name",["string"]);var r=vn(t),n=this.findOrCreateNonTerminals(r.nonTerminal),i=Ka.create(this.doc.context);return i.setPartialName(r.terminal),pn(n,[i,i.ref],r.terminal),ca.of(i,i.ref,this.doc)},e.prototype.flatten=function(t){t===void 0&&(t={updateFieldAppearances:!0}),t.updateFieldAppearances&&this.updateFieldAppearances();for(var r=this.getFields(),n=0,i=r.length;n<i;n++){for(var a=r[n],o=a.acroField.getWidgets(),l=0,u=o.length;l<u;l++){var s=o[l],f=this.findWidgetPage(s),c=this.findWidgetAppearanceRef(a,s),d=f.node.newXObject("FlatWidget",c),h=s.getRectangle(),p=ge([Ze(),Tt(h.x,h.y)],Ir(te(te({},h),{rotation:0})),[Rs(d),Ye()]).filter(Boolean);f.pushOperators.apply(f,p)}this.removeField(a)}},e.prototype.removeField=function(t){for(var r=t.acroField.getWidgets(),n=new Set,i=0,a=r.length;i<a;i++){var o=r[i],l=this.findWidgetAppearanceRef(t,o),u=this.findWidgetPage(o);n.add(u),u.node.removeAnnot(l)}n.forEach(function(h){return h.node.removeAnnot(t.ref)}),this.acroForm.removeField(t.acroField);for(var s=t.acroField.normalizedEntries().Kids,f=s.size(),c=0;c<f;c++){var d=s.get(c);d instanceof ke&&this.doc.context.delete(d)}this.doc.context.delete(t.ref)},e.prototype.updateFieldAppearances=function(t){q(t,"font",[[bt,"PDFFont"]]),t=t!=null?t:this.getDefaultFont();for(var r=this.getFields(),n=0,i=r.length;n<i;n++){var a=r[n];a.needsAppearancesUpdate()&&a.defaultUpdateAppearances(t)}},e.prototype.markFieldAsDirty=function(t){q(t,"fieldRef",[[ke,"PDFRef"]]),this.dirtyFields.add(t)},e.prototype.markFieldAsClean=function(t){q(t,"fieldRef",[[ke,"PDFRef"]]),this.dirtyFields.delete(t)},e.prototype.fieldIsDirty=function(t){return q(t,"fieldRef",[[ke,"PDFRef"]]),this.dirtyFields.has(t)},e.prototype.getDefaultFont=function(){return this.defaultFontCache.access()},e.prototype.findWidgetPage=function(t){var r=t.P(),n=this.doc.getPages().find(function(a){return a.ref===r});if(n===void 0){var i=this.doc.context.getObjectRef(t.dict);if(i===void 0)throw new Error("Could not find PDFRef for PDFObject");if(n=this.doc.findPageForAnnotationRef(i),n===void 0)throw new Error("Could not find page for PDFRef "+i)}return n},e.prototype.findWidgetAppearanceRef=function(t,r){var n,i=r.getNormalAppearance();if(i instanceof ne&&(t instanceof $n||t instanceof ei)){var a=t.acroField.getValue(),o=(n=i.get(a))!==null&&n!==void 0?n:i.get(m.of("Off"));o instanceof ke&&(i=o)}if(!(i instanceof ke)){var l=t.getName();throw new Error("Failed to extract appearance ref for: "+l)}return i},e.prototype.findOrCreateNonTerminals=function(t){for(var r=[this.acroForm],n=0,i=t.length;n<i;n++){var a=t[n];if(!a)throw new om(a);var o=r[0],l=r[1],u=this.findNonTerminal(a,o);if(u)r=u;else{var s=wa.create(this.doc.context);s.setPartialName(a),s.setParent(l);var f=this.doc.context.register(s.dict);o.addField(f),r=[s,f]}}return r},e.prototype.findNonTerminal=function(t,r){for(var n=r instanceof Sa?this.acroForm.getFields():ks(r.Kids()),i=0,a=n.length;i<a;i++){var o=n[i],l=o[0],u=o[1];if(l.getPartialName()===t){if(l instanceof wa)return[l,u];throw new Ec(t)}}},e.of=function(t,r){return new e(t,r)},e}(),Cm=function(e,t,r){if(e instanceof Ga)return da.of(e,t,r);if(e instanceof Wa)return $n.of(e,t,r);if(e instanceof qa)return ua.of(e,t,r);if(e instanceof Xa)return fa.of(e,t,r);if(e instanceof Ka)return ca.of(e,t,r);if(e instanceof Ha)return ei.of(e,t,r);if(e instanceof Cs)return _o.of(e,t,r)},vn=function(e){if(e.length===0)throw new Error("PDF field names must not be empty strings");for(var t=e.split("."),r=0,n=t.length;r<n;r++)if(t[r]==="")throw new Error('Periods in PDF field names must be separated by at least one character: "'+e+'"');return t.length===1?{nonTerminal:[],terminal:t[0]}:{nonTerminal:t.slice(0,t.length-1),terminal:t[t.length-1]}},pn=function(e,t,r){for(var n=e[0],i=e[1],a=t[0],o=t[1],l=n.normalizedEntries(),u=ks("Kids"in l?l.Kids:l.Fields),s=0,f=u.length;s<f;s++)if(u[s][0].getPartialName()===r)throw new Ec(r);n.addField(o),a.setParent(i)},km={"4A0":[4767.87,6740.79],"2A0":[3370.39,4767.87],A0:[2383.94,3370.39],A1:[1683.78,2383.94],A2:[1190.55,1683.78],A3:[841.89,1190.55],A4:[595.28,841.89],A5:[419.53,595.28],A6:[297.64,419.53],A7:[209.76,297.64],A8:[147.4,209.76],A9:[104.88,147.4],A10:[73.7,104.88],B0:[2834.65,4008.19],B1:[2004.09,2834.65],B2:[1417.32,2004.09],B3:[1000.63,1417.32],B4:[708.66,1000.63],B5:[498.9,708.66],B6:[354.33,498.9],B7:[249.45,354.33],B8:[175.75,249.45],B9:[124.72,175.75],B10:[87.87,124.72],C0:[2599.37,3676.54],C1:[1836.85,2599.37],C2:[1298.27,1836.85],C3:[918.43,1298.27],C4:[649.13,918.43],C5:[459.21,649.13],C6:[323.15,459.21],C7:[229.61,323.15],C8:[161.57,229.61],C9:[113.39,161.57],C10:[79.37,113.39],RA0:[2437.8,3458.27],RA1:[1729.13,2437.8],RA2:[1218.9,1729.13],RA3:[864.57,1218.9],RA4:[609.45,864.57],SRA0:[2551.18,3628.35],SRA1:[1814.17,2551.18],SRA2:[1275.59,1814.17],SRA3:[907.09,1275.59],SRA4:[637.8,907.09],Executive:[521.86,756],Folio:[612,936],Legal:[612,1008],Letter:[612,792],Tabloid:[792,1224]},$o;(function(e){e[e.Fastest=1/0]="Fastest",e[e.Fast=1500]="Fast",e[e.Medium=500]="Medium",e[e.Slow=100]="Slow"})($o||($o={}));var Tm=function(){function e(t,r,n){this.alreadyEmbedded=!1,this.ref=t,this.doc=r,this.embedder=n}return e.prototype.embed=function(){return ie(this,void 0,void 0,function(){var t,r,n,i,a;return ae(this,function(o){switch(o.label){case 0:return this.alreadyEmbedded?[3,2]:[4,this.embedder.embedIntoContext(this.doc.context,this.ref)];case 1:t=o.sent(),this.doc.catalog.has(m.of("Names"))||this.doc.catalog.set(m.of("Names"),this.doc.context.obj({})),r=this.doc.catalog.lookup(m.of("Names"),ne),r.has(m.of("EmbeddedFiles"))||r.set(m.of("EmbeddedFiles"),this.doc.context.obj({})),n=r.lookup(m.of("EmbeddedFiles"),ne),n.has(m.of("Names"))||n.set(m.of("Names"),this.doc.context.obj([])),i=n.lookup(m.of("Names"),be),i.push(Q.fromText(this.embedder.fileName)),i.push(t),this.doc.catalog.has(m.of("AF"))||this.doc.catalog.set(m.of("AF"),this.doc.context.obj([])),a=this.doc.catalog.lookup(m.of("AF"),be),a.push(t),this.alreadyEmbedded=!0,o.label=2;case 2:return[2]}})})},e.of=function(t,r,n){return new e(t,r,n)},e}(),Am=function(){function e(t,r,n){this.alreadyEmbedded=!1,this.ref=t,this.doc=r,this.embedder=n}return e.prototype.embed=function(){return ie(this,void 0,void 0,function(){var t,r,n,i,a,o,l;return ae(this,function(u){switch(u.label){case 0:return this.alreadyEmbedded?[3,2]:(t=this.doc,r=t.catalog,n=t.context,[4,this.embedder.embedIntoContext(this.doc.context,this.ref)]);case 1:i=u.sent(),r.has(m.of("Names"))||r.set(m.of("Names"),n.obj({})),a=r.lookup(m.of("Names"),ne),a.has(m.of("JavaScript"))||a.set(m.of("JavaScript"),n.obj({})),o=a.lookup(m.of("JavaScript"),ne),o.has(m.of("Names"))||o.set(m.of("Names"),n.obj([])),l=o.lookup(m.of("Names"),be),l.push(Q.fromText(this.embedder.scriptName)),l.push(i),this.alreadyEmbedded=!0,u.label=2;case 2:return[2]}})})},e.of=function(t,r,n){return new e(t,r,n)},e}(),Pm=function(){function e(t,r){this.script=t,this.scriptName=r}return e.for=function(t,r){return new e(t,r)},e.prototype.embedIntoContext=function(t,r){return ie(this,void 0,void 0,function(){var n;return ae(this,function(i){return n=t.obj({Type:"Action",S:"JavaScript",JS:Q.fromText(this.script)}),r?(t.assign(r,n),[2,r]):[2,t.register(n)]})})},e}(),cr=function(){function e(t,r,n){var i=this;if(this.defaultWordBreaks=[" "],this.computePages=function(){var a=[];return i.catalog.Pages().traverse(function(o,l){if(o instanceof fr){var u=i.pageMap.get(o);u||(u=Ct.of(o,l,i),i.pageMap.set(o,u)),a.push(u)}}),a},this.getOrCreateForm=function(){var a=i.catalog.getOrCreateAcroForm();return Fm.of(a,i)},R(t,"context",[[Ho,"PDFContext"]]),R(r,"ignoreEncryption",["boolean"]),this.context=t,this.catalog=t.lookup(t.trailerInfo.Root),this.isEncrypted=!!t.lookup(t.trailerInfo.Encrypt),this.pageCache=ur.populatedBy(this.computePages),this.pageMap=new Map,this.formCache=ur.populatedBy(this.getOrCreateForm),this.fonts=[],this.images=[],this.embeddedPages=[],this.embeddedFiles=[],this.javaScripts=[],!r&&this.isEncrypted)throw new tm;n&&this.updateInfoDict()}return e.load=function(t,r){return r===void 0&&(r={}),ie(this,void 0,void 0,function(){var n,i,a,o,l,u,s,f,c,d,h,p;return ae(this,function(v){switch(v.label){case 0:return n=r.ignoreEncryption,i=n===void 0?!1:n,a=r.parseSpeed,o=a===void 0?$o.Slow:a,l=r.throwOnInvalidObject,u=l===void 0?!1:l,s=r.updateMetadata,f=s===void 0?!0:s,c=r.capNumbers,d=c===void 0?!1:c,R(t,"pdf",["string",Uint8Array,ArrayBuffer]),R(i,"ignoreEncryption",["boolean"]),R(o,"parseSpeed",["number"]),R(u,"throwOnInvalidObject",["boolean"]),h=Vn(t),[4,Ey.forBytesWithOptions(h,o,u,d).parseDocument()];case 1:return p=v.sent(),[2,new e(p,i,f)]}})})},e.create=function(t){return t===void 0&&(t={}),ie(this,void 0,void 0,function(){var r,n,i,a,o,l;return ae(this,function(u){return r=t.updateMetadata,n=r===void 0?!0:r,i=Ho.create(),a=dc.withContext(i),o=i.register(a),l=cc.withContextAndPages(i,o),i.trailerInfo.Root=i.register(l),[2,new e(i,!1,n)]})})},e.prototype.registerFontkit=function(t){this.fontkit=t},e.prototype.getForm=function(){var t=this.formCache.access();return t.hasXFA()&&(console.warn("Removing XFA form data as pdf-lib does not support reading or writing XFA"),t.deleteXFA()),t},e.prototype.getTitle=function(){var t=this.getInfoDict().lookup(m.Title);if(!!t)return xr(t),t.decodeText()},e.prototype.getAuthor=function(){var t=this.getInfoDict().lookup(m.Author);if(!!t)return xr(t),t.decodeText()},e.prototype.getSubject=function(){var t=this.getInfoDict().lookup(m.Subject);if(!!t)return xr(t),t.decodeText()},e.prototype.getKeywords=function(){var t=this.getInfoDict().lookup(m.Keywords);if(!!t)return xr(t),t.decodeText()},e.prototype.getCreator=function(){var t=this.getInfoDict().lookup(m.Creator);if(!!t)return xr(t),t.decodeText()},e.prototype.getProducer=function(){var t=this.getInfoDict().lookup(m.Producer);if(!!t)return xr(t),t.decodeText()},e.prototype.getCreationDate=function(){var t=this.getInfoDict().lookup(m.CreationDate);if(!!t)return xr(t),t.decodeDate()},e.prototype.getModificationDate=function(){var t=this.getInfoDict().lookup(m.ModDate);if(!!t)return xr(t),t.decodeDate()},e.prototype.setTitle=function(t,r){R(t,"title",["string"]);var n=m.of("Title");if(this.getInfoDict().set(n,Q.fromText(t)),r!=null&&r.showInWindowTitleBar){var i=this.catalog.getOrCreateViewerPreferences();i.setDisplayDocTitle(!0)}},e.prototype.setAuthor=function(t){R(t,"author",["string"]);var r=m.of("Author");this.getInfoDict().set(r,Q.fromText(t))},e.prototype.setSubject=function(t){R(t,"author",["string"]);var r=m.of("Subject");this.getInfoDict().set(r,Q.fromText(t))},e.prototype.setKeywords=function(t){R(t,"keywords",[Array]);var r=m.of("Keywords");this.getInfoDict().set(r,Q.fromText(t.join(" ")))},e.prototype.setCreator=function(t){R(t,"creator",["string"]);var r=m.of("Creator");this.getInfoDict().set(r,Q.fromText(t))},e.prototype.setProducer=function(t){R(t,"creator",["string"]);var r=m.of("Producer");this.getInfoDict().set(r,Q.fromText(t))},e.prototype.setLanguage=function(t){R(t,"language",["string"]);var r=m.of("Lang");this.catalog.set(r,Ce.of(t))},e.prototype.setCreationDate=function(t){R(t,"creationDate",[[Date,"Date"]]);var r=m.of("CreationDate");this.getInfoDict().set(r,Ce.fromDate(t))},e.prototype.setModificationDate=function(t){R(t,"modificationDate",[[Date,"Date"]]);var r=m.of("ModDate");this.getInfoDict().set(r,Ce.fromDate(t))},e.prototype.getPageCount=function(){return this.pageCount===void 0&&(this.pageCount=this.getPages().length),this.pageCount},e.prototype.getPages=function(){return this.pageCache.access()},e.prototype.getPage=function(t){var r=this.getPages();return gt(t,"index",0,r.length-1),r[t]},e.prototype.getPageIndices=function(){return Q0(0,this.getPageCount())},e.prototype.removePage=function(t){var r=this.getPageCount();if(this.pageCount===0)throw new im;gt(t,"index",0,r-1),this.catalog.removeLeafNode(t),this.pageCount=r-1},e.prototype.addPage=function(t){return R(t,"page",["undefined",[Ct,"PDFPage"],Array]),this.insertPage(this.getPageCount(),t)},e.prototype.insertPage=function(t,r){var n=this.getPageCount();if(gt(t,"index",0,n),R(r,"page",["undefined",[Ct,"PDFPage"],Array]),!r||Array.isArray(r)){var i=Array.isArray(r)?r:km.A4;r=Ct.create(this),r.setSize.apply(r,i)}else if(r.doc!==this)throw new nm;var a=this.catalog.insertLeafNode(r.ref,t);return r.node.setParent(a),this.pageMap.set(r.node,r),this.pageCache.invalidate(),this.pageCount=n+1,r},e.prototype.copyPages=function(t,r){return ie(this,void 0,void 0,function(){var n,i,a,o,l,u,s,f;return ae(this,function(c){switch(c.label){case 0:return R(t,"srcDoc",[[e,"PDFDocument"]]),R(r,"indices",[Array]),[4,t.flush()];case 1:for(c.sent(),n=vu.for(t.context,this.context),i=t.getPages(),a=new Array(r.length),o=0,l=r.length;o<l;o++)u=i[r[o]],s=n.copy(u.node),f=this.context.register(s),a[o]=Ct.of(s,f,this);return[2,a]}})})},e.prototype.copy=function(){return ie(this,void 0,void 0,function(){var t,r,n,i;return ae(this,function(a){switch(a.label){case 0:return[4,e.create()];case 1:return t=a.sent(),[4,t.copyPages(this,this.getPageIndices())];case 2:for(r=a.sent(),n=0,i=r.length;n<i;n++)t.addPage(r[n]);return this.getAuthor()!==void 0&&t.setAuthor(this.getAuthor()),this.getCreationDate()!==void 0&&t.setCreationDate(this.getCreationDate()),this.getCreator()!==void 0&&t.setCreator(this.getCreator()),this.getModificationDate()!==void 0&&t.setModificationDate(this.getModificationDate()),this.getProducer()!==void 0&&t.setProducer(this.getProducer()),this.getSubject()!==void 0&&t.setSubject(this.getSubject()),this.getTitle()!==void 0&&t.setTitle(this.getTitle()),t.defaultWordBreaks=this.defaultWordBreaks,[2,t]}})})},e.prototype.addJavaScript=function(t,r){R(t,"name",["string"]),R(r,"script",["string"]);var n=Pm.for(r,t),i=this.context.nextRef(),a=Am.of(i,this,n);this.javaScripts.push(a)},e.prototype.attach=function(t,r,n){return n===void 0&&(n={}),ie(this,void 0,void 0,function(){var i,a,o,l;return ae(this,function(u){return R(t,"attachment",["string",Uint8Array,ArrayBuffer]),R(r,"name",["string"]),q(n.mimeType,"mimeType",["string"]),q(n.description,"description",["string"]),q(n.creationDate,"options.creationDate",[Date]),q(n.modificationDate,"options.modificationDate",[Date]),St(n.afRelationship,"options.afRelationship",Xo),i=Vn(t),a=ry.for(i,r,n),o=this.context.nextRef(),l=Tm.of(o,this,a),this.embeddedFiles.push(l),[2]})})},e.prototype.embedFont=function(t,r){return r===void 0&&(r={}),ie(this,void 0,void 0,function(){var n,i,a,o,l,u,s,f,c,d;return ae(this,function(h){switch(h.label){case 0:return n=r.subset,i=n===void 0?!1:n,a=r.customName,o=r.features,R(t,"font",["string",Uint8Array,ArrayBuffer]),R(i,"subset",["boolean"]),au(t)?(l=ba.for(t,a),[3,7]):[3,1];case 1:return _0(t)?(u=Vn(t),s=this.assertFontkit(),i?[4,ty.for(s,u,a,o)]:[3,3]):[3,6];case 2:return f=h.sent(),[3,5];case 3:return[4,Ss.for(s,u,a,o)];case 4:f=h.sent(),h.label=5;case 5:return l=f,[3,7];case 6:throw new TypeError("`font` must be one of `StandardFonts | string | Uint8Array | ArrayBuffer`");case 7:return c=this.context.nextRef(),d=bt.of(c,this,l),this.fonts.push(d),[2,d]}})})},e.prototype.embedStandardFont=function(t,r){if(R(t,"font",["string"]),!au(t))throw new TypeError("`font` must be one of type `StandardFonts`");var n=ba.for(t,r),i=this.context.nextRef(),a=bt.of(i,this,n);return this.fonts.push(a),a},e.prototype.embedJpg=function(t){return ie(this,void 0,void 0,function(){var r,n,i,a;return ae(this,function(o){switch(o.label){case 0:return R(t,"jpg",["string",Uint8Array,ArrayBuffer]),r=Vn(t),[4,rc.for(r)];case 1:return n=o.sent(),i=this.context.nextRef(),a=Jo.of(i,this,n),this.images.push(a),[2,a]}})})},e.prototype.embedPng=function(t){return ie(this,void 0,void 0,function(){var r,n,i,a;return ae(this,function(o){switch(o.label){case 0:return R(t,"png",["string",Uint8Array,ArrayBuffer]),r=Vn(t),[4,nc.for(r)];case 1:return n=o.sent(),i=this.context.nextRef(),a=Jo.of(i,this,n),this.images.push(a),[2,a]}})})},e.prototype.embedPdf=function(t,r){return r===void 0&&(r=[0]),ie(this,void 0,void 0,function(){var n,i,a;return ae(this,function(o){switch(o.label){case 0:return R(t,"pdf",["string",Uint8Array,ArrayBuffer,[e,"PDFDocument"]]),R(r,"indices",[Array]),t instanceof e?(i=t,[3,3]):[3,1];case 1:return[4,e.load(t)];case 2:i=o.sent(),o.label=3;case 3:return n=i,a=J0(n.getPages(),r),[2,this.embedPages(a)]}})})},e.prototype.embedPage=function(t,r,n){return ie(this,void 0,void 0,function(){var i;return ae(this,function(a){switch(a.label){case 0:return R(t,"page",[[Ct,"PDFPage"]]),[4,this.embedPages([t],[r],[n])];case 1:return i=a.sent()[0],[2,i]}})})},e.prototype.embedPages=function(t,r,n){return r===void 0&&(r=[]),n===void 0&&(n=[]),ie(this,void 0,void 0,function(){var s,f,i,a,o,l,u,s,f,c,d,h,p,v,y;return ae(this,function(g){switch(g.label){case 0:if(t.length===0)return[2,[]];for(s=0,f=t.length-1;s<f;s++)if(i=t[s],a=t[s+1],i.node.context!==a.node.context)throw new Pg;o=t[0].node.context,l=o===this.context?function(w){return w}:vu.for(o,this.context).copy,u=new Array(t.length),s=0,f=t.length,g.label=1;case 1:return s<f?(c=l(t[s].node),d=r[s],h=n[s],[4,oc.for(c,d,h)]):[3,4];case 2:p=g.sent(),v=this.context.nextRef(),u[s]=Nc.of(v,this,p),g.label=3;case 3:return s++,[3,1];case 4:return(y=this.embeddedPages).push.apply(y,u),[2,u]}})})},e.prototype.flush=function(){return ie(this,void 0,void 0,function(){return ae(this,function(t){switch(t.label){case 0:return[4,this.embedAll(this.fonts)];case 1:return t.sent(),[4,this.embedAll(this.images)];case 2:return t.sent(),[4,this.embedAll(this.embeddedPages)];case 3:return t.sent(),[4,this.embedAll(this.embeddedFiles)];case 4:return t.sent(),[4,this.embedAll(this.javaScripts)];case 5:return t.sent(),[2]}})})},e.prototype.save=function(t){return t===void 0&&(t={}),ie(this,void 0,void 0,function(){var r,n,i,a,o,l,u,s,f,c;return ae(this,function(d){switch(d.label){case 0:return r=t.useObjectStreams,n=r===void 0?!0:r,i=t.addDefaultPage,a=i===void 0?!0:i,o=t.objectsPerTick,l=o===void 0?50:o,u=t.updateFieldAppearances,s=u===void 0?!0:u,R(n,"useObjectStreams",["boolean"]),R(a,"addDefaultPage",["boolean"]),R(l,"objectsPerTick",["number"]),R(s,"updateFieldAppearances",["boolean"]),a&&this.getPageCount()===0&&this.addPage(),s&&(f=this.formCache.getValue(),f&&f.updateFieldAppearances()),[4,this.flush()];case 1:return d.sent(),c=n?Yg:ec,[2,c.forContext(this.context,l).serializeToBuffer()]}})})},e.prototype.saveAsBase64=function(t){return t===void 0&&(t={}),ie(this,void 0,void 0,function(){var r,n,i,a,o;return ae(this,function(l){switch(l.label){case 0:return r=t.dataUri,n=r===void 0?!1:r,i=B0(t,["dataUri"]),R(n,"dataUri",["boolean"]),[4,this.save(i)];case 1:return a=l.sent(),o=Hu(a),[2,n?"data:application/pdf;base64,"+o:o]}})})},e.prototype.findPageForAnnotationRef=function(t){for(var r=this.getPages(),n=0,i=r.length;n<i;n++){var a=r[n],o=a.node.Annots();if((o==null?void 0:o.indexOf(t))!==void 0)return a}},e.prototype.embedAll=function(t){return ie(this,void 0,void 0,function(){var r,n;return ae(this,function(i){switch(i.label){case 0:r=0,n=t.length,i.label=1;case 1:return r<n?[4,t[r].embed()]:[3,4];case 2:i.sent(),i.label=3;case 3:return r++,[3,1];case 4:return[2]}})})},e.prototype.updateInfoDict=function(){var t="pdf-lib (https://github.com/Hopding/pdf-lib)",r=new Date,n=this.getInfoDict();this.setProducer(t),this.setModificationDate(r),n.get(m.of("Creator"))||this.setCreator(t),n.get(m.of("CreationDate"))||this.setCreationDate(r)},e.prototype.getInfoDict=function(){var t=this.context.lookup(this.context.trailerInfo.Info);if(t instanceof ne)return t;var r=this.context.obj({});return this.context.trailerInfo.Info=this.context.register(r),r},e.prototype.assertFontkit=function(){if(!this.fontkit)throw new rm;return this.fontkit},e}();function xr(e){if(!(e instanceof Q)&&!(e instanceof Ce))throw new ya([Q,Ce],e)}var or;(function(e){e.Normal="Normal",e.Multiply="Multiply",e.Screen="Screen",e.Overlay="Overlay",e.Darken="Darken",e.Lighten="Lighten",e.ColorDodge="ColorDodge",e.ColorBurn="ColorBurn",e.HardLight="HardLight",e.SoftLight="SoftLight",e.Difference="Difference",e.Exclusion="Exclusion"})(or||(or={}));var Ct=function(){function e(t,r,n){this.fontSize=24,this.fontColor=Te(0,0,0),this.lineHeight=24,this.x=0,this.y=0,R(t,"leafNode",[[fr,"PDFPageLeaf"]]),R(r,"ref",[[ke,"PDFRef"]]),R(n,"doc",[[cr,"PDFDocument"]]),this.node=t,this.ref=r,this.doc=n}return e.prototype.setRotation=function(t){var r=yc(t);Yf(r,"degreesAngle",90),this.node.set(m.of("Rotate"),this.doc.context.obj(r))},e.prototype.getRotation=function(){var t=this.node.Rotate();return J(t?t.asNumber():0)},e.prototype.setSize=function(t,r){R(t,"width",["number"]),R(r,"height",["number"]);var n=this.getMediaBox();this.setMediaBox(n.x,n.y,t,r);var i=this.getCropBox(),a=this.getBleedBox(),o=this.getTrimBox(),l=this.getArtBox(),u=this.node.CropBox(),s=this.node.BleedBox(),f=this.node.TrimBox(),c=this.node.ArtBox();u&&Zi(i,n)&&this.setCropBox(n.x,n.y,t,r),s&&Zi(a,n)&&this.setBleedBox(n.x,n.y,t,r),f&&Zi(o,n)&&this.setTrimBox(n.x,n.y,t,r),c&&Zi(l,n)&&this.setArtBox(n.x,n.y,t,r)},e.prototype.setWidth=function(t){R(t,"width",["number"]),this.setSize(t,this.getSize().height)},e.prototype.setHeight=function(t){R(t,"height",["number"]),this.setSize(this.getSize().width,t)},e.prototype.setMediaBox=function(t,r,n,i){R(t,"x",["number"]),R(r,"y",["number"]),R(n,"width",["number"]),R(i,"height",["number"]);var a=this.doc.context.obj([t,r,t+n,r+i]);this.node.set(m.MediaBox,a)},e.prototype.setCropBox=function(t,r,n,i){R(t,"x",["number"]),R(r,"y",["number"]),R(n,"width",["number"]),R(i,"height",["number"]);var a=this.doc.context.obj([t,r,t+n,r+i]);this.node.set(m.CropBox,a)},e.prototype.setBleedBox=function(t,r,n,i){R(t,"x",["number"]),R(r,"y",["number"]),R(n,"width",["number"]),R(i,"height",["number"]);var a=this.doc.context.obj([t,r,t+n,r+i]);this.node.set(m.BleedBox,a)},e.prototype.setTrimBox=function(t,r,n,i){R(t,"x",["number"]),R(r,"y",["number"]),R(n,"width",["number"]),R(i,"height",["number"]);var a=this.doc.context.obj([t,r,t+n,r+i]);this.node.set(m.TrimBox,a)},e.prototype.setArtBox=function(t,r,n,i){R(t,"x",["number"]),R(r,"y",["number"]),R(n,"width",["number"]),R(i,"height",["number"]);var a=this.doc.context.obj([t,r,t+n,r+i]);this.node.set(m.ArtBox,a)},e.prototype.getSize=function(){var t=this.getMediaBox(),r=t.width,n=t.height;return{width:r,height:n}},e.prototype.getWidth=function(){return this.getSize().width},e.prototype.getHeight=function(){return this.getSize().height},e.prototype.getMediaBox=function(){var t=this.node.MediaBox();return t.asRectangle()},e.prototype.getCropBox=function(){var t,r=this.node.CropBox();return(t=r==null?void 0:r.asRectangle())!==null&&t!==void 0?t:this.getMediaBox()},e.prototype.getBleedBox=function(){var t,r=this.node.BleedBox();return(t=r==null?void 0:r.asRectangle())!==null&&t!==void 0?t:this.getCropBox()},e.prototype.getTrimBox=function(){var t,r=this.node.TrimBox();return(t=r==null?void 0:r.asRectangle())!==null&&t!==void 0?t:this.getCropBox()},e.prototype.getArtBox=function(){var t,r=this.node.ArtBox();return(t=r==null?void 0:r.asRectangle())!==null&&t!==void 0?t:this.getCropBox()},e.prototype.translateContent=function(t,r){R(t,"x",["number"]),R(r,"y",["number"]),this.node.normalize(),this.getContentStream();var n=this.createContentStream(Ze(),Tt(t,r)),i=this.doc.context.register(n),a=this.createContentStream(Ye()),o=this.doc.context.register(a);this.node.wrapContentStreams(i,o)},e.prototype.scale=function(t,r){R(t,"x",["number"]),R(r,"y",["number"]),this.setSize(this.getWidth()*t,this.getHeight()*r),this.scaleContent(t,r),this.scaleAnnotations(t,r)},e.prototype.scaleContent=function(t,r){R(t,"x",["number"]),R(r,"y",["number"]),this.node.normalize(),this.getContentStream();var n=this.createContentStream(Ze(),xi(t,r)),i=this.doc.context.register(n),a=this.createContentStream(Ye()),o=this.doc.context.register(a);this.node.wrapContentStreams(i,o)},e.prototype.scaleAnnotations=function(t,r){R(t,"x",["number"]),R(r,"y",["number"]);var n=this.node.Annots();if(!!n)for(var i=0;i<n.size();i++){var a=n.lookup(i);a instanceof ne&&this.scaleAnnot(a,t,r)}},e.prototype.resetPosition=function(){this.getContentStream(!1),this.x=0,this.y=0},e.prototype.setFont=function(t){R(t,"font",[[bt,"PDFFont"]]),this.font=t,this.fontKey=this.node.newFontDictionary(this.font.name,this.font.ref)},e.prototype.setFontSize=function(t){R(t,"fontSize",["number"]),this.fontSize=t},e.prototype.setFontColor=function(t){R(t,"fontColor",[[Object,"Color"]]),this.fontColor=t},e.prototype.setLineHeight=function(t){R(t,"lineHeight",["number"]),this.lineHeight=t},e.prototype.getPosition=function(){return{x:this.x,y:this.y}},e.prototype.getX=function(){return this.x},e.prototype.getY=function(){return this.y},e.prototype.moveTo=function(t,r){R(t,"x",["number"]),R(r,"y",["number"]),this.x=t,this.y=r},e.prototype.moveDown=function(t){R(t,"yDecrease",["number"]),this.y-=t},e.prototype.moveUp=function(t){R(t,"yIncrease",["number"]),this.y+=t},e.prototype.moveLeft=function(t){R(t,"xDecrease",["number"]),this.x-=t},e.prototype.moveRight=function(t){R(t,"xIncrease",["number"]),this.x+=t},e.prototype.pushOperators=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];Zf(t,"operator",[[he,"PDFOperator"]]);var n=this.getContentStream();n.push.apply(n,t)},e.prototype.drawText=function(t,r){var n,i,a,o,l,u,s;r===void 0&&(r={}),R(t,"text",["string"]),q(r.color,"options.color",[[Object,"Color"]]),Nt(r.opacity,"opacity.opacity",0,1),q(r.font,"options.font",[[bt,"PDFFont"]]),q(r.size,"options.size",["number"]),q(r.rotate,"options.rotate",[[Object,"Rotation"]]),q(r.xSkew,"options.xSkew",[[Object,"Rotation"]]),q(r.ySkew,"options.ySkew",[[Object,"Rotation"]]),q(r.x,"options.x",["number"]),q(r.y,"options.y",["number"]),q(r.lineHeight,"options.lineHeight",["number"]),q(r.maxWidth,"options.maxWidth",["number"]),q(r.wordBreaks,"options.wordBreaks",[Array]),St(r.blendMode,"options.blendMode",or);for(var f=this.setOrEmbedFont(r.font),c=f.oldFont,d=f.newFont,h=f.newFontKey,p=r.size||this.fontSize,v=r.wordBreaks||this.doc.defaultWordBreaks,y=function(F){return d.widthOfTextAtSize(F,p)},g=r.maxWidth===void 0?Zu(Si(t)):q0(t,v,r.maxWidth,y),w=new Array(g.length),S=0,P=g.length;S<P;S++)w[S]=d.encodeText(g[S]);var C=this.maybeEmbedGraphicsState({opacity:r.opacity,blendMode:r.blendMode}),A=this.getContentStream();A.push.apply(A,Xy(w,{color:(n=r.color)!==null&&n!==void 0?n:this.fontColor,font:h,size:p,rotate:(i=r.rotate)!==null&&i!==void 0?i:J(0),xSkew:(a=r.xSkew)!==null&&a!==void 0?a:J(0),ySkew:(o=r.ySkew)!==null&&o!==void 0?o:J(0),x:(l=r.x)!==null&&l!==void 0?l:this.x,y:(u=r.y)!==null&&u!==void 0?u:this.y,lineHeight:(s=r.lineHeight)!==null&&s!==void 0?s:this.lineHeight,graphicsState:C})),r.font&&(c?this.setFont(c):this.resetFont())},e.prototype.drawImage=function(t,r){var n,i,a,o,l,u,s;r===void 0&&(r={}),R(t,"image",[[Jo,"PDFImage"]]),q(r.x,"options.x",["number"]),q(r.y,"options.y",["number"]),q(r.width,"options.width",["number"]),q(r.height,"options.height",["number"]),q(r.rotate,"options.rotate",[[Object,"Rotation"]]),q(r.xSkew,"options.xSkew",[[Object,"Rotation"]]),q(r.ySkew,"options.ySkew",[[Object,"Rotation"]]),Nt(r.opacity,"opacity.opacity",0,1),St(r.blendMode,"options.blendMode",or);var f=this.node.newXObject("Image",t.ref),c=this.maybeEmbedGraphicsState({opacity:r.opacity,blendMode:r.blendMode}),d=this.getContentStream();d.push.apply(d,Pc(f,{x:(n=r.x)!==null&&n!==void 0?n:this.x,y:(i=r.y)!==null&&i!==void 0?i:this.y,width:(a=r.width)!==null&&a!==void 0?a:t.size().width,height:(o=r.height)!==null&&o!==void 0?o:t.size().height,rotate:(l=r.rotate)!==null&&l!==void 0?l:J(0),xSkew:(u=r.xSkew)!==null&&u!==void 0?u:J(0),ySkew:(s=r.ySkew)!==null&&s!==void 0?s:J(0),graphicsState:c}))},e.prototype.drawPage=function(t,r){var n,i,a,o,l;r===void 0&&(r={}),R(t,"embeddedPage",[[Nc,"PDFEmbeddedPage"]]),q(r.x,"options.x",["number"]),q(r.y,"options.y",["number"]),q(r.xScale,"options.xScale",["number"]),q(r.yScale,"options.yScale",["number"]),q(r.width,"options.width",["number"]),q(r.height,"options.height",["number"]),q(r.rotate,"options.rotate",[[Object,"Rotation"]]),q(r.xSkew,"options.xSkew",[[Object,"Rotation"]]),q(r.ySkew,"options.ySkew",[[Object,"Rotation"]]),Nt(r.opacity,"opacity.opacity",0,1),St(r.blendMode,"options.blendMode",or);var u=this.node.newXObject("EmbeddedPdfPage",t.ref),s=this.maybeEmbedGraphicsState({opacity:r.opacity,blendMode:r.blendMode}),f=r.width!==void 0?r.width/t.width:r.xScale!==void 0?r.xScale:1,c=r.height!==void 0?r.height/t.height:r.yScale!==void 0?r.yScale:1,d=this.getContentStream();d.push.apply(d,Zy(u,{x:(n=r.x)!==null&&n!==void 0?n:this.x,y:(i=r.y)!==null&&i!==void 0?i:this.y,xScale:f,yScale:c,rotate:(a=r.rotate)!==null&&a!==void 0?a:J(0),xSkew:(o=r.xSkew)!==null&&o!==void 0?o:J(0),ySkew:(l=r.ySkew)!==null&&l!==void 0?l:J(0),graphicsState:s}))},e.prototype.drawSvgPath=function(t,r){var n,i,a,o,l,u,s,f,c;r===void 0&&(r={}),R(t,"path",["string"]),q(r.x,"options.x",["number"]),q(r.y,"options.y",["number"]),q(r.scale,"options.scale",["number"]),q(r.rotate,"options.rotate",[[Object,"Rotation"]]),q(r.borderWidth,"options.borderWidth",["number"]),q(r.color,"options.color",[[Object,"Color"]]),Nt(r.opacity,"opacity.opacity",0,1),q(r.borderColor,"options.borderColor",[[Object,"Color"]]),q(r.borderDashArray,"options.borderDashArray",[Array]),q(r.borderDashPhase,"options.borderDashPhase",["number"]),St(r.borderLineCap,"options.borderLineCap",bn),Nt(r.borderOpacity,"options.borderOpacity",0,1),St(r.blendMode,"options.blendMode",or);var d=this.maybeEmbedGraphicsState({opacity:r.opacity,borderOpacity:r.borderOpacity,blendMode:r.blendMode});!("color"in r)&&!("borderColor"in r)&&(r.borderColor=Te(0,0,0));var h=this.getContentStream();h.push.apply(h,_y(t,{x:(n=r.x)!==null&&n!==void 0?n:this.x,y:(i=r.y)!==null&&i!==void 0?i:this.y,scale:r.scale,rotate:(a=r.rotate)!==null&&a!==void 0?a:J(0),color:(o=r.color)!==null&&o!==void 0?o:void 0,borderColor:(l=r.borderColor)!==null&&l!==void 0?l:void 0,borderWidth:(u=r.borderWidth)!==null&&u!==void 0?u:0,borderDashArray:(s=r.borderDashArray)!==null&&s!==void 0?s:void 0,borderDashPhase:(f=r.borderDashPhase)!==null&&f!==void 0?f:void 0,borderLineCap:(c=r.borderLineCap)!==null&&c!==void 0?c:void 0,graphicsState:d}))},e.prototype.drawLine=function(t){var r,n,i,a,o;R(t.start,"options.start",[[Object,"{ x: number, y: number }"]]),R(t.end,"options.end",[[Object,"{ x: number, y: number }"]]),R(t.start.x,"options.start.x",["number"]),R(t.start.y,"options.start.y",["number"]),R(t.end.x,"options.end.x",["number"]),R(t.end.y,"options.end.y",["number"]),q(t.thickness,"options.thickness",["number"]),q(t.color,"options.color",[[Object,"Color"]]),q(t.dashArray,"options.dashArray",[Array]),q(t.dashPhase,"options.dashPhase",["number"]),St(t.lineCap,"options.lineCap",bn),Nt(t.opacity,"opacity.opacity",0,1),St(t.blendMode,"options.blendMode",or);var l=this.maybeEmbedGraphicsState({borderOpacity:t.opacity,blendMode:t.blendMode});"color"in t||(t.color=Te(0,0,0));var u=this.getContentStream();u.push.apply(u,Yy({start:t.start,end:t.end,thickness:(r=t.thickness)!==null&&r!==void 0?r:1,color:(n=t.color)!==null&&n!==void 0?n:void 0,dashArray:(i=t.dashArray)!==null&&i!==void 0?i:void 0,dashPhase:(a=t.dashPhase)!==null&&a!==void 0?a:void 0,lineCap:(o=t.lineCap)!==null&&o!==void 0?o:void 0,graphicsState:l}))},e.prototype.drawRectangle=function(t){var r,n,i,a,o,l,u,s,f,c,d,h,p;t===void 0&&(t={}),q(t.x,"options.x",["number"]),q(t.y,"options.y",["number"]),q(t.width,"options.width",["number"]),q(t.height,"options.height",["number"]),q(t.rotate,"options.rotate",[[Object,"Rotation"]]),q(t.xSkew,"options.xSkew",[[Object,"Rotation"]]),q(t.ySkew,"options.ySkew",[[Object,"Rotation"]]),q(t.borderWidth,"options.borderWidth",["number"]),q(t.color,"options.color",[[Object,"Color"]]),Nt(t.opacity,"opacity.opacity",0,1),q(t.borderColor,"options.borderColor",[[Object,"Color"]]),q(t.borderDashArray,"options.borderDashArray",[Array]),q(t.borderDashPhase,"options.borderDashPhase",["number"]),St(t.borderLineCap,"options.borderLineCap",bn),Nt(t.borderOpacity,"options.borderOpacity",0,1),St(t.blendMode,"options.blendMode",or);var v=this.maybeEmbedGraphicsState({opacity:t.opacity,borderOpacity:t.borderOpacity,blendMode:t.blendMode});!("color"in t)&&!("borderColor"in t)&&(t.color=Te(0,0,0));var y=this.getContentStream();y.push.apply(y,Tn({x:(r=t.x)!==null&&r!==void 0?r:this.x,y:(n=t.y)!==null&&n!==void 0?n:this.y,width:(i=t.width)!==null&&i!==void 0?i:150,height:(a=t.height)!==null&&a!==void 0?a:100,rotate:(o=t.rotate)!==null&&o!==void 0?o:J(0),xSkew:(l=t.xSkew)!==null&&l!==void 0?l:J(0),ySkew:(u=t.ySkew)!==null&&u!==void 0?u:J(0),borderWidth:(s=t.borderWidth)!==null&&s!==void 0?s:0,color:(f=t.color)!==null&&f!==void 0?f:void 0,borderColor:(c=t.borderColor)!==null&&c!==void 0?c:void 0,borderDashArray:(d=t.borderDashArray)!==null&&d!==void 0?d:void 0,borderDashPhase:(h=t.borderDashPhase)!==null&&h!==void 0?h:void 0,graphicsState:v,borderLineCap:(p=t.borderLineCap)!==null&&p!==void 0?p:void 0}))},e.prototype.drawSquare=function(t){t===void 0&&(t={});var r=t.size;q(r,"size",["number"]),this.drawRectangle(te(te({},t),{width:r,height:r}))},e.prototype.drawEllipse=function(t){var r,n,i,a,o,l,u,s,f,c,d;t===void 0&&(t={}),q(t.x,"options.x",["number"]),q(t.y,"options.y",["number"]),q(t.xScale,"options.xScale",["number"]),q(t.yScale,"options.yScale",["number"]),q(t.rotate,"options.rotate",[[Object,"Rotation"]]),q(t.color,"options.color",[[Object,"Color"]]),Nt(t.opacity,"opacity.opacity",0,1),q(t.borderColor,"options.borderColor",[[Object,"Color"]]),Nt(t.borderOpacity,"options.borderOpacity",0,1),q(t.borderWidth,"options.borderWidth",["number"]),q(t.borderDashArray,"options.borderDashArray",[Array]),q(t.borderDashPhase,"options.borderDashPhase",["number"]),St(t.borderLineCap,"options.borderLineCap",bn),St(t.blendMode,"options.blendMode",or);var h=this.maybeEmbedGraphicsState({opacity:t.opacity,borderOpacity:t.borderOpacity,blendMode:t.blendMode});!("color"in t)&&!("borderColor"in t)&&(t.color=Te(0,0,0));var p=this.getContentStream();p.push.apply(p,Qo({x:(r=t.x)!==null&&r!==void 0?r:this.x,y:(n=t.y)!==null&&n!==void 0?n:this.y,xScale:(i=t.xScale)!==null&&i!==void 0?i:100,yScale:(a=t.yScale)!==null&&a!==void 0?a:100,rotate:(o=t.rotate)!==null&&o!==void 0?o:void 0,color:(l=t.color)!==null&&l!==void 0?l:void 0,borderColor:(u=t.borderColor)!==null&&u!==void 0?u:void 0,borderWidth:(s=t.borderWidth)!==null&&s!==void 0?s:0,borderDashArray:(f=t.borderDashArray)!==null&&f!==void 0?f:void 0,borderDashPhase:(c=t.borderDashPhase)!==null&&c!==void 0?c:void 0,borderLineCap:(d=t.borderLineCap)!==null&&d!==void 0?d:void 0,graphicsState:h}))},e.prototype.drawCircle=function(t){t===void 0&&(t={});var r=t.size,n=r===void 0?100:r;q(n,"size",["number"]),this.drawEllipse(te(te({},t),{xScale:n,yScale:n}))},e.prototype.setOrEmbedFont=function(t){var r=this.font,n=this.fontKey;t?this.setFont(t):this.getFont();var i=this.font,a=this.fontKey;return{oldFont:r,oldFontKey:n,newFont:i,newFontKey:a}},e.prototype.getFont=function(){if(!this.font||!this.fontKey){var t=this.doc.embedStandardFont(Pa.Helvetica);this.setFont(t)}return[this.font,this.fontKey]},e.prototype.resetFont=function(){this.font=void 0,this.fontKey=void 0},e.prototype.getContentStream=function(t){return t===void 0&&(t=!0),t&&this.contentStream?this.contentStream:(this.contentStream=this.createContentStream(),this.contentStreamRef=this.doc.context.register(this.contentStream),this.node.addContentStream(this.contentStreamRef),this.contentStream)},e.prototype.createContentStream=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var n=this.doc.context.obj({}),i=si.of(n,t);return i},e.prototype.maybeEmbedGraphicsState=function(t){var r=t.opacity,n=t.borderOpacity,i=t.blendMode;if(!(r===void 0&&n===void 0&&i===void 0)){var a=this.doc.context.obj({Type:"ExtGState",ca:r,CA:n,BM:i}),o=this.node.newExtGState("GS",a);return o}},e.prototype.scaleAnnot=function(t,r,n){for(var i=["RD","CL","Vertices","QuadPoints","L","Rect"],a=0,o=i.length;a<o;a++){var l=t.lookup(m.of(i[a]));l instanceof be&&l.scalePDFNumbers(r,n)}var u=t.lookup(m.of("InkList"));if(u instanceof be)for(var a=0,o=u.size();a<o;a++){var s=u.lookup(a);s instanceof be&&s.scalePDFNumbers(r,n)}},e.of=function(t,r,n){return new e(t,r,n)},e.create=function(t){R(t,"doc",[[cr,"PDFDocument"]]);var r=ke.of(-1),n=fr.withContextAndParent(t.context,r),i=t.context.register(n);return new e(n,i,t)},e}(),Dm=function(e){K(t,e);function t(r,n,i){var a=e.call(this,r,n,i)||this;return R(r,"acroButton",[[Ga,"PDFAcroPushButton"]]),a.acroField=r,a}return t.prototype.setImage=function(r,n){n===void 0&&(n=Or.Center);for(var i=this.acroField.getWidgets(),a=0,o=i.length;a<o;a++){var l=i[a],u=this.createImageAppearanceStream(l,r,n);this.updateWidgetAppearances(l,{normal:u})}this.markAsClean()},t.prototype.setFontSize=function(r){Va(r,"fontSize"),this.acroField.setFontSize(r),this.markAsDirty()},t.prototype.addToPage=function(r,n,i){var a,o,l,u,s,f,c,d,h,p,v;q(r,"text",["string"]),q(n,"page",[[Ct,"PDFPage"]]),Bn(i);var y=this.createWidget({x:((a=i==null?void 0:i.x)!==null&&a!==void 0?a:0)-((o=i==null?void 0:i.borderWidth)!==null&&o!==void 0?o:0)/2,y:((l=i==null?void 0:i.y)!==null&&l!==void 0?l:0)-((u=i==null?void 0:i.borderWidth)!==null&&u!==void 0?u:0)/2,width:(s=i==null?void 0:i.width)!==null&&s!==void 0?s:100,height:(f=i==null?void 0:i.height)!==null&&f!==void 0?f:50,textColor:(c=i==null?void 0:i.textColor)!==null&&c!==void 0?c:Te(0,0,0),backgroundColor:(d=i==null?void 0:i.backgroundColor)!==null&&d!==void 0?d:Te(.75,.75,.75),borderColor:i==null?void 0:i.borderColor,borderWidth:(h=i==null?void 0:i.borderWidth)!==null&&h!==void 0?h:0,rotate:(p=i==null?void 0:i.rotate)!==null&&p!==void 0?p:J(0),caption:r,hidden:i==null?void 0:i.hidden,page:n.ref}),g=this.doc.context.register(y.dict);this.acroField.addWidget(g);var w=(v=i==null?void 0:i.font)!==null&&v!==void 0?v:this.doc.getForm().getDefaultFont();this.updateWidgetAppearance(y,w),n.node.addAnnot(g)},t.prototype.needsAppearancesUpdate=function(){var r;if(this.isDirty())return!0;for(var n=this.acroField.getWidgets(),i=0,a=n.length;i<a;i++){var o=n[i],l=((r=o.getAppearances())===null||r===void 0?void 0:r.normal)instanceof mt;if(!l)return!0}return!1},t.prototype.defaultUpdateAppearances=function(r){R(r,"font",[[bt,"PDFFont"]]),this.updateAppearances(r)},t.prototype.updateAppearances=function(r,n){R(r,"font",[[bt,"PDFFont"]]),q(n,"provider",[Function]);for(var i=this.acroField.getWidgets(),a=0,o=i.length;a<o;a++){var l=i[a];this.updateWidgetAppearance(l,r,n)}},t.prototype.updateWidgetAppearance=function(r,n,i){var a=i!=null?i:bm,o=Mn(a(this,r,n));this.updateWidgetAppearanceWithFont(r,n,o)},t.of=function(r,n,i){return new t(r,n,i)},t}(ln),da=Dm,jc={exports:{}};(function(e,t){(function(n,i){e.exports=i()})(window,function(){return function(r){var n={};function i(a){if(n[a])return n[a].exports;var o=n[a]={i:a,l:!1,exports:{}};return r[a].call(o.exports,o,o.exports,i),o.l=!0,o.exports}return i.m=r,i.c=n,i.d=function(a,o,l){i.o(a,o)||Object.defineProperty(a,o,{enumerable:!0,get:l})},i.r=function(a){typeof Symbol!="undefined"&&Symbol.toStringTag&&Object.defineProperty(a,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(a,"__esModule",{value:!0})},i.t=function(a,o){if(o&1&&(a=i(a)),o&8||o&4&&typeof a=="object"&&a&&a.__esModule)return a;var l=Object.create(null);if(i.r(l),Object.defineProperty(l,"default",{enumerable:!0,value:a}),o&2&&typeof a!="string")for(var u in a)i.d(l,u,function(s){return a[s]}.bind(null,u));return l},i.n=function(a){var o=a&&a.__esModule?function(){return a.default}:function(){return a};return i.d(o,"a",o),o},i.o=function(a,o){return Object.prototype.hasOwnProperty.call(a,o)},i.p="",i(i.s=0)}({"./src/index.js":function(r,n,i){i.r(n),i("./src/sass/index.scss");var a=i("./src/js/init.js"),o=a.default.init;typeof window!="undefined"&&(window.printJS=o),n.default=o},"./src/js/browser.js":function(r,n,i){i.r(n);var a={isFirefox:function(){return typeof InstallTrigger!="undefined"},isIE:function(){return navigator.userAgent.indexOf("MSIE")!==-1||!!document.documentMode},isEdge:function(){return!a.isIE()&&!!window.StyleMedia},isChrome:function(){var l=arguments.length>0&&arguments[0]!==void 0?arguments[0]:window;return!!l.chrome},isSafari:function(){return Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor")>0||navigator.userAgent.toLowerCase().indexOf("safari")!==-1},isIOSChrome:function(){return navigator.userAgent.toLowerCase().indexOf("crios")!==-1}};n.default=a},"./src/js/functions.js":function(r,n,i){i.r(n),i.d(n,"addWrapper",function(){return u}),i.d(n,"capitalizePrint",function(){return s}),i.d(n,"collectStyles",function(){return f}),i.d(n,"addHeader",function(){return d}),i.d(n,"cleanUp",function(){return h}),i.d(n,"isRawHTML",function(){return p});var a=i("./src/js/modal.js"),o=i("./src/js/browser.js");function l(v){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?l=function(g){return typeof g}:l=function(g){return g&&typeof Symbol=="function"&&g.constructor===Symbol&&g!==Symbol.prototype?"symbol":typeof g},l(v)}function u(v,y){var g="font-family:"+y.font+" !important; font-size: "+y.font_size+" !important; width:100%;";return'<div style="'+g+'">'+v+"</div>"}function s(v){return v.charAt(0).toUpperCase()+v.slice(1)}function f(v,y){for(var g=document.defaultView||window,w="",S=g.getComputedStyle(v,""),P=0;P<S.length;P++)(y.targetStyles.indexOf("*")!==-1||y.targetStyle.indexOf(S[P])!==-1||c(y.targetStyles,S[P]))&&S.getPropertyValue(S[P])&&(w+=S[P]+":"+S.getPropertyValue(S[P])+";");return w+="max-width: "+y.maxWidth+"px !important; font-size: "+y.font_size+" !important;",w}function c(v,y){for(var g=0;g<v.length;g++)if(l(y)==="object"&&y.indexOf(v[g])!==-1)return!0;return!1}function d(v,y){var g=document.createElement("div");if(p(y.header))g.innerHTML=y.header;else{var w=document.createElement("h1"),S=document.createTextNode(y.header);w.appendChild(S),w.setAttribute("style",y.headerStyle),g.appendChild(w)}v.insertBefore(g,v.childNodes[0])}function h(v){v.showModal&&a.default.close(),v.onLoadingEnd&&v.onLoadingEnd(),(v.showModal||v.onLoadingStart)&&window.URL.revokeObjectURL(v.printable);var y="mouseover";(o.default.isChrome()||o.default.isFirefox())&&(y="focus");var g=function w(){window.removeEventListener(y,w),v.onPrintDialogClose();var S=document.getElementById(v.frameId);S&&S.remove()};window.addEventListener(y,g)}function p(v){var y=new RegExp("<([A-Za-z][A-Za-z0-9]*)\\b[^>]*>(.*?)</\\1>");return y.test(v)}},"./src/js/html.js":function(r,n,i){i.r(n);var a=i("./src/js/functions.js"),o=i("./src/js/print.js");function l(f){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?l=function(d){return typeof d}:l=function(d){return d&&typeof Symbol=="function"&&d.constructor===Symbol&&d!==Symbol.prototype?"symbol":typeof d},l(f)}n.default={print:function(c,d){var h=s(c.printable)?c.printable:document.getElementById(c.printable);if(!h){window.console.error("Invalid HTML element id: "+c.printable);return}c.printableElement=u(h,c),c.header&&Object(a.addHeader)(c.printableElement,c),o.default.send(c,d)}};function u(f,c){for(var d=f.cloneNode(),h=Array.prototype.slice.call(f.childNodes),p=0;p<h.length;p++)if(c.ignoreElements.indexOf(h[p].id)===-1){var v=u(h[p],c);d.appendChild(v)}switch(c.scanStyles&&f.nodeType===1&&d.setAttribute("style",Object(a.collectStyles)(f,c)),f.tagName){case"SELECT":d.value=f.value;break;case"CANVAS":d.getContext("2d").drawImage(f,0,0);break}return d}function s(f){return l(f)==="object"&&f&&(f instanceof HTMLElement||f.nodeType===1)}},"./src/js/image.js":function(r,n,i){i.r(n);var a=i("./src/js/functions.js"),o=i("./src/js/print.js"),l=i("./src/js/browser.js");n.default={print:function(s,f){s.printable.constructor!==Array&&(s.printable=[s.printable]),s.printableElement=document.createElement("div"),s.printable.forEach(function(c){var d=document.createElement("img");if(d.setAttribute("style",s.imageStyle),d.src=c,l.default.isFirefox()){var h=d.src;d.src=h}var p=document.createElement("div");p.appendChild(d),s.printableElement.appendChild(p)}),s.header&&Object(a.addHeader)(s.printableElement,s),o.default.send(s,f)}}},"./src/js/init.js":function(r,n,i){i.r(n);var a=i("./src/js/browser.js"),o=i("./src/js/modal.js"),l=i("./src/js/pdf.js"),u=i("./src/js/html.js"),s=i("./src/js/raw-html.js"),f=i("./src/js/image.js"),c=i("./src/js/json.js");function d(p){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?d=function(y){return typeof y}:d=function(y){return y&&typeof Symbol=="function"&&y.constructor===Symbol&&y!==Symbol.prototype?"symbol":typeof y},d(p)}var h=["pdf","html","image","json","raw-html"];n.default={init:function(){var v={printable:null,fallbackPrintable:null,type:"pdf",header:null,headerStyle:"font-weight: 300;",maxWidth:800,properties:null,gridHeaderStyle:"font-weight: bold; padding: 5px; border: 1px solid #dddddd;",gridStyle:"border: 1px solid lightgray; margin-bottom: -1px;",showModal:!1,onError:function(A){throw A},onLoadingStart:null,onLoadingEnd:null,onPrintDialogClose:function(){},onIncompatibleBrowser:function(){},modalMessage:"Retrieving Document...",frameId:"printJS",printableElement:null,documentTitle:"Document",targetStyle:["clear","display","width","min-width","height","min-height","max-height"],targetStyles:["border","box","break","text-decoration"],ignoreElements:[],repeatTableHeader:!0,css:null,style:null,scanStyles:!0,base64:!1,onPdfOpen:null,font:"TimesNewRoman",font_size:"12pt",honorMarginPadding:!0,honorColor:!1,imageStyle:"max-width: 100%;"},y=arguments[0];if(y===void 0)throw new Error("printJS expects at least 1 attribute.");switch(d(y)){case"string":v.printable=encodeURI(y),v.fallbackPrintable=v.printable,v.type=arguments[1]||v.type;break;case"object":v.printable=y.printable,v.fallbackPrintable=typeof y.fallbackPrintable!="undefined"?y.fallbackPrintable:v.printable,v.fallbackPrintable=v.base64?"data:application/pdf;base64,".concat(v.fallbackPrintable):v.fallbackPrintable;for(var g in v)g==="printable"||g==="fallbackPrintable"||(v[g]=typeof y[g]!="undefined"?y[g]:v[g]);break;default:throw new Error('Unexpected argument type! Expected "string" or "object", got '+d(y))}if(!v.printable)throw new Error("Missing printable information.");if(!v.type||typeof v.type!="string"||h.indexOf(v.type.toLowerCase())===-1)throw new Error("Invalid print type. Available types are: pdf, html, image and json.");v.showModal&&o.default.show(v),v.onLoadingStart&&v.onLoadingStart();var w=document.getElementById(v.frameId);w&&w.parentNode.removeChild(w);var S=document.createElement("iframe");switch(a.default.isFirefox()?S.setAttribute("style","width: 1px; height: 100px; position: fixed; left: 0; top: 0; opacity: 0; border-width: 0; margin: 0; padding: 0"):S.setAttribute("style","visibility: hidden; height: 0; width: 0; position: absolute; border: 0"),S.setAttribute("id",v.frameId),v.type!=="pdf"&&(S.srcdoc="<html><head><title>"+v.documentTitle+"</title>",v.css&&(Array.isArray(v.css)||(v.css=[v.css]),v.css.forEach(function(C){S.srcdoc+='<link rel="stylesheet" href="'+C+'">'})),S.srcdoc+="</head><body></body></html>"),v.type){case"pdf":if(a.default.isIE())try{console.info("Print.js doesn't support PDF printing in Internet Explorer.");var P=window.open(v.fallbackPrintable,"_blank");P.focus(),v.onIncompatibleBrowser()}catch(C){v.onError(C)}finally{v.showModal&&o.default.close(),v.onLoadingEnd&&v.onLoadingEnd()}else l.default.print(v,S);break;case"image":f.default.print(v,S);break;case"html":u.default.print(v,S);break;case"raw-html":s.default.print(v,S);break;case"json":c.default.print(v,S);break}}}},"./src/js/json.js":function(r,n,i){i.r(n);var a=i("./src/js/functions.js"),o=i("./src/js/print.js");function l(s){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?l=function(c){return typeof c}:l=function(c){return c&&typeof Symbol=="function"&&c.constructor===Symbol&&c!==Symbol.prototype?"symbol":typeof c},l(s)}n.default={print:function(f,c){if(l(f.printable)!=="object")throw new Error("Invalid javascript data object (JSON).");if(typeof f.repeatTableHeader!="boolean")throw new Error("Invalid value for repeatTableHeader attribute (JSON).");if(!f.properties||!Array.isArray(f.properties))throw new Error("Invalid properties array for your JSON data.");f.properties=f.properties.map(function(d){return{field:l(d)==="object"?d.field:d,displayName:l(d)==="object"?d.displayName:d,columnSize:l(d)==="object"&&d.columnSize?d.columnSize+";":100/f.properties.length+"%;"}}),f.printableElement=document.createElement("div"),f.header&&Object(a.addHeader)(f.printableElement,f),f.printableElement.innerHTML+=u(f),o.default.send(f,c)}};function u(s){var f=s.printable,c=s.properties,d='<table style="border-collapse: collapse; width: 100%;">';s.repeatTableHeader&&(d+="<thead>"),d+="<tr>";for(var h=0;h<c.length;h++)d+='<th style="width:'+c[h].columnSize+";"+s.gridHeaderStyle+'">'+Object(a.capitalizePrint)(c[h].displayName)+"</th>";d+="</tr>",s.repeatTableHeader&&(d+="</thead>"),d+="<tbody>";for(var p=0;p<f.length;p++){d+="<tr>";for(var v=0;v<c.length;v++){var y=f[p],g=c[v].field.split(".");if(g.length>1)for(var w=0;w<g.length;w++)y=y[g[w]];else y=y[c[v].field];d+='<td style="width:'+c[v].columnSize+s.gridStyle+'">'+y+"</td>"}d+="</tr>"}return d+="</tbody></table>",d}},"./src/js/modal.js":function(r,n,i){i.r(n);var a={show:function(l){var u="font-family:sans-serif; display:table; text-align:center; font-weight:300; font-size:30px; left:0; top:0;position:fixed; z-index: 9990;color: #0460B5; width: 100%; height: 100%; background-color:rgba(255,255,255,.9);transition: opacity .3s ease;",s=document.createElement("div");s.setAttribute("style",u),s.setAttribute("id","printJS-Modal");var f=document.createElement("div");f.setAttribute("style","display:table-cell; vertical-align:middle; padding-bottom:100px;");var c=document.createElement("div");c.setAttribute("class","printClose"),c.setAttribute("id","printClose"),f.appendChild(c);var d=document.createElement("span");d.setAttribute("class","printSpinner"),f.appendChild(d);var h=document.createTextNode(l.modalMessage);f.appendChild(h),s.appendChild(f),document.getElementsByTagName("body")[0].appendChild(s),document.getElementById("printClose").addEventListener("click",function(){a.close()})},close:function(){var l=document.getElementById("printJS-Modal");l&&l.parentNode.removeChild(l)}};n.default=a},"./src/js/pdf.js":function(r,n,i){i.r(n);var a=i("./src/js/print.js"),o=i("./src/js/functions.js");n.default={print:function(s,f){if(s.base64){var c=Uint8Array.from(atob(s.printable),function(h){return h.charCodeAt(0)});l(s,f,c);return}s.printable=/^(blob|http|\/\/)/i.test(s.printable)?s.printable:window.location.origin+(s.printable.charAt(0)!=="/"?"/"+s.printable:s.printable);var d=new window.XMLHttpRequest;d.responseType="arraybuffer",d.addEventListener("error",function(){Object(o.cleanUp)(s),s.onError(d.statusText,d)}),d.addEventListener("load",function(){if([200,201].indexOf(d.status)===-1){Object(o.cleanUp)(s),s.onError(d.statusText,d);return}l(s,f,d.response)}),d.open("GET",s.printable,!0),d.send()}};function l(u,s,f){var c=new window.Blob([f],{type:"application/pdf"});c=window.URL.createObjectURL(c),s.setAttribute("src",c),a.default.send(u,s)}},"./src/js/print.js":function(r,n,i){i.r(n);var a=i("./src/js/browser.js"),o=i("./src/js/functions.js"),l={send:function(d,h){document.getElementsByTagName("body")[0].appendChild(h);var p=document.getElementById(d.frameId);p.onload=function(){if(d.type==="pdf"){a.default.isFirefox()?setTimeout(function(){return u(p,d)},1e3):u(p,d);return}var v=p.contentWindow||p.contentDocument;if(v.document&&(v=v.document),v.body.appendChild(d.printableElement),d.type!=="pdf"&&d.style){var y=document.createElement("style");y.innerHTML=d.style,v.head.appendChild(y)}var g=v.getElementsByTagName("img");g.length>0?s(Array.from(g)).then(function(){return u(p,d)}):u(p,d)}}};function u(c,d){try{if(c.focus(),a.default.isEdge()||a.default.isIE())try{c.contentWindow.document.execCommand("print",!1,null)}catch{c.contentWindow.print()}else c.contentWindow.print()}catch(h){d.onError(h)}finally{a.default.isFirefox()&&(c.style.visibility="hidden",c.style.left="-1px"),Object(o.cleanUp)(d)}}function s(c){var d=c.map(function(h){if(h.src&&h.src!==window.location.href)return f(h)});return Promise.all(d)}function f(c){return new Promise(function(d){var h=function p(){!c||typeof c.naturalWidth=="undefined"||c.naturalWidth===0||!c.complete?setTimeout(p,500):d()};h()})}n.default=l},"./src/js/raw-html.js":function(r,n,i){i.r(n);var a=i("./src/js/print.js");n.default={print:function(l,u){l.printableElement=document.createElement("div"),l.printableElement.setAttribute("style","width:100%"),l.printableElement.innerHTML=l.printable,a.default.send(l,u)}}},"./src/sass/index.scss":function(r,n,i){},0:function(r,n,i){r.exports=i("./src/index.js")}}).default})})(jc);var Em=yh(jc.exports);const Om={class:"fit relative-position"},Rm=ue("div",{id:"viewer",class:"pdfViewer"},null,-1),Mm=[Rm],Bm={class:"row q-gutter-xs justify-center absolute-bottom q-my-lg"},Nm=ue("span",{class:"fa-stack fa-1x"},[ue("i",{class:"fal fa-file fa-stack-2x"}),ue("i",{class:"fal fa-arrows-h fa-stack-1x"})],-1),jm=ue("span",{class:"fa-stack fa-1x"},[ue("i",{class:"fal fa-file fa-stack-2x"}),ue("i",{class:"fal fa-arrows-v fa-stack-1x"})],-1),Im=ue("span",{class:"fa-stack fa-1x"},[ue("i",{class:"fal fa-file fa-stack-2x"}),ue("i",{class:"fal fa-arrows fa-stack-1x"})],-1),zm=ue("i",{class:"fal fa-file fa-flip-horizontal fa-2x"},null,-1),Um=ue("i",{class:"fal fa-file fa-2x"},null,-1),Vm=ue("span",{class:"fa-stack fa-1x"},[ue("i",{class:"fal fa-file fa-stack-2x"}),ue("span",{class:"fa-stack-1x"},"1")],-1),Lm=dt({__name:"PDFViewer",props:{src:{},canDownload:{type:Boolean},canPrint:{type:Boolean},height:{},document:{}},emits:["updateToc"],async setup(e,{emit:t}){let r,n;const i=mh(),a=An(),o=me(null);window.addEventListener("beforeprint",()=>{o.value&&o.value.classList.add("print-hide")});const l=e,u=t;let s;const{t:f}=Lt(),c=([r,n]=uo(()=>fo(()=>import("./pdf.232cf926.js").then(function(M){return M.p}),["assets/pdf.232cf926.js","assets/index.6def9867.js","assets/index.f0c5003b.css"])),r=await r,n(),r),d=([r,n]=uo(()=>fo(()=>import("./pdf.worker.entry.0f1bbba3.js").then(function(M){return M.p}),[])),r=await r,n(),r),h=([r,n]=uo(()=>fo(()=>import("./pdf_viewer.89df652b.js").then(function(M){return M.p}),["assets/pdf_viewer.89df652b.js","assets/index.6def9867.js","assets/index.f0c5003b.css"])),r=await r,n(),r),p=new h.EventBus,v=new h.PDFLinkService({eventBus:p,externalLinkTarget:2}),y=me(1),g=me(0),w=me("page-fit"),S=function(M){const N=M>y.value;s.scrollPageIntoView({pageNumber:s.spreadMode===0?M:M===1?1:M%2!==0?M+(N?1:-1):M}),s.currentScaleValue=w.value},P=Qt("event-bus"),C=async M=>{M&&typeof M=="string"?(v.goToDestination(M),i.push({query:{pdfDest:M}})):M&&Array.isArray(M)&&(v.goToDestination(M),i.push({query:{pdfDest:JSON.stringify(M)}}))};Nu(async()=>{var M,N;try{P==null||P.on("PDFSelect",C),c.GlobalWorkerOptions.workerSrc=d;const W=await c.getDocument({url:l.src,withCredentials:!0}).promise,L=document.getElementById("viewerContainer");if(L&&(s=new h.PDFViewer({container:L,eventBus:p,textLayerMode:0,annotationMode:1,linkService:v,downloadManager:new h.DownloadManager})),s.spreadMode=0,s.scrollMode=3,s.presentationModeState=0,v.setDocument(W),v.setViewer(s),s.setDocument(W),a.query.pdfDest){const X=a.query.pdfDest;v.goToDestination(X)}(M=s.firstPagePromise)==null||M.then(()=>{s.currentScaleValue=w.value,g.value=s.pagesCount}),W.getOutline().then(X=>{X&&u("updateToc",X)}),p.on("pagechanging",()=>{y.value=s.currentPageNumber}),(N=o.value)==null||N.addEventListener("contextmenu",X=>(X.preventDefault(),X.stopPropagation(),!1))}catch(T){bh("error",T)}}),Ra(()=>{P==null||P.off("PDFSelect")});const A=M=>{s.currentScaleValue=M,w.value=M},F=()=>{var M,u=l.src.replace('documents/','data/documents/').replace('/pdf','/pdf.pdf');(M=s.downloadManager)==null||M.downloadUrl(u,`${l.document.title}_${l.document.language}.pdf`)};Yr(()=>a,M=>{if(M.query.pdfDest){const N=M.query.pdfDest;v.goToDestination(N)}},{deep:!0});const D=Qt("auth"),O=Qt("$theme"),B=O==null?void 0:O.style.branding.COMPANY_NAME,k=async()=>{if(!s.pdfDocument)return;const M=vt(y),N=await cr.load(await s.pdfDocument.getData()),T=await cr.create(),W=s.spreadMode===0?[M-1]:[M-1,M];(await T.copyPages(N,W)).forEach(Pe=>{var Be,Ie;T.addPage(Pe);const{height:we}=Pe.getSize();});const X=await T.save(),Ee=Hu(X);Em({printable:Ee,type:"pdf",base64:!0})};return(M,N)=>(G(),xe(Ke,null,[ue("div",Om,[ue("div",{id:"viewerContainer",ref_key:"pdfViewerContainer",ref:o,tabindex:"0"},Mm,512)]),ue("div",Bm,[I(Lh,{"model-value":y.value,min:1,max:g.value,input:"","input-style":"font-size: 0.7rem","input-class":"q-pa-none",class:"bg-grey-3","onUpdate:modelValue":N[0]||(N[0]=T=>S(T))},null,8,["model-value","max"]),I(ul,{flat:"",class:"bg-grey-3"},{default:V(()=>[I(Ve,{icon:"fal fa-search-plus",flat:"",onClick:N[1]||(N[1]=T=>U(s).increaseScale())},{default:V(()=>[I(it,{delay:500},{default:V(()=>[Re(fe(U(f)("buttons.zoomIn")),1)]),_:1})]),_:1}),I(Kr,{vertical:""}),I(Ve,{icon:"fal fa-search-minus",flat:"",onClick:N[2]||(N[2]=T=>U(s).decreaseScale())},{default:V(()=>[I(it,{delay:500},{default:V(()=>[Re(fe(U(f)("buttons.zoomOut")),1)]),_:1})]),_:1}),I(Kr,{vertical:""}),I(Ve,{flat:"",onClick:N[3]||(N[3]=T=>A("page-width"))},{default:V(()=>[Nm,I(it,{delay:500},{default:V(()=>[Re(fe(U(f)("buttons.fitPageWidth")),1)]),_:1})]),_:1}),I(Kr,{vertical:""}),I(Ve,{flat:"",onClick:N[4]||(N[4]=T=>A("page-height"))},{default:V(()=>[jm,I(it,{delay:500},{default:V(()=>[Re(fe(U(f)("buttons.fitPageHeight")),1)]),_:1})]),_:1}),I(Kr,{vertical:""}),I(Ve,{flat:"",onClick:N[5]||(N[5]=T=>A("page-fit"))},{default:V(()=>[Im,I(it,{delay:500},{default:V(()=>[Re(fe(U(f)("buttons.fitPageFit")),1)]),_:1})]),_:1})]),_:1}),I(ul,{flat:"",class:"bg-grey-3"},{default:V(()=>[I(Ve,{flat:"",onClick:N[6]||(N[6]=T=>U(s).spreadMode=2)},{default:V(()=>[zm,Um,I(it,{delay:500},{default:V(()=>[Re(fe(U(f)("buttons.pageSpread")),1)]),_:1})]),_:1}),I(Kr,{vertical:""}),I(Ve,{flat:"",onClick:N[7]||(N[7]=T=>U(s).spreadMode=0)},{default:V(()=>[Vm,I(it,{delay:500},{default:V(()=>[Re(fe(U(f)("buttons.singlePage")),1)]),_:1})]),_:1})]),_:1}),true?(G(),oe(Ve,{key:0,icon:"fal fa-print",flat:"",class:"bg-grey-3 inline",onClick:k},{default:V(()=>[I(it,{delay:500},{default:V(()=>[Re(fe(U(f)("buttons.printPage")),1)]),_:1})]),_:1})):Me("",!0),true?(G(),oe(Ve,{key:1,download:"true",icon:"fal fa-download",flat:"",class:"bg-grey-3 inline",onClick:F},{default:V(()=>[I(it,{delay:500},{default:V(()=>[Re(fe(U(f)("buttons.downloadPDF")),1)]),_:1})]),_:1})):Me("",!0)])],64))}}),Wm={class:"rotate-315"},gb=dt({__name:"DocumentPage",emits:["pdfLoad"],setup(e,{emit:t}){const r=Ma(),n=tn(),{currentTopic:i,currentDocument:a,rootTopic:o}=Ut(n),{t:l}=Lt(),u=t,s=An(),f=Qt("$theme"),c=f==null?void 0:f.style.branding.COMPANY_NAME,d=me(!1),h=Ru({width:null,height:null}),p=me([]),v=Qt("auth");Uh({idToTrack:s.params.id}),Vh({isPublic:s.matched.some(F=>F.meta.protected===!1)});const y=Ae(()=>{var F;return`${Bu()}/documents/${(F=a.value)==null?void 0:F._id}/pdf`}),g=Ae(()=>{var F;return((F=a.value)==null?void 0:F.format)==="application/pdf"}),w=Ae(()=>{var F,D,O,B,k,M,N;return((F=v==null?void 0:v.value)==null?void 0:F.organisationType)&&((O=(D=a.value)==null?void 0:D.metadata.docType)==null?void 0:O.print)&&((N=(k=(B=a.value)==null?void 0:B.metadata.docType)==null?void 0:k.rights)==null?void 0:N.print.includes((M=v==null?void 0:v.value)==null?void 0:M.organisationType._id))}),S=Ae(()=>{var F,D,O,B,k,M,N;return((F=v==null?void 0:v.value)==null?void 0:F.organisationType)&&((O=(D=a.value)==null?void 0:D.metadata.docType)==null?void 0:O.download)&&((N=(k=(B=a.value)==null?void 0:B.metadata.docType)==null?void 0:k.rights)==null?void 0:N.download.includes((M=v==null?void 0:v.value)==null?void 0:M.organisationType._id))});Yr(()=>p.value,F=>u("pdfLoad",F));const P=(F,D)=>g.value?(h.height=D-F-F,{minHeight:F?`calc(100vh - ${F}px)`:"100vh",height:F?`calc(100vh - ${F}px)`:"100vh"}):{minHeight:F?`calc(100vh - ${F}px)`:"100vh"},C=F=>{p.value=F},A=me(null);return is(async()=>{var F,D,O,B;(s.query.source==="tol"||s.name==="documentPreview")&&n.$patch({productContext:void 0}),((F=s.query)==null?void 0:F.offline)==="true"?await n.loadOfflineDocument(s.params.id.toString()):await n.loadDocument(s.params.id.toString()),g.value||(await r.getAllMetadataTypes(),((O=(D=s.query)==null?void 0:D.topics)==null?void 0:O.length)&&Number(((B=s.query)==null?void 0:B.active)||-1)>-1?n.initTabsFromUrl():(n.addNewTab(s.params.id.toString(),o.value.id),n.$patch({tocSelection:o.value.id})))}),Ra(()=>{n.$reset()}),Yr(()=>s.fullPath,()=>{n.initTabsFromUrl()}),(F,D)=>(G(),oe(wh,{"style-fn":P,class:"relative-print"},{default:V(()=>{var O,B,k,M,N,T;return[!g.value&&(!U(a)||!U(i))?(G(),xe(Ke,{key:0},st(25,W=>I(Zd,{key:W,type:"rect",animation:"wave",square:!0,tag:"div",class:"q-mb-md q-mx-md"})),64)):(G(),xe(Ke,{key:1},[((O=U(a))==null?void 0:O.format)==="application/json"&&U(i)?(G(),oe(F0,{key:0,loading:d.value},null,8,["loading"])):g.value&&((B=U(a))==null?void 0:B.metadata.docType)?(G(),oe(xh,{key:1},{fallback:V(()=>[I(os,null,{default:V(()=>[I(as,{size:"50px",color:"primary"})]),_:1})]),default:V(()=>[I(Lm,{ref_key:"pdfViewer",ref:A,src:y.value,"can-download":S.value,"can-print":w.value,height:h.height,document:U(a),onUpdateToc:C},null,8,["src","can-download","can-print","height","document"])]),_:1})):Me("",!0),U(i)?(G(),oe(M0,{key:2,"topic-data":U(i)},null,8,["topic-data"])):Me("",!0),U(i)?(G(),oe(A0,{key:3,"topic-data":U(i)},null,8,["topic-data"])):Me("",!0),(N=(M=(k=U(a))==null?void 0:k.metadata)==null?void 0:M.docType)!=null&&/*N.hideWatermark*/true?Me("",!0):(G(),xe("div",{key:4,class:"print-only text-h2 text-grey-2 text-bold z-max text-center full-width q-px-xl flex flex-center",style:zt([{position:"fixed",top:"50%",left:"50%",translate:"-50% -50%",opacity:"0.2"},{height:`${h.height}px`}])},[ue("div",Wm,fe(U(l)("watermark",[(T=U(v))==null?void 0:T.user.email,new Date().toLocaleString(),U(c),new Date().getFullYear()])),1)],4))],64))]}),_:1}))}});export{gb as default};
//# sourceMappingURL=data:application/json;base64,
