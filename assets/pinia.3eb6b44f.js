import{b as y,c as _,s as O}from"./index.6def9867.js";function P(t){return typeof t=="object"&&t!==null}function h(t,r){return t=P(t)?t:Object.create(null),new Proxy(t,{get(i,o,e){return o==="key"?Reflect.get(i,o,e):Reflect.get(i,o,e)||Reflect.get(r,o,e)}})}function j(t,r){return r.reduce((i,o)=>i==null?void 0:i[o],t)}function A(t,r,i){return r.slice(0,-1).reduce((o,e)=>/^(__proto__)$/.test(e)?{}:o[e]=o[e]||{},t)[r[r.length-1]]=i,t}function R(t,r){return r.reduce((i,o)=>{const e=o.split(".");return A(i,e,j(t,e))},{})}function L(t,r){return i=>{var o;try{const{storage:e=localStorage,beforeRestore:l=void 0,afterRestore:n=void 0,serializer:s={serialize:JSON.stringify,deserialize:JSON.parse},key:a=r.$id,paths:u=null,debug:g=!1}=i;return{storage:e,beforeRestore:l,afterRestore:n,serializer:s,key:((o=t.key)!=null?o:d=>d)(typeof a=="string"?a:a(r.$id)),paths:u,debug:g}}catch(e){return i.debug&&console.error("[pinia-plugin-persistedstate]",e),null}}}function b(t,{storage:r,serializer:i,key:o,debug:e}){try{const l=r==null?void 0:r.getItem(o);l&&t.$patch(i==null?void 0:i.deserialize(l))}catch(l){e&&console.error("[pinia-plugin-persistedstate]",l)}}function m(t,{storage:r,serializer:i,key:o,paths:e,debug:l}){try{const n=Array.isArray(e)?R(t,e):t;r.setItem(o,i.serialize(n))}catch(n){l&&console.error("[pinia-plugin-persistedstate]",n)}}function D(t={}){return r=>{const{auto:i=!1}=t,{options:{persist:o=i},store:e,pinia:l}=r;if(!o)return;if(!(e.$id in l.state.value)){const s=l._s.get(e.$id.replace("__hot:",""));s&&Promise.resolve().then(()=>s.$persist());return}const n=(Array.isArray(o)?o.map(s=>h(s,t)):[h(o,t)]).map(L(t,e)).filter(Boolean);e.$persist=()=>{n.forEach(s=>{m(e.$state,s)})},e.$hydrate=({runHooks:s=!0}={})=>{n.forEach(a=>{const{beforeRestore:u,afterRestore:g}=a;s&&(u==null||u(r)),b(e,a),s&&(g==null||g(r))})},n.forEach(s=>{const{beforeRestore:a,afterRestore:u}=s;a==null||a(r),b(e,s),u==null||u(r),e.$subscribe((g,d)=>{m(d,s)},{detached:!0})})}}var N=D(),T={};(function(t){Object.defineProperty(t,"__esModule",{value:!0}),t.PiniaLogger=void 0;const r=(e=new Date)=>{const l=e.getHours().toString().padStart(2,"0"),n=e.getMinutes().toString().padStart(2,"0"),s=e.getSeconds().toString().padStart(2,"0"),a=e.getMilliseconds().toString();return`${l}:${n}:${s}:${a}`},i={logErrors:!0,disabled:!1,expanded:!0,showStoreName:!0,showDuration:!1,showTime:!0,showPineapple:!0,actions:void 0,filter:()=>!0},o=(e=i)=>l=>{const n=Object.assign(Object.assign(Object.assign({},i),e),typeof l.options.logger=="object"?l.options.logger:{}),s=e.logger||console;n.disabled||l.options.logger===!1||l.store.$onAction(a=>{var u;if(Array.isArray(n.actions)&&!(!((u=n.actions)===null||u===void 0)&&u.includes(a.name)))return;const g=Date.now(),d=Object.assign({},l.store.$state),f=(c,p)=>{const $=Date.now()-g+"ms",v=Object.assign({},l.store.$state),S=a.store.$id,w=`action ${n.showPineapple?"\u{1F34D} ":""}${n.showStoreName?`[${S}] `:""}${a.name} ${c?`failed ${n.showDuration?`after ${$} `:""}`:""}${n.showTime?`@ ${r()}`:""}`;s[n.expanded?"group":"groupCollapsed"](`%c${w}`,`font-weight: bold; ${c?"color: #ed4981;":""}`),s.log("%cprev state","font-weight: bold; color: grey;",d),s.log("%caction","font-weight: bold; color: #69B7FF;",Object.assign(Object.assign(Object.assign({type:a.name,args:a.args.length>0?Object.assign({},a.args):void 0},n.showStoreName&&{store:a.store.$id}),n.showDuration&&{duration:$}),c&&{error:p})),s.log("%cnext state","font-weight: bold; color: #4caf50;",v),s.groupEnd()};a.after(()=>{var c;((c=n.filter&&n.filter(a))!==null&&c!==void 0?c:!1)&&f()}),n.logErrors&&a.onError(c=>{f(!0,c)})})};t.PiniaLogger=o,t.default=t.PiniaLogger})(T);var M=y(({app:t})=>{const r=_();O(r),r.use(N),t.use(r)});export{M as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
