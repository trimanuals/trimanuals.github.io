import{o as s,f as F,ba as z,r as M,n as i,N as b,P as A,ae as E,T as L,S as x,U as P,bb as R,bc as p,bd as T,a8 as B}from"./index.6def9867.js";import{Q as C}from"./QMarkupTable.f2c9676f.js";import{u as N,b as O}from"./QSelect.afec6258.js";function U(e,t){return s("div",e,[s("table",{class:"q-table"},t)])}const k={list:R,table:C},w=["list","table","__qtable"];var $=F({name:"QVirtualScroll",props:{...N,type:{type:String,default:"list",validator:e=>w.includes(e)},items:{type:Array,default:()=>[]},itemsFn:Function,itemsSize:Number,scrollTarget:z},setup(e,{slots:t,attrs:v}){let l;const o=M(null),n=i(()=>e.itemsSize>=0&&e.itemsFn!==void 0?parseInt(e.itemsSize,10):Array.isArray(e.items)?e.items.length:0),{virtualScrollSliceRange:r,localResetVirtualScroll:d,padVirtualScroll:y,onVirtualScrollEvt:f}=O({virtualScrollLength:n,getVirtualScrollTarget:_,getVirtualScrollEl:S}),V=i(()=>{if(n.value===0)return[];const a=(q,Q)=>({index:r.value.from+Q,item:q});return e.itemsFn===void 0?e.items.slice(r.value.from,r.value.to).map(a):e.itemsFn(r.value.from,r.value.to-r.value.from).map(a)}),m=i(()=>"q-virtual-scroll q-virtual-scroll"+(e.virtualScrollHorizontal===!0?"--horizontal":"--vertical")+(e.scrollTarget!==void 0?"":" scroll")),h=i(()=>e.scrollTarget!==void 0?{}:{tabindex:0});b(n,()=>{d()}),b(()=>e.scrollTarget,()=>{u(),c()});function S(){return o.value.$el||o.value}function _(){return l}function c(){l=p(S(),e.scrollTarget),l.addEventListener("scroll",f,T.passive)}function u(){l!==void 0&&(l.removeEventListener("scroll",f,T.passive),l=void 0)}function g(){let a=y(e.type==="list"?"div":"tbody",V.value.map(t.default));return t.before!==void 0&&(a=t.before().concat(a)),B(t.after,a)}return A(()=>{d()}),E(()=>{c()}),L(()=>{c()}),x(()=>{u()}),P(()=>{u()}),()=>{if(t.default===void 0){console.error("QVirtualScroll: default scoped slot is required for rendering");return}return e.type==="__qtable"?U({ref:o,class:"q-table__middle "+m.value},g()):s(k[e.type],{...v,ref:o,class:[v.class,m.value],...h.value},g)}}});export{$ as Q,U as g};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
