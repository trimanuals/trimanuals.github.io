var Zi=Object.defineProperty;var ts=(_t,d,st)=>d in _t?Zi(_t,d,{enumerable:!0,configurable:!0,writable:!0,value:st}):_t[d]=st;var ee=(_t,d,st)=>(ts(_t,typeof d!="symbol"?d+"":d,st),st),Ne=(_t,d,st)=>{if(!d.has(_t))throw TypeError("Cannot "+st)};var t=(_t,d,st)=>(Ne(_t,d,"read from private field"),st?st.call(_t):d.get(_t)),I=(_t,d,st)=>{if(d.has(_t))throw TypeError("Cannot add the same private member more than once");d instanceof WeakSet?d.add(_t):d.set(_t,st)},Z=(_t,d,st,h)=>(Ne(_t,d,"write to private field"),h?h.call(_t,st):d.set(_t,st),st),ge=(_t,d,st,h)=>({set _(F){Z(_t,d,F,st)},get _(){return t(_t,d,h)}}),W=(_t,d,st)=>(Ne(_t,d,"access private method"),st);import{eA as getAugmentedNamespace,bG as getDefaultExportFromCjs,eP as commonjsRequire}from"./index.6def9867.js";function _mergeNamespaces(_t,d){return d.forEach(function(st){st&&typeof st!="string"&&!Array.isArray(st)&&Object.keys(st).forEach(function(h){if(h!=="default"&&!(h in _t)){var F=Object.getOwnPropertyDescriptor(st,h);Object.defineProperty(_t,h,F.get?F:{enumerable:!0,get:function(){return st[h]}})}})}),Object.freeze(Object.defineProperty(_t,Symbol.toStringTag,{value:"Module"}))}var pdf$2={exports:{}},__viteBrowserExternal={},__viteBrowserExternal$1=Object.freeze(Object.defineProperty({__proto__:null,default:__viteBrowserExternal},Symbol.toStringTag,{value:"Module"})),require$$0=getAugmentedNamespace(__viteBrowserExternal$1);(function(module,exports){(function(d,st){module.exports=d.pdfjsLib=st()})(globalThis,()=>(()=>{var __webpack_modules__=[,(_t,d)=>{var $t;Object.defineProperty(d,"__esModule",{value:!0}),d.VerbosityLevel=d.Util=d.UnknownErrorException=d.UnexpectedResponseException=d.TextRenderingMode=d.RenderingIntentFlag=d.PromiseCapability=d.PermissionFlag=d.PasswordResponses=d.PasswordException=d.PageActionEventType=d.OPS=d.MissingPDFException=d.MAX_IMAGE_SIZE_TO_CACHE=d.LINE_FACTOR=d.LINE_DESCENT_FACTOR=d.InvalidPDFException=d.ImageKind=d.IDENTITY_MATRIX=d.FormatError=d.FeatureTest=d.FONT_IDENTITY_MATRIX=d.DocumentActionEventType=d.CMapCompressionType=d.BaseException=d.BASELINE_FACTOR=d.AnnotationType=d.AnnotationReplyType=d.AnnotationPrefix=d.AnnotationMode=d.AnnotationFlag=d.AnnotationFieldFlag=d.AnnotationEditorType=d.AnnotationEditorPrefix=d.AnnotationEditorParamsType=d.AnnotationBorderStyleType=d.AnnotationActionEventType=d.AbortException=void 0,d.assert=lt,d.bytesToString=N,d.createValidAbsoluteUrl=Ct,d.getModificationDate=Tt,d.getUuid=Xt,d.getVerbosityLevel=$,d.info=it,d.isArrayBuffer=ht,d.isArrayEqual=Et,d.isNodeJS=void 0,d.normalizeUnicode=qt,d.objectFromMap=ct,d.objectSize=nt,d.setVerbosityLevel=E,d.shadow=kt,d.string32=Q,d.stringToBytes=tt,d.stringToPDFString=ft,d.stringToUTF8String=K,d.unreachable=H,d.utf8StringToString=J,d.warn=at;const st=typeof process=="object"&&process+""=="[object process]"&&!process.versions.nw&&!(process.versions.electron&&process.type&&process.type!=="browser");d.isNodeJS=st;const h=[1,0,0,1,0,0];d.IDENTITY_MATRIX=h;const F=[.001,0,0,.001,0,0];d.FONT_IDENTITY_MATRIX=F;const ot=1e7;d.MAX_IMAGE_SIZE_TO_CACHE=ot;const G=1.35;d.LINE_FACTOR=G;const ut=.35;d.LINE_DESCENT_FACTOR=ut;const B=ut/G;d.BASELINE_FACTOR=B;const P={ANY:1,DISPLAY:2,PRINT:4,SAVE:8,ANNOTATIONS_FORMS:16,ANNOTATIONS_STORAGE:32,ANNOTATIONS_DISABLE:64,OPLIST:256};d.RenderingIntentFlag=P;const g={DISABLE:0,ENABLE:1,ENABLE_FORMS:2,ENABLE_STORAGE:3};d.AnnotationMode=g;const L="pdfjs_internal_editor_";d.AnnotationEditorPrefix=L;const O={DISABLE:-1,NONE:0,FREETEXT:3,STAMP:13,INK:15};d.AnnotationEditorType=O;const x={RESIZE:1,CREATE:2,FREETEXT_SIZE:11,FREETEXT_COLOR:12,FREETEXT_OPACITY:13,INK_COLOR:21,INK_THICKNESS:22,INK_OPACITY:23};d.AnnotationEditorParamsType=x;const v={PRINT:4,MODIFY_CONTENTS:8,COPY:16,MODIFY_ANNOTATIONS:32,FILL_INTERACTIVE_FORMS:256,COPY_FOR_ACCESSIBILITY:512,ASSEMBLE:1024,PRINT_HIGH_QUALITY:2048};d.PermissionFlag=v;const y={FILL:0,STROKE:1,FILL_STROKE:2,INVISIBLE:3,FILL_ADD_TO_PATH:4,STROKE_ADD_TO_PATH:5,FILL_STROKE_ADD_TO_PATH:6,ADD_TO_PATH:7,FILL_STROKE_MASK:3,ADD_TO_PATH_FLAG:4};d.TextRenderingMode=y;const u={GRAYSCALE_1BPP:1,RGB_24BPP:2,RGBA_32BPP:3};d.ImageKind=u;const b={TEXT:1,LINK:2,FREETEXT:3,LINE:4,SQUARE:5,CIRCLE:6,POLYGON:7,POLYLINE:8,HIGHLIGHT:9,UNDERLINE:10,SQUIGGLY:11,STRIKEOUT:12,STAMP:13,CARET:14,INK:15,POPUP:16,FILEATTACHMENT:17,SOUND:18,MOVIE:19,WIDGET:20,SCREEN:21,PRINTERMARK:22,TRAPNET:23,WATERMARK:24,THREED:25,REDACT:26};d.AnnotationType=b;const w={GROUP:"Group",REPLY:"R"};d.AnnotationReplyType=w;const C={INVISIBLE:1,HIDDEN:2,PRINT:4,NOZOOM:8,NOROTATE:16,NOVIEW:32,READONLY:64,LOCKED:128,TOGGLENOVIEW:256,LOCKEDCONTENTS:512};d.AnnotationFlag=C;const A={READONLY:1,REQUIRED:2,NOEXPORT:4,MULTILINE:4096,PASSWORD:8192,NOTOGGLETOOFF:16384,RADIO:32768,PUSHBUTTON:65536,COMBO:131072,EDIT:262144,SORT:524288,FILESELECT:1048576,MULTISELECT:2097152,DONOTSPELLCHECK:4194304,DONOTSCROLL:8388608,COMB:16777216,RICHTEXT:33554432,RADIOSINUNISON:33554432,COMMITONSELCHANGE:67108864};d.AnnotationFieldFlag=A;const a={SOLID:1,DASHED:2,BEVELED:3,INSET:4,UNDERLINE:5};d.AnnotationBorderStyleType=a;const l={E:"Mouse Enter",X:"Mouse Exit",D:"Mouse Down",U:"Mouse Up",Fo:"Focus",Bl:"Blur",PO:"PageOpen",PC:"PageClose",PV:"PageVisible",PI:"PageInvisible",K:"Keystroke",F:"Format",V:"Validate",C:"Calculate"};d.AnnotationActionEventType=l;const k={WC:"WillClose",WS:"WillSave",DS:"DidSave",WP:"WillPrint",DP:"DidPrint"};d.DocumentActionEventType=k;const p={O:"PageOpen",C:"PageClose"};d.PageActionEventType=p;const r={ERRORS:0,WARNINGS:1,INFOS:5};d.VerbosityLevel=r;const T={NONE:0,BINARY:1};d.CMapCompressionType=T;const m={dependency:1,setLineWidth:2,setLineCap:3,setLineJoin:4,setMiterLimit:5,setDash:6,setRenderingIntent:7,setFlatness:8,setGState:9,save:10,restore:11,transform:12,moveTo:13,lineTo:14,curveTo:15,curveTo2:16,curveTo3:17,closePath:18,rectangle:19,stroke:20,closeStroke:21,fill:22,eoFill:23,fillStroke:24,eoFillStroke:25,closeFillStroke:26,closeEOFillStroke:27,endPath:28,clip:29,eoClip:30,beginText:31,endText:32,setCharSpacing:33,setWordSpacing:34,setHScale:35,setLeading:36,setFont:37,setTextRenderingMode:38,setTextRise:39,moveText:40,setLeadingMoveText:41,setTextMatrix:42,nextLine:43,showText:44,showSpacedText:45,nextLineShowText:46,nextLineSetSpacingShowText:47,setCharWidth:48,setCharWidthAndBounds:49,setStrokeColorSpace:50,setFillColorSpace:51,setStrokeColor:52,setStrokeColorN:53,setFillColor:54,setFillColorN:55,setStrokeGray:56,setFillGray:57,setStrokeRGBColor:58,setFillRGBColor:59,setStrokeCMYKColor:60,setFillCMYKColor:61,shadingFill:62,beginInlineImage:63,beginImageData:64,endInlineImage:65,paintXObject:66,markPoint:67,markPointProps:68,beginMarkedContent:69,beginMarkedContentProps:70,endMarkedContent:71,beginCompat:72,endCompat:73,paintFormXObjectBegin:74,paintFormXObjectEnd:75,beginGroup:76,endGroup:77,beginAnnotation:80,endAnnotation:81,paintImageMaskXObject:83,paintImageMaskXObjectGroup:84,paintImageXObject:85,paintInlineImageXObject:86,paintInlineImageXObjectGroup:87,paintImageXObjectRepeat:88,paintImageMaskXObjectRepeat:89,paintSolidColorImageMask:90,constructPath:91};d.OPS=m;const U={NEED_PASSWORD:1,INCORRECT_PASSWORD:2};d.PasswordResponses=U;let X=r.WARNINGS;function E(rt){Number.isInteger(rt)&&(X=rt)}function $(){return X}function it(rt){X>=r.INFOS&&console.log(`Info: ${rt}`)}function at(rt){X>=r.WARNINGS&&console.log(`Warning: ${rt}`)}function H(rt){throw new Error(rt)}function lt(rt,Y){rt||H(Y)}function pt(rt){switch(rt==null?void 0:rt.protocol){case"http:":case"https:":case"ftp:":case"mailto:":case"tel:":return!0;default:return!1}}function Ct(rt,Y=null,z=null){if(!rt)return null;try{if(z&&typeof rt=="string"){if(z.addDefaultProtocol&&rt.startsWith("www.")){const yt=rt.match(/\./g);(yt==null?void 0:yt.length)>=2&&(rt=`http://${rt}`)}if(z.tryConvertEncoding)try{rt=K(rt)}catch{}}const mt=Y?new URL(rt,Y):new URL(rt);if(pt(mt))return mt}catch{}return null}function kt(rt,Y,z,mt=!1){return Object.defineProperty(rt,Y,{value:z,enumerable:!mt,configurable:!0,writable:!1}),z}const S=function(){function Y(z,mt){this.constructor===Y&&H("Cannot initialize BaseException."),this.message=z,this.name=mt}return Y.prototype=new Error,Y.constructor=Y,Y}();d.BaseException=S;class i extends S{constructor(Y,z){super(Y,"PasswordException"),this.code=z}}d.PasswordException=i;class n extends S{constructor(Y,z){super(Y,"UnknownErrorException"),this.details=z}}d.UnknownErrorException=n;class s extends S{constructor(Y){super(Y,"InvalidPDFException")}}d.InvalidPDFException=s;class o extends S{constructor(Y){super(Y,"MissingPDFException")}}d.MissingPDFException=o;class c extends S{constructor(Y,z){super(Y,"UnexpectedResponseException"),this.status=z}}d.UnexpectedResponseException=c;class _ extends S{constructor(Y){super(Y,"FormatError")}}d.FormatError=_;class M extends S{constructor(Y){super(Y,"AbortException")}}d.AbortException=M;function N(rt){(typeof rt!="object"||(rt==null?void 0:rt.length)===void 0)&&H("Invalid argument for bytesToString");const Y=rt.length,z=8192;if(Y<z)return String.fromCharCode.apply(null,rt);const mt=[];for(let yt=0;yt<Y;yt+=z){const te=Math.min(yt+z,Y),Zt=rt.subarray(yt,te);mt.push(String.fromCharCode.apply(null,Zt))}return mt.join("")}function tt(rt){typeof rt!="string"&&H("Invalid argument for stringToBytes");const Y=rt.length,z=new Uint8Array(Y);for(let mt=0;mt<Y;++mt)z[mt]=rt.charCodeAt(mt)&255;return z}function Q(rt){return String.fromCharCode(rt>>24&255,rt>>16&255,rt>>8&255,rt&255)}function nt(rt){return Object.keys(rt).length}function ct(rt){const Y=Object.create(null);for(const[z,mt]of rt)Y[z]=mt;return Y}function At(){const rt=new Uint8Array(4);return rt[0]=1,new Uint32Array(rt.buffer,0,1)[0]===1}function dt(){try{return new Function(""),!0}catch{return!1}}class Ft{static get isLittleEndian(){return kt(this,"isLittleEndian",At())}static get isEvalSupported(){return kt(this,"isEvalSupported",dt())}static get isOffscreenCanvasSupported(){return kt(this,"isOffscreenCanvasSupported",typeof OffscreenCanvas!="undefined")}static get platform(){return typeof navigator=="undefined"?kt(this,"platform",{isWin:!1,isMac:!1}):kt(this,"platform",{isWin:navigator.platform.includes("Win"),isMac:navigator.platform.includes("Mac")})}static get isCSSRoundSupported(){var Y,z;return kt(this,"isCSSRoundSupported",(z=(Y=globalThis.CSS)==null?void 0:Y.supports)==null?void 0:z.call(Y,"width: round(1.5px, 1px)"))}}d.FeatureTest=Ft;const Bt=[...Array(256).keys()].map(rt=>rt.toString(16).padStart(2,"0"));class St{static makeHexColor(Y,z,mt){return`#${Bt[Y]}${Bt[z]}${Bt[mt]}`}static scaleMinMax(Y,z){let mt;Y[0]?(Y[0]<0&&(mt=z[0],z[0]=z[1],z[1]=mt),z[0]*=Y[0],z[1]*=Y[0],Y[3]<0&&(mt=z[2],z[2]=z[3],z[3]=mt),z[2]*=Y[3],z[3]*=Y[3]):(mt=z[0],z[0]=z[2],z[2]=mt,mt=z[1],z[1]=z[3],z[3]=mt,Y[1]<0&&(mt=z[2],z[2]=z[3],z[3]=mt),z[2]*=Y[1],z[3]*=Y[1],Y[2]<0&&(mt=z[0],z[0]=z[1],z[1]=mt),z[0]*=Y[2],z[1]*=Y[2]),z[0]+=Y[4],z[1]+=Y[4],z[2]+=Y[5],z[3]+=Y[5]}static transform(Y,z){return[Y[0]*z[0]+Y[2]*z[1],Y[1]*z[0]+Y[3]*z[1],Y[0]*z[2]+Y[2]*z[3],Y[1]*z[2]+Y[3]*z[3],Y[0]*z[4]+Y[2]*z[5]+Y[4],Y[1]*z[4]+Y[3]*z[5]+Y[5]]}static applyTransform(Y,z){const mt=Y[0]*z[0]+Y[1]*z[2]+z[4],yt=Y[0]*z[1]+Y[1]*z[3]+z[5];return[mt,yt]}static applyInverseTransform(Y,z){const mt=z[0]*z[3]-z[1]*z[2],yt=(Y[0]*z[3]-Y[1]*z[2]+z[2]*z[5]-z[4]*z[3])/mt,te=(-Y[0]*z[1]+Y[1]*z[0]+z[4]*z[1]-z[5]*z[0])/mt;return[yt,te]}static getAxialAlignedBoundingBox(Y,z){const mt=this.applyTransform(Y,z),yt=this.applyTransform(Y.slice(2,4),z),te=this.applyTransform([Y[0],Y[3]],z),Zt=this.applyTransform([Y[2],Y[1]],z);return[Math.min(mt[0],yt[0],te[0],Zt[0]),Math.min(mt[1],yt[1],te[1],Zt[1]),Math.max(mt[0],yt[0],te[0],Zt[0]),Math.max(mt[1],yt[1],te[1],Zt[1])]}static inverseTransform(Y){const z=Y[0]*Y[3]-Y[1]*Y[2];return[Y[3]/z,-Y[1]/z,-Y[2]/z,Y[0]/z,(Y[2]*Y[5]-Y[4]*Y[3])/z,(Y[4]*Y[1]-Y[5]*Y[0])/z]}static singularValueDecompose2dScale(Y){const z=[Y[0],Y[2],Y[1],Y[3]],mt=Y[0]*z[0]+Y[1]*z[2],yt=Y[0]*z[1]+Y[1]*z[3],te=Y[2]*z[0]+Y[3]*z[2],Zt=Y[2]*z[1]+Y[3]*z[3],q=(mt+Zt)/2,vt=Math.sqrt((mt+Zt)**2-4*(mt*Zt-te*yt))/2,It=q+vt||1,xt=q-vt||1;return[Math.sqrt(It),Math.sqrt(xt)]}static normalizeRect(Y){const z=Y.slice(0);return Y[0]>Y[2]&&(z[0]=Y[2],z[2]=Y[0]),Y[1]>Y[3]&&(z[1]=Y[3],z[3]=Y[1]),z}static intersect(Y,z){const mt=Math.max(Math.min(Y[0],Y[2]),Math.min(z[0],z[2])),yt=Math.min(Math.max(Y[0],Y[2]),Math.max(z[0],z[2]));if(mt>yt)return null;const te=Math.max(Math.min(Y[1],Y[3]),Math.min(z[1],z[3])),Zt=Math.min(Math.max(Y[1],Y[3]),Math.max(z[1],z[3]));return te>Zt?null:[mt,te,yt,Zt]}static bezierBoundingBox(Y,z,mt,yt,te,Zt,q,vt){const It=[],xt=[[],[]];let Lt,Nt,Jt,bt,Yt,Ot,R,e;for(let V=0;V<2;++V){if(V===0?(Nt=6*Y-12*mt+6*te,Lt=-3*Y+9*mt-9*te+3*q,Jt=3*mt-3*Y):(Nt=6*z-12*yt+6*Zt,Lt=-3*z+9*yt-9*Zt+3*vt,Jt=3*yt-3*z),Math.abs(Lt)<1e-12){if(Math.abs(Nt)<1e-12)continue;bt=-Jt/Nt,0<bt&&bt<1&&It.push(bt);continue}R=Nt*Nt-4*Jt*Lt,e=Math.sqrt(R),!(R<0)&&(Yt=(-Nt+e)/(2*Lt),0<Yt&&Yt<1&&It.push(Yt),Ot=(-Nt-e)/(2*Lt),0<Ot&&Ot<1&&It.push(Ot))}let f=It.length,D;const j=f;for(;f--;)bt=It[f],D=1-bt,xt[0][f]=D*D*D*Y+3*D*D*bt*mt+3*D*bt*bt*te+bt*bt*bt*q,xt[1][f]=D*D*D*z+3*D*D*bt*yt+3*D*bt*bt*Zt+bt*bt*bt*vt;return xt[0][j]=Y,xt[1][j]=z,xt[0][j+1]=q,xt[1][j+1]=vt,xt[0].length=xt[1].length=j+2,[Math.min(...xt[0]),Math.min(...xt[1]),Math.max(...xt[0]),Math.max(...xt[1])]}}d.Util=St;const Dt=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,728,711,710,729,733,731,730,732,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8226,8224,8225,8230,8212,8211,402,8260,8249,8250,8722,8240,8222,8220,8221,8216,8217,8218,8482,64257,64258,321,338,352,376,381,305,322,339,353,382,0,8364];function ft(rt){if(rt[0]>="\xEF"){let z;if(rt[0]==="\xFE"&&rt[1]==="\xFF"?z="utf-16be":rt[0]==="\xFF"&&rt[1]==="\xFE"?z="utf-16le":rt[0]==="\xEF"&&rt[1]==="\xBB"&&rt[2]==="\xBF"&&(z="utf-8"),z)try{const mt=new TextDecoder(z,{fatal:!0}),yt=tt(rt);return mt.decode(yt)}catch(mt){at(`stringToPDFString: "${mt}".`)}}const Y=[];for(let z=0,mt=rt.length;z<mt;z++){const yt=Dt[rt.charCodeAt(z)];Y.push(yt?String.fromCharCode(yt):rt.charAt(z))}return Y.join("")}function K(rt){return decodeURIComponent(escape(rt))}function J(rt){return unescape(encodeURIComponent(rt))}function ht(rt){return typeof rt=="object"&&(rt==null?void 0:rt.byteLength)!==void 0}function Et(rt,Y){if(rt.length!==Y.length)return!1;for(let z=0,mt=rt.length;z<mt;z++)if(rt[z]!==Y[z])return!1;return!0}function Tt(rt=new Date){return[rt.getUTCFullYear().toString(),(rt.getUTCMonth()+1).toString().padStart(2,"0"),rt.getUTCDate().toString().padStart(2,"0"),rt.getUTCHours().toString().padStart(2,"0"),rt.getUTCMinutes().toString().padStart(2,"0"),rt.getUTCSeconds().toString().padStart(2,"0")].join("")}class Ht{constructor(){I(this,$t,!1);this.promise=new Promise((Y,z)=>{this.resolve=mt=>{Z(this,$t,!0),Y(mt)},this.reject=mt=>{Z(this,$t,!0),z(mt)}})}get settled(){return t(this,$t)}}$t=new WeakMap,d.PromiseCapability=Ht;let Wt=null,jt=null;function qt(rt){return Wt||(Wt=/([\u00a0\u00b5\u037e\u0eb3\u2000-\u200a\u202f\u2126\ufb00-\ufb04\ufb06\ufb20-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufba1\ufba4-\ufba9\ufbae-\ufbb1\ufbd3-\ufbdc\ufbde-\ufbe7\ufbea-\ufbf8\ufbfc-\ufbfd\ufc00-\ufc5d\ufc64-\ufcf1\ufcf5-\ufd3d\ufd88\ufdf4\ufdfa-\ufdfb\ufe71\ufe77\ufe79\ufe7b\ufe7d]+)|(\ufb05+)/gu,jt=new Map([["\uFB05","\u017Ft"]])),rt.replaceAll(Wt,(Y,z,mt)=>z?z.normalize("NFKC"):jt.get(mt))}function Xt(){if(typeof crypto!="undefined"&&typeof(crypto==null?void 0:crypto.randomUUID)=="function")return crypto.randomUUID();const rt=new Uint8Array(32);if(typeof crypto!="undefined"&&typeof(crypto==null?void 0:crypto.getRandomValues)=="function")crypto.getRandomValues(rt);else for(let Y=0;Y<32;Y++)rt[Y]=Math.floor(Math.random()*255);return N(rt)}const Gt="pdfjs_internal_id_";d.AnnotationPrefix=Gt},(__unused_webpack_module,exports,__w_pdfjs_require__)=>{var _t,st,h,F,he,G,Ee,B,P,g,L,O,x,v,y,u,we,w,C,Be,a,l;Object.defineProperty(exports,"__esModule",{value:!0}),exports.RenderTask=exports.PDFWorkerUtil=exports.PDFWorker=exports.PDFPageProxy=exports.PDFDocumentProxy=exports.PDFDocumentLoadingTask=exports.PDFDataRangeTransport=exports.LoopbackPort=exports.DefaultStandardFontDataFactory=exports.DefaultFilterFactory=exports.DefaultCanvasFactory=exports.DefaultCMapReaderFactory=void 0,Object.defineProperty(exports,"SVGGraphics",{enumerable:!0,get:function(){return _displaySvg.SVGGraphics}}),exports.build=void 0,exports.getDocument=getDocument,exports.version=void 0;var _util=__w_pdfjs_require__(1),_annotation_storage=__w_pdfjs_require__(3),_display_utils=__w_pdfjs_require__(6),_font_loader=__w_pdfjs_require__(9),_displayNode_utils=__w_pdfjs_require__(10),_canvas=__w_pdfjs_require__(11),_worker_options=__w_pdfjs_require__(14),_message_handler=__w_pdfjs_require__(15),_metadata=__w_pdfjs_require__(16),_optional_content_config=__w_pdfjs_require__(17),_transport_stream=__w_pdfjs_require__(18),_displayFetch_stream=__w_pdfjs_require__(19),_displayNetwork=__w_pdfjs_require__(22),_displayNode_stream=__w_pdfjs_require__(23),_displaySvg=__w_pdfjs_require__(24),_xfa_text=__w_pdfjs_require__(25);const DEFAULT_RANGE_CHUNK_SIZE=65536,RENDERING_CANCELLED_TIMEOUT=100,DELAYED_CLEANUP_TIMEOUT=5e3,DefaultCanvasFactory=_util.isNodeJS?_displayNode_utils.NodeCanvasFactory:_display_utils.DOMCanvasFactory;exports.DefaultCanvasFactory=DefaultCanvasFactory;const DefaultCMapReaderFactory=_util.isNodeJS?_displayNode_utils.NodeCMapReaderFactory:_display_utils.DOMCMapReaderFactory;exports.DefaultCMapReaderFactory=DefaultCMapReaderFactory;const DefaultFilterFactory=_util.isNodeJS?_displayNode_utils.NodeFilterFactory:_display_utils.DOMFilterFactory;exports.DefaultFilterFactory=DefaultFilterFactory;const DefaultStandardFontDataFactory=_util.isNodeJS?_displayNode_utils.NodeStandardFontDataFactory:_display_utils.DOMStandardFontDataFactory;exports.DefaultStandardFontDataFactory=DefaultStandardFontDataFactory;function getDocument(p){var Ht,Wt;if(typeof p=="string"||p instanceof URL?p={url:p}:(0,_util.isArrayBuffer)(p)&&(p={data:p}),typeof p!="object")throw new Error("Invalid parameter in getDocument, need parameter object.");if(!p.url&&!p.data&&!p.range)throw new Error("Invalid parameter object: need either .data, .range or .url");const r=new PDFDocumentLoadingTask,{docId:T}=r,m=p.url?getUrlProp(p.url):null,U=p.data?getDataProp(p.data):null,X=p.httpHeaders||null,E=p.withCredentials===!0,$=(Ht=p.password)!=null?Ht:null,it=p.range instanceof PDFDataRangeTransport?p.range:null,at=Number.isInteger(p.rangeChunkSize)&&p.rangeChunkSize>0?p.rangeChunkSize:DEFAULT_RANGE_CHUNK_SIZE;let H=p.worker instanceof PDFWorker?p.worker:null;const lt=p.verbosity,pt=typeof p.docBaseUrl=="string"&&!(0,_display_utils.isDataScheme)(p.docBaseUrl)?p.docBaseUrl:null,Ct=typeof p.cMapUrl=="string"?p.cMapUrl:null,kt=p.cMapPacked!==!1,S=p.CMapReaderFactory||DefaultCMapReaderFactory,i=typeof p.standardFontDataUrl=="string"?p.standardFontDataUrl:null,n=p.StandardFontDataFactory||DefaultStandardFontDataFactory,s=p.stopAtErrors!==!0,o=Number.isInteger(p.maxImageSize)&&p.maxImageSize>-1?p.maxImageSize:-1,c=p.isEvalSupported!==!1,_=typeof p.isOffscreenCanvasSupported=="boolean"?p.isOffscreenCanvasSupported:!_util.isNodeJS,M=Number.isInteger(p.canvasMaxAreaInBytes)?p.canvasMaxAreaInBytes:-1,N=typeof p.disableFontFace=="boolean"?p.disableFontFace:_util.isNodeJS,tt=p.fontExtraProperties===!0,Q=p.enableXfa===!0,nt=p.ownerDocument||globalThis.document,ct=p.disableRange===!0,At=p.disableStream===!0,dt=p.disableAutoFetch===!0,Ft=p.pdfBug===!0,Bt=it?it.length:(Wt=p.length)!=null?Wt:NaN,St=typeof p.useSystemFonts=="boolean"?p.useSystemFonts:!_util.isNodeJS&&!N,Dt=typeof p.useWorkerFetch=="boolean"?p.useWorkerFetch:S===_display_utils.DOMCMapReaderFactory&&n===_display_utils.DOMStandardFontDataFactory&&Ct&&i&&(0,_display_utils.isValidFetchUrl)(Ct,document.baseURI)&&(0,_display_utils.isValidFetchUrl)(i,document.baseURI),ft=p.canvasFactory||new DefaultCanvasFactory({ownerDocument:nt}),K=p.filterFactory||new DefaultFilterFactory({docId:T,ownerDocument:nt}),J=null;(0,_util.setVerbosityLevel)(lt);const ht={canvasFactory:ft,filterFactory:K};if(Dt||(ht.cMapReaderFactory=new S({baseUrl:Ct,isCompressed:kt}),ht.standardFontDataFactory=new n({baseUrl:i})),!H){const jt={verbosity:lt,port:_worker_options.GlobalWorkerOptions.workerPort};H=jt.port?PDFWorker.fromPort(jt):new PDFWorker(jt),r._worker=H}const Et={docId:T,apiVersion:"3.11.174",data:U,password:$,disableAutoFetch:dt,rangeChunkSize:at,length:Bt,docBaseUrl:pt,enableXfa:Q,evaluatorOptions:{maxImageSize:o,disableFontFace:N,ignoreErrors:s,isEvalSupported:c,isOffscreenCanvasSupported:_,canvasMaxAreaInBytes:M,fontExtraProperties:tt,useSystemFonts:St,cMapUrl:Dt?Ct:null,standardFontDataUrl:Dt?i:null}},Tt={ignoreErrors:s,isEvalSupported:c,disableFontFace:N,fontExtraProperties:tt,enableXfa:Q,ownerDocument:nt,disableAutoFetch:dt,pdfBug:Ft,styleElement:J};return H.promise.then(function(){if(r.destroyed)throw new Error("Loading aborted");const jt=_fetchDocument(H,Et),qt=new Promise(function(Xt){let Gt;it?Gt=new _transport_stream.PDFDataTransportStream({length:Bt,initialData:it.initialData,progressiveDone:it.progressiveDone,contentDispositionFilename:it.contentDispositionFilename,disableRange:ct,disableStream:At},it):U||(Gt=(rt=>_util.isNodeJS?new _displayNode_stream.PDFNodeStream(rt):(0,_display_utils.isValidFetchUrl)(rt.url)?new _displayFetch_stream.PDFFetchStream(rt):new _displayNetwork.PDFNetworkStream(rt))({url:m,length:Bt,httpHeaders:X,withCredentials:E,rangeChunkSize:at,disableRange:ct,disableStream:At})),Xt(Gt)});return Promise.all([jt,qt]).then(function([Xt,Gt]){if(r.destroyed)throw new Error("Loading aborted");const $t=new _message_handler.MessageHandler(T,Xt,H.port),rt=new WorkerTransport($t,r,Gt,Tt,ht);r._transport=rt,$t.send("Ready",null)})}).catch(r._capability.reject),r}async function _fetchDocument(p,r){if(p.destroyed)throw new Error("Worker was destroyed");const T=await p.messageHandler.sendWithPromise("GetDocRequest",r,r.data?[r.data.buffer]:null);if(p.destroyed)throw new Error("Worker was destroyed");return T}function getUrlProp(p){if(p instanceof URL)return p.href;try{return new URL(p,window.location).href}catch{if(_util.isNodeJS&&typeof p=="string")return p}throw new Error("Invalid PDF url data: either string or URL-object is expected in the url property.")}function getDataProp(p){if(_util.isNodeJS&&typeof Buffer!="undefined"&&p instanceof Buffer)throw new Error("Please provide binary data as `Uint8Array`, rather than `Buffer`.");if(p instanceof Uint8Array&&p.byteLength===p.buffer.byteLength)return p;if(typeof p=="string")return(0,_util.stringToBytes)(p);if(typeof p=="object"&&!isNaN(p==null?void 0:p.length)||(0,_util.isArrayBuffer)(p))return new Uint8Array(p);throw new Error("Invalid PDF binary data: either TypedArray, string, or array-like object is expected in the data property.")}const d=class{constructor(){this._capability=new _util.PromiseCapability,this._transport=null,this._worker=null,this.docId=`d${ge(d,_t)._++}`,this.destroyed=!1,this.onPassword=null,this.onProgress=null}get promise(){return this._capability.promise}async destroy(){var r,T,m;this.destroyed=!0;try{(r=this._worker)!=null&&r.port&&(this._worker._pendingDestroy=!0),await((T=this._transport)==null?void 0:T.destroy())}catch(U){throw(m=this._worker)!=null&&m.port&&delete this._worker._pendingDestroy,U}this._transport=null,this._worker&&(this._worker.destroy(),this._worker=null)}};let PDFDocumentLoadingTask=d;_t=new WeakMap,I(PDFDocumentLoadingTask,_t,0),exports.PDFDocumentLoadingTask=PDFDocumentLoadingTask;class PDFDataRangeTransport{constructor(r,T,m=!1,U=null){this.length=r,this.initialData=T,this.progressiveDone=m,this.contentDispositionFilename=U,this._rangeListeners=[],this._progressListeners=[],this._progressiveReadListeners=[],this._progressiveDoneListeners=[],this._readyCapability=new _util.PromiseCapability}addRangeListener(r){this._rangeListeners.push(r)}addProgressListener(r){this._progressListeners.push(r)}addProgressiveReadListener(r){this._progressiveReadListeners.push(r)}addProgressiveDoneListener(r){this._progressiveDoneListeners.push(r)}onDataRange(r,T){for(const m of this._rangeListeners)m(r,T)}onDataProgress(r,T){this._readyCapability.promise.then(()=>{for(const m of this._progressListeners)m(r,T)})}onDataProgressiveRead(r){this._readyCapability.promise.then(()=>{for(const T of this._progressiveReadListeners)T(r)})}onDataProgressiveDone(){this._readyCapability.promise.then(()=>{for(const r of this._progressiveDoneListeners)r()})}transportReady(){this._readyCapability.resolve()}requestDataRange(r,T){(0,_util.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange")}abort(){}}exports.PDFDataRangeTransport=PDFDataRangeTransport;class PDFDocumentProxy{constructor(r,T){this._pdfInfo=r,this._transport=T,Object.defineProperty(this,"getJavaScript",{value:()=>((0,_display_utils.deprecated)("`PDFDocumentProxy.getJavaScript`, please use `PDFDocumentProxy.getJSActions` instead."),this.getJSActions().then(m=>{if(!m)return m;const U=[];for(const X in m)U.push(...m[X]);return U}))})}get annotationStorage(){return this._transport.annotationStorage}get filterFactory(){return this._transport.filterFactory}get numPages(){return this._pdfInfo.numPages}get fingerprints(){return this._pdfInfo.fingerprints}get isPureXfa(){return(0,_util.shadow)(this,"isPureXfa",!!this._transport._htmlForXfa)}get allXfaHtml(){return this._transport._htmlForXfa}getPage(r){return this._transport.getPage(r)}getPageIndex(r){return this._transport.getPageIndex(r)}getDestinations(){return this._transport.getDestinations()}getDestination(r){return this._transport.getDestination(r)}getPageLabels(){return this._transport.getPageLabels()}getPageLayout(){return this._transport.getPageLayout()}getPageMode(){return this._transport.getPageMode()}getViewerPreferences(){return this._transport.getViewerPreferences()}getOpenAction(){return this._transport.getOpenAction()}getAttachments(){return this._transport.getAttachments()}getJSActions(){return this._transport.getDocJSActions()}getOutline(){return this._transport.getOutline()}getOptionalContentConfig(){return this._transport.getOptionalContentConfig()}getPermissions(){return this._transport.getPermissions()}getMetadata(){return this._transport.getMetadata()}getMarkInfo(){return this._transport.getMarkInfo()}getData(){return this._transport.getData()}saveDocument(){return this._transport.saveDocument()}getDownloadInfo(){return this._transport.downloadInfoCapability.promise}cleanup(r=!1){return this._transport.startCleanup(r||this.isPureXfa)}destroy(){return this.loadingTask.destroy()}get loadingParams(){return this._transport.loadingParams}get loadingTask(){return this._transport.loadingTask}getFieldObjects(){return this._transport.getFieldObjects()}hasJSActions(){return this._transport.hasJSActions()}getCalculationOrderIds(){return this._transport.getCalculationOrderIds()}}exports.PDFDocumentProxy=PDFDocumentProxy;class PDFPageProxy{constructor(r,T,m,U=!1){I(this,F);I(this,G);I(this,st,null);I(this,h,!1);this._pageIndex=r,this._pageInfo=T,this._transport=m,this._stats=U?new _display_utils.StatTimer:null,this._pdfBug=U,this.commonObjs=m.commonObjs,this.objs=new PDFObjects,this._maybeCleanupAfterRender=!1,this._intentStates=new Map,this.destroyed=!1}get pageNumber(){return this._pageIndex+1}get rotate(){return this._pageInfo.rotate}get ref(){return this._pageInfo.ref}get userUnit(){return this._pageInfo.userUnit}get view(){return this._pageInfo.view}getViewport({scale:r,rotation:T=this.rotate,offsetX:m=0,offsetY:U=0,dontFlip:X=!1}={}){return new _display_utils.PageViewport({viewBox:this.view,scale:r,rotation:T,offsetX:m,offsetY:U,dontFlip:X})}getAnnotations({intent:r="display"}={}){const T=this._transport.getRenderingIntent(r);return this._transport.getAnnotations(this._pageIndex,T.renderingIntent)}getJSActions(){return this._transport.getPageJSActions(this._pageIndex)}get filterFactory(){return this._transport.filterFactory}get isPureXfa(){return(0,_util.shadow)(this,"isPureXfa",!!this._transport._htmlForXfa)}async getXfa(){var r;return((r=this._transport._htmlForXfa)==null?void 0:r.children[this._pageIndex])||null}render({canvasContext:r,viewport:T,intent:m="display",annotationMode:U=_util.AnnotationMode.ENABLE,transform:X=null,background:E=null,optionalContentConfigPromise:$=null,annotationCanvasMap:it=null,pageColors:at=null,printAnnotationStorage:H=null}){var n,s;(n=this._stats)==null||n.time("Overall");const lt=this._transport.getRenderingIntent(m,U,H);Z(this,h,!1),W(this,G,Ee).call(this),$||($=this._transport.getOptionalContentConfig());let pt=this._intentStates.get(lt.cacheKey);pt||(pt=Object.create(null),this._intentStates.set(lt.cacheKey,pt)),pt.streamReaderCancelTimeout&&(clearTimeout(pt.streamReaderCancelTimeout),pt.streamReaderCancelTimeout=null);const Ct=!!(lt.renderingIntent&_util.RenderingIntentFlag.PRINT);pt.displayReadyCapability||(pt.displayReadyCapability=new _util.PromiseCapability,pt.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},(s=this._stats)==null||s.time("Page Request"),this._pumpOperatorList(lt));const kt=o=>{var c,_;pt.renderTasks.delete(S),(this._maybeCleanupAfterRender||Ct)&&Z(this,h,!0),W(this,F,he).call(this,!Ct),o?(S.capability.reject(o),this._abortOperatorList({intentState:pt,reason:o instanceof Error?o:new Error(o)})):S.capability.resolve(),(c=this._stats)==null||c.timeEnd("Rendering"),(_=this._stats)==null||_.timeEnd("Overall")},S=new InternalRenderTask({callback:kt,params:{canvasContext:r,viewport:T,transform:X,background:E},objs:this.objs,commonObjs:this.commonObjs,annotationCanvasMap:it,operatorList:pt.operatorList,pageIndex:this._pageIndex,canvasFactory:this._transport.canvasFactory,filterFactory:this._transport.filterFactory,useRequestAnimationFrame:!Ct,pdfBug:this._pdfBug,pageColors:at});(pt.renderTasks||(pt.renderTasks=new Set)).add(S);const i=S.task;return Promise.all([pt.displayReadyCapability.promise,$]).then(([o,c])=>{var _;if(this.destroyed){kt();return}(_=this._stats)==null||_.time("Rendering"),S.initializeGraphics({transparency:o,optionalContentConfig:c}),S.operatorListChanged()}).catch(kt),i}getOperatorList({intent:r="display",annotationMode:T=_util.AnnotationMode.ENABLE,printAnnotationStorage:m=null}={}){var it;function U(){E.operatorList.lastChunk&&(E.opListReadCapability.resolve(E.operatorList),E.renderTasks.delete($))}const X=this._transport.getRenderingIntent(r,T,m,!0);let E=this._intentStates.get(X.cacheKey);E||(E=Object.create(null),this._intentStates.set(X.cacheKey,E));let $;return E.opListReadCapability||($=Object.create(null),$.operatorListChanged=U,E.opListReadCapability=new _util.PromiseCapability,(E.renderTasks||(E.renderTasks=new Set)).add($),E.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},(it=this._stats)==null||it.time("Page Request"),this._pumpOperatorList(X)),E.opListReadCapability.promise}streamTextContent({includeMarkedContent:r=!1,disableNormalization:T=!1}={}){return this._transport.messageHandler.sendWithStream("GetTextContent",{pageIndex:this._pageIndex,includeMarkedContent:r===!0,disableNormalization:T===!0},{highWaterMark:100,size(U){return U.items.length}})}getTextContent(r={}){if(this._transport._htmlForXfa)return this.getXfa().then(m=>_xfa_text.XfaText.textContent(m));const T=this.streamTextContent(r);return new Promise(function(m,U){function X(){E.read().then(function({value:it,done:at}){if(at){m($);return}Object.assign($.styles,it.styles),$.items.push(...it.items),X()},U)}const E=T.getReader(),$={items:[],styles:Object.create(null)};X()})}getStructTree(){return this._transport.getStructTree(this._pageIndex)}_destroy(){this.destroyed=!0;const r=[];for(const T of this._intentStates.values())if(this._abortOperatorList({intentState:T,reason:new Error("Page was destroyed."),force:!0}),!T.opListReadCapability)for(const m of T.renderTasks)r.push(m.completed),m.cancel();return this.objs.clear(),Z(this,h,!1),W(this,G,Ee).call(this),Promise.all(r)}cleanup(r=!1){Z(this,h,!0);const T=W(this,F,he).call(this,!1);return r&&T&&this._stats&&(this._stats=new _display_utils.StatTimer),T}_startRenderPage(r,T){var U,X;const m=this._intentStates.get(T);!m||((U=this._stats)==null||U.timeEnd("Page Request"),(X=m.displayReadyCapability)==null||X.resolve(r))}_renderPageChunk(r,T){for(let m=0,U=r.length;m<U;m++)T.operatorList.fnArray.push(r.fnArray[m]),T.operatorList.argsArray.push(r.argsArray[m]);T.operatorList.lastChunk=r.lastChunk,T.operatorList.separateAnnots=r.separateAnnots;for(const m of T.renderTasks)m.operatorListChanged();r.lastChunk&&W(this,F,he).call(this,!0)}_pumpOperatorList({renderingIntent:r,cacheKey:T,annotationStorageSerializable:m}){const{map:U,transfers:X}=m,$=this._transport.messageHandler.sendWithStream("GetOperatorList",{pageIndex:this._pageIndex,intent:r,cacheKey:T,annotationStorage:U},X).getReader(),it=this._intentStates.get(T);it.streamReader=$;const at=()=>{$.read().then(({value:H,done:lt})=>{if(lt){it.streamReader=null;return}this._transport.destroyed||(this._renderPageChunk(H,it),at())},H=>{if(it.streamReader=null,!this._transport.destroyed){if(it.operatorList){it.operatorList.lastChunk=!0;for(const lt of it.renderTasks)lt.operatorListChanged();W(this,F,he).call(this,!0)}if(it.displayReadyCapability)it.displayReadyCapability.reject(H);else if(it.opListReadCapability)it.opListReadCapability.reject(H);else throw H}})};at()}_abortOperatorList({intentState:r,reason:T,force:m=!1}){if(!!r.streamReader){if(r.streamReaderCancelTimeout&&(clearTimeout(r.streamReaderCancelTimeout),r.streamReaderCancelTimeout=null),!m){if(r.renderTasks.size>0)return;if(T instanceof _display_utils.RenderingCancelledException){let U=RENDERING_CANCELLED_TIMEOUT;T.extraDelay>0&&T.extraDelay<1e3&&(U+=T.extraDelay),r.streamReaderCancelTimeout=setTimeout(()=>{r.streamReaderCancelTimeout=null,this._abortOperatorList({intentState:r,reason:T,force:!0})},U);return}}if(r.streamReader.cancel(new _util.AbortException(T.message)).catch(()=>{}),r.streamReader=null,!this._transport.destroyed){for(const[U,X]of this._intentStates)if(X===r){this._intentStates.delete(U);break}this.cleanup()}}}get stats(){return this._stats}}st=new WeakMap,h=new WeakMap,F=new WeakSet,he=function(r=!1){if(W(this,G,Ee).call(this),!t(this,h)||this.destroyed)return!1;if(r)return Z(this,st,setTimeout(()=>{Z(this,st,null),W(this,F,he).call(this,!1)},DELAYED_CLEANUP_TIMEOUT)),!1;for(const{renderTasks:T,operatorList:m}of this._intentStates.values())if(T.size>0||!m.lastChunk)return!1;return this._intentStates.clear(),this.objs.clear(),Z(this,h,!1),!0},G=new WeakSet,Ee=function(){t(this,st)&&(clearTimeout(t(this,st)),Z(this,st,null))},exports.PDFPageProxy=PDFPageProxy;class LoopbackPort{constructor(){I(this,B,new Set);I(this,P,Promise.resolve())}postMessage(r,T){const m={data:structuredClone(r,T?{transfer:T}:null)};t(this,P).then(()=>{for(const U of t(this,B))U.call(this,m)})}addEventListener(r,T){t(this,B).add(T)}removeEventListener(r,T){t(this,B).delete(T)}terminate(){t(this,B).clear()}}B=new WeakMap,P=new WeakMap,exports.LoopbackPort=LoopbackPort;const PDFWorkerUtil={isWorkerDisabled:!1,fallbackWorkerSrc:null,fakeWorkerId:0};exports.PDFWorkerUtil=PDFWorkerUtil;{if(_util.isNodeJS&&typeof commonjsRequire=="function")PDFWorkerUtil.isWorkerDisabled=!0,PDFWorkerUtil.fallbackWorkerSrc="./pdf.worker.js";else if(typeof document=="object"){const p=(g=document==null?void 0:document.currentScript)==null?void 0:g.src;p&&(PDFWorkerUtil.fallbackWorkerSrc=p.replace(/(\.(?:min\.)?js)(\?.*)?$/i,".worker$1$2"))}PDFWorkerUtil.isSameOrigin=function(p,r){let T;try{if(T=new URL(p),!T.origin||T.origin==="null")return!1}catch{return!1}const m=new URL(r,T);return T.origin===m.origin},PDFWorkerUtil.createCDNWrapper=function(p){const r=`importScripts("${p}");`;return URL.createObjectURL(new Blob([r]))}}const _PDFWorker=class{constructor({name:p=null,port:r=null,verbosity:T=(0,_util.getVerbosityLevel)()}={}){var m;if(this.name=p,this.destroyed=!1,this.verbosity=T,this._readyCapability=new _util.PromiseCapability,this._port=null,this._webWorker=null,this._messageHandler=null,r){if((m=t(_PDFWorker,L))!=null&&m.has(r))throw new Error("Cannot use more than one PDFWorker per port.");(t(_PDFWorker,L)||Z(_PDFWorker,L,new WeakMap)).set(r,this),this._initializeFromPort(r);return}this._initialize()}get promise(){return this._readyCapability.promise}get port(){return this._port}get messageHandler(){return this._messageHandler}_initializeFromPort(p){this._port=p,this._messageHandler=new _message_handler.MessageHandler("main","worker",p),this._messageHandler.on("ready",function(){}),this._readyCapability.resolve(),this._messageHandler.send("configure",{verbosity:this.verbosity})}_initialize(){if(!PDFWorkerUtil.isWorkerDisabled&&!_PDFWorker._mainThreadWorkerMessageHandler){let{workerSrc:p}=_PDFWorker;try{PDFWorkerUtil.isSameOrigin(window.location.href,p)||(p=PDFWorkerUtil.createCDNWrapper(new URL(p,window.location).href));const r=new Worker(p),T=new _message_handler.MessageHandler("main","worker",r),m=()=>{r.removeEventListener("error",U),T.destroy(),r.terminate(),this.destroyed?this._readyCapability.reject(new Error("Worker was destroyed")):this._setupFakeWorker()},U=()=>{this._webWorker||m()};r.addEventListener("error",U),T.on("test",E=>{if(r.removeEventListener("error",U),this.destroyed){m();return}E?(this._messageHandler=T,this._port=r,this._webWorker=r,this._readyCapability.resolve(),T.send("configure",{verbosity:this.verbosity})):(this._setupFakeWorker(),T.destroy(),r.terminate())}),T.on("ready",E=>{if(r.removeEventListener("error",U),this.destroyed){m();return}try{X()}catch{this._setupFakeWorker()}});const X=()=>{const E=new Uint8Array;T.send("test",E,[E.buffer])};X();return}catch{(0,_util.info)("The worker has been disabled.")}}this._setupFakeWorker()}_setupFakeWorker(){PDFWorkerUtil.isWorkerDisabled||((0,_util.warn)("Setting up fake worker."),PDFWorkerUtil.isWorkerDisabled=!0),_PDFWorker._setupFakeWorkerGlobal.then(p=>{if(this.destroyed){this._readyCapability.reject(new Error("Worker was destroyed"));return}const r=new LoopbackPort;this._port=r;const T=`fake${PDFWorkerUtil.fakeWorkerId++}`,m=new _message_handler.MessageHandler(T+"_worker",T,r);p.setup(m,r);const U=new _message_handler.MessageHandler(T,T+"_worker",r);this._messageHandler=U,this._readyCapability.resolve(),U.send("configure",{verbosity:this.verbosity})}).catch(p=>{this._readyCapability.reject(new Error(`Setting up fake worker failed: "${p.message}".`))})}destroy(){var p;this.destroyed=!0,this._webWorker&&(this._webWorker.terminate(),this._webWorker=null),(p=t(_PDFWorker,L))==null||p.delete(this._port),this._port=null,this._messageHandler&&(this._messageHandler.destroy(),this._messageHandler=null)}static fromPort(p){var T;if(!(p!=null&&p.port))throw new Error("PDFWorker.fromPort - invalid method signature.");const r=(T=t(this,L))==null?void 0:T.get(p.port);if(r){if(r._pendingDestroy)throw new Error("PDFWorker.fromPort - the worker is being destroyed.\nPlease remember to await `PDFDocumentLoadingTask.destroy()`-calls.");return r}return new _PDFWorker(p)}static get workerSrc(){if(_worker_options.GlobalWorkerOptions.workerSrc)return _worker_options.GlobalWorkerOptions.workerSrc;if(PDFWorkerUtil.fallbackWorkerSrc!==null)return _util.isNodeJS||(0,_display_utils.deprecated)('No "GlobalWorkerOptions.workerSrc" specified.'),PDFWorkerUtil.fallbackWorkerSrc;throw new Error('No "GlobalWorkerOptions.workerSrc" specified.')}static get _mainThreadWorkerMessageHandler(){var p;try{return((p=globalThis.pdfjsWorker)==null?void 0:p.WorkerMessageHandler)||null}catch{return null}}static get _setupFakeWorkerGlobal(){const loader=async()=>{const mainWorkerMessageHandler=this._mainThreadWorkerMessageHandler;if(mainWorkerMessageHandler)return mainWorkerMessageHandler;if(_util.isNodeJS&&typeof commonjsRequire=="function"){const worker=eval("require")(this.workerSrc);return worker.WorkerMessageHandler}return await(0,_display_utils.loadScript)(this.workerSrc),window.pdfjsWorker.WorkerMessageHandler};return(0,_util.shadow)(this,"_setupFakeWorkerGlobal",loader())}};let PDFWorker=_PDFWorker;L=new WeakMap,I(PDFWorker,L,void 0),exports.PDFWorker=PDFWorker;class WorkerTransport{constructor(r,T,m,U,X){I(this,u);I(this,O,new Map);I(this,x,new Map);I(this,v,new Map);I(this,y,null);this.messageHandler=r,this.loadingTask=T,this.commonObjs=new PDFObjects,this.fontLoader=new _font_loader.FontLoader({ownerDocument:U.ownerDocument,styleElement:U.styleElement}),this._params=U,this.canvasFactory=X.canvasFactory,this.filterFactory=X.filterFactory,this.cMapReaderFactory=X.cMapReaderFactory,this.standardFontDataFactory=X.standardFontDataFactory,this.destroyed=!1,this.destroyCapability=null,this._networkStream=m,this._fullReader=null,this._lastProgress=null,this.downloadInfoCapability=new _util.PromiseCapability,this.setupMessageHandler()}get annotationStorage(){return(0,_util.shadow)(this,"annotationStorage",new _annotation_storage.AnnotationStorage)}getRenderingIntent(r,T=_util.AnnotationMode.ENABLE,m=null,U=!1){let X=_util.RenderingIntentFlag.DISPLAY,E=_annotation_storage.SerializableEmpty;switch(r){case"any":X=_util.RenderingIntentFlag.ANY;break;case"display":break;case"print":X=_util.RenderingIntentFlag.PRINT;break;default:(0,_util.warn)(`getRenderingIntent - invalid intent: ${r}`)}switch(T){case _util.AnnotationMode.DISABLE:X+=_util.RenderingIntentFlag.ANNOTATIONS_DISABLE;break;case _util.AnnotationMode.ENABLE:break;case _util.AnnotationMode.ENABLE_FORMS:X+=_util.RenderingIntentFlag.ANNOTATIONS_FORMS;break;case _util.AnnotationMode.ENABLE_STORAGE:X+=_util.RenderingIntentFlag.ANNOTATIONS_STORAGE,E=(X&_util.RenderingIntentFlag.PRINT&&m instanceof _annotation_storage.PrintAnnotationStorage?m:this.annotationStorage).serializable;break;default:(0,_util.warn)(`getRenderingIntent - invalid annotationMode: ${T}`)}return U&&(X+=_util.RenderingIntentFlag.OPLIST),{renderingIntent:X,cacheKey:`${X}_${E.hash}`,annotationStorageSerializable:E}}destroy(){var m;if(this.destroyCapability)return this.destroyCapability.promise;this.destroyed=!0,this.destroyCapability=new _util.PromiseCapability,(m=t(this,y))==null||m.reject(new Error("Worker was destroyed during onPassword callback"));const r=[];for(const U of t(this,x).values())r.push(U._destroy());t(this,x).clear(),t(this,v).clear(),this.hasOwnProperty("annotationStorage")&&this.annotationStorage.resetModified();const T=this.messageHandler.sendWithPromise("Terminate",null);return r.push(T),Promise.all(r).then(()=>{var U;this.commonObjs.clear(),this.fontLoader.clear(),t(this,O).clear(),this.filterFactory.destroy(),(U=this._networkStream)==null||U.cancelAllRequests(new _util.AbortException("Worker was terminated.")),this.messageHandler&&(this.messageHandler.destroy(),this.messageHandler=null),this.destroyCapability.resolve()},this.destroyCapability.reject),this.destroyCapability.promise}setupMessageHandler(){const{messageHandler:r,loadingTask:T}=this;r.on("GetReader",(m,U)=>{(0,_util.assert)(this._networkStream,"GetReader - no `IPDFStream` instance available."),this._fullReader=this._networkStream.getFullReader(),this._fullReader.onProgress=X=>{this._lastProgress={loaded:X.loaded,total:X.total}},U.onPull=()=>{this._fullReader.read().then(function({value:X,done:E}){if(E){U.close();return}(0,_util.assert)(X instanceof ArrayBuffer,"GetReader - expected an ArrayBuffer."),U.enqueue(new Uint8Array(X),1,[X])}).catch(X=>{U.error(X)})},U.onCancel=X=>{this._fullReader.cancel(X),U.ready.catch(E=>{if(!this.destroyed)throw E})}}),r.on("ReaderHeadersReady",m=>{const U=new _util.PromiseCapability,X=this._fullReader;return X.headersReady.then(()=>{var E;(!X.isStreamingSupported||!X.isRangeSupported)&&(this._lastProgress&&((E=T.onProgress)==null||E.call(T,this._lastProgress)),X.onProgress=$=>{var it;(it=T.onProgress)==null||it.call(T,{loaded:$.loaded,total:$.total})}),U.resolve({isStreamingSupported:X.isStreamingSupported,isRangeSupported:X.isRangeSupported,contentLength:X.contentLength})},U.reject),U.promise}),r.on("GetRangeReader",(m,U)=>{(0,_util.assert)(this._networkStream,"GetRangeReader - no `IPDFStream` instance available.");const X=this._networkStream.getRangeReader(m.begin,m.end);if(!X){U.close();return}U.onPull=()=>{X.read().then(function({value:E,done:$}){if($){U.close();return}(0,_util.assert)(E instanceof ArrayBuffer,"GetRangeReader - expected an ArrayBuffer."),U.enqueue(new Uint8Array(E),1,[E])}).catch(E=>{U.error(E)})},U.onCancel=E=>{X.cancel(E),U.ready.catch($=>{if(!this.destroyed)throw $})}}),r.on("GetDoc",({pdfInfo:m})=>{this._numPages=m.numPages,this._htmlForXfa=m.htmlForXfa,delete m.htmlForXfa,T._capability.resolve(new PDFDocumentProxy(m,this))}),r.on("DocException",function(m){let U;switch(m.name){case"PasswordException":U=new _util.PasswordException(m.message,m.code);break;case"InvalidPDFException":U=new _util.InvalidPDFException(m.message);break;case"MissingPDFException":U=new _util.MissingPDFException(m.message);break;case"UnexpectedResponseException":U=new _util.UnexpectedResponseException(m.message,m.status);break;case"UnknownErrorException":U=new _util.UnknownErrorException(m.message,m.details);break;default:(0,_util.unreachable)("DocException - expected a valid Error.")}T._capability.reject(U)}),r.on("PasswordRequest",m=>{if(Z(this,y,new _util.PromiseCapability),T.onPassword){const U=X=>{X instanceof Error?t(this,y).reject(X):t(this,y).resolve({password:X})};try{T.onPassword(U,m.code)}catch(X){t(this,y).reject(X)}}else t(this,y).reject(new _util.PasswordException(m.message,m.code));return t(this,y).promise}),r.on("DataLoaded",m=>{var U;(U=T.onProgress)==null||U.call(T,{loaded:m.length,total:m.length}),this.downloadInfoCapability.resolve(m)}),r.on("StartRenderPage",m=>{if(this.destroyed)return;t(this,x).get(m.pageIndex)._startRenderPage(m.transparency,m.cacheKey)}),r.on("commonobj",([m,U,X])=>{var E;if(!this.destroyed&&!this.commonObjs.has(m))switch(U){case"Font":const $=this._params;if("error"in X){const H=X.error;(0,_util.warn)(`Error during font loading: ${H}`),this.commonObjs.resolve(m,H);break}const it=$.pdfBug&&((E=globalThis.FontInspector)==null?void 0:E.enabled)?(H,lt)=>globalThis.FontInspector.fontAdded(H,lt):null,at=new _font_loader.FontFaceObject(X,{isEvalSupported:$.isEvalSupported,disableFontFace:$.disableFontFace,ignoreErrors:$.ignoreErrors,inspectFont:it});this.fontLoader.bind(at).catch(H=>r.sendWithPromise("FontFallback",{id:m})).finally(()=>{!$.fontExtraProperties&&at.data&&(at.data=null),this.commonObjs.resolve(m,at)});break;case"FontPath":case"Image":case"Pattern":this.commonObjs.resolve(m,X);break;default:throw new Error(`Got unknown common object type ${U}`)}}),r.on("obj",([m,U,X,E])=>{var it;if(this.destroyed)return;const $=t(this,x).get(U);if(!$.objs.has(m))switch(X){case"Image":if($.objs.resolve(m,E),E){let at;if(E.bitmap){const{width:H,height:lt}=E;at=H*lt*4}else at=((it=E.data)==null?void 0:it.length)||0;at>_util.MAX_IMAGE_SIZE_TO_CACHE&&($._maybeCleanupAfterRender=!0)}break;case"Pattern":$.objs.resolve(m,E);break;default:throw new Error(`Got unknown object type ${X}`)}}),r.on("DocProgress",m=>{var U;this.destroyed||(U=T.onProgress)==null||U.call(T,{loaded:m.loaded,total:m.total})}),r.on("FetchBuiltInCMap",m=>this.destroyed?Promise.reject(new Error("Worker was destroyed.")):this.cMapReaderFactory?this.cMapReaderFactory.fetch(m):Promise.reject(new Error("CMapReaderFactory not initialized, see the `useWorkerFetch` parameter."))),r.on("FetchStandardFontData",m=>this.destroyed?Promise.reject(new Error("Worker was destroyed.")):this.standardFontDataFactory?this.standardFontDataFactory.fetch(m):Promise.reject(new Error("StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.")))}getData(){return this.messageHandler.sendWithPromise("GetData",null)}saveDocument(){var m,U;this.annotationStorage.size<=0&&(0,_util.warn)("saveDocument called while `annotationStorage` is empty, please use the getData-method instead.");const{map:r,transfers:T}=this.annotationStorage.serializable;return this.messageHandler.sendWithPromise("SaveDocument",{isPureXfa:!!this._htmlForXfa,numPages:this._numPages,annotationStorage:r,filename:(U=(m=this._fullReader)==null?void 0:m.filename)!=null?U:null},T).finally(()=>{this.annotationStorage.resetModified()})}getPage(r){if(!Number.isInteger(r)||r<=0||r>this._numPages)return Promise.reject(new Error("Invalid page request."));const T=r-1,m=t(this,v).get(T);if(m)return m;const U=this.messageHandler.sendWithPromise("GetPage",{pageIndex:T}).then(X=>{if(this.destroyed)throw new Error("Transport destroyed");const E=new PDFPageProxy(T,X,this,this._params.pdfBug);return t(this,x).set(T,E),E});return t(this,v).set(T,U),U}getPageIndex(r){return typeof r!="object"||r===null||!Number.isInteger(r.num)||r.num<0||!Number.isInteger(r.gen)||r.gen<0?Promise.reject(new Error("Invalid pageIndex request.")):this.messageHandler.sendWithPromise("GetPageIndex",{num:r.num,gen:r.gen})}getAnnotations(r,T){return this.messageHandler.sendWithPromise("GetAnnotations",{pageIndex:r,intent:T})}getFieldObjects(){return W(this,u,we).call(this,"GetFieldObjects")}hasJSActions(){return W(this,u,we).call(this,"HasJSActions")}getCalculationOrderIds(){return this.messageHandler.sendWithPromise("GetCalculationOrderIds",null)}getDestinations(){return this.messageHandler.sendWithPromise("GetDestinations",null)}getDestination(r){return typeof r!="string"?Promise.reject(new Error("Invalid destination request.")):this.messageHandler.sendWithPromise("GetDestination",{id:r})}getPageLabels(){return this.messageHandler.sendWithPromise("GetPageLabels",null)}getPageLayout(){return this.messageHandler.sendWithPromise("GetPageLayout",null)}getPageMode(){return this.messageHandler.sendWithPromise("GetPageMode",null)}getViewerPreferences(){return this.messageHandler.sendWithPromise("GetViewerPreferences",null)}getOpenAction(){return this.messageHandler.sendWithPromise("GetOpenAction",null)}getAttachments(){return this.messageHandler.sendWithPromise("GetAttachments",null)}getDocJSActions(){return W(this,u,we).call(this,"GetDocJSActions")}getPageJSActions(r){return this.messageHandler.sendWithPromise("GetPageJSActions",{pageIndex:r})}getStructTree(r){return this.messageHandler.sendWithPromise("GetStructTree",{pageIndex:r})}getOutline(){return this.messageHandler.sendWithPromise("GetOutline",null)}getOptionalContentConfig(){return this.messageHandler.sendWithPromise("GetOptionalContentConfig",null).then(r=>new _optional_content_config.OptionalContentConfig(r))}getPermissions(){return this.messageHandler.sendWithPromise("GetPermissions",null)}getMetadata(){const r="GetMetadata",T=t(this,O).get(r);if(T)return T;const m=this.messageHandler.sendWithPromise(r,null).then(U=>{var X,E,$,it;return{info:U[0],metadata:U[1]?new _metadata.Metadata(U[1]):null,contentDispositionFilename:(E=(X=this._fullReader)==null?void 0:X.filename)!=null?E:null,contentLength:(it=($=this._fullReader)==null?void 0:$.contentLength)!=null?it:null}});return t(this,O).set(r,m),m}getMarkInfo(){return this.messageHandler.sendWithPromise("GetMarkInfo",null)}async startCleanup(r=!1){if(!this.destroyed){await this.messageHandler.sendWithPromise("Cleanup",null);for(const T of t(this,x).values())if(!T.cleanup())throw new Error(`startCleanup: Page ${T.pageNumber} is currently rendering.`);this.commonObjs.clear(),r||this.fontLoader.clear(),t(this,O).clear(),this.filterFactory.destroy(!0)}}get loadingParams(){const{disableAutoFetch:r,enableXfa:T}=this._params;return(0,_util.shadow)(this,"loadingParams",{disableAutoFetch:r,enableXfa:T})}}O=new WeakMap,x=new WeakMap,v=new WeakMap,y=new WeakMap,u=new WeakSet,we=function(r,T=null){const m=t(this,O).get(r);if(m)return m;const U=this.messageHandler.sendWithPromise(r,T);return t(this,O).set(r,U),U};class PDFObjects{constructor(){I(this,C);I(this,w,Object.create(null))}get(r,T=null){if(T){const U=W(this,C,Be).call(this,r);return U.capability.promise.then(()=>T(U.data)),null}const m=t(this,w)[r];if(!(m!=null&&m.capability.settled))throw new Error(`Requesting object that isn't resolved yet ${r}.`);return m.data}has(r){const T=t(this,w)[r];return(T==null?void 0:T.capability.settled)||!1}resolve(r,T=null){const m=W(this,C,Be).call(this,r);m.data=T,m.capability.resolve()}clear(){var r;for(const T in t(this,w)){const{data:m}=t(this,w)[T];(r=m==null?void 0:m.bitmap)==null||r.close()}Z(this,w,Object.create(null))}}w=new WeakMap,C=new WeakSet,Be=function(r){var T;return(T=t(this,w))[r]||(T[r]={capability:new _util.PromiseCapability,data:null})};class RenderTask{constructor(r){I(this,a,null);Z(this,a,r),this.onContinue=null}get promise(){return t(this,a).capability.promise}cancel(r=0){t(this,a).cancel(null,r)}get separateAnnots(){const{separateAnnots:r}=t(this,a).operatorList;if(!r)return!1;const{annotationCanvasMap:T}=t(this,a);return r.form||r.canvas&&(T==null?void 0:T.size)>0}}a=new WeakMap,exports.RenderTask=RenderTask;const k=class{constructor({callback:r,params:T,objs:m,commonObjs:U,annotationCanvasMap:X,operatorList:E,pageIndex:$,canvasFactory:it,filterFactory:at,useRequestAnimationFrame:H=!1,pdfBug:lt=!1,pageColors:pt=null}){this.callback=r,this.params=T,this.objs=m,this.commonObjs=U,this.annotationCanvasMap=X,this.operatorListIdx=null,this.operatorList=E,this._pageIndex=$,this.canvasFactory=it,this.filterFactory=at,this._pdfBug=lt,this.pageColors=pt,this.running=!1,this.graphicsReadyCallback=null,this.graphicsReady=!1,this._useRequestAnimationFrame=H===!0&&typeof window!="undefined",this.cancelled=!1,this.capability=new _util.PromiseCapability,this.task=new RenderTask(this),this._cancelBound=this.cancel.bind(this),this._continueBound=this._continue.bind(this),this._scheduleNextBound=this._scheduleNext.bind(this),this._nextBound=this._next.bind(this),this._canvas=T.canvasContext.canvas}get completed(){return this.capability.promise.catch(function(){})}initializeGraphics({transparency:r=!1,optionalContentConfig:T}){var $,it;if(this.cancelled)return;if(this._canvas){if(t(k,l).has(this._canvas))throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");t(k,l).add(this._canvas)}this._pdfBug&&(($=globalThis.StepperManager)==null?void 0:$.enabled)&&(this.stepper=globalThis.StepperManager.create(this._pageIndex),this.stepper.init(this.operatorList),this.stepper.nextBreakPoint=this.stepper.getNextBreakPoint());const{canvasContext:m,viewport:U,transform:X,background:E}=this.params;this.gfx=new _canvas.CanvasGraphics(m,this.commonObjs,this.objs,this.canvasFactory,this.filterFactory,{optionalContentConfig:T},this.annotationCanvasMap,this.pageColors),this.gfx.beginDrawing({transform:X,viewport:U,transparency:r,background:E}),this.operatorListIdx=0,this.graphicsReady=!0,(it=this.graphicsReadyCallback)==null||it.call(this)}cancel(r=null,T=0){var m;this.running=!1,this.cancelled=!0,(m=this.gfx)==null||m.endDrawing(),t(k,l).delete(this._canvas),this.callback(r||new _display_utils.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex+1}`,T))}operatorListChanged(){var r;if(!this.graphicsReady){this.graphicsReadyCallback||(this.graphicsReadyCallback=this._continueBound);return}(r=this.stepper)==null||r.updateOperatorList(this.operatorList),!this.running&&this._continue()}_continue(){this.running=!0,!this.cancelled&&(this.task.onContinue?this.task.onContinue(this._scheduleNextBound):this._scheduleNext())}_scheduleNext(){this._useRequestAnimationFrame?window.requestAnimationFrame(()=>{this._nextBound().catch(this._cancelBound)}):Promise.resolve().then(this._nextBound).catch(this._cancelBound)}async _next(){this.cancelled||(this.operatorListIdx=this.gfx.executeOperatorList(this.operatorList,this.operatorListIdx,this._continueBound,this.stepper),this.operatorListIdx===this.operatorList.argsArray.length&&(this.running=!1,this.operatorList.lastChunk&&(this.gfx.endDrawing(),t(k,l).delete(this._canvas),this.callback())))}};let InternalRenderTask=k;l=new WeakMap,I(InternalRenderTask,l,new WeakSet);const version="3.11.174";exports.version=version;const build="ce8716743";exports.build=build},(_t,d,st)=>{var P,g,L,Ai,x;Object.defineProperty(d,"__esModule",{value:!0}),d.SerializableEmpty=d.PrintAnnotationStorage=d.AnnotationStorage=void 0;var h=st(1),F=st(4),ot=st(8);const G=Object.freeze({map:null,hash:"",transfers:void 0});d.SerializableEmpty=G;class ut{constructor(){I(this,L);I(this,P,!1);I(this,g,new Map);this.onSetModified=null,this.onResetModified=null,this.onAnnotationEditor=null}getValue(y,u){const b=t(this,g).get(y);return b===void 0?u:Object.assign(u,b)}getRawValue(y){return t(this,g).get(y)}remove(y){if(t(this,g).delete(y),t(this,g).size===0&&this.resetModified(),typeof this.onAnnotationEditor=="function"){for(const u of t(this,g).values())if(u instanceof F.AnnotationEditor)return;this.onAnnotationEditor(null)}}setValue(y,u){const b=t(this,g).get(y);let w=!1;if(b!==void 0)for(const[C,A]of Object.entries(u))b[C]!==A&&(w=!0,b[C]=A);else w=!0,t(this,g).set(y,u);w&&W(this,L,Ai).call(this),u instanceof F.AnnotationEditor&&typeof this.onAnnotationEditor=="function"&&this.onAnnotationEditor(u.constructor._type)}has(y){return t(this,g).has(y)}getAll(){return t(this,g).size>0?(0,h.objectFromMap)(t(this,g)):null}setAll(y){for(const[u,b]of Object.entries(y))this.setValue(u,b)}get size(){return t(this,g).size}resetModified(){t(this,P)&&(Z(this,P,!1),typeof this.onResetModified=="function"&&this.onResetModified())}get print(){return new B(this)}get serializable(){if(t(this,g).size===0)return G;const y=new Map,u=new ot.MurmurHash3_64,b=[],w=Object.create(null);let C=!1;for(const[A,a]of t(this,g)){const l=a instanceof F.AnnotationEditor?a.serialize(!1,w):a;l&&(y.set(A,l),u.update(`${A}:${JSON.stringify(l)}`),C||(C=!!l.bitmap))}if(C)for(const A of y.values())A.bitmap&&b.push(A.bitmap);return y.size>0?{map:y,hash:u.hexdigest(),transfers:b}:G}}P=new WeakMap,g=new WeakMap,L=new WeakSet,Ai=function(){t(this,P)||(Z(this,P,!0),typeof this.onSetModified=="function"&&this.onSetModified())},d.AnnotationStorage=ut;class B extends ut{constructor(u){super();I(this,x,void 0);const{map:b,hash:w,transfers:C}=u.serializable,A=structuredClone(b,C?{transfer:C}:null);Z(this,x,{map:A,hash:w,transfers:C})}get print(){(0,h.unreachable)("Should not call PrintAnnotationStorage.print")}get serializable(){return t(this,x)}}x=new WeakMap,d.PrintAnnotationStorage=B},(_t,d,st)=>{var B,P,g,L,O,x,v,y,u,b,w,C,A,a,l,Ue,p,je,T,He,U,We,E,yi,it,vi,H,Si,pt,Ge,kt,Ei;Object.defineProperty(d,"__esModule",{value:!0}),d.AnnotationEditor=void 0;var h=st(5),F=st(1),ot=st(6);const i=class{constructor(s){I(this,l);I(this,p);I(this,U);I(this,E);I(this,it);I(this,H);I(this,pt);I(this,kt);I(this,B,"");I(this,P,!1);I(this,g,null);I(this,L,null);I(this,O,null);I(this,x,!1);I(this,v,null);I(this,y,this.focusin.bind(this));I(this,u,this.focusout.bind(this));I(this,b,!1);I(this,w,!1);I(this,C,!1);ee(this,"_initialOptions",Object.create(null));ee(this,"_uiManager",null);ee(this,"_focusEventsAllowed",!0);ee(this,"_l10nPromise",null);I(this,A,!1);I(this,a,i._zIndex++);this.constructor===i&&(0,F.unreachable)("Cannot initialize AnnotationEditor."),this.parent=s.parent,this.id=s.id,this.width=this.height=null,this.pageIndex=s.parent.pageIndex,this.name=s.name,this.div=null,this._uiManager=s.uiManager,this.annotationElementId=null,this._willKeepAspectRatio=!1,this._initialOptions.isCentered=s.isCentered,this._structTreeParentId=null;const{rotation:o,rawDims:{pageWidth:c,pageHeight:_,pageX:M,pageY:N}}=this.parent.viewport;this.rotation=o,this.pageRotation=(360+o-this._uiManager.viewParameters.rotation)%360,this.pageDimensions=[c,_],this.pageTranslation=[M,N];const[tt,Q]=this.parentDimensions;this.x=s.x/tt,this.y=s.y/Q,this.isAttachedToDOM=!1,this.deleted=!1}get editorType(){return Object.getPrototypeOf(this).constructor._type}static get _defaultLineColor(){return(0,F.shadow)(this,"_defaultLineColor",this._colorManager.getHexCode("CanvasText"))}static deleteAnnotationElement(s){const o=new ut({id:s.parent.getNextId(),parent:s.parent,uiManager:s._uiManager});o.annotationElementId=s.annotationElementId,o.deleted=!0,o._uiManager.addToAnnotationStorage(o)}static initialize(s,o=null){if(i._l10nPromise||(i._l10nPromise=new Map(["editor_alt_text_button_label","editor_alt_text_edit_button_label","editor_alt_text_decorative_tooltip"].map(_=>[_,s.get(_)]))),o!=null&&o.strings)for(const _ of o.strings)i._l10nPromise.set(_,s.get(_));if(i._borderLineWidth!==-1)return;const c=getComputedStyle(document.documentElement);i._borderLineWidth=parseFloat(c.getPropertyValue("--outline-width"))||0}static updateDefaultParams(s,o){}static get defaultPropertiesToUpdate(){return[]}static isHandlingMimeForPasting(s){return!1}static paste(s,o){(0,F.unreachable)("Not implemented")}get propertiesToUpdate(){return[]}get _isDraggable(){return t(this,A)}set _isDraggable(s){var o;Z(this,A,s),(o=this.div)==null||o.classList.toggle("draggable",s)}center(){const[s,o]=this.pageDimensions;switch(this.parentRotation){case 90:this.x-=this.height*o/(s*2),this.y+=this.width*s/(o*2);break;case 180:this.x+=this.width/2,this.y+=this.height/2;break;case 270:this.x+=this.height*o/(s*2),this.y-=this.width*s/(o*2);break;default:this.x-=this.width/2,this.y-=this.height/2;break}this.fixAndSetPosition()}addCommands(s){this._uiManager.addCommands(s)}get currentLayer(){return this._uiManager.currentLayer}setInBackground(){this.div.style.zIndex=0}setInForeground(){this.div.style.zIndex=t(this,a)}setParent(s){s!==null&&(this.pageIndex=s.pageIndex,this.pageDimensions=s.pageDimensions),this.parent=s}focusin(s){!this._focusEventsAllowed||(t(this,b)?Z(this,b,!1):this.parent.setSelected(this))}focusout(s){var c;if(!this._focusEventsAllowed||!this.isAttachedToDOM)return;const o=s.relatedTarget;o!=null&&o.closest(`#${this.id}`)||(s.preventDefault(),(c=this.parent)!=null&&c.isMultipleSelection||this.commitOrRemove())}commitOrRemove(){this.isEmpty()?this.remove():this.commit()}commit(){this.addToAnnotationStorage()}addToAnnotationStorage(){this._uiManager.addToAnnotationStorage(this)}setAt(s,o,c,_){const[M,N]=this.parentDimensions;[c,_]=this.screenToPageTranslation(c,_),this.x=(s+c)/M,this.y=(o+_)/N,this.fixAndSetPosition()}translate(s,o){W(this,l,Ue).call(this,this.parentDimensions,s,o)}translateInPage(s,o){W(this,l,Ue).call(this,this.pageDimensions,s,o),this.div.scrollIntoView({block:"nearest"})}drag(s,o){const[c,_]=this.parentDimensions;if(this.x+=s/c,this.y+=o/_,this.parent&&(this.x<0||this.x>1||this.y<0||this.y>1)){const{x:nt,y:ct}=this.div.getBoundingClientRect();this.parent.findNewParent(this,nt,ct)&&(this.x-=Math.floor(this.x),this.y-=Math.floor(this.y))}let{x:M,y:N}=this;const[tt,Q]=W(this,p,je).call(this);M+=tt,N+=Q,this.div.style.left=`${(100*M).toFixed(2)}%`,this.div.style.top=`${(100*N).toFixed(2)}%`,this.div.scrollIntoView({block:"nearest"})}fixAndSetPosition(){const[s,o]=this.pageDimensions;let{x:c,y:_,width:M,height:N}=this;switch(M*=s,N*=o,c*=s,_*=o,this.rotation){case 0:c=Math.max(0,Math.min(s-M,c)),_=Math.max(0,Math.min(o-N,_));break;case 90:c=Math.max(0,Math.min(s-N,c)),_=Math.min(o,Math.max(M,_));break;case 180:c=Math.min(s,Math.max(M,c)),_=Math.min(o,Math.max(N,_));break;case 270:c=Math.min(s,Math.max(N,c)),_=Math.max(0,Math.min(o-M,_));break}this.x=c/=s,this.y=_/=o;const[tt,Q]=W(this,p,je).call(this);c+=tt,_+=Q;const{style:nt}=this.div;nt.left=`${(100*c).toFixed(2)}%`,nt.top=`${(100*_).toFixed(2)}%`,this.moveInDOM()}screenToPageTranslation(s,o){var c;return W(c=i,T,He).call(c,s,o,this.parentRotation)}pageTranslationToScreen(s,o){var c;return W(c=i,T,He).call(c,s,o,360-this.parentRotation)}get parentScale(){return this._uiManager.viewParameters.realScale}get parentRotation(){return(this._uiManager.viewParameters.rotation+this.pageRotation)%360}get parentDimensions(){const{parentScale:s,pageDimensions:[o,c]}=this,_=o*s,M=c*s;return F.FeatureTest.isCSSRoundSupported?[Math.round(_),Math.round(M)]:[_,M]}setDims(s,o){var M;const[c,_]=this.parentDimensions;this.div.style.width=`${(100*s/c).toFixed(2)}%`,t(this,x)||(this.div.style.height=`${(100*o/_).toFixed(2)}%`),(M=t(this,g))==null||M.classList.toggle("small",s<i.SMALL_EDITOR_SIZE||o<i.SMALL_EDITOR_SIZE)}fixDims(){const{style:s}=this.div,{height:o,width:c}=s,_=c.endsWith("%"),M=!t(this,x)&&o.endsWith("%");if(_&&M)return;const[N,tt]=this.parentDimensions;_||(s.width=`${(100*parseFloat(c)/N).toFixed(2)}%`),!t(this,x)&&!M&&(s.height=`${(100*parseFloat(o)/tt).toFixed(2)}%`)}getInitialTranslation(){return[0,0]}async addAltTextButton(){if(t(this,g))return;const s=Z(this,g,document.createElement("button"));s.className="altText";const o=await i._l10nPromise.get("editor_alt_text_button_label");s.textContent=o,s.setAttribute("aria-label",o),s.tabIndex="0",s.addEventListener("contextmenu",ot.noContextMenu),s.addEventListener("pointerdown",c=>c.stopPropagation()),s.addEventListener("click",c=>{c.preventDefault(),this._uiManager.editAltText(this)},{capture:!0}),s.addEventListener("keydown",c=>{c.target===s&&c.key==="Enter"&&(c.preventDefault(),this._uiManager.editAltText(this))}),W(this,pt,Ge).call(this),this.div.append(s),i.SMALL_EDITOR_SIZE||(i.SMALL_EDITOR_SIZE=Math.min(128,Math.round(s.getBoundingClientRect().width*1.4)))}getClientDimensions(){return this.div.getBoundingClientRect()}get altTextData(){return{altText:t(this,B),decorative:t(this,P)}}set altTextData({altText:s,decorative:o}){t(this,B)===s&&t(this,P)===o||(Z(this,B,s),Z(this,P,o),W(this,pt,Ge).call(this))}render(){this.div=document.createElement("div"),this.div.setAttribute("data-editor-rotation",(360-this.rotation)%360),this.div.className=this.name,this.div.setAttribute("id",this.id),this.div.setAttribute("tabIndex",0),this.setInForeground(),this.div.addEventListener("focusin",t(this,y)),this.div.addEventListener("focusout",t(this,u));const[s,o]=this.parentDimensions;this.parentRotation%180!==0&&(this.div.style.maxWidth=`${(100*o/s).toFixed(2)}%`,this.div.style.maxHeight=`${(100*s/o).toFixed(2)}%`);const[c,_]=this.getInitialTranslation();return this.translate(c,_),(0,h.bindEvents)(this,this.div,["pointerdown"]),this.div}pointerdown(s){const{isMac:o}=F.FeatureTest.platform;if(s.button!==0||s.ctrlKey&&o){s.preventDefault();return}Z(this,b,!0),W(this,kt,Ei).call(this,s)}moveInDOM(){var s;(s=this.parent)==null||s.moveEditorInDOM(this)}_setParentAndPosition(s,o,c){s.changeParent(this),this.x=o,this.y=c,this.fixAndSetPosition()}getRect(s,o){const c=this.parentScale,[_,M]=this.pageDimensions,[N,tt]=this.pageTranslation,Q=s/c,nt=o/c,ct=this.x*_,At=this.y*M,dt=this.width*_,Ft=this.height*M;switch(this.rotation){case 0:return[ct+Q+N,M-At-nt-Ft+tt,ct+Q+dt+N,M-At-nt+tt];case 90:return[ct+nt+N,M-At+Q+tt,ct+nt+Ft+N,M-At+Q+dt+tt];case 180:return[ct-Q-dt+N,M-At+nt+tt,ct-Q+N,M-At+nt+Ft+tt];case 270:return[ct-nt-Ft+N,M-At-Q-dt+tt,ct-nt+N,M-At-Q+tt];default:throw new Error("Invalid rotation")}}getRectInCurrentCoords(s,o){const[c,_,M,N]=s,tt=M-c,Q=N-_;switch(this.rotation){case 0:return[c,o-N,tt,Q];case 90:return[c,o-_,Q,tt];case 180:return[M,o-_,tt,Q];case 270:return[M,o-N,Q,tt];default:throw new Error("Invalid rotation")}}onceAdded(){}isEmpty(){return!1}enableEditMode(){Z(this,C,!0)}disableEditMode(){Z(this,C,!1)}isInEditMode(){return t(this,C)}shouldGetKeyboardEvents(){return!1}needsToBeRebuilt(){return this.div&&!this.isAttachedToDOM}rebuild(){var s,o;(s=this.div)==null||s.addEventListener("focusin",t(this,y)),(o=this.div)==null||o.addEventListener("focusout",t(this,u))}serialize(s=!1,o=null){(0,F.unreachable)("An editor must be serializable")}static deserialize(s,o,c){const _=new this.prototype.constructor({parent:o,id:o.getNextId(),uiManager:c});_.rotation=s.rotation;const[M,N]=_.pageDimensions,[tt,Q,nt,ct]=_.getRectInCurrentCoords(s.rect,N);return _.x=tt/M,_.y=Q/N,_.width=nt/M,_.height=ct/N,_}remove(){var s;this.div.removeEventListener("focusin",t(this,y)),this.div.removeEventListener("focusout",t(this,u)),this.isEmpty()||this.commit(),this.parent?this.parent.remove(this):this._uiManager.removeEditor(this),(s=t(this,g))==null||s.remove(),Z(this,g,null),Z(this,L,null)}get isResizable(){return!1}makeResizable(){this.isResizable&&(W(this,E,yi).call(this),t(this,v).classList.remove("hidden"))}select(){var s;this.makeResizable(),(s=this.div)==null||s.classList.add("selectedEditor")}unselect(){var s,o,c;(s=t(this,v))==null||s.classList.add("hidden"),(o=this.div)==null||o.classList.remove("selectedEditor"),(c=this.div)!=null&&c.contains(document.activeElement)&&this._uiManager.currentLayer.div.focus()}updateParams(s,o){}disableEditing(){t(this,g)&&(t(this,g).hidden=!0)}enableEditing(){t(this,g)&&(t(this,g).hidden=!1)}enterInEditMode(){}get contentDiv(){return this.div}get isEditing(){return t(this,w)}set isEditing(s){Z(this,w,s),this.parent&&(s?(this.parent.setSelected(this),this.parent.setActiveEditor(this)):this.parent.setActiveEditor(null))}setAspectRatio(s,o){Z(this,x,!0);const c=s/o,{style:_}=this.div;_.aspectRatio=c,_.height="auto"}static get MIN_SIZE(){return 16}};let G=i;B=new WeakMap,P=new WeakMap,g=new WeakMap,L=new WeakMap,O=new WeakMap,x=new WeakMap,v=new WeakMap,y=new WeakMap,u=new WeakMap,b=new WeakMap,w=new WeakMap,C=new WeakMap,A=new WeakMap,a=new WeakMap,l=new WeakSet,Ue=function([s,o],c,_){[c,_]=this.screenToPageTranslation(c,_),this.x+=c/s,this.y+=_/o,this.fixAndSetPosition()},p=new WeakSet,je=function(){const[s,o]=this.parentDimensions,{_borderLineWidth:c}=i,_=c/s,M=c/o;switch(this.rotation){case 90:return[-_,M];case 180:return[_,M];case 270:return[_,-M];default:return[-_,-M]}},T=new WeakSet,He=function(s,o,c){switch(c){case 90:return[o,-s];case 180:return[-s,-o];case 270:return[-o,s];default:return[s,o]}},U=new WeakSet,We=function(s){switch(s){case 90:{const[o,c]=this.pageDimensions;return[0,-o/c,c/o,0]}case 180:return[-1,0,0,-1];case 270:{const[o,c]=this.pageDimensions;return[0,o/c,-c/o,0]}default:return[1,0,0,1]}},E=new WeakSet,yi=function(){if(t(this,v))return;Z(this,v,document.createElement("div")),t(this,v).classList.add("resizers");const s=["topLeft","topRight","bottomRight","bottomLeft"];this._willKeepAspectRatio||s.push("topMiddle","middleRight","bottomMiddle","middleLeft");for(const o of s){const c=document.createElement("div");t(this,v).append(c),c.classList.add("resizer",o),c.addEventListener("pointerdown",W(this,it,vi).bind(this,o)),c.addEventListener("contextmenu",ot.noContextMenu)}this.div.prepend(t(this,v))},it=new WeakSet,vi=function(s,o){o.preventDefault();const{isMac:c}=F.FeatureTest.platform;if(o.button!==0||o.ctrlKey&&c)return;const _=W(this,H,Si).bind(this,s),M=this._isDraggable;this._isDraggable=!1;const N={passive:!0,capture:!0};window.addEventListener("pointermove",_,N);const tt=this.x,Q=this.y,nt=this.width,ct=this.height,At=this.parent.div.style.cursor,dt=this.div.style.cursor;this.div.style.cursor=this.parent.div.style.cursor=window.getComputedStyle(o.target).cursor;const Ft=()=>{this._isDraggable=M,window.removeEventListener("pointerup",Ft),window.removeEventListener("blur",Ft),window.removeEventListener("pointermove",_,N),this.parent.div.style.cursor=At,this.div.style.cursor=dt;const Bt=this.x,St=this.y,Dt=this.width,ft=this.height;Bt===tt&&St===Q&&Dt===nt&&ft===ct||this.addCommands({cmd:()=>{this.width=Dt,this.height=ft,this.x=Bt,this.y=St;const[K,J]=this.parentDimensions;this.setDims(K*Dt,J*ft),this.fixAndSetPosition()},undo:()=>{this.width=nt,this.height=ct,this.x=tt,this.y=Q;const[K,J]=this.parentDimensions;this.setDims(K*nt,J*ct),this.fixAndSetPosition()},mustExec:!0})};window.addEventListener("pointerup",Ft),window.addEventListener("blur",Ft)},H=new WeakSet,Si=function(s,o){const[c,_]=this.parentDimensions,M=this.x,N=this.y,tt=this.width,Q=this.height,nt=i.MIN_SIZE/c,ct=i.MIN_SIZE/_,At=mt=>Math.round(mt*1e4)/1e4,dt=W(this,U,We).call(this,this.rotation),Ft=(mt,yt)=>[dt[0]*mt+dt[2]*yt,dt[1]*mt+dt[3]*yt],Bt=W(this,U,We).call(this,360-this.rotation),St=(mt,yt)=>[Bt[0]*mt+Bt[2]*yt,Bt[1]*mt+Bt[3]*yt];let Dt,ft,K=!1,J=!1;switch(s){case"topLeft":K=!0,Dt=(mt,yt)=>[0,0],ft=(mt,yt)=>[mt,yt];break;case"topMiddle":Dt=(mt,yt)=>[mt/2,0],ft=(mt,yt)=>[mt/2,yt];break;case"topRight":K=!0,Dt=(mt,yt)=>[mt,0],ft=(mt,yt)=>[0,yt];break;case"middleRight":J=!0,Dt=(mt,yt)=>[mt,yt/2],ft=(mt,yt)=>[0,yt/2];break;case"bottomRight":K=!0,Dt=(mt,yt)=>[mt,yt],ft=(mt,yt)=>[0,0];break;case"bottomMiddle":Dt=(mt,yt)=>[mt/2,yt],ft=(mt,yt)=>[mt/2,0];break;case"bottomLeft":K=!0,Dt=(mt,yt)=>[0,yt],ft=(mt,yt)=>[mt,0];break;case"middleLeft":J=!0,Dt=(mt,yt)=>[0,yt/2],ft=(mt,yt)=>[mt,yt/2];break}const ht=Dt(tt,Q),Et=ft(tt,Q);let Tt=Ft(...Et);const Ht=At(M+Tt[0]),Wt=At(N+Tt[1]);let jt=1,qt=1,[Xt,Gt]=this.screenToPageTranslation(o.movementX,o.movementY);if([Xt,Gt]=St(Xt/c,Gt/_),K){const mt=Math.hypot(tt,Q);jt=qt=Math.max(Math.min(Math.hypot(Et[0]-ht[0]-Xt,Et[1]-ht[1]-Gt)/mt,1/tt,1/Q),nt/tt,ct/Q)}else J?jt=Math.max(nt,Math.min(1,Math.abs(Et[0]-ht[0]-Xt)))/tt:qt=Math.max(ct,Math.min(1,Math.abs(Et[1]-ht[1]-Gt)))/Q;const $t=At(tt*jt),rt=At(Q*qt);Tt=Ft(...ft($t,rt));const Y=Ht-Tt[0],z=Wt-Tt[1];this.width=$t,this.height=rt,this.x=Y,this.y=z,this.setDims(c*$t,_*rt),this.fixAndSetPosition()},pt=new WeakSet,Ge=async function(){var c;const s=t(this,g);if(!s)return;if(!t(this,B)&&!t(this,P)){s.classList.remove("done"),(c=t(this,L))==null||c.remove();return}i._l10nPromise.get("editor_alt_text_edit_button_label").then(_=>{s.setAttribute("aria-label",_)});let o=t(this,L);if(!o){Z(this,L,o=document.createElement("span")),o.className="tooltip",o.setAttribute("role","tooltip");const _=o.id=`alt-text-tooltip-${this.id}`;s.setAttribute("aria-describedby",_);const M=100;s.addEventListener("mouseenter",()=>{Z(this,O,setTimeout(()=>{Z(this,O,null),t(this,L).classList.add("show"),this._uiManager._eventBus.dispatch("reporttelemetry",{source:this,details:{type:"editing",subtype:this.editorType,data:{action:"alt_text_tooltip"}}})},M))}),s.addEventListener("mouseleave",()=>{var N;clearTimeout(t(this,O)),Z(this,O,null),(N=t(this,L))==null||N.classList.remove("show")})}s.classList.add("done"),o.innerText=t(this,P)?await i._l10nPromise.get("editor_alt_text_decorative_tooltip"):t(this,B),o.parentNode||s.append(o)},kt=new WeakSet,Ei=function(s){if(!this._isDraggable)return;const o=this._uiManager.isSelected(this);this._uiManager.setUpDragSession();let c,_;o&&(c={passive:!0,capture:!0},_=N=>{const[tt,Q]=this.screenToPageTranslation(N.movementX,N.movementY);this._uiManager.dragSelectedEditors(tt,Q)},window.addEventListener("pointermove",_,c));const M=()=>{if(window.removeEventListener("pointerup",M),window.removeEventListener("blur",M),o&&window.removeEventListener("pointermove",_,c),Z(this,b,!1),!this._uiManager.endDragSession()){const{isMac:N}=F.FeatureTest.platform;s.ctrlKey&&!N||s.shiftKey||s.metaKey&&N?this.parent.toggleSelected(this):this.parent.setSelected(this)}};window.addEventListener("pointerup",M),window.addEventListener("blur",M)},I(G,T),ee(G,"_borderLineWidth",-1),ee(G,"_colorManager",new h.ColorManager),ee(G,"_zIndex",1),ee(G,"SMALL_EDITOR_SIZE",0),d.AnnotationEditor=G;class ut extends G{constructor(s){super(s),this.annotationElementId=s.annotationElementId,this.deleted=!0}serialize(){return{id:this.annotationElementId,deleted:!0,pageIndex:this.pageIndex}}}},(_t,d,st)=>{var x,v,y,u,b,ze,A,a,l,k,p,wi,m,U,X,E,$,it,at,H,lt,pt,Ct,kt,S,i,n,s,o,c,_,M,N,tt,Q,nt,ct,At,dt,Ft,Bt,St,Dt,ft,K,J,ht,Ci,Tt,Xe,Wt,$e,qt,Ce,Gt,Ve,rt,qe,z,re,yt,me,Zt,Ti,vt,xi,xt,Ye,Nt,be,bt,Ke;Object.defineProperty(d,"__esModule",{value:!0}),d.KeyboardManager=d.CommandManager=d.ColorManager=d.AnnotationEditorUIManager=void 0,d.bindEvents=ot,d.opacityToHex=G;var h=st(1),F=st(6);function ot(R,e,f){for(const D of f)e.addEventListener(D,R[D].bind(R))}function G(R){return Math.round(Math.min(255,Math.max(1,255*R))).toString(16).padStart(2,"0")}class ut{constructor(){I(this,x,0)}getId(){return`${h.AnnotationEditorPrefix}${ge(this,x)._++}`}}x=new WeakMap;const C=class{constructor(){I(this,b);I(this,v,(0,h.getUuid)());I(this,y,0);I(this,u,null)}static get _isSVGFittingCanvas(){const e='data:image/svg+xml;charset=UTF-8,<svg viewBox="0 0 1 1" width="1" height="1" xmlns="http://www.w3.org/2000/svg"><rect width="1" height="1" style="fill:red;"/></svg>',D=new OffscreenCanvas(1,3).getContext("2d"),j=new Image;j.src=e;const V=j.decode().then(()=>(D.drawImage(j,0,0,1,1,0,0,1,3),new Uint32Array(D.getImageData(0,0,1,1).data.buffer)[0]===0));return(0,h.shadow)(this,"_isSVGFittingCanvas",V)}async getFromFile(e){const{lastModified:f,name:D,size:j,type:V}=e;return W(this,b,ze).call(this,`${f}_${D}_${j}_${V}`,e)}async getFromUrl(e){return W(this,b,ze).call(this,e,e)}async getFromId(e){t(this,u)||Z(this,u,new Map);const f=t(this,u).get(e);return f?f.bitmap?(f.refCounter+=1,f):f.file?this.getFromFile(f.file):this.getFromUrl(f.url):null}getSvgUrl(e){const f=t(this,u).get(e);return f!=null&&f.isSvg?f.svgUrl:null}deleteId(e){t(this,u)||Z(this,u,new Map);const f=t(this,u).get(e);!f||(f.refCounter-=1,f.refCounter===0&&(f.bitmap=null))}isValidId(e){return e.startsWith(`image_${t(this,v)}_`)}};let B=C;v=new WeakMap,y=new WeakMap,u=new WeakMap,b=new WeakSet,ze=async function(e,f){t(this,u)||Z(this,u,new Map);let D=t(this,u).get(e);if(D===null)return null;if(D!=null&&D.bitmap)return D.refCounter+=1,D;try{D||(D={bitmap:null,id:`image_${t(this,v)}_${ge(this,y)._++}`,refCounter:0,isSvg:!1});let j;if(typeof f=="string"){D.url=f;const V=await fetch(f);if(!V.ok)throw new Error(V.statusText);j=await V.blob()}else j=D.file=f;if(j.type==="image/svg+xml"){const V=C._isSVGFittingCanvas,et=new FileReader,gt=new Image,wt=new Promise((Pt,zt)=>{gt.onload=()=>{D.bitmap=gt,D.isSvg=!0,Pt()},et.onload=async()=>{const Mt=D.svgUrl=et.result;gt.src=await V?`${Mt}#svgView(preserveAspectRatio(none))`:Mt},gt.onerror=et.onerror=zt});et.readAsDataURL(j),await wt}else D.bitmap=await createImageBitmap(j);D.refCounter=1}catch(j){console.error(j),D=null}return t(this,u).set(e,D),D&&t(this,u).set(D.id,D),D};class P{constructor(e=128){I(this,A,[]);I(this,a,!1);I(this,l,void 0);I(this,k,-1);Z(this,l,e)}add({cmd:e,undo:f,mustExec:D,type:j=NaN,overwriteIfSameType:V=!1,keepUndo:et=!1}){if(D&&e(),t(this,a))return;const gt={cmd:e,undo:f,type:j};if(t(this,k)===-1){t(this,A).length>0&&(t(this,A).length=0),Z(this,k,0),t(this,A).push(gt);return}if(V&&t(this,A)[t(this,k)].type===j){et&&(gt.undo=t(this,A)[t(this,k)].undo),t(this,A)[t(this,k)]=gt;return}const wt=t(this,k)+1;wt===t(this,l)?t(this,A).splice(0,1):(Z(this,k,wt),wt<t(this,A).length&&t(this,A).splice(wt)),t(this,A).push(gt)}undo(){t(this,k)!==-1&&(Z(this,a,!0),t(this,A)[t(this,k)].undo(),Z(this,a,!1),Z(this,k,t(this,k)-1))}redo(){t(this,k)<t(this,A).length-1&&(Z(this,k,t(this,k)+1),Z(this,a,!0),t(this,A)[t(this,k)].cmd(),Z(this,a,!1))}hasSomethingToUndo(){return t(this,k)!==-1}hasSomethingToRedo(){return t(this,k)<t(this,A).length-1}destroy(){Z(this,A,null)}}A=new WeakMap,a=new WeakMap,l=new WeakMap,k=new WeakMap,d.CommandManager=P;class g{constructor(e){I(this,p);this.buffer=[],this.callbacks=new Map,this.allKeys=new Set;const{isMac:f}=h.FeatureTest.platform;for(const[D,j,V={}]of e)for(const et of D){const gt=et.startsWith("mac+");f&&gt?(this.callbacks.set(et.slice(4),{callback:j,options:V}),this.allKeys.add(et.split("+").at(-1))):!f&&!gt&&(this.callbacks.set(et,{callback:j,options:V}),this.allKeys.add(et.split("+").at(-1)))}}exec(e,f){if(!this.allKeys.has(f.key))return;const D=this.callbacks.get(W(this,p,wi).call(this,f));if(!D)return;const{callback:j,options:{bubbles:V=!1,args:et=[],checker:gt=null}}=D;gt&&!gt(e,f)||(j.bind(e,...et)(),V||(f.stopPropagation(),f.preventDefault()))}}p=new WeakSet,wi=function(e){e.altKey&&this.buffer.push("alt"),e.ctrlKey&&this.buffer.push("ctrl"),e.metaKey&&this.buffer.push("meta"),e.shiftKey&&this.buffer.push("shift"),this.buffer.push(e.key);const f=this.buffer.join("+");return this.buffer.length=0,f},d.KeyboardManager=g;const T=class{get _colors(){const e=new Map([["CanvasText",null],["Canvas",null]]);return(0,F.getColorValues)(e),(0,h.shadow)(this,"_colors",e)}convert(e){const f=(0,F.getRGB)(e);if(!window.matchMedia("(forced-colors: active)").matches)return f;for(const[D,j]of this._colors)if(j.every((V,et)=>V===f[et]))return T._colorsMapping.get(D);return f}getHexCode(e){const f=this._colors.get(e);return f?h.Util.makeHexColor(...f):e}};let L=T;ee(L,"_colorsMapping",new Map([["CanvasText",[0,0,0]],["Canvas",[255,255,255]]])),d.ColorManager=L;const Ot=class{constructor(e,f,D,j,V,et){I(this,ht);I(this,Tt);I(this,Wt);I(this,qt);I(this,Gt);I(this,rt);I(this,z);I(this,yt);I(this,Zt);I(this,vt);I(this,xt);I(this,Nt);I(this,bt);I(this,m,null);I(this,U,new Map);I(this,X,new Map);I(this,E,null);I(this,$,null);I(this,it,new P);I(this,at,0);I(this,H,new Set);I(this,lt,null);I(this,pt,null);I(this,Ct,new Set);I(this,kt,null);I(this,S,new ut);I(this,i,!1);I(this,n,!1);I(this,s,null);I(this,o,h.AnnotationEditorType.NONE);I(this,c,new Set);I(this,_,null);I(this,M,this.blur.bind(this));I(this,N,this.focus.bind(this));I(this,tt,this.copy.bind(this));I(this,Q,this.cut.bind(this));I(this,nt,this.paste.bind(this));I(this,ct,this.keydown.bind(this));I(this,At,this.onEditingAction.bind(this));I(this,dt,this.onPageChanging.bind(this));I(this,Ft,this.onScaleChanging.bind(this));I(this,Bt,this.onRotationChanging.bind(this));I(this,St,{isEditing:!1,isEmpty:!0,hasSomethingToUndo:!1,hasSomethingToRedo:!1,hasSelectedEditor:!1});I(this,Dt,[0,0]);I(this,ft,null);I(this,K,null);I(this,J,null);Z(this,K,e),Z(this,J,f),Z(this,E,D),this._eventBus=j,this._eventBus._on("editingaction",t(this,At)),this._eventBus._on("pagechanging",t(this,dt)),this._eventBus._on("scalechanging",t(this,Ft)),this._eventBus._on("rotationchanging",t(this,Bt)),Z(this,$,V.annotationStorage),Z(this,kt,V.filterFactory),Z(this,_,et),this.viewParameters={realScale:F.PixelsPerInch.PDF_TO_CSS_UNITS,rotation:0}}static get _keyboardManager(){const e=Ot.prototype,f=V=>{const{activeElement:et}=document;return et&&t(V,K).contains(et)&&V.hasSomethingToControl()},D=this.TRANSLATE_SMALL,j=this.TRANSLATE_BIG;return(0,h.shadow)(this,"_keyboardManager",new g([[["ctrl+a","mac+meta+a"],e.selectAll],[["ctrl+z","mac+meta+z"],e.undo],[["ctrl+y","ctrl+shift+z","mac+meta+shift+z","ctrl+shift+Z","mac+meta+shift+Z"],e.redo],[["Backspace","alt+Backspace","ctrl+Backspace","shift+Backspace","mac+Backspace","mac+alt+Backspace","mac+ctrl+Backspace","Delete","ctrl+Delete","shift+Delete","mac+Delete"],e.delete],[["Escape","mac+Escape"],e.unselectAll],[["ArrowLeft","mac+ArrowLeft"],e.translateSelectedEditors,{args:[-D,0],checker:f}],[["ctrl+ArrowLeft","mac+shift+ArrowLeft"],e.translateSelectedEditors,{args:[-j,0],checker:f}],[["ArrowRight","mac+ArrowRight"],e.translateSelectedEditors,{args:[D,0],checker:f}],[["ctrl+ArrowRight","mac+shift+ArrowRight"],e.translateSelectedEditors,{args:[j,0],checker:f}],[["ArrowUp","mac+ArrowUp"],e.translateSelectedEditors,{args:[0,-D],checker:f}],[["ctrl+ArrowUp","mac+shift+ArrowUp"],e.translateSelectedEditors,{args:[0,-j],checker:f}],[["ArrowDown","mac+ArrowDown"],e.translateSelectedEditors,{args:[0,D],checker:f}],[["ctrl+ArrowDown","mac+shift+ArrowDown"],e.translateSelectedEditors,{args:[0,j],checker:f}]]))}destroy(){W(this,qt,Ce).call(this),W(this,Tt,Xe).call(this),this._eventBus._off("editingaction",t(this,At)),this._eventBus._off("pagechanging",t(this,dt)),this._eventBus._off("scalechanging",t(this,Ft)),this._eventBus._off("rotationchanging",t(this,Bt));for(const e of t(this,X).values())e.destroy();t(this,X).clear(),t(this,U).clear(),t(this,Ct).clear(),Z(this,m,null),t(this,c).clear(),t(this,it).destroy(),t(this,E).destroy()}get hcmFilter(){return(0,h.shadow)(this,"hcmFilter",t(this,_)?t(this,kt).addHCMFilter(t(this,_).foreground,t(this,_).background):"none")}get direction(){return(0,h.shadow)(this,"direction",getComputedStyle(t(this,K)).direction)}editAltText(e){var f;(f=t(this,E))==null||f.editAltText(this,e)}onPageChanging({pageNumber:e}){Z(this,at,e-1)}focusMainContainer(){t(this,K).focus()}findParent(e,f){for(const D of t(this,X).values()){const{x:j,y:V,width:et,height:gt}=D.div.getBoundingClientRect();if(e>=j&&e<=j+et&&f>=V&&f<=V+gt)return D}return null}disableUserSelect(e=!1){t(this,J).classList.toggle("noUserSelect",e)}addShouldRescale(e){t(this,Ct).add(e)}removeShouldRescale(e){t(this,Ct).delete(e)}onScaleChanging({scale:e}){this.commitOrRemove(),this.viewParameters.realScale=e*F.PixelsPerInch.PDF_TO_CSS_UNITS;for(const f of t(this,Ct))f.onScaleChanging()}onRotationChanging({pagesRotation:e}){this.commitOrRemove(),this.viewParameters.rotation=e}addToAnnotationStorage(e){!e.isEmpty()&&t(this,$)&&!t(this,$).has(e.id)&&t(this,$).setValue(e.id,e)}blur(){if(!this.hasSelection)return;const{activeElement:e}=document;for(const f of t(this,c))if(f.div.contains(e)){Z(this,s,[f,e]),f._focusEventsAllowed=!1;break}}focus(){if(!t(this,s))return;const[e,f]=t(this,s);Z(this,s,null),f.addEventListener("focusin",()=>{e._focusEventsAllowed=!0},{once:!0}),f.focus()}addEditListeners(){W(this,Wt,$e).call(this),W(this,Gt,Ve).call(this)}removeEditListeners(){W(this,qt,Ce).call(this),W(this,rt,qe).call(this)}copy(e){var D;if(e.preventDefault(),(D=t(this,m))==null||D.commitOrRemove(),!this.hasSelection)return;const f=[];for(const j of t(this,c)){const V=j.serialize(!0);V&&f.push(V)}f.length!==0&&e.clipboardData.setData("application/pdfjs",JSON.stringify(f))}cut(e){this.copy(e),this.delete()}paste(e){e.preventDefault();const{clipboardData:f}=e;for(const V of f.items)for(const et of t(this,pt))if(et.isHandlingMimeForPasting(V.type)){et.paste(V,this.currentLayer);return}let D=f.getData("application/pdfjs");if(!D)return;try{D=JSON.parse(D)}catch(V){(0,h.warn)(`paste: "${V.message}".`);return}if(!Array.isArray(D))return;this.unselectAll();const j=this.currentLayer;try{const V=[];for(const wt of D){const Pt=j.deserialize(wt);if(!Pt)return;V.push(Pt)}const et=()=>{for(const wt of V)W(this,xt,Ye).call(this,wt);W(this,bt,Ke).call(this,V)},gt=()=>{for(const wt of V)wt.remove()};this.addCommands({cmd:et,undo:gt,mustExec:!0})}catch(V){(0,h.warn)(`paste: "${V.message}".`)}}keydown(e){var f;(f=this.getActive())!=null&&f.shouldGetKeyboardEvents()||Ot._keyboardManager.exec(this,e)}onEditingAction(e){["undo","redo","delete","selectAll"].includes(e.name)&&this[e.name]()}setEditingState(e){e?(W(this,ht,Ci).call(this),W(this,Wt,$e).call(this),W(this,Gt,Ve).call(this),W(this,z,re).call(this,{isEditing:t(this,o)!==h.AnnotationEditorType.NONE,isEmpty:W(this,Nt,be).call(this),hasSomethingToUndo:t(this,it).hasSomethingToUndo(),hasSomethingToRedo:t(this,it).hasSomethingToRedo(),hasSelectedEditor:!1})):(W(this,Tt,Xe).call(this),W(this,qt,Ce).call(this),W(this,rt,qe).call(this),W(this,z,re).call(this,{isEditing:!1}),this.disableUserSelect(!1))}registerEditorTypes(e){if(!t(this,pt)){Z(this,pt,e);for(const f of t(this,pt))W(this,yt,me).call(this,f.defaultPropertiesToUpdate)}}getId(){return t(this,S).getId()}get currentLayer(){return t(this,X).get(t(this,at))}getLayer(e){return t(this,X).get(e)}get currentPageIndex(){return t(this,at)}addLayer(e){t(this,X).set(e.pageIndex,e),t(this,i)?e.enable():e.disable()}removeLayer(e){t(this,X).delete(e.pageIndex)}updateMode(e,f=null){if(t(this,o)!==e){if(Z(this,o,e),e===h.AnnotationEditorType.NONE){this.setEditingState(!1),W(this,vt,xi).call(this);return}this.setEditingState(!0),W(this,Zt,Ti).call(this),this.unselectAll();for(const D of t(this,X).values())D.updateMode(e);if(!!f){for(const D of t(this,U).values())if(D.annotationElementId===f){this.setSelected(D),D.enterInEditMode();break}}}}updateToolbar(e){e!==t(this,o)&&this._eventBus.dispatch("switchannotationeditormode",{source:this,mode:e})}updateParams(e,f){if(!!t(this,pt)){if(e===h.AnnotationEditorParamsType.CREATE){this.currentLayer.addNewEditor(e);return}for(const D of t(this,c))D.updateParams(e,f);for(const D of t(this,pt))D.updateDefaultParams(e,f)}}enableWaiting(e=!1){if(t(this,n)!==e){Z(this,n,e);for(const f of t(this,X).values())e?f.disableClick():f.enableClick(),f.div.classList.toggle("waiting",e)}}getEditors(e){const f=[];for(const D of t(this,U).values())D.pageIndex===e&&f.push(D);return f}getEditor(e){return t(this,U).get(e)}addEditor(e){t(this,U).set(e.id,e)}removeEditor(e){var f;t(this,U).delete(e.id),this.unselect(e),(!e.annotationElementId||!t(this,H).has(e.annotationElementId))&&((f=t(this,$))==null||f.remove(e.id))}addDeletedAnnotationElement(e){t(this,H).add(e.annotationElementId),e.deleted=!0}isDeletedAnnotationElement(e){return t(this,H).has(e)}removeDeletedAnnotationElement(e){t(this,H).delete(e.annotationElementId),e.deleted=!1}setActiveEditor(e){t(this,m)!==e&&(Z(this,m,e),e&&W(this,yt,me).call(this,e.propertiesToUpdate))}toggleSelected(e){if(t(this,c).has(e)){t(this,c).delete(e),e.unselect(),W(this,z,re).call(this,{hasSelectedEditor:this.hasSelection});return}t(this,c).add(e),e.select(),W(this,yt,me).call(this,e.propertiesToUpdate),W(this,z,re).call(this,{hasSelectedEditor:!0})}setSelected(e){for(const f of t(this,c))f!==e&&f.unselect();t(this,c).clear(),t(this,c).add(e),e.select(),W(this,yt,me).call(this,e.propertiesToUpdate),W(this,z,re).call(this,{hasSelectedEditor:!0})}isSelected(e){return t(this,c).has(e)}unselect(e){e.unselect(),t(this,c).delete(e),W(this,z,re).call(this,{hasSelectedEditor:this.hasSelection})}get hasSelection(){return t(this,c).size!==0}undo(){t(this,it).undo(),W(this,z,re).call(this,{hasSomethingToUndo:t(this,it).hasSomethingToUndo(),hasSomethingToRedo:!0,isEmpty:W(this,Nt,be).call(this)})}redo(){t(this,it).redo(),W(this,z,re).call(this,{hasSomethingToUndo:!0,hasSomethingToRedo:t(this,it).hasSomethingToRedo(),isEmpty:W(this,Nt,be).call(this)})}addCommands(e){t(this,it).add(e),W(this,z,re).call(this,{hasSomethingToUndo:!0,hasSomethingToRedo:!1,isEmpty:W(this,Nt,be).call(this)})}delete(){if(this.commitOrRemove(),!this.hasSelection)return;const e=[...t(this,c)],f=()=>{for(const j of e)j.remove()},D=()=>{for(const j of e)W(this,xt,Ye).call(this,j)};this.addCommands({cmd:f,undo:D,mustExec:!0})}commitOrRemove(){var e;(e=t(this,m))==null||e.commitOrRemove()}hasSomethingToControl(){return t(this,m)||this.hasSelection}selectAll(){for(const e of t(this,c))e.commit();W(this,bt,Ke).call(this,t(this,U).values())}unselectAll(){if(t(this,m)){t(this,m).commitOrRemove();return}if(!!this.hasSelection){for(const e of t(this,c))e.unselect();t(this,c).clear(),W(this,z,re).call(this,{hasSelectedEditor:!1})}}translateSelectedEditors(e,f,D=!1){if(D||this.commitOrRemove(),!this.hasSelection)return;t(this,Dt)[0]+=e,t(this,Dt)[1]+=f;const[j,V]=t(this,Dt),et=[...t(this,c)],gt=1e3;t(this,ft)&&clearTimeout(t(this,ft)),Z(this,ft,setTimeout(()=>{Z(this,ft,null),t(this,Dt)[0]=t(this,Dt)[1]=0,this.addCommands({cmd:()=>{for(const wt of et)t(this,U).has(wt.id)&&wt.translateInPage(j,V)},undo:()=>{for(const wt of et)t(this,U).has(wt.id)&&wt.translateInPage(-j,-V)},mustExec:!1})},gt));for(const wt of et)wt.translateInPage(e,f)}setUpDragSession(){if(!!this.hasSelection){this.disableUserSelect(!0),Z(this,lt,new Map);for(const e of t(this,c))t(this,lt).set(e,{savedX:e.x,savedY:e.y,savedPageIndex:e.pageIndex,newX:0,newY:0,newPageIndex:-1})}}endDragSession(){if(!t(this,lt))return!1;this.disableUserSelect(!1);const e=t(this,lt);Z(this,lt,null);let f=!1;for(const[{x:j,y:V,pageIndex:et},gt]of e)gt.newX=j,gt.newY=V,gt.newPageIndex=et,f||(f=j!==gt.savedX||V!==gt.savedY||et!==gt.savedPageIndex);if(!f)return!1;const D=(j,V,et,gt)=>{if(t(this,U).has(j.id)){const wt=t(this,X).get(gt);wt?j._setParentAndPosition(wt,V,et):(j.pageIndex=gt,j.x=V,j.y=et)}};return this.addCommands({cmd:()=>{for(const[j,{newX:V,newY:et,newPageIndex:gt}]of e)D(j,V,et,gt)},undo:()=>{for(const[j,{savedX:V,savedY:et,savedPageIndex:gt}]of e)D(j,V,et,gt)},mustExec:!0}),!0}dragSelectedEditors(e,f){if(!!t(this,lt))for(const D of t(this,lt).keys())D.drag(e,f)}rebuild(e){if(e.parent===null){const f=this.getLayer(e.pageIndex);f?(f.changeParent(e),f.addOrRebuild(e)):(this.addEditor(e),this.addToAnnotationStorage(e),e.rebuild())}else e.parent.addOrRebuild(e)}isActive(e){return t(this,m)===e}getActive(){return t(this,m)}getMode(){return t(this,o)}get imageManager(){return(0,h.shadow)(this,"imageManager",new B)}};let O=Ot;m=new WeakMap,U=new WeakMap,X=new WeakMap,E=new WeakMap,$=new WeakMap,it=new WeakMap,at=new WeakMap,H=new WeakMap,lt=new WeakMap,pt=new WeakMap,Ct=new WeakMap,kt=new WeakMap,S=new WeakMap,i=new WeakMap,n=new WeakMap,s=new WeakMap,o=new WeakMap,c=new WeakMap,_=new WeakMap,M=new WeakMap,N=new WeakMap,tt=new WeakMap,Q=new WeakMap,nt=new WeakMap,ct=new WeakMap,At=new WeakMap,dt=new WeakMap,Ft=new WeakMap,Bt=new WeakMap,St=new WeakMap,Dt=new WeakMap,ft=new WeakMap,K=new WeakMap,J=new WeakMap,ht=new WeakSet,Ci=function(){window.addEventListener("focus",t(this,N)),window.addEventListener("blur",t(this,M))},Tt=new WeakSet,Xe=function(){window.removeEventListener("focus",t(this,N)),window.removeEventListener("blur",t(this,M))},Wt=new WeakSet,$e=function(){window.addEventListener("keydown",t(this,ct),{capture:!0})},qt=new WeakSet,Ce=function(){window.removeEventListener("keydown",t(this,ct),{capture:!0})},Gt=new WeakSet,Ve=function(){document.addEventListener("copy",t(this,tt)),document.addEventListener("cut",t(this,Q)),document.addEventListener("paste",t(this,nt))},rt=new WeakSet,qe=function(){document.removeEventListener("copy",t(this,tt)),document.removeEventListener("cut",t(this,Q)),document.removeEventListener("paste",t(this,nt))},z=new WeakSet,re=function(e){Object.entries(e).some(([D,j])=>t(this,St)[D]!==j)&&this._eventBus.dispatch("annotationeditorstateschanged",{source:this,details:Object.assign(t(this,St),e)})},yt=new WeakSet,me=function(e){this._eventBus.dispatch("annotationeditorparamschanged",{source:this,details:e})},Zt=new WeakSet,Ti=function(){if(!t(this,i)){Z(this,i,!0);for(const e of t(this,X).values())e.enable()}},vt=new WeakSet,xi=function(){if(this.unselectAll(),t(this,i)){Z(this,i,!1);for(const e of t(this,X).values())e.disable()}},xt=new WeakSet,Ye=function(e){const f=t(this,X).get(e.pageIndex);f?f.addOrRebuild(e):this.addEditor(e)},Nt=new WeakSet,be=function(){if(t(this,U).size===0)return!0;if(t(this,U).size===1)for(const e of t(this,U).values())return e.isEmpty();return!1},bt=new WeakSet,Ke=function(e){t(this,c).clear();for(const f of e)f.isEmpty()||(t(this,c).add(f),f.select());W(this,z,re).call(this,{hasSelectedEditor:!0})},ee(O,"TRANSLATE_SMALL",1),ee(O,"TRANSLATE_BIG",10),d.AnnotationEditorUIManager=O},(_t,d,st)=>{var at,H,lt,pt,Ct,kt,S,i,n,s,o,c,de,M,ue,tt,Je,nt,Te,At,xe,Ft,_e,St,Ae;Object.defineProperty(d,"__esModule",{value:!0}),d.StatTimer=d.RenderingCancelledException=d.PixelsPerInch=d.PageViewport=d.PDFDateString=d.DOMStandardFontDataFactory=d.DOMSVGFactory=d.DOMFilterFactory=d.DOMCanvasFactory=d.DOMCMapReaderFactory=void 0,d.deprecated=k,d.getColorValues=U,d.getCurrentTransform=X,d.getCurrentTransformInverse=E,d.getFilenameFromUrl=b,d.getPdfFilenameFromUrl=w,d.getRGB=m,d.getXfaPageViewport=T,d.isDataScheme=y,d.isPdfFile=u,d.isValidFetchUrl=A,d.loadScript=l,d.noContextMenu=a,d.setLayerDimensions=$;var h=st(7),F=st(1);const ot="http://www.w3.org/2000/svg",it=class{};let G=it;ee(G,"CSS",96),ee(G,"PDF",72),ee(G,"PDF_TO_CSS_UNITS",it.CSS/it.PDF),d.PixelsPerInch=G;class ut extends h.BaseFilterFactory{constructor({docId:J,ownerDocument:ht=globalThis.document}={}){super();I(this,c);I(this,M);I(this,tt);I(this,nt);I(this,At);I(this,Ft);I(this,St);I(this,at,void 0);I(this,H,void 0);I(this,lt,void 0);I(this,pt,void 0);I(this,Ct,void 0);I(this,kt,void 0);I(this,S,void 0);I(this,i,void 0);I(this,n,void 0);I(this,s,void 0);I(this,o,0);Z(this,lt,J),Z(this,pt,ht)}addFilter(J){if(!J)return"none";let ht=t(this,c,de).get(J);if(ht)return ht;let Et,Tt,Ht,Wt;if(J.length===1){const Gt=J[0],$t=new Array(256);for(let rt=0;rt<256;rt++)$t[rt]=Gt[rt]/255;Wt=Et=Tt=Ht=$t.join(",")}else{const[Gt,$t,rt]=J,Y=new Array(256),z=new Array(256),mt=new Array(256);for(let yt=0;yt<256;yt++)Y[yt]=Gt[yt]/255,z[yt]=$t[yt]/255,mt[yt]=rt[yt]/255;Et=Y.join(","),Tt=z.join(","),Ht=mt.join(","),Wt=`${Et}${Tt}${Ht}`}if(ht=t(this,c,de).get(Wt),ht)return t(this,c,de).set(J,ht),ht;const jt=`g_${t(this,lt)}_transfer_map_${ge(this,o)._++}`,qt=`url(#${jt})`;t(this,c,de).set(J,qt),t(this,c,de).set(Wt,qt);const Xt=W(this,nt,Te).call(this,jt);return W(this,Ft,_e).call(this,Et,Tt,Ht,Xt),qt}addHCMFilter(J,ht){var $t;const Et=`${J}-${ht}`;if(t(this,kt)===Et)return t(this,S);if(Z(this,kt,Et),Z(this,S,"none"),($t=t(this,Ct))==null||$t.remove(),!J||!ht)return t(this,S);const Tt=W(this,St,Ae).call(this,J);J=F.Util.makeHexColor(...Tt);const Ht=W(this,St,Ae).call(this,ht);if(ht=F.Util.makeHexColor(...Ht),t(this,M,ue).style.color="",J==="#000000"&&ht==="#ffffff"||J===ht)return t(this,S);const Wt=new Array(256);for(let rt=0;rt<=255;rt++){const Y=rt/255;Wt[rt]=Y<=.03928?Y/12.92:((Y+.055)/1.055)**2.4}const jt=Wt.join(","),qt=`g_${t(this,lt)}_hcm_filter`,Xt=Z(this,i,W(this,nt,Te).call(this,qt));W(this,Ft,_e).call(this,jt,jt,jt,Xt),W(this,tt,Je).call(this,Xt);const Gt=(rt,Y)=>{const z=Tt[rt]/255,mt=Ht[rt]/255,yt=new Array(Y+1);for(let te=0;te<=Y;te++)yt[te]=z+te/Y*(mt-z);return yt.join(",")};return W(this,Ft,_e).call(this,Gt(0,5),Gt(1,5),Gt(2,5),Xt),Z(this,S,`url(#${qt})`),t(this,S)}addHighlightHCMFilter(J,ht,Et,Tt){var mt;const Ht=`${J}-${ht}-${Et}-${Tt}`;if(t(this,n)===Ht)return t(this,s);if(Z(this,n,Ht),Z(this,s,"none"),(mt=t(this,i))==null||mt.remove(),!J||!ht)return t(this,s);const[Wt,jt]=[J,ht].map(W(this,St,Ae).bind(this));let qt=Math.round(.2126*Wt[0]+.7152*Wt[1]+.0722*Wt[2]),Xt=Math.round(.2126*jt[0]+.7152*jt[1]+.0722*jt[2]),[Gt,$t]=[Et,Tt].map(W(this,St,Ae).bind(this));Xt<qt&&([qt,Xt,Gt,$t]=[Xt,qt,$t,Gt]),t(this,M,ue).style.color="";const rt=(yt,te,Zt)=>{const q=new Array(256),vt=(Xt-qt)/Zt,It=yt/255,xt=(te-yt)/(255*Zt);let Lt=0;for(let Nt=0;Nt<=Zt;Nt++){const Jt=Math.round(qt+Nt*vt),bt=It+Nt*xt;for(let Yt=Lt;Yt<=Jt;Yt++)q[Yt]=bt;Lt=Jt+1}for(let Nt=Lt;Nt<256;Nt++)q[Nt]=q[Lt-1];return q.join(",")},Y=`g_${t(this,lt)}_hcm_highlight_filter`,z=Z(this,i,W(this,nt,Te).call(this,Y));return W(this,tt,Je).call(this,z),W(this,Ft,_e).call(this,rt(Gt[0],$t[0],5),rt(Gt[1],$t[1],5),rt(Gt[2],$t[2],5),z),Z(this,s,`url(#${Y})`),t(this,s)}destroy(J=!1){J&&(t(this,S)||t(this,s))||(t(this,H)&&(t(this,H).parentNode.parentNode.remove(),Z(this,H,null)),t(this,at)&&(t(this,at).clear(),Z(this,at,null)),Z(this,o,0))}}at=new WeakMap,H=new WeakMap,lt=new WeakMap,pt=new WeakMap,Ct=new WeakMap,kt=new WeakMap,S=new WeakMap,i=new WeakMap,n=new WeakMap,s=new WeakMap,o=new WeakMap,c=new WeakSet,de=function(){return t(this,at)||Z(this,at,new Map)},M=new WeakSet,ue=function(){if(!t(this,H)){const J=t(this,pt).createElement("div"),{style:ht}=J;ht.visibility="hidden",ht.contain="strict",ht.width=ht.height=0,ht.position="absolute",ht.top=ht.left=0,ht.zIndex=-1;const Et=t(this,pt).createElementNS(ot,"svg");Et.setAttribute("width",0),Et.setAttribute("height",0),Z(this,H,t(this,pt).createElementNS(ot,"defs")),J.append(Et),Et.append(t(this,H)),t(this,pt).body.append(J)}return t(this,H)},tt=new WeakSet,Je=function(J){const ht=t(this,pt).createElementNS(ot,"feColorMatrix");ht.setAttribute("type","matrix"),ht.setAttribute("values","0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0"),J.append(ht)},nt=new WeakSet,Te=function(J){const ht=t(this,pt).createElementNS(ot,"filter");return ht.setAttribute("color-interpolation-filters","sRGB"),ht.setAttribute("id",J),t(this,M,ue).append(ht),ht},At=new WeakSet,xe=function(J,ht,Et){const Tt=t(this,pt).createElementNS(ot,ht);Tt.setAttribute("type","discrete"),Tt.setAttribute("tableValues",Et),J.append(Tt)},Ft=new WeakSet,_e=function(J,ht,Et,Tt){const Ht=t(this,pt).createElementNS(ot,"feComponentTransfer");Tt.append(Ht),W(this,At,xe).call(this,Ht,"feFuncR",J),W(this,At,xe).call(this,Ht,"feFuncG",ht),W(this,At,xe).call(this,Ht,"feFuncB",Et)},St=new WeakSet,Ae=function(J){return t(this,M,ue).style.color=J,m(getComputedStyle(t(this,M,ue)).getPropertyValue("color"))},d.DOMFilterFactory=ut;class B extends h.BaseCanvasFactory{constructor({ownerDocument:K=globalThis.document}={}){super(),this._document=K}_createCanvas(K,J){const ht=this._document.createElement("canvas");return ht.width=K,ht.height=J,ht}}d.DOMCanvasFactory=B;async function P(ft,K=!1){if(A(ft,document.baseURI)){const J=await fetch(ft);if(!J.ok)throw new Error(J.statusText);return K?new Uint8Array(await J.arrayBuffer()):(0,F.stringToBytes)(await J.text())}return new Promise((J,ht)=>{const Et=new XMLHttpRequest;Et.open("GET",ft,!0),K&&(Et.responseType="arraybuffer"),Et.onreadystatechange=()=>{if(Et.readyState===XMLHttpRequest.DONE){if(Et.status===200||Et.status===0){let Tt;if(K&&Et.response?Tt=new Uint8Array(Et.response):!K&&Et.responseText&&(Tt=(0,F.stringToBytes)(Et.responseText)),Tt){J(Tt);return}}ht(new Error(Et.statusText))}},Et.send(null)})}class g extends h.BaseCMapReaderFactory{_fetchData(K,J){return P(K,this.isCompressed).then(ht=>({cMapData:ht,compressionType:J}))}}d.DOMCMapReaderFactory=g;class L extends h.BaseStandardFontDataFactory{_fetchData(K){return P(K,!0)}}d.DOMStandardFontDataFactory=L;class O extends h.BaseSVGFactory{_createSVG(K){return document.createElementNS(ot,K)}}d.DOMSVGFactory=O;class x{constructor({viewBox:K,scale:J,rotation:ht,offsetX:Et=0,offsetY:Tt=0,dontFlip:Ht=!1}){this.viewBox=K,this.scale=J,this.rotation=ht,this.offsetX=Et,this.offsetY=Tt;const Wt=(K[2]+K[0])/2,jt=(K[3]+K[1])/2;let qt,Xt,Gt,$t;switch(ht%=360,ht<0&&(ht+=360),ht){case 180:qt=-1,Xt=0,Gt=0,$t=1;break;case 90:qt=0,Xt=1,Gt=1,$t=0;break;case 270:qt=0,Xt=-1,Gt=-1,$t=0;break;case 0:qt=1,Xt=0,Gt=0,$t=-1;break;default:throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.")}Ht&&(Gt=-Gt,$t=-$t);let rt,Y,z,mt;qt===0?(rt=Math.abs(jt-K[1])*J+Et,Y=Math.abs(Wt-K[0])*J+Tt,z=(K[3]-K[1])*J,mt=(K[2]-K[0])*J):(rt=Math.abs(Wt-K[0])*J+Et,Y=Math.abs(jt-K[1])*J+Tt,z=(K[2]-K[0])*J,mt=(K[3]-K[1])*J),this.transform=[qt*J,Xt*J,Gt*J,$t*J,rt-qt*J*Wt-Gt*J*jt,Y-Xt*J*Wt-$t*J*jt],this.width=z,this.height=mt}get rawDims(){const{viewBox:K}=this;return(0,F.shadow)(this,"rawDims",{pageWidth:K[2]-K[0],pageHeight:K[3]-K[1],pageX:K[0],pageY:K[1]})}clone({scale:K=this.scale,rotation:J=this.rotation,offsetX:ht=this.offsetX,offsetY:Et=this.offsetY,dontFlip:Tt=!1}={}){return new x({viewBox:this.viewBox.slice(),scale:K,rotation:J,offsetX:ht,offsetY:Et,dontFlip:Tt})}convertToViewportPoint(K,J){return F.Util.applyTransform([K,J],this.transform)}convertToViewportRectangle(K){const J=F.Util.applyTransform([K[0],K[1]],this.transform),ht=F.Util.applyTransform([K[2],K[3]],this.transform);return[J[0],J[1],ht[0],ht[1]]}convertToPdfPoint(K,J){return F.Util.applyInverseTransform([K,J],this.transform)}}d.PageViewport=x;class v extends F.BaseException{constructor(K,J=0){super(K,"RenderingCancelledException"),this.extraDelay=J}}d.RenderingCancelledException=v;function y(ft){const K=ft.length;let J=0;for(;J<K&&ft[J].trim()==="";)J++;return ft.substring(J,J+5).toLowerCase()==="data:"}function u(ft){return typeof ft=="string"&&/\.pdf$/i.test(ft)}function b(ft,K=!1){return K||([ft]=ft.split(/[#?]/,1)),ft.substring(ft.lastIndexOf("/")+1)}function w(ft,K="document.pdf"){if(typeof ft!="string")return K;if(y(ft))return(0,F.warn)('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.'),K;const J=/^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/,ht=/[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i,Et=J.exec(ft);let Tt=ht.exec(Et[1])||ht.exec(Et[2])||ht.exec(Et[3]);if(Tt&&(Tt=Tt[0],Tt.includes("%")))try{Tt=ht.exec(decodeURIComponent(Tt))[0]}catch{}return Tt||K}class C{constructor(){ee(this,"started",Object.create(null));ee(this,"times",[])}time(K){K in this.started&&(0,F.warn)(`Timer is already running for ${K}`),this.started[K]=Date.now()}timeEnd(K){K in this.started||(0,F.warn)(`Timer has not been started for ${K}`),this.times.push({name:K,start:this.started[K],end:Date.now()}),delete this.started[K]}toString(){const K=[];let J=0;for(const{name:ht}of this.times)J=Math.max(ht.length,J);for(const{name:ht,start:Et,end:Tt}of this.times)K.push(`${ht.padEnd(J)} ${Tt-Et}ms
`);return K.join("")}}d.StatTimer=C;function A(ft,K){try{const{protocol:J}=K?new URL(ft,K):new URL(ft);return J==="http:"||J==="https:"}catch{return!1}}function a(ft){ft.preventDefault()}function l(ft,K=!1){return new Promise((J,ht)=>{const Et=document.createElement("script");Et.src=ft,Et.onload=function(Tt){K&&Et.remove(),J(Tt)},Et.onerror=function(){ht(new Error(`Cannot load script at: ${Et.src}`))},(document.head||document.documentElement).append(Et)})}function k(ft){console.log("Deprecated API usage: "+ft)}let p;class r{static toDateObject(K){if(!K||typeof K!="string")return null;p||(p=new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?"));const J=p.exec(K);if(!J)return null;const ht=parseInt(J[1],10);let Et=parseInt(J[2],10);Et=Et>=1&&Et<=12?Et-1:0;let Tt=parseInt(J[3],10);Tt=Tt>=1&&Tt<=31?Tt:1;let Ht=parseInt(J[4],10);Ht=Ht>=0&&Ht<=23?Ht:0;let Wt=parseInt(J[5],10);Wt=Wt>=0&&Wt<=59?Wt:0;let jt=parseInt(J[6],10);jt=jt>=0&&jt<=59?jt:0;const qt=J[7]||"Z";let Xt=parseInt(J[8],10);Xt=Xt>=0&&Xt<=23?Xt:0;let Gt=parseInt(J[9],10)||0;return Gt=Gt>=0&&Gt<=59?Gt:0,qt==="-"?(Ht+=Xt,Wt+=Gt):qt==="+"&&(Ht-=Xt,Wt-=Gt),new Date(Date.UTC(ht,Et,Tt,Ht,Wt,jt))}}d.PDFDateString=r;function T(ft,{scale:K=1,rotation:J=0}){const{width:ht,height:Et}=ft.attributes.style,Tt=[0,0,parseInt(ht),parseInt(Et)];return new x({viewBox:Tt,scale:K,rotation:J})}function m(ft){if(ft.startsWith("#")){const K=parseInt(ft.slice(1),16);return[(K&16711680)>>16,(K&65280)>>8,K&255]}return ft.startsWith("rgb(")?ft.slice(4,-1).split(",").map(K=>parseInt(K)):ft.startsWith("rgba(")?ft.slice(5,-1).split(",").map(K=>parseInt(K)).slice(0,3):((0,F.warn)(`Not a valid color format: "${ft}"`),[0,0,0])}function U(ft){const K=document.createElement("span");K.style.visibility="hidden",document.body.append(K);for(const J of ft.keys()){K.style.color=J;const ht=window.getComputedStyle(K).color;ft.set(J,m(ht))}K.remove()}function X(ft){const{a:K,b:J,c:ht,d:Et,e:Tt,f:Ht}=ft.getTransform();return[K,J,ht,Et,Tt,Ht]}function E(ft){const{a:K,b:J,c:ht,d:Et,e:Tt,f:Ht}=ft.getTransform().invertSelf();return[K,J,ht,Et,Tt,Ht]}function $(ft,K,J=!1,ht=!0){if(K instanceof x){const{pageWidth:Et,pageHeight:Tt}=K.rawDims,{style:Ht}=ft,Wt=F.FeatureTest.isCSSRoundSupported,jt=`var(--scale-factor) * ${Et}px`,qt=`var(--scale-factor) * ${Tt}px`,Xt=Wt?`round(${jt}, 1px)`:`calc(${jt})`,Gt=Wt?`round(${qt}, 1px)`:`calc(${qt})`;!J||K.rotation%180===0?(Ht.width=Xt,Ht.height=Gt):(Ht.width=Gt,Ht.height=Xt)}ht&&ft.setAttribute("data-main-rotation",K.rotation)}},(_t,d,st)=>{Object.defineProperty(d,"__esModule",{value:!0}),d.BaseStandardFontDataFactory=d.BaseSVGFactory=d.BaseFilterFactory=d.BaseCanvasFactory=d.BaseCMapReaderFactory=void 0;var h=st(1);class F{constructor(){this.constructor===F&&(0,h.unreachable)("Cannot initialize BaseFilterFactory.")}addFilter(g){return"none"}addHCMFilter(g,L){return"none"}addHighlightHCMFilter(g,L,O,x){return"none"}destroy(g=!1){}}d.BaseFilterFactory=F;class ot{constructor(){this.constructor===ot&&(0,h.unreachable)("Cannot initialize BaseCanvasFactory.")}create(g,L){if(g<=0||L<=0)throw new Error("Invalid canvas size");const O=this._createCanvas(g,L);return{canvas:O,context:O.getContext("2d")}}reset(g,L,O){if(!g.canvas)throw new Error("Canvas is not specified");if(L<=0||O<=0)throw new Error("Invalid canvas size");g.canvas.width=L,g.canvas.height=O}destroy(g){if(!g.canvas)throw new Error("Canvas is not specified");g.canvas.width=0,g.canvas.height=0,g.canvas=null,g.context=null}_createCanvas(g,L){(0,h.unreachable)("Abstract method `_createCanvas` called.")}}d.BaseCanvasFactory=ot;class G{constructor({baseUrl:g=null,isCompressed:L=!0}){this.constructor===G&&(0,h.unreachable)("Cannot initialize BaseCMapReaderFactory."),this.baseUrl=g,this.isCompressed=L}async fetch({name:g}){if(!this.baseUrl)throw new Error('The CMap "baseUrl" parameter must be specified, ensure that the "cMapUrl" and "cMapPacked" API parameters are provided.');if(!g)throw new Error("CMap name must be specified.");const L=this.baseUrl+g+(this.isCompressed?".bcmap":""),O=this.isCompressed?h.CMapCompressionType.BINARY:h.CMapCompressionType.NONE;return this._fetchData(L,O).catch(x=>{throw new Error(`Unable to load ${this.isCompressed?"binary ":""}CMap at: ${L}`)})}_fetchData(g,L){(0,h.unreachable)("Abstract method `_fetchData` called.")}}d.BaseCMapReaderFactory=G;class ut{constructor({baseUrl:g=null}){this.constructor===ut&&(0,h.unreachable)("Cannot initialize BaseStandardFontDataFactory."),this.baseUrl=g}async fetch({filename:g}){if(!this.baseUrl)throw new Error('The standard font "baseUrl" parameter must be specified, ensure that the "standardFontDataUrl" API parameter is provided.');if(!g)throw new Error("Font filename must be specified.");const L=`${this.baseUrl}${g}`;return this._fetchData(L).catch(O=>{throw new Error(`Unable to load font data at: ${L}`)})}_fetchData(g){(0,h.unreachable)("Abstract method `_fetchData` called.")}}d.BaseStandardFontDataFactory=ut;class B{constructor(){this.constructor===B&&(0,h.unreachable)("Cannot initialize BaseSVGFactory.")}create(g,L,O=!1){if(g<=0||L<=0)throw new Error("Invalid SVG dimensions");const x=this._createSVG("svg:svg");return x.setAttribute("version","1.1"),O||(x.setAttribute("width",`${g}px`),x.setAttribute("height",`${L}px`)),x.setAttribute("preserveAspectRatio","none"),x.setAttribute("viewBox",`0 0 ${g} ${L}`),x}createElement(g){if(typeof g!="string")throw new Error("Invalid SVG element type");return this._createSVG(g)}_createSVG(g){(0,h.unreachable)("Abstract method `_createSVG` called.")}}d.BaseSVGFactory=B},(_t,d,st)=>{Object.defineProperty(d,"__esModule",{value:!0}),d.MurmurHash3_64=void 0;var h=st(1);const F=3285377520,ot=4294901760,G=65535;class ut{constructor(P){this.h1=P?P&4294967295:F,this.h2=P?P&4294967295:F}update(P){let g,L;if(typeof P=="string"){g=new Uint8Array(P.length*2),L=0;for(let k=0,p=P.length;k<p;k++){const r=P.charCodeAt(k);r<=255?g[L++]=r:(g[L++]=r>>>8,g[L++]=r&255)}}else if((0,h.isArrayBuffer)(P))g=P.slice(),L=g.byteLength;else throw new Error("Wrong data format in MurmurHash3_64_update. Input must be a string or array.");const O=L>>2,x=L-O*4,v=new Uint32Array(g.buffer,0,O);let y=0,u=0,b=this.h1,w=this.h2;const C=3432918353,A=461845907,a=C&G,l=A&G;for(let k=0;k<O;k++)k&1?(y=v[k],y=y*C&ot|y*a&G,y=y<<15|y>>>17,y=y*A&ot|y*l&G,b^=y,b=b<<13|b>>>19,b=b*5+3864292196):(u=v[k],u=u*C&ot|u*a&G,u=u<<15|u>>>17,u=u*A&ot|u*l&G,w^=u,w=w<<13|w>>>19,w=w*5+3864292196);switch(y=0,x){case 3:y^=g[O*4+2]<<16;case 2:y^=g[O*4+1]<<8;case 1:y^=g[O*4],y=y*C&ot|y*a&G,y=y<<15|y>>>17,y=y*A&ot|y*l&G,O&1?b^=y:w^=y}this.h1=b,this.h2=w}hexdigest(){let P=this.h1,g=this.h2;return P^=g>>>1,P=P*3981806797&ot|P*36045&G,g=g*4283543511&ot|((g<<16|P>>>16)*2950163797&ot)>>>16,P^=g>>>1,P=P*444984403&ot|P*60499&G,g=g*3301882366&ot|((g<<16|P>>>16)*3120437893&ot)>>>16,P^=g>>>1,(P>>>0).toString(16).padStart(8,"0")+(g>>>0).toString(16).padStart(8,"0")}}d.MurmurHash3_64=ut},(_t,d,st)=>{var G;Object.defineProperty(d,"__esModule",{value:!0}),d.FontLoader=d.FontFaceObject=void 0;var h=st(1);class F{constructor({ownerDocument:B=globalThis.document,styleElement:P=null}){I(this,G,new Set);this._document=B,this.nativeFontFaces=new Set,this.styleElement=null,this.loadingRequests=[],this.loadTestFontId=0}addNativeFontFace(B){this.nativeFontFaces.add(B),this._document.fonts.add(B)}removeNativeFontFace(B){this.nativeFontFaces.delete(B),this._document.fonts.delete(B)}insertRule(B){this.styleElement||(this.styleElement=this._document.createElement("style"),this._document.documentElement.getElementsByTagName("head")[0].append(this.styleElement));const P=this.styleElement.sheet;P.insertRule(B,P.cssRules.length)}clear(){for(const B of this.nativeFontFaces)this._document.fonts.delete(B);this.nativeFontFaces.clear(),t(this,G).clear(),this.styleElement&&(this.styleElement.remove(),this.styleElement=null)}async loadSystemFont(B){if(!(!B||t(this,G).has(B.loadedName))){if((0,h.assert)(!this.disableFontFace,"loadSystemFont shouldn't be called when `disableFontFace` is set."),this.isFontLoadingAPISupported){const{loadedName:P,src:g,style:L}=B,O=new FontFace(P,g,L);this.addNativeFontFace(O);try{await O.load(),t(this,G).add(P)}catch{(0,h.warn)(`Cannot load system font: ${B.baseFontName}, installing it could help to improve PDF rendering.`),this.removeNativeFontFace(O)}return}(0,h.unreachable)("Not implemented: loadSystemFont without the Font Loading API.")}}async bind(B){if(B.attached||B.missingFile&&!B.systemFontInfo)return;if(B.attached=!0,B.systemFontInfo){await this.loadSystemFont(B.systemFontInfo);return}if(this.isFontLoadingAPISupported){const g=B.createNativeFontFace();if(g){this.addNativeFontFace(g);try{await g.loaded}catch(L){throw(0,h.warn)(`Failed to load font '${g.family}': '${L}'.`),B.disableFontFace=!0,L}}return}const P=B.createFontFaceRule();if(P){if(this.insertRule(P),this.isSyncFontLoadingSupported)return;await new Promise(g=>{const L=this._queueLoadingCallback(g);this._prepareFontLoadEvent(B,L)})}}get isFontLoadingAPISupported(){var P;const B=!!((P=this._document)!=null&&P.fonts);return(0,h.shadow)(this,"isFontLoadingAPISupported",B)}get isSyncFontLoadingSupported(){let B=!1;return(h.isNodeJS||typeof navigator!="undefined"&&/Mozilla\/5.0.*?rv:\d+.*? Gecko/.test(navigator.userAgent))&&(B=!0),(0,h.shadow)(this,"isSyncFontLoadingSupported",B)}_queueLoadingCallback(B){function P(){for((0,h.assert)(!L.done,"completeRequest() cannot be called twice."),L.done=!0;g.length>0&&g[0].done;){const O=g.shift();setTimeout(O.callback,0)}}const{loadingRequests:g}=this,L={done:!1,complete:P,callback:B};return g.push(L),L}get _loadTestFont(){const B=atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==");return(0,h.shadow)(this,"_loadTestFont",B)}_prepareFontLoadEvent(B,P){function g(m,U){return m.charCodeAt(U)<<24|m.charCodeAt(U+1)<<16|m.charCodeAt(U+2)<<8|m.charCodeAt(U+3)&255}function L(m,U,X,E){const $=m.substring(0,U),it=m.substring(U+X);return $+E+it}let O,x;const v=this._document.createElement("canvas");v.width=1,v.height=1;const y=v.getContext("2d");let u=0;function b(m,U){if(++u>30){(0,h.warn)("Load test font never loaded."),U();return}if(y.font="30px "+m,y.fillText(".",0,20),y.getImageData(0,0,1,1).data[3]>0){U();return}setTimeout(b.bind(null,m,U))}const w=`lt${Date.now()}${this.loadTestFontId++}`;let C=this._loadTestFont;C=L(C,976,w.length,w);const a=16,l=1482184792;let k=g(C,a);for(O=0,x=w.length-3;O<x;O+=4)k=k-l+g(w,O)|0;O<w.length&&(k=k-l+g(w+"XXX",O)|0),C=L(C,a,4,(0,h.string32)(k));const p=`url(data:font/opentype;base64,${btoa(C)});`,r=`@font-face {font-family:"${w}";src:${p}}`;this.insertRule(r);const T=this._document.createElement("div");T.style.visibility="hidden",T.style.width=T.style.height="10px",T.style.position="absolute",T.style.top=T.style.left="0px";for(const m of[B.loadedName,w]){const U=this._document.createElement("span");U.textContent="Hi",U.style.fontFamily=m,T.append(U)}this._document.body.append(T),b(w,()=>{T.remove(),P.complete()})}}G=new WeakMap,d.FontLoader=F;class ot{constructor(B,{isEvalSupported:P=!0,disableFontFace:g=!1,ignoreErrors:L=!1,inspectFont:O=null}){this.compiledGlyphs=Object.create(null);for(const x in B)this[x]=B[x];this.isEvalSupported=P!==!1,this.disableFontFace=g===!0,this.ignoreErrors=L===!0,this._inspectFont=O}createNativeFontFace(){var P;if(!this.data||this.disableFontFace)return null;let B;if(!this.cssFontInfo)B=new FontFace(this.loadedName,this.data,{});else{const g={weight:this.cssFontInfo.fontWeight};this.cssFontInfo.italicAngle&&(g.style=`oblique ${this.cssFontInfo.italicAngle}deg`),B=new FontFace(this.cssFontInfo.fontFamily,this.data,g)}return(P=this._inspectFont)==null||P.call(this,this),B}createFontFaceRule(){var L;if(!this.data||this.disableFontFace)return null;const B=(0,h.bytesToString)(this.data),P=`url(data:${this.mimetype};base64,${btoa(B)});`;let g;if(!this.cssFontInfo)g=`@font-face {font-family:"${this.loadedName}";src:${P}}`;else{let O=`font-weight: ${this.cssFontInfo.fontWeight};`;this.cssFontInfo.italicAngle&&(O+=`font-style: oblique ${this.cssFontInfo.italicAngle}deg;`),g=`@font-face {font-family:"${this.cssFontInfo.fontFamily}";${O}src:${P}}`}return(L=this._inspectFont)==null||L.call(this,this,P),g}getPathGenerator(B,P){if(this.compiledGlyphs[P]!==void 0)return this.compiledGlyphs[P];let g;try{g=B.get(this.loadedName+"_path_"+P)}catch(L){if(!this.ignoreErrors)throw L;return(0,h.warn)(`getPathGenerator - ignoring character: "${L}".`),this.compiledGlyphs[P]=function(O,x){}}if(this.isEvalSupported&&h.FeatureTest.isEvalSupported){const L=[];for(const O of g){const x=O.args!==void 0?O.args.join(","):"";L.push("c.",O.cmd,"(",x,`);
`)}return this.compiledGlyphs[P]=new Function("c","size",L.join(""))}return this.compiledGlyphs[P]=function(L,O){for(const x of g)x.cmd==="scale"&&(x.args=[O,-O]),L[x.cmd].apply(L,x.args)}}}d.FontFaceObject=ot},(_t,d,st)=>{Object.defineProperty(d,"__esModule",{value:!0}),d.NodeStandardFontDataFactory=d.NodeFilterFactory=d.NodeCanvasFactory=d.NodeCMapReaderFactory=void 0;var h=st(7);st(1);const F=function(P){return new Promise((g,L)=>{require$$0.readFile(P,(x,v)=>{if(x||!v){L(new Error(x));return}g(new Uint8Array(v))})})};class ot extends h.BaseFilterFactory{}d.NodeFilterFactory=ot;class G extends h.BaseCanvasFactory{_createCanvas(g,L){return require$$0.createCanvas(g,L)}}d.NodeCanvasFactory=G;class ut extends h.BaseCMapReaderFactory{_fetchData(g,L){return F(g).then(O=>({cMapData:O,compressionType:L}))}}d.NodeCMapReaderFactory=ut;class B extends h.BaseStandardFontDataFactory{_fetchData(g){return F(g)}}d.NodeStandardFontDataFactory=B},(_t,d,st)=>{var H,Qe,pt,Ze;Object.defineProperty(d,"__esModule",{value:!0}),d.CanvasGraphics=void 0;var h=st(1),F=st(6),ot=st(12),G=st(13);const ut=16,B=100,P=4096,g=15,L=10,O=1e3,x=16;function v(S,i){if(S._removeMirroring)throw new Error("Context is already forwarding operations.");S.__originalSave=S.save,S.__originalRestore=S.restore,S.__originalRotate=S.rotate,S.__originalScale=S.scale,S.__originalTranslate=S.translate,S.__originalTransform=S.transform,S.__originalSetTransform=S.setTransform,S.__originalResetTransform=S.resetTransform,S.__originalClip=S.clip,S.__originalMoveTo=S.moveTo,S.__originalLineTo=S.lineTo,S.__originalBezierCurveTo=S.bezierCurveTo,S.__originalRect=S.rect,S.__originalClosePath=S.closePath,S.__originalBeginPath=S.beginPath,S._removeMirroring=()=>{S.save=S.__originalSave,S.restore=S.__originalRestore,S.rotate=S.__originalRotate,S.scale=S.__originalScale,S.translate=S.__originalTranslate,S.transform=S.__originalTransform,S.setTransform=S.__originalSetTransform,S.resetTransform=S.__originalResetTransform,S.clip=S.__originalClip,S.moveTo=S.__originalMoveTo,S.lineTo=S.__originalLineTo,S.bezierCurveTo=S.__originalBezierCurveTo,S.rect=S.__originalRect,S.closePath=S.__originalClosePath,S.beginPath=S.__originalBeginPath,delete S._removeMirroring},S.save=function(){i.save(),this.__originalSave()},S.restore=function(){i.restore(),this.__originalRestore()},S.translate=function(s,o){i.translate(s,o),this.__originalTranslate(s,o)},S.scale=function(s,o){i.scale(s,o),this.__originalScale(s,o)},S.transform=function(s,o,c,_,M,N){i.transform(s,o,c,_,M,N),this.__originalTransform(s,o,c,_,M,N)},S.setTransform=function(s,o,c,_,M,N){i.setTransform(s,o,c,_,M,N),this.__originalSetTransform(s,o,c,_,M,N)},S.resetTransform=function(){i.resetTransform(),this.__originalResetTransform()},S.rotate=function(s){i.rotate(s),this.__originalRotate(s)},S.clip=function(s){i.clip(s),this.__originalClip(s)},S.moveTo=function(n,s){i.moveTo(n,s),this.__originalMoveTo(n,s)},S.lineTo=function(n,s){i.lineTo(n,s),this.__originalLineTo(n,s)},S.bezierCurveTo=function(n,s,o,c,_,M){i.bezierCurveTo(n,s,o,c,_,M),this.__originalBezierCurveTo(n,s,o,c,_,M)},S.rect=function(n,s,o,c){i.rect(n,s,o,c),this.__originalRect(n,s,o,c)},S.closePath=function(){i.closePath(),this.__originalClosePath()},S.beginPath=function(){i.beginPath(),this.__originalBeginPath()}}class y{constructor(i){this.canvasFactory=i,this.cache=Object.create(null)}getCanvas(i,n,s){let o;return this.cache[i]!==void 0?(o=this.cache[i],this.canvasFactory.reset(o,n,s)):(o=this.canvasFactory.create(n,s),this.cache[i]=o),o}delete(i){delete this.cache[i]}clear(){for(const i in this.cache){const n=this.cache[i];this.canvasFactory.destroy(n),delete this.cache[i]}}}function u(S,i,n,s,o,c,_,M,N,tt){const[Q,nt,ct,At,dt,Ft]=(0,F.getCurrentTransform)(S);if(nt===0&&ct===0){const Dt=_*Q+dt,ft=Math.round(Dt),K=M*At+Ft,J=Math.round(K),ht=(_+N)*Q+dt,Et=Math.abs(Math.round(ht)-ft)||1,Tt=(M+tt)*At+Ft,Ht=Math.abs(Math.round(Tt)-J)||1;return S.setTransform(Math.sign(Q),0,0,Math.sign(At),ft,J),S.drawImage(i,n,s,o,c,0,0,Et,Ht),S.setTransform(Q,nt,ct,At,dt,Ft),[Et,Ht]}if(Q===0&&At===0){const Dt=M*ct+dt,ft=Math.round(Dt),K=_*nt+Ft,J=Math.round(K),ht=(M+tt)*ct+dt,Et=Math.abs(Math.round(ht)-ft)||1,Tt=(_+N)*nt+Ft,Ht=Math.abs(Math.round(Tt)-J)||1;return S.setTransform(0,Math.sign(nt),Math.sign(ct),0,ft,J),S.drawImage(i,n,s,o,c,0,0,Ht,Et),S.setTransform(Q,nt,ct,At,dt,Ft),[Ht,Et]}S.drawImage(i,n,s,o,c,_,M,N,tt);const Bt=Math.hypot(Q,nt),St=Math.hypot(ct,At);return[Bt*N,St*tt]}function b(S){const{width:i,height:n}=S;if(i>O||n>O)return null;const s=1e3,o=new Uint8Array([0,2,4,0,1,0,5,4,8,10,0,8,0,2,1,0]),c=i+1;let _=new Uint8Array(c*(n+1)),M,N,tt;const Q=i+7&-8;let nt=new Uint8Array(Q*n),ct=0;for(const St of S.data){let Dt=128;for(;Dt>0;)nt[ct++]=St&Dt?0:255,Dt>>=1}let At=0;for(ct=0,nt[ct]!==0&&(_[0]=1,++At),N=1;N<i;N++)nt[ct]!==nt[ct+1]&&(_[N]=nt[ct]?2:1,++At),ct++;for(nt[ct]!==0&&(_[N]=2,++At),M=1;M<n;M++){ct=M*Q,tt=M*c,nt[ct-Q]!==nt[ct]&&(_[tt]=nt[ct]?1:8,++At);let St=(nt[ct]?4:0)+(nt[ct-Q]?8:0);for(N=1;N<i;N++)St=(St>>2)+(nt[ct+1]?4:0)+(nt[ct-Q+1]?8:0),o[St]&&(_[tt+N]=o[St],++At),ct++;if(nt[ct-Q]!==nt[ct]&&(_[tt+N]=nt[ct]?2:4,++At),At>s)return null}for(ct=Q*(n-1),tt=M*c,nt[ct]!==0&&(_[tt]=8,++At),N=1;N<i;N++)nt[ct]!==nt[ct+1]&&(_[tt+N]=nt[ct]?4:8,++At),ct++;if(nt[ct]!==0&&(_[tt+N]=4,++At),At>s)return null;const dt=new Int32Array([0,c,-1,0,-c,0,0,0,1]),Ft=new Path2D;for(M=0;At&&M<=n;M++){let St=M*c;const Dt=St+i;for(;St<Dt&&!_[St];)St++;if(St===Dt)continue;Ft.moveTo(St%c,M);const ft=St;let K=_[St];do{const J=dt[K];do St+=J;while(!_[St]);const ht=_[St];ht!==5&&ht!==10?(K=ht,_[St]=0):(K=ht&51*K>>4,_[St]&=K>>2|K<<2),Ft.lineTo(St%c,St/c|0),_[St]||--At}while(ft!==St);--M}return nt=null,_=null,function(St){St.save(),St.scale(1/i,-1/n),St.translate(0,-n),St.fill(Ft),St.beginPath(),St.restore()}}class w{constructor(i,n){this.alphaIsShape=!1,this.fontSize=0,this.fontSizeScale=1,this.textMatrix=h.IDENTITY_MATRIX,this.textMatrixScale=1,this.fontMatrix=h.FONT_IDENTITY_MATRIX,this.leading=0,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRenderingMode=h.TextRenderingMode.FILL,this.textRise=0,this.fillColor="#000000",this.strokeColor="#000000",this.patternFill=!1,this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.activeSMask=null,this.transferMaps="none",this.startNewPathAndClipBox([0,0,i,n])}clone(){const i=Object.create(this);return i.clipBox=this.clipBox.slice(),i}setCurrentPoint(i,n){this.x=i,this.y=n}updatePathMinMax(i,n,s){[n,s]=h.Util.applyTransform([n,s],i),this.minX=Math.min(this.minX,n),this.minY=Math.min(this.minY,s),this.maxX=Math.max(this.maxX,n),this.maxY=Math.max(this.maxY,s)}updateRectMinMax(i,n){const s=h.Util.applyTransform(n,i),o=h.Util.applyTransform(n.slice(2),i);this.minX=Math.min(this.minX,s[0],o[0]),this.minY=Math.min(this.minY,s[1],o[1]),this.maxX=Math.max(this.maxX,s[0],o[0]),this.maxY=Math.max(this.maxY,s[1],o[1])}updateScalingPathMinMax(i,n){h.Util.scaleMinMax(i,n),this.minX=Math.min(this.minX,n[0]),this.maxX=Math.max(this.maxX,n[1]),this.minY=Math.min(this.minY,n[2]),this.maxY=Math.max(this.maxY,n[3])}updateCurvePathMinMax(i,n,s,o,c,_,M,N,tt,Q){const nt=h.Util.bezierBoundingBox(n,s,o,c,_,M,N,tt);if(Q){Q[0]=Math.min(Q[0],nt[0],nt[2]),Q[1]=Math.max(Q[1],nt[0],nt[2]),Q[2]=Math.min(Q[2],nt[1],nt[3]),Q[3]=Math.max(Q[3],nt[1],nt[3]);return}this.updateRectMinMax(i,nt)}getPathBoundingBox(i=ot.PathType.FILL,n=null){const s=[this.minX,this.minY,this.maxX,this.maxY];if(i===ot.PathType.STROKE){n||(0,h.unreachable)("Stroke bounding box must include transform.");const o=h.Util.singularValueDecompose2dScale(n),c=o[0]*this.lineWidth/2,_=o[1]*this.lineWidth/2;s[0]-=c,s[1]-=_,s[2]+=c,s[3]+=_}return s}updateClipFromPath(){const i=h.Util.intersect(this.clipBox,this.getPathBoundingBox());this.startNewPathAndClipBox(i||[0,0,0,0])}isEmptyClip(){return this.minX===1/0}startNewPathAndClipBox(i){this.clipBox=i,this.minX=1/0,this.minY=1/0,this.maxX=0,this.maxY=0}getClippedPathBoundingBox(i=ot.PathType.FILL,n=null){return h.Util.intersect(this.clipBox,this.getPathBoundingBox(i,n))}}function C(S,i){if(typeof ImageData!="undefined"&&i instanceof ImageData){S.putImageData(i,0,0);return}const n=i.height,s=i.width,o=n%x,c=(n-o)/x,_=o===0?c:c+1,M=S.createImageData(s,x);let N=0,tt;const Q=i.data,nt=M.data;let ct,At,dt,Ft;if(i.kind===h.ImageKind.GRAYSCALE_1BPP){const Bt=Q.byteLength,St=new Uint32Array(nt.buffer,0,nt.byteLength>>2),Dt=St.length,ft=s+7>>3,K=4294967295,J=h.FeatureTest.isLittleEndian?4278190080:255;for(ct=0;ct<_;ct++){for(dt=ct<c?x:o,tt=0,At=0;At<dt;At++){const ht=Bt-N;let Et=0;const Tt=ht>ft?s:ht*8-7,Ht=Tt&-8;let Wt=0,jt=0;for(;Et<Ht;Et+=8)jt=Q[N++],St[tt++]=jt&128?K:J,St[tt++]=jt&64?K:J,St[tt++]=jt&32?K:J,St[tt++]=jt&16?K:J,St[tt++]=jt&8?K:J,St[tt++]=jt&4?K:J,St[tt++]=jt&2?K:J,St[tt++]=jt&1?K:J;for(;Et<Tt;Et++)Wt===0&&(jt=Q[N++],Wt=128),St[tt++]=jt&Wt?K:J,Wt>>=1}for(;tt<Dt;)St[tt++]=0;S.putImageData(M,0,ct*x)}}else if(i.kind===h.ImageKind.RGBA_32BPP){for(At=0,Ft=s*x*4,ct=0;ct<c;ct++)nt.set(Q.subarray(N,N+Ft)),N+=Ft,S.putImageData(M,0,At),At+=x;ct<_&&(Ft=s*o*4,nt.set(Q.subarray(N,N+Ft)),S.putImageData(M,0,At))}else if(i.kind===h.ImageKind.RGB_24BPP)for(dt=x,Ft=s*dt,ct=0;ct<_;ct++){for(ct>=c&&(dt=o,Ft=s*dt),tt=0,At=Ft;At--;)nt[tt++]=Q[N++],nt[tt++]=Q[N++],nt[tt++]=Q[N++],nt[tt++]=255;S.putImageData(M,0,ct*x)}else throw new Error(`bad image kind: ${i.kind}`)}function A(S,i){if(i.bitmap){S.drawImage(i.bitmap,0,0);return}const n=i.height,s=i.width,o=n%x,c=(n-o)/x,_=o===0?c:c+1,M=S.createImageData(s,x);let N=0;const tt=i.data,Q=M.data;for(let nt=0;nt<_;nt++){const ct=nt<c?x:o;({srcPos:N}=(0,G.convertBlackAndWhiteToRGBA)({src:tt,srcPos:N,dest:Q,width:s,height:ct,nonBlackColor:0})),S.putImageData(M,0,nt*x)}}function a(S,i){const n=["strokeStyle","fillStyle","fillRule","globalAlpha","lineWidth","lineCap","lineJoin","miterLimit","globalCompositeOperation","font","filter"];for(const s of n)S[s]!==void 0&&(i[s]=S[s]);S.setLineDash!==void 0&&(i.setLineDash(S.getLineDash()),i.lineDashOffset=S.lineDashOffset)}function l(S){if(S.strokeStyle=S.fillStyle="#000000",S.fillRule="nonzero",S.globalAlpha=1,S.lineWidth=1,S.lineCap="butt",S.lineJoin="miter",S.miterLimit=10,S.globalCompositeOperation="source-over",S.font="10px sans-serif",S.setLineDash!==void 0&&(S.setLineDash([]),S.lineDashOffset=0),!h.isNodeJS){const{filter:i}=S;i!=="none"&&i!==""&&(S.filter="none")}}function k(S,i,n,s){const o=S.length;for(let c=3;c<o;c+=4){const _=S[c];if(_===0)S[c-3]=i,S[c-2]=n,S[c-1]=s;else if(_<255){const M=255-_;S[c-3]=S[c-3]*_+i*M>>8,S[c-2]=S[c-2]*_+n*M>>8,S[c-1]=S[c-1]*_+s*M>>8}}}function p(S,i,n){const s=S.length,o=1/255;for(let c=3;c<s;c+=4){const _=n?n[S[c]]:S[c];i[c]=i[c]*_*o|0}}function r(S,i,n){const s=S.length;for(let o=3;o<s;o+=4){const c=S[o-3]*77+S[o-2]*152+S[o-1]*28;i[o]=n?i[o]*n[c>>8]>>8:i[o]*c>>16}}function T(S,i,n,s,o,c,_,M,N,tt,Q){const nt=!!c,ct=nt?c[0]:0,At=nt?c[1]:0,dt=nt?c[2]:0,Ft=o==="Luminosity"?r:p,St=Math.min(s,Math.ceil(1048576/n));for(let Dt=0;Dt<s;Dt+=St){const ft=Math.min(St,s-Dt),K=S.getImageData(M-tt,Dt+(N-Q),n,ft),J=i.getImageData(M,Dt+N,n,ft);nt&&k(K.data,ct,At,dt),Ft(K.data,J.data,_),i.putImageData(J,M,Dt+N)}}function m(S,i,n,s){const o=s[0],c=s[1],_=s[2]-o,M=s[3]-c;_===0||M===0||(T(i.context,n,_,M,i.subtype,i.backdrop,i.transferMap,o,c,i.offsetX,i.offsetY),S.save(),S.globalAlpha=1,S.globalCompositeOperation="source-over",S.setTransform(1,0,0,1,0,0),S.drawImage(n.canvas,0,0),S.restore())}function U(S,i){const n=h.Util.singularValueDecompose2dScale(S);n[0]=Math.fround(n[0]),n[1]=Math.fround(n[1]);const s=Math.fround((globalThis.devicePixelRatio||1)*F.PixelsPerInch.PDF_TO_CSS_UNITS);return i!==void 0?i:n[0]<=s||n[1]<=s}const X=["butt","round","square"],E=["miter","round","bevel"],$={},it={},kt=class{constructor(i,n,s,o,c,{optionalContentConfig:_,markedContentStack:M=null},N,tt){I(this,H);I(this,pt);this.ctx=i,this.current=new w(this.ctx.canvas.width,this.ctx.canvas.height),this.stateStack=[],this.pendingClip=null,this.pendingEOFill=!1,this.res=null,this.xobjs=null,this.commonObjs=n,this.objs=s,this.canvasFactory=o,this.filterFactory=c,this.groupStack=[],this.processingType3=null,this.baseTransform=null,this.baseTransformStack=[],this.groupLevel=0,this.smaskStack=[],this.smaskCounter=0,this.tempSMask=null,this.suspendedCtx=null,this.contentVisible=!0,this.markedContentStack=M||[],this.optionalContentConfig=_,this.cachedCanvases=new y(this.canvasFactory),this.cachedPatterns=new Map,this.annotationCanvasMap=N,this.viewportScale=1,this.outputScaleX=1,this.outputScaleY=1,this.pageColors=tt,this._cachedScaleForStroking=[-1,0],this._cachedGetSinglePixelWidth=null,this._cachedBitmapsMap=new Map}getObject(i,n=null){return typeof i=="string"?i.startsWith("g_")?this.commonObjs.get(i):this.objs.get(i):n}beginDrawing({transform:i,viewport:n,transparency:s=!1,background:o=null}){const c=this.ctx.canvas.width,_=this.ctx.canvas.height,M=this.ctx.fillStyle;if(this.ctx.fillStyle=o||"#ffffff",this.ctx.fillRect(0,0,c,_),this.ctx.fillStyle=M,s){const N=this.cachedCanvases.getCanvas("transparent",c,_);this.compositeCtx=this.ctx,this.transparentCanvas=N.canvas,this.ctx=N.context,this.ctx.save(),this.ctx.transform(...(0,F.getCurrentTransform)(this.compositeCtx))}this.ctx.save(),l(this.ctx),i&&(this.ctx.transform(...i),this.outputScaleX=i[0],this.outputScaleY=i[0]),this.ctx.transform(...n.transform),this.viewportScale=n.scale,this.baseTransform=(0,F.getCurrentTransform)(this.ctx)}executeOperatorList(i,n,s,o){const c=i.argsArray,_=i.fnArray;let M=n||0;const N=c.length;if(N===M)return M;const tt=N-M>L&&typeof s=="function",Q=tt?Date.now()+g:0;let nt=0;const ct=this.commonObjs,At=this.objs;let dt;for(;;){if(o!==void 0&&M===o.nextBreakPoint)return o.breakIt(M,s),M;if(dt=_[M],dt!==h.OPS.dependency)this[dt].apply(this,c[M]);else for(const Ft of c[M]){const Bt=Ft.startsWith("g_")?ct:At;if(!Bt.has(Ft))return Bt.get(Ft,s),M}if(M++,M===N)return M;if(tt&&++nt>L){if(Date.now()>Q)return s(),M;nt=0}}}endDrawing(){W(this,H,Qe).call(this),this.cachedCanvases.clear(),this.cachedPatterns.clear();for(const i of this._cachedBitmapsMap.values()){for(const n of i.values())typeof HTMLCanvasElement!="undefined"&&n instanceof HTMLCanvasElement&&(n.width=n.height=0);i.clear()}this._cachedBitmapsMap.clear(),W(this,pt,Ze).call(this)}_scaleImage(i,n){const s=i.width,o=i.height;let c=Math.max(Math.hypot(n[0],n[1]),1),_=Math.max(Math.hypot(n[2],n[3]),1),M=s,N=o,tt="prescale1",Q,nt;for(;c>2&&M>1||_>2&&N>1;){let ct=M,At=N;c>2&&M>1&&(ct=M>=16384?Math.floor(M/2)-1||1:Math.ceil(M/2),c/=M/ct),_>2&&N>1&&(At=N>=16384?Math.floor(N/2)-1||1:Math.ceil(N)/2,_/=N/At),Q=this.cachedCanvases.getCanvas(tt,ct,At),nt=Q.context,nt.clearRect(0,0,ct,At),nt.drawImage(i,0,0,M,N,0,0,ct,At),i=Q.canvas,M=ct,N=At,tt=tt==="prescale1"?"prescale2":"prescale1"}return{img:i,paintWidth:M,paintHeight:N}}_createMaskCanvas(i){const n=this.ctx,{width:s,height:o}=i,c=this.current.fillColor,_=this.current.patternFill,M=(0,F.getCurrentTransform)(n);let N,tt,Q,nt;if((i.bitmap||i.data)&&i.count>1){const Et=i.bitmap||i.data.buffer;tt=JSON.stringify(_?M:[M.slice(0,4),c]),N=this._cachedBitmapsMap.get(Et),N||(N=new Map,this._cachedBitmapsMap.set(Et,N));const Tt=N.get(tt);if(Tt&&!_){const Ht=Math.round(Math.min(M[0],M[2])+M[4]),Wt=Math.round(Math.min(M[1],M[3])+M[5]);return{canvas:Tt,offsetX:Ht,offsetY:Wt}}Q=Tt}Q||(nt=this.cachedCanvases.getCanvas("maskCanvas",s,o),A(nt.context,i));let ct=h.Util.transform(M,[1/s,0,0,-1/o,0,0]);ct=h.Util.transform(ct,[1,0,0,1,0,-o]);const At=h.Util.applyTransform([0,0],ct),dt=h.Util.applyTransform([s,o],ct),Ft=h.Util.normalizeRect([At[0],At[1],dt[0],dt[1]]),Bt=Math.round(Ft[2]-Ft[0])||1,St=Math.round(Ft[3]-Ft[1])||1,Dt=this.cachedCanvases.getCanvas("fillCanvas",Bt,St),ft=Dt.context,K=Math.min(At[0],dt[0]),J=Math.min(At[1],dt[1]);ft.translate(-K,-J),ft.transform(...ct),Q||(Q=this._scaleImage(nt.canvas,(0,F.getCurrentTransformInverse)(ft)),Q=Q.img,N&&_&&N.set(tt,Q)),ft.imageSmoothingEnabled=U((0,F.getCurrentTransform)(ft),i.interpolate),u(ft,Q,0,0,Q.width,Q.height,0,0,s,o),ft.globalCompositeOperation="source-in";const ht=h.Util.transform((0,F.getCurrentTransformInverse)(ft),[1,0,0,1,-K,-J]);return ft.fillStyle=_?c.getPattern(n,this,ht,ot.PathType.FILL):c,ft.fillRect(0,0,s,o),N&&!_&&(this.cachedCanvases.delete("fillCanvas"),N.set(tt,Dt.canvas)),{canvas:Dt.canvas,offsetX:Math.round(K),offsetY:Math.round(J)}}setLineWidth(i){i!==this.current.lineWidth&&(this._cachedScaleForStroking[0]=-1),this.current.lineWidth=i,this.ctx.lineWidth=i}setLineCap(i){this.ctx.lineCap=X[i]}setLineJoin(i){this.ctx.lineJoin=E[i]}setMiterLimit(i){this.ctx.miterLimit=i}setDash(i,n){const s=this.ctx;s.setLineDash!==void 0&&(s.setLineDash(i),s.lineDashOffset=n)}setRenderingIntent(i){}setFlatness(i){}setGState(i){for(const[n,s]of i)switch(n){case"LW":this.setLineWidth(s);break;case"LC":this.setLineCap(s);break;case"LJ":this.setLineJoin(s);break;case"ML":this.setMiterLimit(s);break;case"D":this.setDash(s[0],s[1]);break;case"RI":this.setRenderingIntent(s);break;case"FL":this.setFlatness(s);break;case"Font":this.setFont(s[0],s[1]);break;case"CA":this.current.strokeAlpha=s;break;case"ca":this.current.fillAlpha=s,this.ctx.globalAlpha=s;break;case"BM":this.ctx.globalCompositeOperation=s;break;case"SMask":this.current.activeSMask=s?this.tempSMask:null,this.tempSMask=null,this.checkSMaskState();break;case"TR":this.ctx.filter=this.current.transferMaps=this.filterFactory.addFilter(s);break}}get inSMaskMode(){return!!this.suspendedCtx}checkSMaskState(){const i=this.inSMaskMode;this.current.activeSMask&&!i?this.beginSMaskMode():!this.current.activeSMask&&i&&this.endSMaskMode()}beginSMaskMode(){if(this.inSMaskMode)throw new Error("beginSMaskMode called while already in smask mode");const i=this.ctx.canvas.width,n=this.ctx.canvas.height,s="smaskGroupAt"+this.groupLevel,o=this.cachedCanvases.getCanvas(s,i,n);this.suspendedCtx=this.ctx,this.ctx=o.context;const c=this.ctx;c.setTransform(...(0,F.getCurrentTransform)(this.suspendedCtx)),a(this.suspendedCtx,c),v(c,this.suspendedCtx),this.setGState([["BM","source-over"],["ca",1],["CA",1]])}endSMaskMode(){if(!this.inSMaskMode)throw new Error("endSMaskMode called while not in smask mode");this.ctx._removeMirroring(),a(this.ctx,this.suspendedCtx),this.ctx=this.suspendedCtx,this.suspendedCtx=null}compose(i){if(!this.current.activeSMask)return;i?(i[0]=Math.floor(i[0]),i[1]=Math.floor(i[1]),i[2]=Math.ceil(i[2]),i[3]=Math.ceil(i[3])):i=[0,0,this.ctx.canvas.width,this.ctx.canvas.height];const n=this.current.activeSMask,s=this.suspendedCtx;m(s,n,this.ctx,i),this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height),this.ctx.restore()}save(){this.inSMaskMode?(a(this.ctx,this.suspendedCtx),this.suspendedCtx.save()):this.ctx.save();const i=this.current;this.stateStack.push(i),this.current=i.clone()}restore(){this.stateStack.length===0&&this.inSMaskMode&&this.endSMaskMode(),this.stateStack.length!==0&&(this.current=this.stateStack.pop(),this.inSMaskMode?(this.suspendedCtx.restore(),a(this.suspendedCtx,this.ctx)):this.ctx.restore(),this.checkSMaskState(),this.pendingClip=null,this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null)}transform(i,n,s,o,c,_){this.ctx.transform(i,n,s,o,c,_),this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null}constructPath(i,n,s){const o=this.ctx,c=this.current;let _=c.x,M=c.y,N,tt;const Q=(0,F.getCurrentTransform)(o),nt=Q[0]===0&&Q[3]===0||Q[1]===0&&Q[2]===0,ct=nt?s.slice(0):null;for(let At=0,dt=0,Ft=i.length;At<Ft;At++)switch(i[At]|0){case h.OPS.rectangle:_=n[dt++],M=n[dt++];const Bt=n[dt++],St=n[dt++],Dt=_+Bt,ft=M+St;o.moveTo(_,M),Bt===0||St===0?o.lineTo(Dt,ft):(o.lineTo(Dt,M),o.lineTo(Dt,ft),o.lineTo(_,ft)),nt||c.updateRectMinMax(Q,[_,M,Dt,ft]),o.closePath();break;case h.OPS.moveTo:_=n[dt++],M=n[dt++],o.moveTo(_,M),nt||c.updatePathMinMax(Q,_,M);break;case h.OPS.lineTo:_=n[dt++],M=n[dt++],o.lineTo(_,M),nt||c.updatePathMinMax(Q,_,M);break;case h.OPS.curveTo:N=_,tt=M,_=n[dt+4],M=n[dt+5],o.bezierCurveTo(n[dt],n[dt+1],n[dt+2],n[dt+3],_,M),c.updateCurvePathMinMax(Q,N,tt,n[dt],n[dt+1],n[dt+2],n[dt+3],_,M,ct),dt+=6;break;case h.OPS.curveTo2:N=_,tt=M,o.bezierCurveTo(_,M,n[dt],n[dt+1],n[dt+2],n[dt+3]),c.updateCurvePathMinMax(Q,N,tt,_,M,n[dt],n[dt+1],n[dt+2],n[dt+3],ct),_=n[dt+2],M=n[dt+3],dt+=4;break;case h.OPS.curveTo3:N=_,tt=M,_=n[dt+2],M=n[dt+3],o.bezierCurveTo(n[dt],n[dt+1],_,M,_,M),c.updateCurvePathMinMax(Q,N,tt,n[dt],n[dt+1],_,M,_,M,ct),dt+=4;break;case h.OPS.closePath:o.closePath();break}nt&&c.updateScalingPathMinMax(Q,ct),c.setCurrentPoint(_,M)}closePath(){this.ctx.closePath()}stroke(i=!0){const n=this.ctx,s=this.current.strokeColor;n.globalAlpha=this.current.strokeAlpha,this.contentVisible&&(typeof s=="object"&&(s==null?void 0:s.getPattern)?(n.save(),n.strokeStyle=s.getPattern(n,this,(0,F.getCurrentTransformInverse)(n),ot.PathType.STROKE),this.rescaleAndStroke(!1),n.restore()):this.rescaleAndStroke(!0)),i&&this.consumePath(this.current.getClippedPathBoundingBox()),n.globalAlpha=this.current.fillAlpha}closeStroke(){this.closePath(),this.stroke()}fill(i=!0){const n=this.ctx,s=this.current.fillColor,o=this.current.patternFill;let c=!1;o&&(n.save(),n.fillStyle=s.getPattern(n,this,(0,F.getCurrentTransformInverse)(n),ot.PathType.FILL),c=!0);const _=this.current.getClippedPathBoundingBox();this.contentVisible&&_!==null&&(this.pendingEOFill?(n.fill("evenodd"),this.pendingEOFill=!1):n.fill()),c&&n.restore(),i&&this.consumePath(_)}eoFill(){this.pendingEOFill=!0,this.fill()}fillStroke(){this.fill(!1),this.stroke(!1),this.consumePath()}eoFillStroke(){this.pendingEOFill=!0,this.fillStroke()}closeFillStroke(){this.closePath(),this.fillStroke()}closeEOFillStroke(){this.pendingEOFill=!0,this.closePath(),this.fillStroke()}endPath(){this.consumePath()}clip(){this.pendingClip=$}eoClip(){this.pendingClip=it}beginText(){this.current.textMatrix=h.IDENTITY_MATRIX,this.current.textMatrixScale=1,this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}endText(){const i=this.pendingTextPaths,n=this.ctx;if(i===void 0){n.beginPath();return}n.save(),n.beginPath();for(const s of i)n.setTransform(...s.transform),n.translate(s.x,s.y),s.addToPath(n,s.fontSize);n.restore(),n.clip(),n.beginPath(),delete this.pendingTextPaths}setCharSpacing(i){this.current.charSpacing=i}setWordSpacing(i){this.current.wordSpacing=i}setHScale(i){this.current.textHScale=i/100}setLeading(i){this.current.leading=-i}setFont(i,n){var Q;const s=this.commonObjs.get(i),o=this.current;if(!s)throw new Error(`Can't find font for ${i}`);if(o.fontMatrix=s.fontMatrix||h.FONT_IDENTITY_MATRIX,(o.fontMatrix[0]===0||o.fontMatrix[3]===0)&&(0,h.warn)("Invalid font matrix for font "+i),n<0?(n=-n,o.fontDirection=-1):o.fontDirection=1,this.current.font=s,this.current.fontSize=n,s.isType3Font)return;const c=s.loadedName||"sans-serif",_=((Q=s.systemFontInfo)==null?void 0:Q.css)||`"${c}", ${s.fallbackName}`;let M="normal";s.black?M="900":s.bold&&(M="bold");const N=s.italic?"italic":"normal";let tt=n;n<ut?tt=ut:n>B&&(tt=B),this.current.fontSizeScale=n/tt,this.ctx.font=`${N} ${M} ${tt}px ${_}`}setTextRenderingMode(i){this.current.textRenderingMode=i}setTextRise(i){this.current.textRise=i}moveText(i,n){this.current.x=this.current.lineX+=i,this.current.y=this.current.lineY+=n}setLeadingMoveText(i,n){this.setLeading(-n),this.moveText(i,n)}setTextMatrix(i,n,s,o,c,_){this.current.textMatrix=[i,n,s,o,c,_],this.current.textMatrixScale=Math.hypot(i,n),this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}nextLine(){this.moveText(0,this.current.leading)}paintChar(i,n,s,o){const c=this.ctx,_=this.current,M=_.font,N=_.textRenderingMode,tt=_.fontSize/_.fontSizeScale,Q=N&h.TextRenderingMode.FILL_STROKE_MASK,nt=!!(N&h.TextRenderingMode.ADD_TO_PATH_FLAG),ct=_.patternFill&&!M.missingFile;let At;(M.disableFontFace||nt||ct)&&(At=M.getPathGenerator(this.commonObjs,i)),M.disableFontFace||ct?(c.save(),c.translate(n,s),c.beginPath(),At(c,tt),o&&c.setTransform(...o),(Q===h.TextRenderingMode.FILL||Q===h.TextRenderingMode.FILL_STROKE)&&c.fill(),(Q===h.TextRenderingMode.STROKE||Q===h.TextRenderingMode.FILL_STROKE)&&c.stroke(),c.restore()):((Q===h.TextRenderingMode.FILL||Q===h.TextRenderingMode.FILL_STROKE)&&c.fillText(i,n,s),(Q===h.TextRenderingMode.STROKE||Q===h.TextRenderingMode.FILL_STROKE)&&c.strokeText(i,n,s)),nt&&(this.pendingTextPaths||(this.pendingTextPaths=[])).push({transform:(0,F.getCurrentTransform)(c),x:n,y:s,fontSize:tt,addToPath:At})}get isFontSubpixelAAEnabled(){const{context:i}=this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled",10,10);i.scale(1.5,1),i.fillText("I",0,10);const n=i.getImageData(0,0,10,10).data;let s=!1;for(let o=3;o<n.length;o+=4)if(n[o]>0&&n[o]<255){s=!0;break}return(0,h.shadow)(this,"isFontSubpixelAAEnabled",s)}showText(i){const n=this.current,s=n.font;if(s.isType3Font)return this.showType3Text(i);const o=n.fontSize;if(o===0)return;const c=this.ctx,_=n.fontSizeScale,M=n.charSpacing,N=n.wordSpacing,tt=n.fontDirection,Q=n.textHScale*tt,nt=i.length,ct=s.vertical,At=ct?1:-1,dt=s.defaultVMetrics,Ft=o*n.fontMatrix[0],Bt=n.textRenderingMode===h.TextRenderingMode.FILL&&!s.disableFontFace&&!n.patternFill;c.save(),c.transform(...n.textMatrix),c.translate(n.x,n.y+n.textRise),tt>0?c.scale(Q,-1):c.scale(Q,1);let St;if(n.patternFill){c.save();const ht=n.fillColor.getPattern(c,this,(0,F.getCurrentTransformInverse)(c),ot.PathType.FILL);St=(0,F.getCurrentTransform)(c),c.restore(),c.fillStyle=ht}let Dt=n.lineWidth;const ft=n.textMatrixScale;if(ft===0||Dt===0){const ht=n.textRenderingMode&h.TextRenderingMode.FILL_STROKE_MASK;(ht===h.TextRenderingMode.STROKE||ht===h.TextRenderingMode.FILL_STROKE)&&(Dt=this.getSinglePixelWidth())}else Dt/=ft;if(_!==1&&(c.scale(_,_),Dt/=_),c.lineWidth=Dt,s.isInvalidPDFjsFont){const ht=[];let Et=0;for(const Tt of i)ht.push(Tt.unicode),Et+=Tt.width;c.fillText(ht.join(""),0,0),n.x+=Et*Ft*Q,c.restore(),this.compose();return}let K=0,J;for(J=0;J<nt;++J){const ht=i[J];if(typeof ht=="number"){K+=At*ht*o/1e3;continue}let Et=!1;const Tt=(ht.isSpace?N:0)+M,Ht=ht.fontChar,Wt=ht.accent;let jt,qt,Xt=ht.width;if(ct){const $t=ht.vmetric||dt,rt=-(ht.vmetric?$t[1]:Xt*.5)*Ft,Y=$t[2]*Ft;Xt=$t?-$t[0]:Xt,jt=rt/_,qt=(K+Y)/_}else jt=K/_,qt=0;if(s.remeasure&&Xt>0){const $t=c.measureText(Ht).width*1e3/o*_;if(Xt<$t&&this.isFontSubpixelAAEnabled){const rt=Xt/$t;Et=!0,c.save(),c.scale(rt,1),jt/=rt}else Xt!==$t&&(jt+=(Xt-$t)/2e3*o/_)}if(this.contentVisible&&(ht.isInFont||s.missingFile)){if(Bt&&!Wt)c.fillText(Ht,jt,qt);else if(this.paintChar(Ht,jt,qt,St),Wt){const $t=jt+o*Wt.offset.x/_,rt=qt-o*Wt.offset.y/_;this.paintChar(Wt.fontChar,$t,rt,St)}}K+=ct?Xt*Ft-Tt*tt:Xt*Ft+Tt*tt,Et&&c.restore()}ct?n.y-=K:n.x+=K*Q,c.restore(),this.compose()}showType3Text(i){const n=this.ctx,s=this.current,o=s.font,c=s.fontSize,_=s.fontDirection,M=o.vertical?1:-1,N=s.charSpacing,tt=s.wordSpacing,Q=s.textHScale*_,nt=s.fontMatrix||h.FONT_IDENTITY_MATRIX,ct=i.length,At=s.textRenderingMode===h.TextRenderingMode.INVISIBLE;let dt,Ft,Bt,St;if(!(At||c===0)){for(this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null,n.save(),n.transform(...s.textMatrix),n.translate(s.x,s.y),n.scale(Q,_),dt=0;dt<ct;++dt){if(Ft=i[dt],typeof Ft=="number"){St=M*Ft*c/1e3,this.ctx.translate(St,0),s.x+=St*Q;continue}const Dt=(Ft.isSpace?tt:0)+N,ft=o.charProcOperatorList[Ft.operatorListId];if(!ft){(0,h.warn)(`Type3 character "${Ft.operatorListId}" is not available.`);continue}this.contentVisible&&(this.processingType3=Ft,this.save(),n.scale(c,c),n.transform(...nt),this.executeOperatorList(ft),this.restore()),Bt=h.Util.applyTransform([Ft.width,0],nt)[0]*c+Dt,n.translate(Bt,0),s.x+=Bt*Q}n.restore(),this.processingType3=null}}setCharWidth(i,n){}setCharWidthAndBounds(i,n,s,o,c,_){this.ctx.rect(s,o,c-s,_-o),this.ctx.clip(),this.endPath()}getColorN_Pattern(i){let n;if(i[0]==="TilingPattern"){const s=i[1],o=this.baseTransform||(0,F.getCurrentTransform)(this.ctx),c={createCanvasGraphics:_=>new kt(_,this.commonObjs,this.objs,this.canvasFactory,this.filterFactory,{optionalContentConfig:this.optionalContentConfig,markedContentStack:this.markedContentStack})};n=new ot.TilingPattern(i,s,this.ctx,c,o)}else n=this._getPattern(i[1],i[2]);return n}setStrokeColorN(){this.current.strokeColor=this.getColorN_Pattern(arguments)}setFillColorN(){this.current.fillColor=this.getColorN_Pattern(arguments),this.current.patternFill=!0}setStrokeRGBColor(i,n,s){const o=h.Util.makeHexColor(i,n,s);this.ctx.strokeStyle=o,this.current.strokeColor=o}setFillRGBColor(i,n,s){const o=h.Util.makeHexColor(i,n,s);this.ctx.fillStyle=o,this.current.fillColor=o,this.current.patternFill=!1}_getPattern(i,n=null){let s;return this.cachedPatterns.has(i)?s=this.cachedPatterns.get(i):(s=(0,ot.getShadingPattern)(this.getObject(i)),this.cachedPatterns.set(i,s)),n&&(s.matrix=n),s}shadingFill(i){if(!this.contentVisible)return;const n=this.ctx;this.save();const s=this._getPattern(i);n.fillStyle=s.getPattern(n,this,(0,F.getCurrentTransformInverse)(n),ot.PathType.SHADING);const o=(0,F.getCurrentTransformInverse)(n);if(o){const{width:c,height:_}=n.canvas,[M,N,tt,Q]=h.Util.getAxialAlignedBoundingBox([0,0,c,_],o);this.ctx.fillRect(M,N,tt-M,Q-N)}else this.ctx.fillRect(-1e10,-1e10,2e10,2e10);this.compose(this.current.getClippedPathBoundingBox()),this.restore()}beginInlineImage(){(0,h.unreachable)("Should not call beginInlineImage")}beginImageData(){(0,h.unreachable)("Should not call beginImageData")}paintFormXObjectBegin(i,n){if(!!this.contentVisible&&(this.save(),this.baseTransformStack.push(this.baseTransform),Array.isArray(i)&&i.length===6&&this.transform(...i),this.baseTransform=(0,F.getCurrentTransform)(this.ctx),n)){const s=n[2]-n[0],o=n[3]-n[1];this.ctx.rect(n[0],n[1],s,o),this.current.updateRectMinMax((0,F.getCurrentTransform)(this.ctx),n),this.clip(),this.endPath()}}paintFormXObjectEnd(){!this.contentVisible||(this.restore(),this.baseTransform=this.baseTransformStack.pop())}beginGroup(i){if(!this.contentVisible)return;this.save(),this.inSMaskMode&&(this.endSMaskMode(),this.current.activeSMask=null);const n=this.ctx;i.isolated||(0,h.info)("TODO: Support non-isolated groups."),i.knockout&&(0,h.warn)("Knockout groups not supported.");const s=(0,F.getCurrentTransform)(n);if(i.matrix&&n.transform(...i.matrix),!i.bbox)throw new Error("Bounding box is required.");let o=h.Util.getAxialAlignedBoundingBox(i.bbox,(0,F.getCurrentTransform)(n));const c=[0,0,n.canvas.width,n.canvas.height];o=h.Util.intersect(o,c)||[0,0,0,0];const _=Math.floor(o[0]),M=Math.floor(o[1]);let N=Math.max(Math.ceil(o[2])-_,1),tt=Math.max(Math.ceil(o[3])-M,1),Q=1,nt=1;N>P&&(Q=N/P,N=P),tt>P&&(nt=tt/P,tt=P),this.current.startNewPathAndClipBox([0,0,N,tt]);let ct="groupAt"+this.groupLevel;i.smask&&(ct+="_smask_"+this.smaskCounter++%2);const At=this.cachedCanvases.getCanvas(ct,N,tt),dt=At.context;dt.scale(1/Q,1/nt),dt.translate(-_,-M),dt.transform(...s),i.smask?this.smaskStack.push({canvas:At.canvas,context:dt,offsetX:_,offsetY:M,scaleX:Q,scaleY:nt,subtype:i.smask.subtype,backdrop:i.smask.backdrop,transferMap:i.smask.transferMap||null,startTransformInverse:null}):(n.setTransform(1,0,0,1,0,0),n.translate(_,M),n.scale(Q,nt),n.save()),a(n,dt),this.ctx=dt,this.setGState([["BM","source-over"],["ca",1],["CA",1]]),this.groupStack.push(n),this.groupLevel++}endGroup(i){if(!this.contentVisible)return;this.groupLevel--;const n=this.ctx,s=this.groupStack.pop();if(this.ctx=s,this.ctx.imageSmoothingEnabled=!1,i.smask)this.tempSMask=this.smaskStack.pop(),this.restore();else{this.ctx.restore();const o=(0,F.getCurrentTransform)(this.ctx);this.restore(),this.ctx.save(),this.ctx.setTransform(...o);const c=h.Util.getAxialAlignedBoundingBox([0,0,n.canvas.width,n.canvas.height],o);this.ctx.drawImage(n.canvas,0,0),this.ctx.restore(),this.compose(c)}}beginAnnotation(i,n,s,o,c){if(W(this,H,Qe).call(this),l(this.ctx),this.ctx.save(),this.save(),this.baseTransform&&this.ctx.setTransform(...this.baseTransform),Array.isArray(n)&&n.length===4){const _=n[2]-n[0],M=n[3]-n[1];if(c&&this.annotationCanvasMap){s=s.slice(),s[4]-=n[0],s[5]-=n[1],n=n.slice(),n[0]=n[1]=0,n[2]=_,n[3]=M;const[N,tt]=h.Util.singularValueDecompose2dScale((0,F.getCurrentTransform)(this.ctx)),{viewportScale:Q}=this,nt=Math.ceil(_*this.outputScaleX*Q),ct=Math.ceil(M*this.outputScaleY*Q);this.annotationCanvas=this.canvasFactory.create(nt,ct);const{canvas:At,context:dt}=this.annotationCanvas;this.annotationCanvasMap.set(i,At),this.annotationCanvas.savedCtx=this.ctx,this.ctx=dt,this.ctx.save(),this.ctx.setTransform(N,0,0,-tt,0,M*tt),l(this.ctx)}else l(this.ctx),this.ctx.rect(n[0],n[1],_,M),this.ctx.clip(),this.endPath()}this.current=new w(this.ctx.canvas.width,this.ctx.canvas.height),this.transform(...s),this.transform(...o)}endAnnotation(){this.annotationCanvas&&(this.ctx.restore(),W(this,pt,Ze).call(this),this.ctx=this.annotationCanvas.savedCtx,delete this.annotationCanvas.savedCtx,delete this.annotationCanvas)}paintImageMaskXObject(i){if(!this.contentVisible)return;const n=i.count;i=this.getObject(i.data,i),i.count=n;const s=this.ctx,o=this.processingType3;if(o&&(o.compiled===void 0&&(o.compiled=b(i)),o.compiled)){o.compiled(s);return}const c=this._createMaskCanvas(i),_=c.canvas;s.save(),s.setTransform(1,0,0,1,0,0),s.drawImage(_,c.offsetX,c.offsetY),s.restore(),this.compose()}paintImageMaskXObjectRepeat(i,n,s=0,o=0,c,_){if(!this.contentVisible)return;i=this.getObject(i.data,i);const M=this.ctx;M.save();const N=(0,F.getCurrentTransform)(M);M.transform(n,s,o,c,0,0);const tt=this._createMaskCanvas(i);M.setTransform(1,0,0,1,tt.offsetX-N[4],tt.offsetY-N[5]);for(let Q=0,nt=_.length;Q<nt;Q+=2){const ct=h.Util.transform(N,[n,s,o,c,_[Q],_[Q+1]]),[At,dt]=h.Util.applyTransform([0,0],ct);M.drawImage(tt.canvas,At,dt)}M.restore(),this.compose()}paintImageMaskXObjectGroup(i){if(!this.contentVisible)return;const n=this.ctx,s=this.current.fillColor,o=this.current.patternFill;for(const c of i){const{data:_,width:M,height:N,transform:tt}=c,Q=this.cachedCanvases.getCanvas("maskCanvas",M,N),nt=Q.context;nt.save();const ct=this.getObject(_,c);A(nt,ct),nt.globalCompositeOperation="source-in",nt.fillStyle=o?s.getPattern(nt,this,(0,F.getCurrentTransformInverse)(n),ot.PathType.FILL):s,nt.fillRect(0,0,M,N),nt.restore(),n.save(),n.transform(...tt),n.scale(1,-1),u(n,Q.canvas,0,0,M,N,0,-1,1,1),n.restore()}this.compose()}paintImageXObject(i){if(!this.contentVisible)return;const n=this.getObject(i);if(!n){(0,h.warn)("Dependent image isn't ready yet");return}this.paintInlineImageXObject(n)}paintImageXObjectRepeat(i,n,s,o){if(!this.contentVisible)return;const c=this.getObject(i);if(!c){(0,h.warn)("Dependent image isn't ready yet");return}const _=c.width,M=c.height,N=[];for(let tt=0,Q=o.length;tt<Q;tt+=2)N.push({transform:[n,0,0,s,o[tt],o[tt+1]],x:0,y:0,w:_,h:M});this.paintInlineImageXObjectGroup(c,N)}applyTransferMapsToCanvas(i){return this.current.transferMaps!=="none"&&(i.filter=this.current.transferMaps,i.drawImage(i.canvas,0,0),i.filter="none"),i.canvas}applyTransferMapsToBitmap(i){if(this.current.transferMaps==="none")return i.bitmap;const{bitmap:n,width:s,height:o}=i,c=this.cachedCanvases.getCanvas("inlineImage",s,o),_=c.context;return _.filter=this.current.transferMaps,_.drawImage(n,0,0),_.filter="none",c.canvas}paintInlineImageXObject(i){if(!this.contentVisible)return;const n=i.width,s=i.height,o=this.ctx;if(this.save(),!h.isNodeJS){const{filter:M}=o;M!=="none"&&M!==""&&(o.filter="none")}o.scale(1/n,-1/s);let c;if(i.bitmap)c=this.applyTransferMapsToBitmap(i);else if(typeof HTMLElement=="function"&&i instanceof HTMLElement||!i.data)c=i;else{const N=this.cachedCanvases.getCanvas("inlineImage",n,s).context;C(N,i),c=this.applyTransferMapsToCanvas(N)}const _=this._scaleImage(c,(0,F.getCurrentTransformInverse)(o));o.imageSmoothingEnabled=U((0,F.getCurrentTransform)(o),i.interpolate),u(o,_.img,0,0,_.paintWidth,_.paintHeight,0,-s,n,s),this.compose(),this.restore()}paintInlineImageXObjectGroup(i,n){if(!this.contentVisible)return;const s=this.ctx;let o;if(i.bitmap)o=i.bitmap;else{const c=i.width,_=i.height,N=this.cachedCanvases.getCanvas("inlineImage",c,_).context;C(N,i),o=this.applyTransferMapsToCanvas(N)}for(const c of n)s.save(),s.transform(...c.transform),s.scale(1,-1),u(s,o,c.x,c.y,c.w,c.h,0,-1,1,1),s.restore();this.compose()}paintSolidColorImageMask(){!this.contentVisible||(this.ctx.fillRect(0,0,1,1),this.compose())}markPoint(i){}markPointProps(i,n){}beginMarkedContent(i){this.markedContentStack.push({visible:!0})}beginMarkedContentProps(i,n){i==="OC"?this.markedContentStack.push({visible:this.optionalContentConfig.isVisible(n)}):this.markedContentStack.push({visible:!0}),this.contentVisible=this.isContentVisible()}endMarkedContent(){this.markedContentStack.pop(),this.contentVisible=this.isContentVisible()}beginCompat(){}endCompat(){}consumePath(i){const n=this.current.isEmptyClip();this.pendingClip&&this.current.updateClipFromPath(),this.pendingClip||this.compose(i);const s=this.ctx;this.pendingClip&&(n||(this.pendingClip===it?s.clip("evenodd"):s.clip()),this.pendingClip=null),this.current.startNewPathAndClipBox(this.current.clipBox),s.beginPath()}getSinglePixelWidth(){if(!this._cachedGetSinglePixelWidth){const i=(0,F.getCurrentTransform)(this.ctx);if(i[1]===0&&i[2]===0)this._cachedGetSinglePixelWidth=1/Math.min(Math.abs(i[0]),Math.abs(i[3]));else{const n=Math.abs(i[0]*i[3]-i[2]*i[1]),s=Math.hypot(i[0],i[2]),o=Math.hypot(i[1],i[3]);this._cachedGetSinglePixelWidth=Math.max(s,o)/n}}return this._cachedGetSinglePixelWidth}getScaleForStroking(){if(this._cachedScaleForStroking[0]===-1){const{lineWidth:i}=this.current,{a:n,b:s,c:o,d:c}=this.ctx.getTransform();let _,M;if(s===0&&o===0){const N=Math.abs(n),tt=Math.abs(c);if(N===tt)if(i===0)_=M=1/N;else{const Q=N*i;_=M=Q<1?1/Q:1}else if(i===0)_=1/N,M=1/tt;else{const Q=N*i,nt=tt*i;_=Q<1?1/Q:1,M=nt<1?1/nt:1}}else{const N=Math.abs(n*c-s*o),tt=Math.hypot(n,s),Q=Math.hypot(o,c);if(i===0)_=Q/N,M=tt/N;else{const nt=i*N;_=Q>nt?Q/nt:1,M=tt>nt?tt/nt:1}}this._cachedScaleForStroking[0]=_,this._cachedScaleForStroking[1]=M}return this._cachedScaleForStroking}rescaleAndStroke(i){const{ctx:n}=this,{lineWidth:s}=this.current,[o,c]=this.getScaleForStroking();if(n.lineWidth=s||1,o===1&&c===1){n.stroke();return}const _=n.getLineDash();if(i&&n.save(),n.scale(o,c),_.length>0){const M=Math.max(o,c);n.setLineDash(_.map(N=>N/M)),n.lineDashOffset/=M}n.stroke(),i&&n.restore()}isContentVisible(){for(let i=this.markedContentStack.length-1;i>=0;i--)if(!this.markedContentStack[i].visible)return!1;return!0}};let at=kt;H=new WeakSet,Qe=function(){for(;this.stateStack.length||this.inSMaskMode;)this.restore();this.ctx.restore(),this.transparentCanvas&&(this.ctx=this.compositeCtx,this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.drawImage(this.transparentCanvas,0,0),this.ctx.restore(),this.transparentCanvas=null)},pt=new WeakSet,Ze=function(){if(this.pageColors){const i=this.filterFactory.addHCMFilter(this.pageColors.foreground,this.pageColors.background);if(i!=="none"){const n=this.ctx.filter;this.ctx.filter=i,this.ctx.drawImage(this.ctx.canvas,0,0),this.ctx.filter=n}}},d.CanvasGraphics=at;for(const S in h.OPS)at.prototype[S]!==void 0&&(at.prototype[h.OPS[S]]=at.prototype[S])},(_t,d,st)=>{Object.defineProperty(d,"__esModule",{value:!0}),d.TilingPattern=d.PathType=void 0,d.getShadingPattern=x;var h=st(1),F=st(6);const ot={FILL:"Fill",STROKE:"Stroke",SHADING:"Shading"};d.PathType=ot;function G(b,w){if(!w)return;const C=w[2]-w[0],A=w[3]-w[1],a=new Path2D;a.rect(w[0],w[1],C,A),b.clip(a)}class ut{constructor(){this.constructor===ut&&(0,h.unreachable)("Cannot initialize BaseShadingPattern.")}getPattern(){(0,h.unreachable)("Abstract method `getPattern` called.")}}class B extends ut{constructor(w){super(),this._type=w[1],this._bbox=w[2],this._colorStops=w[3],this._p0=w[4],this._p1=w[5],this._r0=w[6],this._r1=w[7],this.matrix=null}_createGradient(w){let C;this._type==="axial"?C=w.createLinearGradient(this._p0[0],this._p0[1],this._p1[0],this._p1[1]):this._type==="radial"&&(C=w.createRadialGradient(this._p0[0],this._p0[1],this._r0,this._p1[0],this._p1[1],this._r1));for(const A of this._colorStops)C.addColorStop(A[0],A[1]);return C}getPattern(w,C,A,a){let l;if(a===ot.STROKE||a===ot.FILL){const k=C.current.getClippedPathBoundingBox(a,(0,F.getCurrentTransform)(w))||[0,0,0,0],p=Math.ceil(k[2]-k[0])||1,r=Math.ceil(k[3]-k[1])||1,T=C.cachedCanvases.getCanvas("pattern",p,r,!0),m=T.context;m.clearRect(0,0,m.canvas.width,m.canvas.height),m.beginPath(),m.rect(0,0,m.canvas.width,m.canvas.height),m.translate(-k[0],-k[1]),A=h.Util.transform(A,[1,0,0,1,k[0],k[1]]),m.transform(...C.baseTransform),this.matrix&&m.transform(...this.matrix),G(m,this._bbox),m.fillStyle=this._createGradient(m),m.fill(),l=w.createPattern(T.canvas,"no-repeat");const U=new DOMMatrix(A);l.setTransform(U)}else G(w,this._bbox),l=this._createGradient(w);return l}}function P(b,w,C,A,a,l,k,p){const r=w.coords,T=w.colors,m=b.data,U=b.width*4;let X;r[C+1]>r[A+1]&&(X=C,C=A,A=X,X=l,l=k,k=X),r[A+1]>r[a+1]&&(X=A,A=a,a=X,X=k,k=p,p=X),r[C+1]>r[A+1]&&(X=C,C=A,A=X,X=l,l=k,k=X);const E=(r[C]+w.offsetX)*w.scaleX,$=(r[C+1]+w.offsetY)*w.scaleY,it=(r[A]+w.offsetX)*w.scaleX,at=(r[A+1]+w.offsetY)*w.scaleY,H=(r[a]+w.offsetX)*w.scaleX,lt=(r[a+1]+w.offsetY)*w.scaleY;if($>=lt)return;const pt=T[l],Ct=T[l+1],kt=T[l+2],S=T[k],i=T[k+1],n=T[k+2],s=T[p],o=T[p+1],c=T[p+2],_=Math.round($),M=Math.round(lt);let N,tt,Q,nt,ct,At,dt,Ft;for(let Bt=_;Bt<=M;Bt++){if(Bt<at){const J=Bt<$?0:($-Bt)/($-at);N=E-(E-it)*J,tt=pt-(pt-S)*J,Q=Ct-(Ct-i)*J,nt=kt-(kt-n)*J}else{let J;Bt>lt?J=1:at===lt?J=0:J=(at-Bt)/(at-lt),N=it-(it-H)*J,tt=S-(S-s)*J,Q=i-(i-o)*J,nt=n-(n-c)*J}let St;Bt<$?St=0:Bt>lt?St=1:St=($-Bt)/($-lt),ct=E-(E-H)*St,At=pt-(pt-s)*St,dt=Ct-(Ct-o)*St,Ft=kt-(kt-c)*St;const Dt=Math.round(Math.min(N,ct)),ft=Math.round(Math.max(N,ct));let K=U*Bt+Dt*4;for(let J=Dt;J<=ft;J++)St=(N-J)/(N-ct),St<0?St=0:St>1&&(St=1),m[K++]=tt-(tt-At)*St|0,m[K++]=Q-(Q-dt)*St|0,m[K++]=nt-(nt-Ft)*St|0,m[K++]=255}}function g(b,w,C){const A=w.coords,a=w.colors;let l,k;switch(w.type){case"lattice":const p=w.verticesPerRow,r=Math.floor(A.length/p)-1,T=p-1;for(l=0;l<r;l++){let m=l*p;for(let U=0;U<T;U++,m++)P(b,C,A[m],A[m+1],A[m+p],a[m],a[m+1],a[m+p]),P(b,C,A[m+p+1],A[m+1],A[m+p],a[m+p+1],a[m+1],a[m+p])}break;case"triangles":for(l=0,k=A.length;l<k;l+=3)P(b,C,A[l],A[l+1],A[l+2],a[l],a[l+1],a[l+2]);break;default:throw new Error("illegal figure")}}class L extends ut{constructor(w){super(),this._coords=w[2],this._colors=w[3],this._figures=w[4],this._bounds=w[5],this._bbox=w[7],this._background=w[8],this.matrix=null}_createMeshCanvas(w,C,A){const p=Math.floor(this._bounds[0]),r=Math.floor(this._bounds[1]),T=Math.ceil(this._bounds[2])-p,m=Math.ceil(this._bounds[3])-r,U=Math.min(Math.ceil(Math.abs(T*w[0]*1.1)),3e3),X=Math.min(Math.ceil(Math.abs(m*w[1]*1.1)),3e3),E=T/U,$=m/X,it={coords:this._coords,colors:this._colors,offsetX:-p,offsetY:-r,scaleX:1/E,scaleY:1/$},at=U+2*2,H=X+2*2,lt=A.getCanvas("mesh",at,H,!1),pt=lt.context,Ct=pt.createImageData(U,X);if(C){const S=Ct.data;for(let i=0,n=S.length;i<n;i+=4)S[i]=C[0],S[i+1]=C[1],S[i+2]=C[2],S[i+3]=255}for(const S of this._figures)g(Ct,S,it);return pt.putImageData(Ct,2,2),{canvas:lt.canvas,offsetX:p-2*E,offsetY:r-2*$,scaleX:E,scaleY:$}}getPattern(w,C,A,a){G(w,this._bbox);let l;if(a===ot.SHADING)l=h.Util.singularValueDecompose2dScale((0,F.getCurrentTransform)(w));else if(l=h.Util.singularValueDecompose2dScale(C.baseTransform),this.matrix){const p=h.Util.singularValueDecompose2dScale(this.matrix);l=[l[0]*p[0],l[1]*p[1]]}const k=this._createMeshCanvas(l,a===ot.SHADING?null:this._background,C.cachedCanvases);return a!==ot.SHADING&&(w.setTransform(...C.baseTransform),this.matrix&&w.transform(...this.matrix)),w.translate(k.offsetX,k.offsetY),w.scale(k.scaleX,k.scaleY),w.createPattern(k.canvas,"no-repeat")}}class O extends ut{getPattern(){return"hotpink"}}function x(b){switch(b[0]){case"RadialAxial":return new B(b);case"Mesh":return new L(b);case"Dummy":return new O}throw new Error(`Unknown IR type: ${b[0]}`)}const v={COLORED:1,UNCOLORED:2},u=class{constructor(w,C,A,a,l){this.operatorList=w[2],this.matrix=w[3]||[1,0,0,1,0,0],this.bbox=w[4],this.xstep=w[5],this.ystep=w[6],this.paintType=w[7],this.tilingType=w[8],this.color=C,this.ctx=A,this.canvasGraphicsFactory=a,this.baseTransform=l}createPatternCanvas(w){const C=this.operatorList,A=this.bbox,a=this.xstep,l=this.ystep,k=this.paintType,p=this.tilingType,r=this.color,T=this.canvasGraphicsFactory;(0,h.info)("TilingType: "+p);const m=A[0],U=A[1],X=A[2],E=A[3],$=h.Util.singularValueDecompose2dScale(this.matrix),it=h.Util.singularValueDecompose2dScale(this.baseTransform),at=[$[0]*it[0],$[1]*it[1]],H=this.getSizeAndScale(a,this.ctx.canvas.width,at[0]),lt=this.getSizeAndScale(l,this.ctx.canvas.height,at[1]),pt=w.cachedCanvases.getCanvas("pattern",H.size,lt.size,!0),Ct=pt.context,kt=T.createCanvasGraphics(Ct);kt.groupLevel=w.groupLevel,this.setFillAndStrokeStyleToContext(kt,k,r);let S=m,i=U,n=X,s=E;return m<0&&(S=0,n+=Math.abs(m)),U<0&&(i=0,s+=Math.abs(U)),Ct.translate(-(H.scale*S),-(lt.scale*i)),kt.transform(H.scale,0,0,lt.scale,0,0),Ct.save(),this.clipBbox(kt,S,i,n,s),kt.baseTransform=(0,F.getCurrentTransform)(kt.ctx),kt.executeOperatorList(C),kt.endDrawing(),{canvas:pt.canvas,scaleX:H.scale,scaleY:lt.scale,offsetX:S,offsetY:i}}getSizeAndScale(w,C,A){w=Math.abs(w);const a=Math.max(u.MAX_PATTERN_SIZE,C);let l=Math.ceil(w*A);return l>=a?l=a:A=l/w,{scale:A,size:l}}clipBbox(w,C,A,a,l){const k=a-C,p=l-A;w.ctx.rect(C,A,k,p),w.current.updateRectMinMax((0,F.getCurrentTransform)(w.ctx),[C,A,a,l]),w.clip(),w.endPath()}setFillAndStrokeStyleToContext(w,C,A){const a=w.ctx,l=w.current;switch(C){case v.COLORED:const k=this.ctx;a.fillStyle=k.fillStyle,a.strokeStyle=k.strokeStyle,l.fillColor=k.fillStyle,l.strokeColor=k.strokeStyle;break;case v.UNCOLORED:const p=h.Util.makeHexColor(A[0],A[1],A[2]);a.fillStyle=p,a.strokeStyle=p,l.fillColor=p,l.strokeColor=p;break;default:throw new h.FormatError(`Unsupported paint type: ${C}`)}}getPattern(w,C,A,a){let l=A;a!==ot.SHADING&&(l=h.Util.transform(l,C.baseTransform),this.matrix&&(l=h.Util.transform(l,this.matrix)));const k=this.createPatternCanvas(C);let p=new DOMMatrix(l);p=p.translate(k.offsetX,k.offsetY),p=p.scale(1/k.scaleX,1/k.scaleY);const r=w.createPattern(k.canvas,"repeat");return r.setTransform(p),r}};let y=u;ee(y,"MAX_PATTERN_SIZE",3e3),d.TilingPattern=y},(_t,d,st)=>{Object.defineProperty(d,"__esModule",{value:!0}),d.convertBlackAndWhiteToRGBA=ot,d.convertToRGBA=F,d.grayToRGBA=ut;var h=st(1);function F(B){switch(B.kind){case h.ImageKind.GRAYSCALE_1BPP:return ot(B);case h.ImageKind.RGB_24BPP:return G(B)}return null}function ot({src:B,srcPos:P=0,dest:g,width:L,height:O,nonBlackColor:x=4294967295,inverseDecode:v=!1}){const y=h.FeatureTest.isLittleEndian?4278190080:255,[u,b]=v?[x,y]:[y,x],w=L>>3,C=L&7,A=B.length;g=new Uint32Array(g.buffer);let a=0;for(let l=0;l<O;l++){for(const p=P+w;P<p;P++){const r=P<A?B[P]:255;g[a++]=r&128?b:u,g[a++]=r&64?b:u,g[a++]=r&32?b:u,g[a++]=r&16?b:u,g[a++]=r&8?b:u,g[a++]=r&4?b:u,g[a++]=r&2?b:u,g[a++]=r&1?b:u}if(C===0)continue;const k=P<A?B[P++]:255;for(let p=0;p<C;p++)g[a++]=k&1<<7-p?b:u}return{srcPos:P,destPos:a}}function G({src:B,srcPos:P=0,dest:g,destPos:L=0,width:O,height:x}){let v=0;const y=B.length>>2,u=new Uint32Array(B.buffer,P,y);if(h.FeatureTest.isLittleEndian){for(;v<y-2;v+=3,L+=4){const b=u[v],w=u[v+1],C=u[v+2];g[L]=b|4278190080,g[L+1]=b>>>24|w<<8|4278190080,g[L+2]=w>>>16|C<<16|4278190080,g[L+3]=C>>>8|4278190080}for(let b=v*4,w=B.length;b<w;b+=3)g[L++]=B[b]|B[b+1]<<8|B[b+2]<<16|4278190080}else{for(;v<y-2;v+=3,L+=4){const b=u[v],w=u[v+1],C=u[v+2];g[L]=b|255,g[L+1]=b<<24|w>>>8|255,g[L+2]=w<<16|C>>>16|255,g[L+3]=C<<8|255}for(let b=v*4,w=B.length;b<w;b+=3)g[L++]=B[b]<<24|B[b+1]<<16|B[b+2]<<8|255}return{srcPos:P,destPos:L}}function ut(B,P){if(h.FeatureTest.isLittleEndian)for(let g=0,L=B.length;g<L;g++)P[g]=B[g]*65793|4278190080;else for(let g=0,L=B.length;g<L;g++)P[g]=B[g]*16843008|255}},(_t,d)=>{Object.defineProperty(d,"__esModule",{value:!0}),d.GlobalWorkerOptions=void 0;const st=Object.create(null);d.GlobalWorkerOptions=st,st.workerPort=null,st.workerSrc=""},(_t,d,st)=>{var B,Pi,g,ki,O,Pe;Object.defineProperty(d,"__esModule",{value:!0}),d.MessageHandler=void 0;var h=st(1);const F={UNKNOWN:0,DATA:1,ERROR:2},ot={UNKNOWN:0,CANCEL:1,CANCEL_COMPLETE:2,CLOSE:3,ENQUEUE:4,ERROR:5,PULL:6,PULL_COMPLETE:7,START_COMPLETE:8};function G(v){switch(v instanceof Error||typeof v=="object"&&v!==null||(0,h.unreachable)('wrapReason: Expected "reason" to be a (possibly cloned) Error.'),v.name){case"AbortException":return new h.AbortException(v.message);case"MissingPDFException":return new h.MissingPDFException(v.message);case"PasswordException":return new h.PasswordException(v.message,v.code);case"UnexpectedResponseException":return new h.UnexpectedResponseException(v.message,v.status);case"UnknownErrorException":return new h.UnknownErrorException(v.message,v.details);default:return new h.UnknownErrorException(v.message,v.toString())}}class ut{constructor(y,u,b){I(this,B);I(this,g);I(this,O);this.sourceName=y,this.targetName=u,this.comObj=b,this.callbackId=1,this.streamId=1,this.streamSinks=Object.create(null),this.streamControllers=Object.create(null),this.callbackCapabilities=Object.create(null),this.actionHandler=Object.create(null),this._onComObjOnMessage=w=>{const C=w.data;if(C.targetName!==this.sourceName)return;if(C.stream){W(this,g,ki).call(this,C);return}if(C.callback){const a=C.callbackId,l=this.callbackCapabilities[a];if(!l)throw new Error(`Cannot resolve callback ${a}`);if(delete this.callbackCapabilities[a],C.callback===F.DATA)l.resolve(C.data);else if(C.callback===F.ERROR)l.reject(G(C.reason));else throw new Error("Unexpected callback case");return}const A=this.actionHandler[C.action];if(!A)throw new Error(`Unknown action from worker: ${C.action}`);if(C.callbackId){const a=this.sourceName,l=C.sourceName;new Promise(function(k){k(A(C.data))}).then(function(k){b.postMessage({sourceName:a,targetName:l,callback:F.DATA,callbackId:C.callbackId,data:k})},function(k){b.postMessage({sourceName:a,targetName:l,callback:F.ERROR,callbackId:C.callbackId,reason:G(k)})});return}if(C.streamId){W(this,B,Pi).call(this,C);return}A(C.data)},b.addEventListener("message",this._onComObjOnMessage)}on(y,u){const b=this.actionHandler;if(b[y])throw new Error(`There is already an actionName called "${y}"`);b[y]=u}send(y,u,b){this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:y,data:u},b)}sendWithPromise(y,u,b){const w=this.callbackId++,C=new h.PromiseCapability;this.callbackCapabilities[w]=C;try{this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:y,callbackId:w,data:u},b)}catch(A){C.reject(A)}return C.promise}sendWithStream(y,u,b,w){const C=this.streamId++,A=this.sourceName,a=this.targetName,l=this.comObj;return new ReadableStream({start:k=>{const p=new h.PromiseCapability;return this.streamControllers[C]={controller:k,startCall:p,pullCall:null,cancelCall:null,isClosed:!1},l.postMessage({sourceName:A,targetName:a,action:y,streamId:C,data:u,desiredSize:k.desiredSize},w),p.promise},pull:k=>{const p=new h.PromiseCapability;return this.streamControllers[C].pullCall=p,l.postMessage({sourceName:A,targetName:a,stream:ot.PULL,streamId:C,desiredSize:k.desiredSize}),p.promise},cancel:k=>{(0,h.assert)(k instanceof Error,"cancel must have a valid reason");const p=new h.PromiseCapability;return this.streamControllers[C].cancelCall=p,this.streamControllers[C].isClosed=!0,l.postMessage({sourceName:A,targetName:a,stream:ot.CANCEL,streamId:C,reason:G(k)}),p.promise}},b)}destroy(){this.comObj.removeEventListener("message",this._onComObjOnMessage)}}B=new WeakSet,Pi=function(y){const u=y.streamId,b=this.sourceName,w=y.sourceName,C=this.comObj,A=this,a=this.actionHandler[y.action],l={enqueue(k,p=1,r){if(this.isCancelled)return;const T=this.desiredSize;this.desiredSize-=p,T>0&&this.desiredSize<=0&&(this.sinkCapability=new h.PromiseCapability,this.ready=this.sinkCapability.promise),C.postMessage({sourceName:b,targetName:w,stream:ot.ENQUEUE,streamId:u,chunk:k},r)},close(){this.isCancelled||(this.isCancelled=!0,C.postMessage({sourceName:b,targetName:w,stream:ot.CLOSE,streamId:u}),delete A.streamSinks[u])},error(k){(0,h.assert)(k instanceof Error,"error must have a valid reason"),!this.isCancelled&&(this.isCancelled=!0,C.postMessage({sourceName:b,targetName:w,stream:ot.ERROR,streamId:u,reason:G(k)}))},sinkCapability:new h.PromiseCapability,onPull:null,onCancel:null,isCancelled:!1,desiredSize:y.desiredSize,ready:null};l.sinkCapability.resolve(),l.ready=l.sinkCapability.promise,this.streamSinks[u]=l,new Promise(function(k){k(a(y.data,l))}).then(function(){C.postMessage({sourceName:b,targetName:w,stream:ot.START_COMPLETE,streamId:u,success:!0})},function(k){C.postMessage({sourceName:b,targetName:w,stream:ot.START_COMPLETE,streamId:u,reason:G(k)})})},g=new WeakSet,ki=function(y){const u=y.streamId,b=this.sourceName,w=y.sourceName,C=this.comObj,A=this.streamControllers[u],a=this.streamSinks[u];switch(y.stream){case ot.START_COMPLETE:y.success?A.startCall.resolve():A.startCall.reject(G(y.reason));break;case ot.PULL_COMPLETE:y.success?A.pullCall.resolve():A.pullCall.reject(G(y.reason));break;case ot.PULL:if(!a){C.postMessage({sourceName:b,targetName:w,stream:ot.PULL_COMPLETE,streamId:u,success:!0});break}a.desiredSize<=0&&y.desiredSize>0&&a.sinkCapability.resolve(),a.desiredSize=y.desiredSize,new Promise(function(l){var k;l((k=a.onPull)==null?void 0:k.call(a))}).then(function(){C.postMessage({sourceName:b,targetName:w,stream:ot.PULL_COMPLETE,streamId:u,success:!0})},function(l){C.postMessage({sourceName:b,targetName:w,stream:ot.PULL_COMPLETE,streamId:u,reason:G(l)})});break;case ot.ENQUEUE:if((0,h.assert)(A,"enqueue should have stream controller"),A.isClosed)break;A.controller.enqueue(y.chunk);break;case ot.CLOSE:if((0,h.assert)(A,"close should have stream controller"),A.isClosed)break;A.isClosed=!0,A.controller.close(),W(this,O,Pe).call(this,A,u);break;case ot.ERROR:(0,h.assert)(A,"error should have stream controller"),A.controller.error(G(y.reason)),W(this,O,Pe).call(this,A,u);break;case ot.CANCEL_COMPLETE:y.success?A.cancelCall.resolve():A.cancelCall.reject(G(y.reason)),W(this,O,Pe).call(this,A,u);break;case ot.CANCEL:if(!a)break;new Promise(function(l){var k;l((k=a.onCancel)==null?void 0:k.call(a,G(y.reason)))}).then(function(){C.postMessage({sourceName:b,targetName:w,stream:ot.CANCEL_COMPLETE,streamId:u,success:!0})},function(l){C.postMessage({sourceName:b,targetName:w,stream:ot.CANCEL_COMPLETE,streamId:u,reason:G(l)})}),a.sinkCapability.reject(G(y.reason)),a.isCancelled=!0,delete this.streamSinks[u];break;default:throw new Error("Unexpected stream case")}},O=new WeakSet,Pe=async function(y,u){var b,w,C;await Promise.allSettled([(b=y.startCall)==null?void 0:b.promise,(w=y.pullCall)==null?void 0:w.promise,(C=y.cancelCall)==null?void 0:C.promise]),delete this.streamControllers[u]},d.MessageHandler=ut},(_t,d,st)=>{var ot,G;Object.defineProperty(d,"__esModule",{value:!0}),d.Metadata=void 0;var h=st(1);class F{constructor({parsedData:B,rawData:P}){I(this,ot,void 0);I(this,G,void 0);Z(this,ot,B),Z(this,G,P)}getRaw(){return t(this,G)}get(B){var P;return(P=t(this,ot).get(B))!=null?P:null}getAll(){return(0,h.objectFromMap)(t(this,ot))}has(B){return t(this,ot).has(B)}}ot=new WeakMap,G=new WeakMap,d.Metadata=F},(_t,d,st)=>{var B,P,g,L,O,x,ti;Object.defineProperty(d,"__esModule",{value:!0}),d.OptionalContentConfig=void 0;var h=st(1),F=st(8);const ot=Symbol("INTERNAL");class G{constructor(u,b){I(this,B,!0);this.name=u,this.intent=b}get visible(){return t(this,B)}_setVisible(u,b){u!==ot&&(0,h.unreachable)("Internal method `_setVisible` called."),Z(this,B,b)}}B=new WeakMap;class ut{constructor(u){I(this,x);I(this,P,null);I(this,g,new Map);I(this,L,null);I(this,O,null);if(this.name=null,this.creator=null,u!==null){this.name=u.name,this.creator=u.creator,Z(this,O,u.order);for(const b of u.groups)t(this,g).set(b.id,new G(b.name,b.intent));if(u.baseState==="OFF")for(const b of t(this,g).values())b._setVisible(ot,!1);for(const b of u.on)t(this,g).get(b)._setVisible(ot,!0);for(const b of u.off)t(this,g).get(b)._setVisible(ot,!1);Z(this,L,this.getHash())}}isVisible(u){if(t(this,g).size===0)return!0;if(!u)return(0,h.warn)("Optional content group not defined."),!0;if(u.type==="OCG")return t(this,g).has(u.id)?t(this,g).get(u.id).visible:((0,h.warn)(`Optional content group not found: ${u.id}`),!0);if(u.type==="OCMD"){if(u.expression)return W(this,x,ti).call(this,u.expression);if(!u.policy||u.policy==="AnyOn"){for(const b of u.ids){if(!t(this,g).has(b))return(0,h.warn)(`Optional content group not found: ${b}`),!0;if(t(this,g).get(b).visible)return!0}return!1}else if(u.policy==="AllOn"){for(const b of u.ids){if(!t(this,g).has(b))return(0,h.warn)(`Optional content group not found: ${b}`),!0;if(!t(this,g).get(b).visible)return!1}return!0}else if(u.policy==="AnyOff"){for(const b of u.ids){if(!t(this,g).has(b))return(0,h.warn)(`Optional content group not found: ${b}`),!0;if(!t(this,g).get(b).visible)return!0}return!1}else if(u.policy==="AllOff"){for(const b of u.ids){if(!t(this,g).has(b))return(0,h.warn)(`Optional content group not found: ${b}`),!0;if(t(this,g).get(b).visible)return!1}return!0}return(0,h.warn)(`Unknown optional content policy ${u.policy}.`),!0}return(0,h.warn)(`Unknown group type ${u.type}.`),!0}setVisibility(u,b=!0){if(!t(this,g).has(u)){(0,h.warn)(`Optional content group not found: ${u}`);return}t(this,g).get(u)._setVisible(ot,!!b),Z(this,P,null)}get hasInitialVisibility(){return t(this,L)===null||this.getHash()===t(this,L)}getOrder(){return t(this,g).size?t(this,O)?t(this,O).slice():[...t(this,g).keys()]:null}getGroups(){return t(this,g).size>0?(0,h.objectFromMap)(t(this,g)):null}getGroup(u){return t(this,g).get(u)||null}getHash(){if(t(this,P)!==null)return t(this,P);const u=new F.MurmurHash3_64;for(const[b,w]of t(this,g))u.update(`${b}:${w.visible}`);return Z(this,P,u.hexdigest())}}P=new WeakMap,g=new WeakMap,L=new WeakMap,O=new WeakMap,x=new WeakSet,ti=function(u){const b=u.length;if(b<2)return!0;const w=u[0];for(let C=1;C<b;C++){const A=u[C];let a;if(Array.isArray(A))a=W(this,x,ti).call(this,A);else if(t(this,g).has(A))a=t(this,g).get(A).visible;else return(0,h.warn)(`Optional content group not found: ${A}`),!0;switch(w){case"And":if(!a)return!1;break;case"Or":if(a)return!0;break;case"Not":return!a;default:return!0}}return w==="And"},d.OptionalContentConfig=ut},(_t,d,st)=>{Object.defineProperty(d,"__esModule",{value:!0}),d.PDFDataTransportStream=void 0;var h=st(1),F=st(6);class ot{constructor({length:P,initialData:g,progressiveDone:L=!1,contentDispositionFilename:O=null,disableRange:x=!1,disableStream:v=!1},y){if((0,h.assert)(y,'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.'),this._queuedChunks=[],this._progressiveDone=L,this._contentDispositionFilename=O,(g==null?void 0:g.length)>0){const u=g instanceof Uint8Array&&g.byteLength===g.buffer.byteLength?g.buffer:new Uint8Array(g).buffer;this._queuedChunks.push(u)}this._pdfDataRangeTransport=y,this._isStreamingSupported=!v,this._isRangeSupported=!x,this._contentLength=P,this._fullRequestReader=null,this._rangeReaders=[],this._pdfDataRangeTransport.addRangeListener((u,b)=>{this._onReceiveData({begin:u,chunk:b})}),this._pdfDataRangeTransport.addProgressListener((u,b)=>{this._onProgress({loaded:u,total:b})}),this._pdfDataRangeTransport.addProgressiveReadListener(u=>{this._onReceiveData({chunk:u})}),this._pdfDataRangeTransport.addProgressiveDoneListener(()=>{this._onProgressiveDone()}),this._pdfDataRangeTransport.transportReady()}_onReceiveData({begin:P,chunk:g}){const L=g instanceof Uint8Array&&g.byteLength===g.buffer.byteLength?g.buffer:new Uint8Array(g).buffer;if(P===void 0)this._fullRequestReader?this._fullRequestReader._enqueue(L):this._queuedChunks.push(L);else{const O=this._rangeReaders.some(function(x){return x._begin!==P?!1:(x._enqueue(L),!0)});(0,h.assert)(O,"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.")}}get _progressiveDataLength(){var P,g;return(g=(P=this._fullRequestReader)==null?void 0:P._loaded)!=null?g:0}_onProgress(P){var g,L,O,x;P.total===void 0?(L=(g=this._rangeReaders[0])==null?void 0:g.onProgress)==null||L.call(g,{loaded:P.loaded}):(x=(O=this._fullRequestReader)==null?void 0:O.onProgress)==null||x.call(O,{loaded:P.loaded,total:P.total})}_onProgressiveDone(){var P;(P=this._fullRequestReader)==null||P.progressiveDone(),this._progressiveDone=!0}_removeRangeReader(P){const g=this._rangeReaders.indexOf(P);g>=0&&this._rangeReaders.splice(g,1)}getFullReader(){(0,h.assert)(!this._fullRequestReader,"PDFDataTransportStream.getFullReader can only be called once.");const P=this._queuedChunks;return this._queuedChunks=null,new G(this,P,this._progressiveDone,this._contentDispositionFilename)}getRangeReader(P,g){if(g<=this._progressiveDataLength)return null;const L=new ut(this,P,g);return this._pdfDataRangeTransport.requestDataRange(P,g),this._rangeReaders.push(L),L}cancelAllRequests(P){var g;(g=this._fullRequestReader)==null||g.cancel(P);for(const L of this._rangeReaders.slice(0))L.cancel(P);this._pdfDataRangeTransport.abort()}}d.PDFDataTransportStream=ot;class G{constructor(P,g,L=!1,O=null){this._stream=P,this._done=L||!1,this._filename=(0,F.isPdfFile)(O)?O:null,this._queuedChunks=g||[],this._loaded=0;for(const x of this._queuedChunks)this._loaded+=x.byteLength;this._requests=[],this._headersReady=Promise.resolve(),P._fullRequestReader=this,this.onProgress=null}_enqueue(P){this._done||(this._requests.length>0?this._requests.shift().resolve({value:P,done:!1}):this._queuedChunks.push(P),this._loaded+=P.byteLength)}get headersReady(){return this._headersReady}get filename(){return this._filename}get isRangeSupported(){return this._stream._isRangeSupported}get isStreamingSupported(){return this._stream._isStreamingSupported}get contentLength(){return this._stream._contentLength}async read(){if(this._queuedChunks.length>0)return{value:this._queuedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const P=new h.PromiseCapability;return this._requests.push(P),P.promise}cancel(P){this._done=!0;for(const g of this._requests)g.resolve({value:void 0,done:!0});this._requests.length=0}progressiveDone(){this._done||(this._done=!0)}}class ut{constructor(P,g,L){this._stream=P,this._begin=g,this._end=L,this._queuedChunk=null,this._requests=[],this._done=!1,this.onProgress=null}_enqueue(P){if(!this._done){if(this._requests.length===0)this._queuedChunk=P;else{this._requests.shift().resolve({value:P,done:!1});for(const L of this._requests)L.resolve({value:void 0,done:!0});this._requests.length=0}this._done=!0,this._stream._removeRangeReader(this)}}get isStreamingSupported(){return!1}async read(){if(this._queuedChunk){const g=this._queuedChunk;return this._queuedChunk=null,{value:g,done:!1}}if(this._done)return{value:void 0,done:!0};const P=new h.PromiseCapability;return this._requests.push(P),P.promise}cancel(P){this._done=!0;for(const g of this._requests)g.resolve({value:void 0,done:!0});this._requests.length=0,this._stream._removeRangeReader(this)}}},(_t,d,st)=>{Object.defineProperty(d,"__esModule",{value:!0}),d.PDFFetchStream=void 0;var h=st(1),F=st(20);function ot(L,O,x){return{method:"GET",headers:L,signal:x.signal,mode:"cors",credentials:O?"include":"same-origin",redirect:"follow"}}function G(L){const O=new Headers;for(const x in L){const v=L[x];v!==void 0&&O.append(x,v)}return O}function ut(L){return L instanceof Uint8Array?L.buffer:L instanceof ArrayBuffer?L:((0,h.warn)(`getArrayBuffer - unexpected data format: ${L}`),new Uint8Array(L).buffer)}class B{constructor(O){this.source=O,this.isHttp=/^https?:/i.test(O.url),this.httpHeaders=this.isHttp&&O.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){var O,x;return(x=(O=this._fullRequestReader)==null?void 0:O._loaded)!=null?x:0}getFullReader(){return(0,h.assert)(!this._fullRequestReader,"PDFFetchStream.getFullReader can only be called once."),this._fullRequestReader=new P(this),this._fullRequestReader}getRangeReader(O,x){if(x<=this._progressiveDataLength)return null;const v=new g(this,O,x);return this._rangeRequestReaders.push(v),v}cancelAllRequests(O){var x;(x=this._fullRequestReader)==null||x.cancel(O);for(const v of this._rangeRequestReaders.slice(0))v.cancel(O)}}d.PDFFetchStream=B;class P{constructor(O){this._stream=O,this._reader=null,this._loaded=0,this._filename=null;const x=O.source;this._withCredentials=x.withCredentials||!1,this._contentLength=x.length,this._headersCapability=new h.PromiseCapability,this._disableRange=x.disableRange||!1,this._rangeChunkSize=x.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._abortController=new AbortController,this._isStreamingSupported=!x.disableStream,this._isRangeSupported=!x.disableRange,this._headers=G(this._stream.httpHeaders);const v=x.url;fetch(v,ot(this._headers,this._withCredentials,this._abortController)).then(y=>{if(!(0,F.validateResponseStatus)(y.status))throw(0,F.createResponseStatusError)(y.status,v);this._reader=y.body.getReader(),this._headersCapability.resolve();const u=C=>y.headers.get(C),{allowRangeRequests:b,suggestedLength:w}=(0,F.validateRangeRequestCapabilities)({getResponseHeader:u,isHttp:this._stream.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=b,this._contentLength=w||this._contentLength,this._filename=(0,F.extractFilenameFromHeader)(u),!this._isStreamingSupported&&this._isRangeSupported&&this.cancel(new h.AbortException("Streaming is disabled."))}).catch(this._headersCapability.reject),this.onProgress=null}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){var v;await this._headersCapability.promise;const{value:O,done:x}=await this._reader.read();return x?{value:O,done:x}:(this._loaded+=O.byteLength,(v=this.onProgress)==null||v.call(this,{loaded:this._loaded,total:this._contentLength}),{value:ut(O),done:!1})}cancel(O){var x;(x=this._reader)==null||x.cancel(O),this._abortController.abort()}}class g{constructor(O,x,v){this._stream=O,this._reader=null,this._loaded=0;const y=O.source;this._withCredentials=y.withCredentials||!1,this._readCapability=new h.PromiseCapability,this._isStreamingSupported=!y.disableStream,this._abortController=new AbortController,this._headers=G(this._stream.httpHeaders),this._headers.append("Range",`bytes=${x}-${v-1}`);const u=y.url;fetch(u,ot(this._headers,this._withCredentials,this._abortController)).then(b=>{if(!(0,F.validateResponseStatus)(b.status))throw(0,F.createResponseStatusError)(b.status,u);this._readCapability.resolve(),this._reader=b.body.getReader()}).catch(this._readCapability.reject),this.onProgress=null}get isStreamingSupported(){return this._isStreamingSupported}async read(){var v;await this._readCapability.promise;const{value:O,done:x}=await this._reader.read();return x?{value:O,done:x}:(this._loaded+=O.byteLength,(v=this.onProgress)==null||v.call(this,{loaded:this._loaded}),{value:ut(O),done:!1})}cancel(O){var x;(x=this._reader)==null||x.cancel(O),this._abortController.abort()}}},(_t,d,st)=>{Object.defineProperty(d,"__esModule",{value:!0}),d.createResponseStatusError=B,d.extractFilenameFromHeader=ut,d.validateRangeRequestCapabilities=G,d.validateResponseStatus=P;var h=st(1),F=st(21),ot=st(6);function G({getResponseHeader:g,isHttp:L,rangeChunkSize:O,disableRange:x}){const v={allowRangeRequests:!1,suggestedLength:void 0},y=parseInt(g("Content-Length"),10);return!Number.isInteger(y)||(v.suggestedLength=y,y<=2*O)||x||!L||g("Accept-Ranges")!=="bytes"||(g("Content-Encoding")||"identity")!=="identity"||(v.allowRangeRequests=!0),v}function ut(g){const L=g("Content-Disposition");if(L){let O=(0,F.getFilenameFromContentDispositionHeader)(L);if(O.includes("%"))try{O=decodeURIComponent(O)}catch{}if((0,ot.isPdfFile)(O))return O}return null}function B(g,L){return g===404||g===0&&L.startsWith("file:")?new h.MissingPDFException('Missing PDF "'+L+'".'):new h.UnexpectedResponseException(`Unexpected server response (${g}) while retrieving PDF "${L}".`,g)}function P(g){return g===200||g===206}},(_t,d,st)=>{Object.defineProperty(d,"__esModule",{value:!0}),d.getFilenameFromContentDispositionHeader=F;var h=st(1);function F(ot){let G=!0,ut=B("filename\\*","i").exec(ot);if(ut){ut=ut[1];let y=O(ut);return y=unescape(y),y=x(y),y=v(y),g(y)}if(ut=L(ot),ut){const y=v(ut);return g(y)}if(ut=B("filename","i").exec(ot),ut){ut=ut[1];let y=O(ut);return y=v(y),g(y)}function B(y,u){return new RegExp("(?:^|;)\\s*"+y+'\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)',u)}function P(y,u){if(y){if(!/^[\x00-\xFF]+$/.test(u))return u;try{const b=new TextDecoder(y,{fatal:!0}),w=(0,h.stringToBytes)(u);u=b.decode(w),G=!1}catch{}}return u}function g(y){return G&&/[\x80-\xff]/.test(y)&&(y=P("utf-8",y),G&&(y=P("iso-8859-1",y))),y}function L(y){const u=[];let b;const w=B("filename\\*((?!0\\d)\\d+)(\\*?)","ig");for(;(b=w.exec(y))!==null;){let[,A,a,l]=b;if(A=parseInt(A,10),A in u){if(A===0)break;continue}u[A]=[a,l]}const C=[];for(let A=0;A<u.length&&A in u;++A){let[a,l]=u[A];l=O(l),a&&(l=unescape(l),A===0&&(l=x(l))),C.push(l)}return C.join("")}function O(y){if(y.startsWith('"')){const u=y.slice(1).split('\\"');for(let b=0;b<u.length;++b){const w=u[b].indexOf('"');w!==-1&&(u[b]=u[b].slice(0,w),u.length=b+1),u[b]=u[b].replaceAll(/\\(.)/g,"$1")}y=u.join('"')}return y}function x(y){const u=y.indexOf("'");if(u===-1)return y;const b=y.slice(0,u),C=y.slice(u+1).replace(/^[^']*'/,"");return P(b,C)}function v(y){return!y.startsWith("=?")||/[\x00-\x19\x80-\xff]/.test(y)?y:y.replaceAll(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g,function(u,b,w,C){if(w==="q"||w==="Q")return C=C.replaceAll("_"," "),C=C.replaceAll(/=([0-9a-fA-F]{2})/g,function(A,a){return String.fromCharCode(parseInt(a,16))}),P(b,C);try{C=atob(C)}catch{}return P(b,C)})}return""}},(_t,d,st)=>{Object.defineProperty(d,"__esModule",{value:!0}),d.PDFNetworkStream=void 0;var h=st(1),F=st(20);const ot=200,G=206;function ut(O){const x=O.response;return typeof x!="string"?x:(0,h.stringToBytes)(x).buffer}class B{constructor(x,v={}){this.url=x,this.isHttp=/^https?:/i.test(x),this.httpHeaders=this.isHttp&&v.httpHeaders||Object.create(null),this.withCredentials=v.withCredentials||!1,this.currXhrId=0,this.pendingRequests=Object.create(null)}requestRange(x,v,y){const u={begin:x,end:v};for(const b in y)u[b]=y[b];return this.request(u)}requestFull(x){return this.request(x)}request(x){const v=new XMLHttpRequest,y=this.currXhrId++,u=this.pendingRequests[y]={xhr:v};v.open("GET",this.url),v.withCredentials=this.withCredentials;for(const b in this.httpHeaders){const w=this.httpHeaders[b];w!==void 0&&v.setRequestHeader(b,w)}return this.isHttp&&"begin"in x&&"end"in x?(v.setRequestHeader("Range",`bytes=${x.begin}-${x.end-1}`),u.expectedStatus=G):u.expectedStatus=ot,v.responseType="arraybuffer",x.onError&&(v.onerror=function(b){x.onError(v.status)}),v.onreadystatechange=this.onStateChange.bind(this,y),v.onprogress=this.onProgress.bind(this,y),u.onHeadersReceived=x.onHeadersReceived,u.onDone=x.onDone,u.onError=x.onError,u.onProgress=x.onProgress,v.send(null),y}onProgress(x,v){var u;const y=this.pendingRequests[x];!y||(u=y.onProgress)==null||u.call(y,v)}onStateChange(x,v){var A,a,l;const y=this.pendingRequests[x];if(!y)return;const u=y.xhr;if(u.readyState>=2&&y.onHeadersReceived&&(y.onHeadersReceived(),delete y.onHeadersReceived),u.readyState!==4||!(x in this.pendingRequests))return;if(delete this.pendingRequests[x],u.status===0&&this.isHttp){(A=y.onError)==null||A.call(y,u.status);return}const b=u.status||ot;if(!(b===ot&&y.expectedStatus===G)&&b!==y.expectedStatus){(a=y.onError)==null||a.call(y,u.status);return}const C=ut(u);if(b===G){const k=u.getResponseHeader("Content-Range"),p=/bytes (\d+)-(\d+)\/(\d+)/.exec(k);y.onDone({begin:parseInt(p[1],10),chunk:C})}else C?y.onDone({begin:0,chunk:C}):(l=y.onError)==null||l.call(y,u.status)}getRequestXhr(x){return this.pendingRequests[x].xhr}isPendingRequest(x){return x in this.pendingRequests}abortRequest(x){const v=this.pendingRequests[x].xhr;delete this.pendingRequests[x],v.abort()}}class P{constructor(x){this._source=x,this._manager=new B(x.url,{httpHeaders:x.httpHeaders,withCredentials:x.withCredentials}),this._rangeChunkSize=x.rangeChunkSize,this._fullRequestReader=null,this._rangeRequestReaders=[]}_onRangeRequestReaderClosed(x){const v=this._rangeRequestReaders.indexOf(x);v>=0&&this._rangeRequestReaders.splice(v,1)}getFullReader(){return(0,h.assert)(!this._fullRequestReader,"PDFNetworkStream.getFullReader can only be called once."),this._fullRequestReader=new g(this._manager,this._source),this._fullRequestReader}getRangeReader(x,v){const y=new L(this._manager,x,v);return y.onClosed=this._onRangeRequestReaderClosed.bind(this),this._rangeRequestReaders.push(y),y}cancelAllRequests(x){var v;(v=this._fullRequestReader)==null||v.cancel(x);for(const y of this._rangeRequestReaders.slice(0))y.cancel(x)}}d.PDFNetworkStream=P;class g{constructor(x,v){this._manager=x;const y={onHeadersReceived:this._onHeadersReceived.bind(this),onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=v.url,this._fullRequestId=x.requestFull(y),this._headersReceivedCapability=new h.PromiseCapability,this._disableRange=v.disableRange||!1,this._contentLength=v.length,this._rangeChunkSize=v.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._isStreamingSupported=!1,this._isRangeSupported=!1,this._cachedChunks=[],this._requests=[],this._done=!1,this._storedError=void 0,this._filename=null,this.onProgress=null}_onHeadersReceived(){const x=this._fullRequestId,v=this._manager.getRequestXhr(x),y=w=>v.getResponseHeader(w),{allowRangeRequests:u,suggestedLength:b}=(0,F.validateRangeRequestCapabilities)({getResponseHeader:y,isHttp:this._manager.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});u&&(this._isRangeSupported=!0),this._contentLength=b||this._contentLength,this._filename=(0,F.extractFilenameFromHeader)(y),this._isRangeSupported&&this._manager.abortRequest(x),this._headersReceivedCapability.resolve()}_onDone(x){if(x&&(this._requests.length>0?this._requests.shift().resolve({value:x.chunk,done:!1}):this._cachedChunks.push(x.chunk)),this._done=!0,!(this._cachedChunks.length>0)){for(const v of this._requests)v.resolve({value:void 0,done:!0});this._requests.length=0}}_onError(x){this._storedError=(0,F.createResponseStatusError)(x,this._url),this._headersReceivedCapability.reject(this._storedError);for(const v of this._requests)v.reject(this._storedError);this._requests.length=0,this._cachedChunks.length=0}_onProgress(x){var v;(v=this.onProgress)==null||v.call(this,{loaded:x.loaded,total:x.lengthComputable?x.total:this._contentLength})}get filename(){return this._filename}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}get contentLength(){return this._contentLength}get headersReady(){return this._headersReceivedCapability.promise}async read(){if(this._storedError)throw this._storedError;if(this._cachedChunks.length>0)return{value:this._cachedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const x=new h.PromiseCapability;return this._requests.push(x),x.promise}cancel(x){this._done=!0,this._headersReceivedCapability.reject(x);for(const v of this._requests)v.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._fullRequestId)&&this._manager.abortRequest(this._fullRequestId),this._fullRequestReader=null}}class L{constructor(x,v,y){this._manager=x;const u={onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=x.url,this._requestId=x.requestRange(v,y,u),this._requests=[],this._queuedChunk=null,this._done=!1,this._storedError=void 0,this.onProgress=null,this.onClosed=null}_close(){var x;(x=this.onClosed)==null||x.call(this,this)}_onDone(x){const v=x.chunk;this._requests.length>0?this._requests.shift().resolve({value:v,done:!1}):this._queuedChunk=v,this._done=!0;for(const y of this._requests)y.resolve({value:void 0,done:!0});this._requests.length=0,this._close()}_onError(x){this._storedError=(0,F.createResponseStatusError)(x,this._url);for(const v of this._requests)v.reject(this._storedError);this._requests.length=0,this._queuedChunk=null}_onProgress(x){var v;this.isStreamingSupported||(v=this.onProgress)==null||v.call(this,{loaded:x.loaded})}get isStreamingSupported(){return!1}async read(){if(this._storedError)throw this._storedError;if(this._queuedChunk!==null){const v=this._queuedChunk;return this._queuedChunk=null,{value:v,done:!1}}if(this._done)return{value:void 0,done:!0};const x=new h.PromiseCapability;return this._requests.push(x),x.promise}cancel(x){this._done=!0;for(const v of this._requests)v.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._requestId)&&this._manager.abortRequest(this._requestId),this._close()}}},(_t,d,st)=>{Object.defineProperty(d,"__esModule",{value:!0}),d.PDFNodeStream=void 0;var h=st(1),F=st(20);const ot=/^file:\/\/\/[a-zA-Z]:\//;function G(y){const u=require$$0,b=u.parse(y);return b.protocol==="file:"||b.host?b:/^[a-z]:[/\\]/i.test(y)?u.parse(`file:///${y}`):(b.host||(b.protocol="file:"),b)}class ut{constructor(u){this.source=u,this.url=G(u.url),this.isHttp=this.url.protocol==="http:"||this.url.protocol==="https:",this.isFsUrl=this.url.protocol==="file:",this.httpHeaders=this.isHttp&&u.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){var u,b;return(b=(u=this._fullRequestReader)==null?void 0:u._loaded)!=null?b:0}getFullReader(){return(0,h.assert)(!this._fullRequestReader,"PDFNodeStream.getFullReader can only be called once."),this._fullRequestReader=this.isFsUrl?new x(this):new L(this),this._fullRequestReader}getRangeReader(u,b){if(b<=this._progressiveDataLength)return null;const w=this.isFsUrl?new v(this,u,b):new O(this,u,b);return this._rangeRequestReaders.push(w),w}cancelAllRequests(u){var b;(b=this._fullRequestReader)==null||b.cancel(u);for(const w of this._rangeRequestReaders.slice(0))w.cancel(u)}}d.PDFNodeStream=ut;class B{constructor(u){this._url=u.url,this._done=!1,this._storedError=null,this.onProgress=null;const b=u.source;this._contentLength=b.length,this._loaded=0,this._filename=null,this._disableRange=b.disableRange||!1,this._rangeChunkSize=b.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._isStreamingSupported=!b.disableStream,this._isRangeSupported=!b.disableRange,this._readableStream=null,this._readCapability=new h.PromiseCapability,this._headersCapability=new h.PromiseCapability}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){var w;if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const u=this._readableStream.read();return u===null?(this._readCapability=new h.PromiseCapability,this.read()):(this._loaded+=u.length,(w=this.onProgress)==null||w.call(this,{loaded:this._loaded,total:this._contentLength}),{value:new Uint8Array(u).buffer,done:!1})}cancel(u){if(!this._readableStream){this._error(u);return}this._readableStream.destroy(u)}_error(u){this._storedError=u,this._readCapability.resolve()}_setReadableStream(u){this._readableStream=u,u.on("readable",()=>{this._readCapability.resolve()}),u.on("end",()=>{u.destroy(),this._done=!0,this._readCapability.resolve()}),u.on("error",b=>{this._error(b)}),!this._isStreamingSupported&&this._isRangeSupported&&this._error(new h.AbortException("streaming is disabled")),this._storedError&&this._readableStream.destroy(this._storedError)}}class P{constructor(u){this._url=u.url,this._done=!1,this._storedError=null,this.onProgress=null,this._loaded=0,this._readableStream=null,this._readCapability=new h.PromiseCapability;const b=u.source;this._isStreamingSupported=!b.disableStream}get isStreamingSupported(){return this._isStreamingSupported}async read(){var w;if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const u=this._readableStream.read();return u===null?(this._readCapability=new h.PromiseCapability,this.read()):(this._loaded+=u.length,(w=this.onProgress)==null||w.call(this,{loaded:this._loaded}),{value:new Uint8Array(u).buffer,done:!1})}cancel(u){if(!this._readableStream){this._error(u);return}this._readableStream.destroy(u)}_error(u){this._storedError=u,this._readCapability.resolve()}_setReadableStream(u){this._readableStream=u,u.on("readable",()=>{this._readCapability.resolve()}),u.on("end",()=>{u.destroy(),this._done=!0,this._readCapability.resolve()}),u.on("error",b=>{this._error(b)}),this._storedError&&this._readableStream.destroy(this._storedError)}}function g(y,u){return{protocol:y.protocol,auth:y.auth,host:y.hostname,port:y.port,path:y.path,method:"GET",headers:u}}class L extends B{constructor(u){super(u);const b=w=>{if(w.statusCode===404){const l=new h.MissingPDFException(`Missing PDF "${this._url}".`);this._storedError=l,this._headersCapability.reject(l);return}this._headersCapability.resolve(),this._setReadableStream(w);const C=l=>this._readableStream.headers[l.toLowerCase()],{allowRangeRequests:A,suggestedLength:a}=(0,F.validateRangeRequestCapabilities)({getResponseHeader:C,isHttp:u.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=A,this._contentLength=a||this._contentLength,this._filename=(0,F.extractFilenameFromHeader)(C)};if(this._request=null,this._url.protocol==="http:"){const w=require$$0;this._request=w.request(g(this._url,u.httpHeaders),b)}else{const w=require$$0;this._request=w.request(g(this._url,u.httpHeaders),b)}this._request.on("error",w=>{this._storedError=w,this._headersCapability.reject(w)}),this._request.end()}}class O extends P{constructor(u,b,w){super(u),this._httpHeaders={};for(const A in u.httpHeaders){const a=u.httpHeaders[A];a!==void 0&&(this._httpHeaders[A]=a)}this._httpHeaders.Range=`bytes=${b}-${w-1}`;const C=A=>{if(A.statusCode===404){const a=new h.MissingPDFException(`Missing PDF "${this._url}".`);this._storedError=a;return}this._setReadableStream(A)};if(this._request=null,this._url.protocol==="http:"){const A=require$$0;this._request=A.request(g(this._url,this._httpHeaders),C)}else{const A=require$$0;this._request=A.request(g(this._url,this._httpHeaders),C)}this._request.on("error",A=>{this._storedError=A}),this._request.end()}}class x extends B{constructor(u){super(u);let b=decodeURIComponent(this._url.path);ot.test(this._url.href)&&(b=b.replace(/^\//,""));const w=require$$0;w.lstat(b,(C,A)=>{if(C){C.code==="ENOENT"&&(C=new h.MissingPDFException(`Missing PDF "${b}".`)),this._storedError=C,this._headersCapability.reject(C);return}this._contentLength=A.size,this._setReadableStream(w.createReadStream(b)),this._headersCapability.resolve()})}}class v extends P{constructor(u,b,w){super(u);let C=decodeURIComponent(this._url.path);ot.test(this._url.href)&&(C=C.replace(/^\//,""));const A=require$$0;this._setReadableStream(A.createReadStream(C,{start:b,end:w-1}))}}},(_t,d,st)=>{Object.defineProperty(d,"__esModule",{value:!0}),d.SVGGraphics=void 0;var h=st(6),F=st(1);const ot={fontStyle:"normal",fontWeight:"normal",fillColor:"#000000"},G="http://www.w3.org/XML/1998/namespace",ut="http://www.w3.org/1999/xlink",B=["butt","round","square"],P=["miter","round","bevel"],g=function(A,a="",l=!1){if(URL.createObjectURL&&typeof Blob!="undefined"&&!l)return URL.createObjectURL(new Blob([A],{type:a}));const k="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";let p=`data:${a};base64,`;for(let r=0,T=A.length;r<T;r+=3){const m=A[r]&255,U=A[r+1]&255,X=A[r+2]&255,E=m>>2,$=(m&3)<<4|U>>4,it=r+1<T?(U&15)<<2|X>>6:64,at=r+2<T?X&63:64;p+=k[E]+k[$]+k[it]+k[at]}return p},L=function(){const A=new Uint8Array([137,80,78,71,13,10,26,10]),a=12,l=new Int32Array(256);for(let X=0;X<256;X++){let E=X;for(let $=0;$<8;$++)E=E&1?3988292384^E>>1&2147483647:E>>1&2147483647;l[X]=E}function k(X,E,$){let it=-1;for(let at=E;at<$;at++){const H=(it^X[at])&255,lt=l[H];it=it>>>8^lt}return it^-1}function p(X,E,$,it){let at=it;const H=E.length;$[at]=H>>24&255,$[at+1]=H>>16&255,$[at+2]=H>>8&255,$[at+3]=H&255,at+=4,$[at]=X.charCodeAt(0)&255,$[at+1]=X.charCodeAt(1)&255,$[at+2]=X.charCodeAt(2)&255,$[at+3]=X.charCodeAt(3)&255,at+=4,$.set(E,at),at+=E.length;const lt=k($,it+4,at);$[at]=lt>>24&255,$[at+1]=lt>>16&255,$[at+2]=lt>>8&255,$[at+3]=lt&255}function r(X,E,$){let it=1,at=0;for(let H=E;H<$;++H)it=(it+(X[H]&255))%65521,at=(at+it)%65521;return at<<16|it}function T(X){if(!F.isNodeJS)return m(X);try{const E=parseInt(process.versions.node)>=8?X:Buffer.from(X),$=require("zlib").deflateSync(E,{level:9});return $ instanceof Uint8Array?$:new Uint8Array($)}catch(E){(0,F.warn)("Not compressing PNG because zlib.deflateSync is unavailable: "+E)}return m(X)}function m(X){let E=X.length;const $=65535,it=Math.ceil(E/$),at=new Uint8Array(2+E+it*5+4);let H=0;at[H++]=120,at[H++]=156;let lt=0;for(;E>$;)at[H++]=0,at[H++]=255,at[H++]=255,at[H++]=0,at[H++]=0,at.set(X.subarray(lt,lt+$),H),H+=$,lt+=$,E-=$;at[H++]=1,at[H++]=E&255,at[H++]=E>>8&255,at[H++]=~E&65535&255,at[H++]=(~E&65535)>>8&255,at.set(X.subarray(lt),H),H+=X.length-lt;const pt=r(X,0,X.length);return at[H++]=pt>>24&255,at[H++]=pt>>16&255,at[H++]=pt>>8&255,at[H++]=pt&255,at}function U(X,E,$,it){const at=X.width,H=X.height;let lt,pt,Ct;const kt=X.data;switch(E){case F.ImageKind.GRAYSCALE_1BPP:pt=0,lt=1,Ct=at+7>>3;break;case F.ImageKind.RGB_24BPP:pt=2,lt=8,Ct=at*3;break;case F.ImageKind.RGBA_32BPP:pt=6,lt=8,Ct=at*4;break;default:throw new Error("invalid format")}const S=new Uint8Array((1+Ct)*H);let i=0,n=0;for(let N=0;N<H;++N)S[i++]=0,S.set(kt.subarray(n,n+Ct),i),n+=Ct,i+=Ct;if(E===F.ImageKind.GRAYSCALE_1BPP&&it){i=0;for(let N=0;N<H;N++){i++;for(let tt=0;tt<Ct;tt++)S[i++]^=255}}const s=new Uint8Array([at>>24&255,at>>16&255,at>>8&255,at&255,H>>24&255,H>>16&255,H>>8&255,H&255,lt,pt,0,0,0]),o=T(S),c=A.length+a*3+s.length+o.length,_=new Uint8Array(c);let M=0;return _.set(A,M),M+=A.length,p("IHDR",s,_,M),M+=a+s.length,p("IDATA",o,_,M),M+=a+o.length,p("IEND",new Uint8Array(0),_,M),g(_,"image/png",$)}return function(E,$,it){const at=E.kind===void 0?F.ImageKind.GRAYSCALE_1BPP:E.kind;return U(E,at,$,it)}}();class O{constructor(){this.fontSizeScale=1,this.fontWeight=ot.fontWeight,this.fontSize=0,this.textMatrix=F.IDENTITY_MATRIX,this.fontMatrix=F.FONT_IDENTITY_MATRIX,this.leading=0,this.textRenderingMode=F.TextRenderingMode.FILL,this.textMatrixScale=1,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRise=0,this.fillColor=ot.fillColor,this.strokeColor="#000000",this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.lineJoin="",this.lineCap="",this.miterLimit=0,this.dashArray=[],this.dashPhase=0,this.dependencies=[],this.activeClipUrl=null,this.clipGroup=null,this.maskId=""}clone(){return Object.create(this)}setCurrentPoint(a,l){this.x=a,this.y=l}}function x(A){let a=[];const l=[];for(const k of A){if(k.fn==="save"){a.push({fnId:92,fn:"group",items:[]}),l.push(a),a=a.at(-1).items;continue}k.fn==="restore"?a=l.pop():a.push(k)}return a}function v(A){if(Number.isInteger(A))return A.toString();const a=A.toFixed(10);let l=a.length-1;if(a[l]!=="0")return a;do l--;while(a[l]==="0");return a.substring(0,a[l]==="."?l:l+1)}function y(A){if(A[4]===0&&A[5]===0){if(A[1]===0&&A[2]===0)return A[0]===1&&A[3]===1?"":`scale(${v(A[0])} ${v(A[3])})`;if(A[0]===A[3]&&A[1]===-A[2]){const a=Math.acos(A[0])*180/Math.PI;return`rotate(${v(a)})`}}else if(A[0]===1&&A[1]===0&&A[2]===0&&A[3]===1)return`translate(${v(A[4])} ${v(A[5])})`;return`matrix(${v(A[0])} ${v(A[1])} ${v(A[2])} ${v(A[3])} ${v(A[4])} ${v(A[5])})`}let u=0,b=0,w=0;class C{constructor(a,l,k=!1){(0,h.deprecated)("The SVG back-end is no longer maintained and *may* be removed in the future."),this.svgFactory=new h.DOMSVGFactory,this.current=new O,this.transformMatrix=F.IDENTITY_MATRIX,this.transformStack=[],this.extraStack=[],this.commonObjs=a,this.objs=l,this.pendingClip=null,this.pendingEOFill=!1,this.embedFonts=!1,this.embeddedFonts=Object.create(null),this.cssStyle=null,this.forceDataSchema=!!k,this._operatorIdMapping=[];for(const p in F.OPS)this._operatorIdMapping[F.OPS[p]]=p}getObject(a,l=null){return typeof a=="string"?a.startsWith("g_")?this.commonObjs.get(a):this.objs.get(a):l}save(){this.transformStack.push(this.transformMatrix);const a=this.current;this.extraStack.push(a),this.current=a.clone()}restore(){this.transformMatrix=this.transformStack.pop(),this.current=this.extraStack.pop(),this.pendingClip=null,this.tgrp=null}group(a){this.save(),this.executeOpTree(a),this.restore()}loadDependencies(a){const l=a.fnArray,k=a.argsArray;for(let p=0,r=l.length;p<r;p++)if(l[p]===F.OPS.dependency)for(const T of k[p]){const m=T.startsWith("g_")?this.commonObjs:this.objs,U=new Promise(X=>{m.get(T,X)});this.current.dependencies.push(U)}return Promise.all(this.current.dependencies)}transform(a,l,k,p,r,T){const m=[a,l,k,p,r,T];this.transformMatrix=F.Util.transform(this.transformMatrix,m),this.tgrp=null}getSVG(a,l){this.viewport=l;const k=this._initialize(l);return this.loadDependencies(a).then(()=>(this.transformMatrix=F.IDENTITY_MATRIX,this.executeOpTree(this.convertOpList(a)),k))}convertOpList(a){const l=this._operatorIdMapping,k=a.argsArray,p=a.fnArray,r=[];for(let T=0,m=p.length;T<m;T++){const U=p[T];r.push({fnId:U,fn:l[U],args:k[T]})}return x(r)}executeOpTree(a){for(const l of a){const k=l.fn,p=l.fnId,r=l.args;switch(p|0){case F.OPS.beginText:this.beginText();break;case F.OPS.dependency:break;case F.OPS.setLeading:this.setLeading(r);break;case F.OPS.setLeadingMoveText:this.setLeadingMoveText(r[0],r[1]);break;case F.OPS.setFont:this.setFont(r);break;case F.OPS.showText:this.showText(r[0]);break;case F.OPS.showSpacedText:this.showText(r[0]);break;case F.OPS.endText:this.endText();break;case F.OPS.moveText:this.moveText(r[0],r[1]);break;case F.OPS.setCharSpacing:this.setCharSpacing(r[0]);break;case F.OPS.setWordSpacing:this.setWordSpacing(r[0]);break;case F.OPS.setHScale:this.setHScale(r[0]);break;case F.OPS.setTextMatrix:this.setTextMatrix(r[0],r[1],r[2],r[3],r[4],r[5]);break;case F.OPS.setTextRise:this.setTextRise(r[0]);break;case F.OPS.setTextRenderingMode:this.setTextRenderingMode(r[0]);break;case F.OPS.setLineWidth:this.setLineWidth(r[0]);break;case F.OPS.setLineJoin:this.setLineJoin(r[0]);break;case F.OPS.setLineCap:this.setLineCap(r[0]);break;case F.OPS.setMiterLimit:this.setMiterLimit(r[0]);break;case F.OPS.setFillRGBColor:this.setFillRGBColor(r[0],r[1],r[2]);break;case F.OPS.setStrokeRGBColor:this.setStrokeRGBColor(r[0],r[1],r[2]);break;case F.OPS.setStrokeColorN:this.setStrokeColorN(r);break;case F.OPS.setFillColorN:this.setFillColorN(r);break;case F.OPS.shadingFill:this.shadingFill(r[0]);break;case F.OPS.setDash:this.setDash(r[0],r[1]);break;case F.OPS.setRenderingIntent:this.setRenderingIntent(r[0]);break;case F.OPS.setFlatness:this.setFlatness(r[0]);break;case F.OPS.setGState:this.setGState(r[0]);break;case F.OPS.fill:this.fill();break;case F.OPS.eoFill:this.eoFill();break;case F.OPS.stroke:this.stroke();break;case F.OPS.fillStroke:this.fillStroke();break;case F.OPS.eoFillStroke:this.eoFillStroke();break;case F.OPS.clip:this.clip("nonzero");break;case F.OPS.eoClip:this.clip("evenodd");break;case F.OPS.paintSolidColorImageMask:this.paintSolidColorImageMask();break;case F.OPS.paintImageXObject:this.paintImageXObject(r[0]);break;case F.OPS.paintInlineImageXObject:this.paintInlineImageXObject(r[0]);break;case F.OPS.paintImageMaskXObject:this.paintImageMaskXObject(r[0]);break;case F.OPS.paintFormXObjectBegin:this.paintFormXObjectBegin(r[0],r[1]);break;case F.OPS.paintFormXObjectEnd:this.paintFormXObjectEnd();break;case F.OPS.closePath:this.closePath();break;case F.OPS.closeStroke:this.closeStroke();break;case F.OPS.closeFillStroke:this.closeFillStroke();break;case F.OPS.closeEOFillStroke:this.closeEOFillStroke();break;case F.OPS.nextLine:this.nextLine();break;case F.OPS.transform:this.transform(r[0],r[1],r[2],r[3],r[4],r[5]);break;case F.OPS.constructPath:this.constructPath(r[0],r[1]);break;case F.OPS.endPath:this.endPath();break;case 92:this.group(l.items);break;default:(0,F.warn)(`Unimplemented operator ${k}`);break}}}setWordSpacing(a){this.current.wordSpacing=a}setCharSpacing(a){this.current.charSpacing=a}nextLine(){this.moveText(0,this.current.leading)}setTextMatrix(a,l,k,p,r,T){const m=this.current;m.textMatrix=m.lineMatrix=[a,l,k,p,r,T],m.textMatrixScale=Math.hypot(a,l),m.x=m.lineX=0,m.y=m.lineY=0,m.xcoords=[],m.ycoords=[],m.tspan=this.svgFactory.createElement("svg:tspan"),m.tspan.setAttributeNS(null,"font-family",m.fontFamily),m.tspan.setAttributeNS(null,"font-size",`${v(m.fontSize)}px`),m.tspan.setAttributeNS(null,"y",v(-m.y)),m.txtElement=this.svgFactory.createElement("svg:text"),m.txtElement.append(m.tspan)}beginText(){const a=this.current;a.x=a.lineX=0,a.y=a.lineY=0,a.textMatrix=F.IDENTITY_MATRIX,a.lineMatrix=F.IDENTITY_MATRIX,a.textMatrixScale=1,a.tspan=this.svgFactory.createElement("svg:tspan"),a.txtElement=this.svgFactory.createElement("svg:text"),a.txtgrp=this.svgFactory.createElement("svg:g"),a.xcoords=[],a.ycoords=[]}moveText(a,l){const k=this.current;k.x=k.lineX+=a,k.y=k.lineY+=l,k.xcoords=[],k.ycoords=[],k.tspan=this.svgFactory.createElement("svg:tspan"),k.tspan.setAttributeNS(null,"font-family",k.fontFamily),k.tspan.setAttributeNS(null,"font-size",`${v(k.fontSize)}px`),k.tspan.setAttributeNS(null,"y",v(-k.y))}showText(a){const l=this.current,k=l.font,p=l.fontSize;if(p===0)return;const r=l.fontSizeScale,T=l.charSpacing,m=l.wordSpacing,U=l.fontDirection,X=l.textHScale*U,E=k.vertical,$=E?1:-1,it=k.defaultVMetrics,at=p*l.fontMatrix[0];let H=0;for(const Ct of a){if(Ct===null){H+=U*m;continue}else if(typeof Ct=="number"){H+=$*Ct*p/1e3;continue}const kt=(Ct.isSpace?m:0)+T,S=Ct.fontChar;let i,n,s=Ct.width;if(E){let c;const _=Ct.vmetric||it;c=Ct.vmetric?_[1]:s*.5,c=-c*at;const M=_[2]*at;s=_?-_[0]:s,i=c/r,n=(H+M)/r}else i=H/r,n=0;(Ct.isInFont||k.missingFile)&&(l.xcoords.push(l.x+i),E&&l.ycoords.push(-l.y+n),l.tspan.textContent+=S),H+=E?s*at-kt*U:s*at+kt*U}l.tspan.setAttributeNS(null,"x",l.xcoords.map(v).join(" ")),E?l.tspan.setAttributeNS(null,"y",l.ycoords.map(v).join(" ")):l.tspan.setAttributeNS(null,"y",v(-l.y)),E?l.y-=H:l.x+=H*X,l.tspan.setAttributeNS(null,"font-family",l.fontFamily),l.tspan.setAttributeNS(null,"font-size",`${v(l.fontSize)}px`),l.fontStyle!==ot.fontStyle&&l.tspan.setAttributeNS(null,"font-style",l.fontStyle),l.fontWeight!==ot.fontWeight&&l.tspan.setAttributeNS(null,"font-weight",l.fontWeight);const lt=l.textRenderingMode&F.TextRenderingMode.FILL_STROKE_MASK;if(lt===F.TextRenderingMode.FILL||lt===F.TextRenderingMode.FILL_STROKE?(l.fillColor!==ot.fillColor&&l.tspan.setAttributeNS(null,"fill",l.fillColor),l.fillAlpha<1&&l.tspan.setAttributeNS(null,"fill-opacity",l.fillAlpha)):l.textRenderingMode===F.TextRenderingMode.ADD_TO_PATH?l.tspan.setAttributeNS(null,"fill","transparent"):l.tspan.setAttributeNS(null,"fill","none"),lt===F.TextRenderingMode.STROKE||lt===F.TextRenderingMode.FILL_STROKE){const Ct=1/(l.textMatrixScale||1);this._setStrokeAttributes(l.tspan,Ct)}let pt=l.textMatrix;l.textRise!==0&&(pt=pt.slice(),pt[5]+=l.textRise),l.txtElement.setAttributeNS(null,"transform",`${y(pt)} scale(${v(X)}, -1)`),l.txtElement.setAttributeNS(G,"xml:space","preserve"),l.txtElement.append(l.tspan),l.txtgrp.append(l.txtElement),this._ensureTransformGroup().append(l.txtElement)}setLeadingMoveText(a,l){this.setLeading(-l),this.moveText(a,l)}addFontStyle(a){if(!a.data)throw new Error('addFontStyle: No font data available, ensure that the "fontExtraProperties" API parameter is set.');this.cssStyle||(this.cssStyle=this.svgFactory.createElement("svg:style"),this.cssStyle.setAttributeNS(null,"type","text/css"),this.defs.append(this.cssStyle));const l=g(a.data,a.mimetype,this.forceDataSchema);this.cssStyle.textContent+=`@font-face { font-family: "${a.loadedName}"; src: url(${l}); }
`}setFont(a){const l=this.current,k=this.commonObjs.get(a[0]);let p=a[1];l.font=k,this.embedFonts&&!k.missingFile&&!this.embeddedFonts[k.loadedName]&&(this.addFontStyle(k),this.embeddedFonts[k.loadedName]=k),l.fontMatrix=k.fontMatrix||F.FONT_IDENTITY_MATRIX;let r="normal";k.black?r="900":k.bold&&(r="bold");const T=k.italic?"italic":"normal";p<0?(p=-p,l.fontDirection=-1):l.fontDirection=1,l.fontSize=p,l.fontFamily=k.loadedName,l.fontWeight=r,l.fontStyle=T,l.tspan=this.svgFactory.createElement("svg:tspan"),l.tspan.setAttributeNS(null,"y",v(-l.y)),l.xcoords=[],l.ycoords=[]}endText(){var l;const a=this.current;a.textRenderingMode&F.TextRenderingMode.ADD_TO_PATH_FLAG&&((l=a.txtElement)==null?void 0:l.hasChildNodes())&&(a.element=a.txtElement,this.clip("nonzero"),this.endPath())}setLineWidth(a){a>0&&(this.current.lineWidth=a)}setLineCap(a){this.current.lineCap=B[a]}setLineJoin(a){this.current.lineJoin=P[a]}setMiterLimit(a){this.current.miterLimit=a}setStrokeAlpha(a){this.current.strokeAlpha=a}setStrokeRGBColor(a,l,k){this.current.strokeColor=F.Util.makeHexColor(a,l,k)}setFillAlpha(a){this.current.fillAlpha=a}setFillRGBColor(a,l,k){this.current.fillColor=F.Util.makeHexColor(a,l,k),this.current.tspan=this.svgFactory.createElement("svg:tspan"),this.current.xcoords=[],this.current.ycoords=[]}setStrokeColorN(a){this.current.strokeColor=this._makeColorN_Pattern(a)}setFillColorN(a){this.current.fillColor=this._makeColorN_Pattern(a)}shadingFill(a){const{width:l,height:k}=this.viewport,p=F.Util.inverseTransform(this.transformMatrix),[r,T,m,U]=F.Util.getAxialAlignedBoundingBox([0,0,l,k],p),X=this.svgFactory.createElement("svg:rect");X.setAttributeNS(null,"x",r),X.setAttributeNS(null,"y",T),X.setAttributeNS(null,"width",m-r),X.setAttributeNS(null,"height",U-T),X.setAttributeNS(null,"fill",this._makeShadingPattern(a)),this.current.fillAlpha<1&&X.setAttributeNS(null,"fill-opacity",this.current.fillAlpha),this._ensureTransformGroup().append(X)}_makeColorN_Pattern(a){return a[0]==="TilingPattern"?this._makeTilingPattern(a):this._makeShadingPattern(a)}_makeTilingPattern(a){const l=a[1],k=a[2],p=a[3]||F.IDENTITY_MATRIX,[r,T,m,U]=a[4],X=a[5],E=a[6],$=a[7],it=`shading${w++}`,[at,H,lt,pt]=F.Util.normalizeRect([...F.Util.applyTransform([r,T],p),...F.Util.applyTransform([m,U],p)]),[Ct,kt]=F.Util.singularValueDecompose2dScale(p),S=X*Ct,i=E*kt,n=this.svgFactory.createElement("svg:pattern");n.setAttributeNS(null,"id",it),n.setAttributeNS(null,"patternUnits","userSpaceOnUse"),n.setAttributeNS(null,"width",S),n.setAttributeNS(null,"height",i),n.setAttributeNS(null,"x",`${at}`),n.setAttributeNS(null,"y",`${H}`);const s=this.svg,o=this.transformMatrix,c=this.current.fillColor,_=this.current.strokeColor,M=this.svgFactory.create(lt-at,pt-H);if(this.svg=M,this.transformMatrix=p,$===2){const N=F.Util.makeHexColor(...l);this.current.fillColor=N,this.current.strokeColor=N}return this.executeOpTree(this.convertOpList(k)),this.svg=s,this.transformMatrix=o,this.current.fillColor=c,this.current.strokeColor=_,n.append(M.childNodes[0]),this.defs.append(n),`url(#${it})`}_makeShadingPattern(a){switch(typeof a=="string"&&(a=this.objs.get(a)),a[0]){case"RadialAxial":const l=`shading${w++}`,k=a[3];let p;switch(a[1]){case"axial":const r=a[4],T=a[5];p=this.svgFactory.createElement("svg:linearGradient"),p.setAttributeNS(null,"id",l),p.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),p.setAttributeNS(null,"x1",r[0]),p.setAttributeNS(null,"y1",r[1]),p.setAttributeNS(null,"x2",T[0]),p.setAttributeNS(null,"y2",T[1]);break;case"radial":const m=a[4],U=a[5],X=a[6],E=a[7];p=this.svgFactory.createElement("svg:radialGradient"),p.setAttributeNS(null,"id",l),p.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),p.setAttributeNS(null,"cx",U[0]),p.setAttributeNS(null,"cy",U[1]),p.setAttributeNS(null,"r",E),p.setAttributeNS(null,"fx",m[0]),p.setAttributeNS(null,"fy",m[1]),p.setAttributeNS(null,"fr",X);break;default:throw new Error(`Unknown RadialAxial type: ${a[1]}`)}for(const r of k){const T=this.svgFactory.createElement("svg:stop");T.setAttributeNS(null,"offset",r[0]),T.setAttributeNS(null,"stop-color",r[1]),p.append(T)}return this.defs.append(p),`url(#${l})`;case"Mesh":return(0,F.warn)("Unimplemented pattern Mesh"),null;case"Dummy":return"hotpink";default:throw new Error(`Unknown IR type: ${a[0]}`)}}setDash(a,l){this.current.dashArray=a,this.current.dashPhase=l}constructPath(a,l){const k=this.current;let p=k.x,r=k.y,T=[],m=0;for(const U of a)switch(U|0){case F.OPS.rectangle:p=l[m++],r=l[m++];const X=l[m++],E=l[m++],$=p+X,it=r+E;T.push("M",v(p),v(r),"L",v($),v(r),"L",v($),v(it),"L",v(p),v(it),"Z");break;case F.OPS.moveTo:p=l[m++],r=l[m++],T.push("M",v(p),v(r));break;case F.OPS.lineTo:p=l[m++],r=l[m++],T.push("L",v(p),v(r));break;case F.OPS.curveTo:p=l[m+4],r=l[m+5],T.push("C",v(l[m]),v(l[m+1]),v(l[m+2]),v(l[m+3]),v(p),v(r)),m+=6;break;case F.OPS.curveTo2:T.push("C",v(p),v(r),v(l[m]),v(l[m+1]),v(l[m+2]),v(l[m+3])),p=l[m+2],r=l[m+3],m+=4;break;case F.OPS.curveTo3:p=l[m+2],r=l[m+3],T.push("C",v(l[m]),v(l[m+1]),v(p),v(r),v(p),v(r)),m+=4;break;case F.OPS.closePath:T.push("Z");break}T=T.join(" "),k.path&&a.length>0&&a[0]!==F.OPS.rectangle&&a[0]!==F.OPS.moveTo?T=k.path.getAttributeNS(null,"d")+T:(k.path=this.svgFactory.createElement("svg:path"),this._ensureTransformGroup().append(k.path)),k.path.setAttributeNS(null,"d",T),k.path.setAttributeNS(null,"fill","none"),k.element=k.path,k.setCurrentPoint(p,r)}endPath(){const a=this.current;if(a.path=null,!this.pendingClip)return;if(!a.element){this.pendingClip=null;return}const l=`clippath${u++}`,k=this.svgFactory.createElement("svg:clipPath");k.setAttributeNS(null,"id",l),k.setAttributeNS(null,"transform",y(this.transformMatrix));const p=a.element.cloneNode(!0);if(this.pendingClip==="evenodd"?p.setAttributeNS(null,"clip-rule","evenodd"):p.setAttributeNS(null,"clip-rule","nonzero"),this.pendingClip=null,k.append(p),this.defs.append(k),a.activeClipUrl){a.clipGroup=null;for(const r of this.extraStack)r.clipGroup=null;k.setAttributeNS(null,"clip-path",a.activeClipUrl)}a.activeClipUrl=`url(#${l})`,this.tgrp=null}clip(a){this.pendingClip=a}closePath(){const a=this.current;if(a.path){const l=`${a.path.getAttributeNS(null,"d")}Z`;a.path.setAttributeNS(null,"d",l)}}setLeading(a){this.current.leading=-a}setTextRise(a){this.current.textRise=a}setTextRenderingMode(a){this.current.textRenderingMode=a}setHScale(a){this.current.textHScale=a/100}setRenderingIntent(a){}setFlatness(a){}setGState(a){for(const[l,k]of a)switch(l){case"LW":this.setLineWidth(k);break;case"LC":this.setLineCap(k);break;case"LJ":this.setLineJoin(k);break;case"ML":this.setMiterLimit(k);break;case"D":this.setDash(k[0],k[1]);break;case"RI":this.setRenderingIntent(k);break;case"FL":this.setFlatness(k);break;case"Font":this.setFont(k);break;case"CA":this.setStrokeAlpha(k);break;case"ca":this.setFillAlpha(k);break;default:(0,F.warn)(`Unimplemented graphic state operator ${l}`);break}}fill(){const a=this.current;a.element&&(a.element.setAttributeNS(null,"fill",a.fillColor),a.element.setAttributeNS(null,"fill-opacity",a.fillAlpha),this.endPath())}stroke(){const a=this.current;a.element&&(this._setStrokeAttributes(a.element),a.element.setAttributeNS(null,"fill","none"),this.endPath())}_setStrokeAttributes(a,l=1){const k=this.current;let p=k.dashArray;l!==1&&p.length>0&&(p=p.map(function(r){return l*r})),a.setAttributeNS(null,"stroke",k.strokeColor),a.setAttributeNS(null,"stroke-opacity",k.strokeAlpha),a.setAttributeNS(null,"stroke-miterlimit",v(k.miterLimit)),a.setAttributeNS(null,"stroke-linecap",k.lineCap),a.setAttributeNS(null,"stroke-linejoin",k.lineJoin),a.setAttributeNS(null,"stroke-width",v(l*k.lineWidth)+"px"),a.setAttributeNS(null,"stroke-dasharray",p.map(v).join(" ")),a.setAttributeNS(null,"stroke-dashoffset",v(l*k.dashPhase)+"px")}eoFill(){var a;(a=this.current.element)==null||a.setAttributeNS(null,"fill-rule","evenodd"),this.fill()}fillStroke(){this.stroke(),this.fill()}eoFillStroke(){var a;(a=this.current.element)==null||a.setAttributeNS(null,"fill-rule","evenodd"),this.fillStroke()}closeStroke(){this.closePath(),this.stroke()}closeFillStroke(){this.closePath(),this.fillStroke()}closeEOFillStroke(){this.closePath(),this.eoFillStroke()}paintSolidColorImageMask(){const a=this.svgFactory.createElement("svg:rect");a.setAttributeNS(null,"x","0"),a.setAttributeNS(null,"y","0"),a.setAttributeNS(null,"width","1px"),a.setAttributeNS(null,"height","1px"),a.setAttributeNS(null,"fill",this.current.fillColor),this._ensureTransformGroup().append(a)}paintImageXObject(a){const l=this.getObject(a);if(!l){(0,F.warn)(`Dependent image with object ID ${a} is not ready yet`);return}this.paintInlineImageXObject(l)}paintInlineImageXObject(a,l){const k=a.width,p=a.height,r=L(a,this.forceDataSchema,!!l),T=this.svgFactory.createElement("svg:rect");T.setAttributeNS(null,"x","0"),T.setAttributeNS(null,"y","0"),T.setAttributeNS(null,"width",v(k)),T.setAttributeNS(null,"height",v(p)),this.current.element=T,this.clip("nonzero");const m=this.svgFactory.createElement("svg:image");m.setAttributeNS(ut,"xlink:href",r),m.setAttributeNS(null,"x","0"),m.setAttributeNS(null,"y",v(-p)),m.setAttributeNS(null,"width",v(k)+"px"),m.setAttributeNS(null,"height",v(p)+"px"),m.setAttributeNS(null,"transform",`scale(${v(1/k)} ${v(-1/p)})`),l?l.append(m):this._ensureTransformGroup().append(m)}paintImageMaskXObject(a){const l=this.getObject(a.data,a);if(l.bitmap){(0,F.warn)("paintImageMaskXObject: ImageBitmap support is not implemented, ensure that the `isOffscreenCanvasSupported` API parameter is disabled.");return}const k=this.current,p=l.width,r=l.height,T=k.fillColor;k.maskId=`mask${b++}`;const m=this.svgFactory.createElement("svg:mask");m.setAttributeNS(null,"id",k.maskId);const U=this.svgFactory.createElement("svg:rect");U.setAttributeNS(null,"x","0"),U.setAttributeNS(null,"y","0"),U.setAttributeNS(null,"width",v(p)),U.setAttributeNS(null,"height",v(r)),U.setAttributeNS(null,"fill",T),U.setAttributeNS(null,"mask",`url(#${k.maskId})`),this.defs.append(m),this._ensureTransformGroup().append(U),this.paintInlineImageXObject(l,m)}paintFormXObjectBegin(a,l){if(Array.isArray(a)&&a.length===6&&this.transform(a[0],a[1],a[2],a[3],a[4],a[5]),l){const k=l[2]-l[0],p=l[3]-l[1],r=this.svgFactory.createElement("svg:rect");r.setAttributeNS(null,"x",l[0]),r.setAttributeNS(null,"y",l[1]),r.setAttributeNS(null,"width",v(k)),r.setAttributeNS(null,"height",v(p)),this.current.element=r,this.clip("nonzero"),this.endPath()}}paintFormXObjectEnd(){}_initialize(a){const l=this.svgFactory.create(a.width,a.height),k=this.svgFactory.createElement("svg:defs");l.append(k),this.defs=k;const p=this.svgFactory.createElement("svg:g");return p.setAttributeNS(null,"transform",y(a.transform)),l.append(p),this.svg=p,l}_ensureClipGroup(){if(!this.current.clipGroup){const a=this.svgFactory.createElement("svg:g");a.setAttributeNS(null,"clip-path",this.current.activeClipUrl),this.svg.append(a),this.current.clipGroup=a}return this.current.clipGroup}_ensureTransformGroup(){return this.tgrp||(this.tgrp=this.svgFactory.createElement("svg:g"),this.tgrp.setAttributeNS(null,"transform",y(this.transformMatrix)),this.current.activeClipUrl?this._ensureClipGroup().append(this.tgrp):this.svg.append(this.tgrp)),this.tgrp}}d.SVGGraphics=C},(_t,d)=>{Object.defineProperty(d,"__esModule",{value:!0}),d.XfaText=void 0;class st{static textContent(F){const ot=[],G={items:ot,styles:Object.create(null)};function ut(B){var L;if(!B)return;let P=null;const g=B.name;if(g==="#text")P=B.value;else if(st.shouldBuildText(g))(L=B==null?void 0:B.attributes)!=null&&L.textContent?P=B.attributes.textContent:B.value&&(P=B.value);else return;if(P!==null&&ot.push({str:P}),!!B.children)for(const O of B.children)ut(O)}return ut(F),G}static shouldBuildText(F){return!(F==="textarea"||F==="input"||F==="option"||F==="select")}}d.XfaText=st},(_t,d,st)=>{Object.defineProperty(d,"__esModule",{value:!0}),d.TextLayerRenderTask=void 0,d.renderTextLayer=y,d.updateTextLayer=u;var h=st(1),F=st(6);const ot=1e5,G=30,ut=.8,B=new Map;function P(b,w){let C;if(w&&h.FeatureTest.isOffscreenCanvasSupported)C=new OffscreenCanvas(b,b).getContext("2d",{alpha:!1});else{const A=document.createElement("canvas");A.width=A.height=b,C=A.getContext("2d",{alpha:!1})}return C}function g(b,w){const C=B.get(b);if(C)return C;const A=P(G,w);A.font=`${G}px ${b}`;const a=A.measureText("");let l=a.fontBoundingBoxAscent,k=Math.abs(a.fontBoundingBoxDescent);if(l){const r=l/(l+k);return B.set(b,r),A.canvas.width=A.canvas.height=0,r}A.strokeStyle="red",A.clearRect(0,0,G,G),A.strokeText("g",0,0);let p=A.getImageData(0,0,G,G).data;k=0;for(let r=p.length-1-3;r>=0;r-=4)if(p[r]>0){k=Math.ceil(r/4/G);break}A.clearRect(0,0,G,G),A.strokeText("A",0,G),p=A.getImageData(0,0,G,G).data,l=0;for(let r=0,T=p.length;r<T;r+=4)if(p[r]>0){l=G-Math.floor(r/4/G);break}if(A.canvas.width=A.canvas.height=0,l){const r=l/(l+k);return B.set(b,r),r}return B.set(b,ut),ut}function L(b,w,C){const A=document.createElement("span"),a={angle:0,canvasWidth:0,hasText:w.str!=="",hasEOL:w.hasEOL,fontSize:0};b._textDivs.push(A);const l=h.Util.transform(b._transform,w.transform);let k=Math.atan2(l[1],l[0]);const p=C[w.fontName];p.vertical&&(k+=Math.PI/2);const r=Math.hypot(l[2],l[3]),T=r*g(p.fontFamily,b._isOffscreenCanvasSupported);let m,U;k===0?(m=l[4],U=l[5]-T):(m=l[4]+T*Math.sin(k),U=l[5]-T*Math.cos(k));const X="calc(var(--scale-factor)*",E=A.style;b._container===b._rootContainer?(E.left=`${(100*m/b._pageWidth).toFixed(2)}%`,E.top=`${(100*U/b._pageHeight).toFixed(2)}%`):(E.left=`${X}${m.toFixed(2)}px)`,E.top=`${X}${U.toFixed(2)}px)`),E.fontSize=`${X}${r.toFixed(2)}px)`,E.fontFamily=p.fontFamily,a.fontSize=r,A.setAttribute("role","presentation"),A.textContent=w.str,A.dir=w.dir,b._fontInspectorEnabled&&(A.dataset.fontName=w.fontName),k!==0&&(a.angle=k*(180/Math.PI));let $=!1;if(w.str.length>1)$=!0;else if(w.str!==" "&&w.transform[0]!==w.transform[3]){const it=Math.abs(w.transform[0]),at=Math.abs(w.transform[3]);it!==at&&Math.max(it,at)/Math.min(it,at)>1.5&&($=!0)}$&&(a.canvasWidth=p.vertical?w.height:w.width),b._textDivProperties.set(A,a),b._isReadableStream&&b._layoutText(A)}function O(b){const{div:w,scale:C,properties:A,ctx:a,prevFontSize:l,prevFontFamily:k}=b,{style:p}=w;let r="";if(A.canvasWidth!==0&&A.hasText){const{fontFamily:T}=p,{canvasWidth:m,fontSize:U}=A;(l!==U||k!==T)&&(a.font=`${U*C}px ${T}`,b.prevFontSize=U,b.prevFontFamily=T);const{width:X}=a.measureText(w.textContent);X>0&&(r=`scaleX(${m*C/X})`)}A.angle!==0&&(r=`rotate(${A.angle}deg) ${r}`),r.length>0&&(p.transform=r)}function x(b){if(b._canceled)return;const w=b._textDivs,C=b._capability;if(w.length>ot){C.resolve();return}if(!b._isReadableStream)for(const a of w)b._layoutText(a);C.resolve()}class v{constructor({textContentSource:w,container:C,viewport:A,textDivs:a,textDivProperties:l,textContentItemsStr:k,isOffscreenCanvasSupported:p}){var X;this._textContentSource=w,this._isReadableStream=w instanceof ReadableStream,this._container=this._rootContainer=C,this._textDivs=a||[],this._textContentItemsStr=k||[],this._isOffscreenCanvasSupported=p,this._fontInspectorEnabled=!!((X=globalThis.FontInspector)!=null&&X.enabled),this._reader=null,this._textDivProperties=l||new WeakMap,this._canceled=!1,this._capability=new h.PromiseCapability,this._layoutTextParams={prevFontSize:null,prevFontFamily:null,div:null,scale:A.scale*(globalThis.devicePixelRatio||1),properties:null,ctx:P(0,p)};const{pageWidth:r,pageHeight:T,pageX:m,pageY:U}=A.rawDims;this._transform=[1,0,0,-1,-m,U+T],this._pageWidth=r,this._pageHeight=T,(0,F.setLayerDimensions)(C,A),this._capability.promise.finally(()=>{this._layoutTextParams=null}).catch(()=>{})}get promise(){return this._capability.promise}cancel(){this._canceled=!0,this._reader&&(this._reader.cancel(new h.AbortException("TextLayer task cancelled.")).catch(()=>{}),this._reader=null),this._capability.reject(new h.AbortException("TextLayer task cancelled."))}_processItems(w,C){for(const A of w){if(A.str===void 0){if(A.type==="beginMarkedContentProps"||A.type==="beginMarkedContent"){const a=this._container;this._container=document.createElement("span"),this._container.classList.add("markedContent"),A.id!==null&&this._container.setAttribute("id",`${A.id}`),a.append(this._container)}else A.type==="endMarkedContent"&&(this._container=this._container.parentNode);continue}this._textContentItemsStr.push(A.str),L(this,A,C)}}_layoutText(w){const C=this._layoutTextParams.properties=this._textDivProperties.get(w);if(this._layoutTextParams.div=w,O(this._layoutTextParams),C.hasText&&this._container.append(w),C.hasEOL){const A=document.createElement("br");A.setAttribute("role","presentation"),this._container.append(A)}}_render(){const w=new h.PromiseCapability;let C=Object.create(null);if(this._isReadableStream){const A=()=>{this._reader.read().then(({value:a,done:l})=>{if(l){w.resolve();return}Object.assign(C,a.styles),this._processItems(a.items,C),A()},w.reject)};this._reader=this._textContentSource.getReader(),A()}else if(this._textContentSource){const{items:A,styles:a}=this._textContentSource;this._processItems(A,a),w.resolve()}else throw new Error('No "textContentSource" parameter specified.');w.promise.then(()=>{C=null,x(this)},this._capability.reject)}}d.TextLayerRenderTask=v;function y(b){!b.textContentSource&&(b.textContent||b.textContentStream)&&((0,F.deprecated)("The TextLayerRender `textContent`/`textContentStream` parameters will be removed in the future, please use `textContentSource` instead."),b.textContentSource=b.textContent||b.textContentStream);const{container:w,viewport:C}=b,A=getComputedStyle(w),a=A.getPropertyValue("visibility"),l=parseFloat(A.getPropertyValue("--scale-factor"));a==="visible"&&(!l||Math.abs(l-C.scale)>1e-5)&&console.error("The `--scale-factor` CSS-variable must be set, to the same value as `viewport.scale`, either on the `container`-element itself or higher up in the DOM.");const k=new v(b);return k._render(),k}function u({container:b,viewport:w,textDivs:C,textDivProperties:A,isOffscreenCanvasSupported:a,mustRotate:l=!0,mustRescale:k=!0}){if(l&&(0,F.setLayerDimensions)(b,{rotation:w.rotation}),k){const p=P(0,a),r=w.scale*(globalThis.devicePixelRatio||1),T={prevFontSize:null,prevFontFamily:null,div:null,scale:r,properties:null,ctx:p};for(const m of C)T.properties=A.get(m),T.div=m,O(T)}}},(_t,d,st)=>{var g,L,O,x,v,y,u,b,w,C,A,ei,l,ke,p,ii,T,si;Object.defineProperty(d,"__esModule",{value:!0}),d.AnnotationEditorLayer=void 0;var h=st(1),F=st(4),ot=st(28),G=st(33),ut=st(6),B=st(34);const U=class{constructor({uiManager:E,pageIndex:$,div:it,accessibilityManager:at,annotationLayer:H,viewport:lt,l10n:pt}){I(this,A);I(this,l);I(this,p);I(this,T);I(this,g,void 0);I(this,L,!1);I(this,O,null);I(this,x,this.pointerup.bind(this));I(this,v,this.pointerdown.bind(this));I(this,y,new Map);I(this,u,!1);I(this,b,!1);I(this,w,!1);I(this,C,void 0);const Ct=[ot.FreeTextEditor,G.InkEditor,B.StampEditor];if(!U._initialized){U._initialized=!0;for(const kt of Ct)kt.initialize(pt)}E.registerEditorTypes(Ct),Z(this,C,E),this.pageIndex=$,this.div=it,Z(this,g,at),Z(this,O,H),this.viewport=lt,t(this,C).addLayer(this)}get isEmpty(){return t(this,y).size===0}updateToolbar(E){t(this,C).updateToolbar(E)}updateMode(E=t(this,C).getMode()){W(this,T,si).call(this),E===h.AnnotationEditorType.INK?(this.addInkEditorIfNeeded(!1),this.disableClick()):this.enableClick(),E!==h.AnnotationEditorType.NONE&&(this.div.classList.toggle("freeTextEditing",E===h.AnnotationEditorType.FREETEXT),this.div.classList.toggle("inkEditing",E===h.AnnotationEditorType.INK),this.div.classList.toggle("stampEditing",E===h.AnnotationEditorType.STAMP),this.div.hidden=!1)}addInkEditorIfNeeded(E){if(!E&&t(this,C).getMode()!==h.AnnotationEditorType.INK)return;if(!E){for(const it of t(this,y).values())if(it.isEmpty()){it.setInBackground();return}}W(this,l,ke).call(this,{offsetX:0,offsetY:0},!1).setInBackground()}setEditingState(E){t(this,C).setEditingState(E)}addCommands(E){t(this,C).addCommands(E)}enable(){this.div.style.pointerEvents="auto";const E=new Set;for(const it of t(this,y).values())it.enableEditing(),it.annotationElementId&&E.add(it.annotationElementId);if(!t(this,O))return;const $=t(this,O).getEditableAnnotations();for(const it of $){if(it.hide(),t(this,C).isDeletedAnnotationElement(it.data.id)||E.has(it.data.id))continue;const at=this.deserialize(it);!at||(this.addOrRebuild(at),at.enableEditing())}}disable(){var $;Z(this,w,!0),this.div.style.pointerEvents="none";const E=new Set;for(const it of t(this,y).values()){if(it.disableEditing(),!it.annotationElementId||it.serialize()!==null){E.add(it.annotationElementId);continue}($=this.getEditableAnnotation(it.annotationElementId))==null||$.show(),it.remove()}if(t(this,O)){const it=t(this,O).getEditableAnnotations();for(const at of it){const{id:H}=at.data;E.has(H)||t(this,C).isDeletedAnnotationElement(H)||at.show()}}W(this,T,si).call(this),this.isEmpty&&(this.div.hidden=!0),Z(this,w,!1)}getEditableAnnotation(E){var $;return(($=t(this,O))==null?void 0:$.getEditableAnnotation(E))||null}setActiveEditor(E){t(this,C).getActive()!==E&&t(this,C).setActiveEditor(E)}enableClick(){this.div.addEventListener("pointerdown",t(this,v)),this.div.addEventListener("pointerup",t(this,x))}disableClick(){this.div.removeEventListener("pointerdown",t(this,v)),this.div.removeEventListener("pointerup",t(this,x))}attach(E){t(this,y).set(E.id,E);const{annotationElementId:$}=E;$&&t(this,C).isDeletedAnnotationElement($)&&t(this,C).removeDeletedAnnotationElement(E)}detach(E){var $;t(this,y).delete(E.id),($=t(this,g))==null||$.removePointerInTextLayer(E.contentDiv),!t(this,w)&&E.annotationElementId&&t(this,C).addDeletedAnnotationElement(E)}remove(E){this.detach(E),t(this,C).removeEditor(E),E.div.contains(document.activeElement)&&setTimeout(()=>{t(this,C).focusMainContainer()},0),E.div.remove(),E.isAttachedToDOM=!1,t(this,b)||this.addInkEditorIfNeeded(!1)}changeParent(E){var $;E.parent!==this&&(E.annotationElementId&&(t(this,C).addDeletedAnnotationElement(E.annotationElementId),F.AnnotationEditor.deleteAnnotationElement(E),E.annotationElementId=null),this.attach(E),($=E.parent)==null||$.detach(E),E.setParent(this),E.div&&E.isAttachedToDOM&&(E.div.remove(),this.div.append(E.div)))}add(E){if(this.changeParent(E),t(this,C).addEditor(E),this.attach(E),!E.isAttachedToDOM){const $=E.render();this.div.append($),E.isAttachedToDOM=!0}E.fixAndSetPosition(),E.onceAdded(),t(this,C).addToAnnotationStorage(E)}moveEditorInDOM(E){var it;if(!E.isAttachedToDOM)return;const{activeElement:$}=document;E.div.contains($)&&(E._focusEventsAllowed=!1,setTimeout(()=>{E.div.contains(document.activeElement)?E._focusEventsAllowed=!0:(E.div.addEventListener("focusin",()=>{E._focusEventsAllowed=!0},{once:!0}),$.focus())},0)),E._structTreeParentId=(it=t(this,g))==null?void 0:it.moveElementInDOM(this.div,E.div,E.contentDiv,!0)}addOrRebuild(E){E.needsToBeRebuilt()?E.rebuild():this.add(E)}addUndoableEditor(E){const $=()=>E._uiManager.rebuild(E),it=()=>{E.remove()};this.addCommands({cmd:$,undo:it,mustExec:!1})}getNextId(){return t(this,C).getId()}pasteEditor(E,$){t(this,C).updateToolbar(E),t(this,C).updateMode(E);const{offsetX:it,offsetY:at}=W(this,p,ii).call(this),H=this.getNextId(),lt=W(this,A,ei).call(this,{parent:this,id:H,x:it,y:at,uiManager:t(this,C),isCentered:!0,...$});lt&&this.add(lt)}deserialize(E){var $;switch(($=E.annotationType)!=null?$:E.annotationEditorType){case h.AnnotationEditorType.FREETEXT:return ot.FreeTextEditor.deserialize(E,this,t(this,C));case h.AnnotationEditorType.INK:return G.InkEditor.deserialize(E,this,t(this,C));case h.AnnotationEditorType.STAMP:return B.StampEditor.deserialize(E,this,t(this,C))}return null}addNewEditor(){W(this,l,ke).call(this,W(this,p,ii).call(this),!0)}setSelected(E){t(this,C).setSelected(E)}toggleSelected(E){t(this,C).toggleSelected(E)}isSelected(E){return t(this,C).isSelected(E)}unselect(E){t(this,C).unselect(E)}pointerup(E){const{isMac:$}=h.FeatureTest.platform;if(!(E.button!==0||E.ctrlKey&&$)&&E.target===this.div&&!!t(this,u)){if(Z(this,u,!1),!t(this,L)){Z(this,L,!0);return}if(t(this,C).getMode()===h.AnnotationEditorType.STAMP){t(this,C).unselectAll();return}W(this,l,ke).call(this,E,!1)}}pointerdown(E){if(t(this,u)){Z(this,u,!1);return}const{isMac:$}=h.FeatureTest.platform;if(E.button!==0||E.ctrlKey&&$||E.target!==this.div)return;Z(this,u,!0);const it=t(this,C).getActive();Z(this,L,!it||it.isEmpty())}findNewParent(E,$,it){const at=t(this,C).findParent($,it);return at===null||at===this?!1:(at.changeParent(E),!0)}destroy(){var E,$;((E=t(this,C).getActive())==null?void 0:E.parent)===this&&(t(this,C).commitOrRemove(),t(this,C).setActiveEditor(null));for(const it of t(this,y).values())($=t(this,g))==null||$.removePointerInTextLayer(it.contentDiv),it.setParent(null),it.isAttachedToDOM=!1,it.div.remove();this.div=null,t(this,y).clear(),t(this,C).removeLayer(this)}render({viewport:E}){this.viewport=E,(0,ut.setLayerDimensions)(this.div,E);for(const $ of t(this,C).getEditors(this.pageIndex))this.add($);this.updateMode()}update({viewport:E}){t(this,C).commitOrRemove(),this.viewport=E,(0,ut.setLayerDimensions)(this.div,{rotation:E.rotation}),this.updateMode()}get pageDimensions(){const{pageWidth:E,pageHeight:$}=this.viewport.rawDims;return[E,$]}};let P=U;g=new WeakMap,L=new WeakMap,O=new WeakMap,x=new WeakMap,v=new WeakMap,y=new WeakMap,u=new WeakMap,b=new WeakMap,w=new WeakMap,C=new WeakMap,A=new WeakSet,ei=function(E){switch(t(this,C).getMode()){case h.AnnotationEditorType.FREETEXT:return new ot.FreeTextEditor(E);case h.AnnotationEditorType.INK:return new G.InkEditor(E);case h.AnnotationEditorType.STAMP:return new B.StampEditor(E)}return null},l=new WeakSet,ke=function(E,$){const it=this.getNextId(),at=W(this,A,ei).call(this,{parent:this,id:it,x:E.offsetX,y:E.offsetY,uiManager:t(this,C),isCentered:$});return at&&this.add(at),at},p=new WeakSet,ii=function(){const{x:E,y:$,width:it,height:at}=this.div.getBoundingClientRect(),H=Math.max(0,E),lt=Math.max(0,$),pt=Math.min(window.innerWidth,E+it),Ct=Math.min(window.innerHeight,$+at),kt=(H+pt)/2-E,S=(lt+Ct)/2-$,[i,n]=this.viewport.rotation%180===0?[kt,S]:[S,kt];return{offsetX:i,offsetY:n}},T=new WeakSet,si=function(){Z(this,b,!0);for(const E of t(this,y).values())E.isEmpty()&&E.remove();Z(this,b,!1)},ee(P,"_initialized",!1),d.AnnotationEditorLayer=P},(_t,d,st)=>{var B,P,g,L,O,x,v,y,u,b,Fi,C,Mi,a,Ri,k,ye,r,ni,m,Di,X,ri;Object.defineProperty(d,"__esModule",{value:!0}),d.FreeTextEditor=void 0;var h=st(1),F=st(5),ot=st(4),G=st(29);const $=class extends ot.AnnotationEditor{constructor(H){super({...H,name:"freeTextEditor"});I(this,b);I(this,C);I(this,a);I(this,k);I(this,r);I(this,m);I(this,X);I(this,B,this.editorDivBlur.bind(this));I(this,P,this.editorDivFocus.bind(this));I(this,g,this.editorDivInput.bind(this));I(this,L,this.editorDivKeydown.bind(this));I(this,O,void 0);I(this,x,"");I(this,v,`${this.id}-editor`);I(this,y,void 0);I(this,u,null);Z(this,O,H.color||$._defaultColor||ot.AnnotationEditor._defaultLineColor),Z(this,y,H.fontSize||$._defaultFontSize)}static get _keyboardManager(){const H=$.prototype,lt=kt=>kt.isEmpty(),pt=F.AnnotationEditorUIManager.TRANSLATE_SMALL,Ct=F.AnnotationEditorUIManager.TRANSLATE_BIG;return(0,h.shadow)(this,"_keyboardManager",new F.KeyboardManager([[["ctrl+s","mac+meta+s","ctrl+p","mac+meta+p"],H.commitOrRemove,{bubbles:!0}],[["ctrl+Enter","mac+meta+Enter","Escape","mac+Escape"],H.commitOrRemove],[["ArrowLeft","mac+ArrowLeft"],H._translateEmpty,{args:[-pt,0],checker:lt}],[["ctrl+ArrowLeft","mac+shift+ArrowLeft"],H._translateEmpty,{args:[-Ct,0],checker:lt}],[["ArrowRight","mac+ArrowRight"],H._translateEmpty,{args:[pt,0],checker:lt}],[["ctrl+ArrowRight","mac+shift+ArrowRight"],H._translateEmpty,{args:[Ct,0],checker:lt}],[["ArrowUp","mac+ArrowUp"],H._translateEmpty,{args:[0,-pt],checker:lt}],[["ctrl+ArrowUp","mac+shift+ArrowUp"],H._translateEmpty,{args:[0,-Ct],checker:lt}],[["ArrowDown","mac+ArrowDown"],H._translateEmpty,{args:[0,pt],checker:lt}],[["ctrl+ArrowDown","mac+shift+ArrowDown"],H._translateEmpty,{args:[0,Ct],checker:lt}]]))}static initialize(H){ot.AnnotationEditor.initialize(H,{strings:["free_text2_default_content","editor_free_text2_aria_label"]});const lt=getComputedStyle(document.documentElement);this._internalPadding=parseFloat(lt.getPropertyValue("--freetext-padding"))}static updateDefaultParams(H,lt){switch(H){case h.AnnotationEditorParamsType.FREETEXT_SIZE:$._defaultFontSize=lt;break;case h.AnnotationEditorParamsType.FREETEXT_COLOR:$._defaultColor=lt;break}}updateParams(H,lt){switch(H){case h.AnnotationEditorParamsType.FREETEXT_SIZE:W(this,b,Fi).call(this,lt);break;case h.AnnotationEditorParamsType.FREETEXT_COLOR:W(this,C,Mi).call(this,lt);break}}static get defaultPropertiesToUpdate(){return[[h.AnnotationEditorParamsType.FREETEXT_SIZE,$._defaultFontSize],[h.AnnotationEditorParamsType.FREETEXT_COLOR,$._defaultColor||ot.AnnotationEditor._defaultLineColor]]}get propertiesToUpdate(){return[[h.AnnotationEditorParamsType.FREETEXT_SIZE,t(this,y)],[h.AnnotationEditorParamsType.FREETEXT_COLOR,t(this,O)]]}_translateEmpty(H,lt){this._uiManager.translateSelectedEditors(H,lt,!0)}getInitialTranslation(){const H=this.parentScale;return[-$._internalPadding*H,-($._internalPadding+t(this,y))*H]}rebuild(){!this.parent||(super.rebuild(),this.div!==null&&(this.isAttachedToDOM||this.parent.add(this)))}enableEditMode(){this.isInEditMode()||(this.parent.setEditingState(!1),this.parent.updateToolbar(h.AnnotationEditorType.FREETEXT),super.enableEditMode(),this.overlayDiv.classList.remove("enabled"),this.editorDiv.contentEditable=!0,this._isDraggable=!1,this.div.removeAttribute("aria-activedescendant"),this.editorDiv.addEventListener("keydown",t(this,L)),this.editorDiv.addEventListener("focus",t(this,P)),this.editorDiv.addEventListener("blur",t(this,B)),this.editorDiv.addEventListener("input",t(this,g)))}disableEditMode(){!this.isInEditMode()||(this.parent.setEditingState(!0),super.disableEditMode(),this.overlayDiv.classList.add("enabled"),this.editorDiv.contentEditable=!1,this.div.setAttribute("aria-activedescendant",t(this,v)),this._isDraggable=!0,this.editorDiv.removeEventListener("keydown",t(this,L)),this.editorDiv.removeEventListener("focus",t(this,P)),this.editorDiv.removeEventListener("blur",t(this,B)),this.editorDiv.removeEventListener("input",t(this,g)),this.div.focus({preventScroll:!0}),this.isEditing=!1,this.parent.div.classList.add("freeTextEditing"))}focusin(H){!this._focusEventsAllowed||(super.focusin(H),H.target!==this.editorDiv&&this.editorDiv.focus())}onceAdded(){var H;if(this.width){W(this,X,ri).call(this);return}this.enableEditMode(),this.editorDiv.focus(),(H=this._initialOptions)!=null&&H.isCentered&&this.center(),this._initialOptions=null}isEmpty(){return!this.editorDiv||this.editorDiv.innerText.trim()===""}remove(){this.isEditing=!1,this.parent&&(this.parent.setEditingState(!0),this.parent.div.classList.add("freeTextEditing")),super.remove()}commit(){if(!this.isInEditMode())return;super.commit(),this.disableEditMode();const H=t(this,x),lt=Z(this,x,W(this,a,Ri).call(this).trimEnd());if(H===lt)return;const pt=Ct=>{if(Z(this,x,Ct),!Ct){this.remove();return}W(this,r,ni).call(this),this._uiManager.rebuild(this),W(this,k,ye).call(this)};this.addCommands({cmd:()=>{pt(lt)},undo:()=>{pt(H)},mustExec:!1}),W(this,k,ye).call(this)}shouldGetKeyboardEvents(){return this.isInEditMode()}enterInEditMode(){this.enableEditMode(),this.editorDiv.focus()}dblclick(H){this.enterInEditMode()}keydown(H){H.target===this.div&&H.key==="Enter"&&(this.enterInEditMode(),H.preventDefault())}editorDivKeydown(H){$._keyboardManager.exec(this,H)}editorDivFocus(H){this.isEditing=!0}editorDivBlur(H){this.isEditing=!1}editorDivInput(H){this.parent.div.classList.toggle("freeTextEditing",this.isEmpty())}disableEditing(){this.editorDiv.setAttribute("role","comment"),this.editorDiv.removeAttribute("aria-multiline")}enableEditing(){this.editorDiv.setAttribute("role","textbox"),this.editorDiv.setAttribute("aria-multiline",!0)}render(){if(this.div)return this.div;let H,lt;this.width&&(H=this.x,lt=this.y),super.render(),this.editorDiv=document.createElement("div"),this.editorDiv.className="internal",this.editorDiv.setAttribute("id",t(this,v)),this.enableEditing(),ot.AnnotationEditor._l10nPromise.get("editor_free_text2_aria_label").then(Ct=>{var kt;return(kt=this.editorDiv)==null?void 0:kt.setAttribute("aria-label",Ct)}),ot.AnnotationEditor._l10nPromise.get("free_text2_default_content").then(Ct=>{var kt;return(kt=this.editorDiv)==null?void 0:kt.setAttribute("default-content",Ct)}),this.editorDiv.contentEditable=!0;const{style:pt}=this.editorDiv;if(pt.fontSize=`calc(${t(this,y)}px * var(--scale-factor))`,pt.color=t(this,O),this.div.append(this.editorDiv),this.overlayDiv=document.createElement("div"),this.overlayDiv.classList.add("overlay","enabled"),this.div.append(this.overlayDiv),(0,F.bindEvents)(this,this.div,["dblclick","keydown"]),this.width){const[Ct,kt]=this.parentDimensions;if(this.annotationElementId){const{position:S}=t(this,u);let[i,n]=this.getInitialTranslation();[i,n]=this.pageTranslationToScreen(i,n);const[s,o]=this.pageDimensions,[c,_]=this.pageTranslation;let M,N;switch(this.rotation){case 0:M=H+(S[0]-c)/s,N=lt+this.height-(S[1]-_)/o;break;case 90:M=H+(S[0]-c)/s,N=lt-(S[1]-_)/o,[i,n]=[n,-i];break;case 180:M=H-this.width+(S[0]-c)/s,N=lt-(S[1]-_)/o,[i,n]=[-i,-n];break;case 270:M=H+(S[0]-c-this.height*o)/s,N=lt+(S[1]-_-this.width*s)/o,[i,n]=[-n,i];break}this.setAt(M*Ct,N*kt,i,n)}else this.setAt(H*Ct,lt*kt,this.width*Ct,this.height*kt);W(this,r,ni).call(this),this._isDraggable=!0,this.editorDiv.contentEditable=!1}else this._isDraggable=!1,this.editorDiv.contentEditable=!0;return this.div}get contentDiv(){return this.editorDiv}static deserialize(H,lt,pt){let Ct=null;if(H instanceof G.FreeTextAnnotationElement){const{data:{defaultAppearanceData:{fontSize:S,fontColor:i},rect:n,rotation:s,id:o},textContent:c,textPosition:_,parent:{page:{pageNumber:M}}}=H;if(!c||c.length===0)return null;Ct=H={annotationType:h.AnnotationEditorType.FREETEXT,color:Array.from(i),fontSize:S,value:c.join(`
`),position:_,pageIndex:M-1,rect:n,rotation:s,id:o,deleted:!1}}const kt=super.deserialize(H,lt,pt);return Z(kt,y,H.fontSize),Z(kt,O,h.Util.makeHexColor(...H.color)),Z(kt,x,H.value),kt.annotationElementId=H.id||null,Z(kt,u,Ct),kt}serialize(H=!1){if(this.isEmpty())return null;if(this.deleted)return{pageIndex:this.pageIndex,id:this.annotationElementId,deleted:!0};const lt=$._internalPadding*this.parentScale,pt=this.getRect(lt,lt),Ct=ot.AnnotationEditor._colorManager.convert(this.isAttachedToDOM?getComputedStyle(this.editorDiv).color:t(this,O)),kt={annotationType:h.AnnotationEditorType.FREETEXT,color:Ct,fontSize:t(this,y),value:t(this,x),pageIndex:this.pageIndex,rect:pt,rotation:this.rotation,structTreeParentId:this._structTreeParentId};return H?kt:this.annotationElementId&&!W(this,m,Di).call(this,kt)?null:(kt.id=this.annotationElementId,kt)}};let ut=$;B=new WeakMap,P=new WeakMap,g=new WeakMap,L=new WeakMap,O=new WeakMap,x=new WeakMap,v=new WeakMap,y=new WeakMap,u=new WeakMap,b=new WeakSet,Fi=function(H){const lt=Ct=>{this.editorDiv.style.fontSize=`calc(${Ct}px * var(--scale-factor))`,this.translate(0,-(Ct-t(this,y))*this.parentScale),Z(this,y,Ct),W(this,k,ye).call(this)},pt=t(this,y);this.addCommands({cmd:()=>{lt(H)},undo:()=>{lt(pt)},mustExec:!0,type:h.AnnotationEditorParamsType.FREETEXT_SIZE,overwriteIfSameType:!0,keepUndo:!0})},C=new WeakSet,Mi=function(H){const lt=t(this,O);this.addCommands({cmd:()=>{Z(this,O,this.editorDiv.style.color=H)},undo:()=>{Z(this,O,this.editorDiv.style.color=lt)},mustExec:!0,type:h.AnnotationEditorParamsType.FREETEXT_COLOR,overwriteIfSameType:!0,keepUndo:!0})},a=new WeakSet,Ri=function(){const H=this.editorDiv.getElementsByTagName("div");if(H.length===0)return this.editorDiv.innerText;const lt=[];for(const pt of H)lt.push(pt.innerText.replace(/\r\n?|\n/,""));return lt.join(`
`)},k=new WeakSet,ye=function(){const[H,lt]=this.parentDimensions;let pt;if(this.isAttachedToDOM)pt=this.div.getBoundingClientRect();else{const{currentLayer:Ct,div:kt}=this,S=kt.style.display;kt.style.display="hidden",Ct.div.append(this.div),pt=kt.getBoundingClientRect(),kt.remove(),kt.style.display=S}this.rotation%180===this.parentRotation%180?(this.width=pt.width/H,this.height=pt.height/lt):(this.width=pt.height/H,this.height=pt.width/lt),this.fixAndSetPosition()},r=new WeakSet,ni=function(){if(this.editorDiv.replaceChildren(),!!t(this,x))for(const H of t(this,x).split(`
`)){const lt=document.createElement("div");lt.append(H?document.createTextNode(H):document.createElement("br")),this.editorDiv.append(lt)}},m=new WeakSet,Di=function(H){const{value:lt,fontSize:pt,color:Ct,rect:kt,pageIndex:S}=t(this,u);return H.value!==lt||H.fontSize!==pt||H.rect.some((i,n)=>Math.abs(i-kt[n])>=1)||H.color.some((i,n)=>i!==Ct[n])||H.pageIndex!==S},X=new WeakSet,ri=function(H=!1){if(!this.annotationElementId)return;if(W(this,k,ye).call(this),!H&&(this.width===0||this.height===0)){setTimeout(()=>W(this,X,ri).call(this,!0),0);return}const lt=$._internalPadding*this.parentScale;t(this,u).rect=this.getRect(lt,lt)},ee(ut,"_freeTextDefaultContent",""),ee(ut,"_internalPadding",0),ee(ut,"_defaultColor",null),ee(ut,"_defaultFontSize",10),ee(ut,"_type","freetext"),d.FreeTextEditor=ut},(_t,d,st)=>{var n,o,ce,_,Ii,N,tt,Q,nt,ct,At,dt,Ft,Bt,St,Dt,ft,K,J,ht,Et,Tt,Ht,Li,jt,Fe,Xt,ai,$t,oi,Y,z,mt,yt,te,Zt,q,li,It,xt,Lt,Nt,Oi,bt,ci;Object.defineProperty(d,"__esModule",{value:!0}),d.StampAnnotationElement=d.InkAnnotationElement=d.FreeTextAnnotationElement=d.AnnotationLayer=void 0;var h=st(1),F=st(6),ot=st(3),G=st(30),ut=st(31),B=st(32);const P=1e3,g=9,L=new WeakSet;function O(Ot){return{width:Ot[2]-Ot[0],height:Ot[3]-Ot[1]}}class x{static create(R){switch(R.data.annotationType){case h.AnnotationType.LINK:return new y(R);case h.AnnotationType.TEXT:return new u(R);case h.AnnotationType.WIDGET:switch(R.data.fieldType){case"Tx":return new w(R);case"Btn":return R.data.radioButton?new a(R):R.data.checkBox?new A(R):new l(R);case"Ch":return new k(R);case"Sig":return new C(R)}return new b(R);case h.AnnotationType.POPUP:return new p(R);case h.AnnotationType.FREETEXT:return new T(R);case h.AnnotationType.LINE:return new m(R);case h.AnnotationType.SQUARE:return new U(R);case h.AnnotationType.CIRCLE:return new X(R);case h.AnnotationType.POLYLINE:return new E(R);case h.AnnotationType.CARET:return new it(R);case h.AnnotationType.INK:return new at(R);case h.AnnotationType.POLYGON:return new $(R);case h.AnnotationType.HIGHLIGHT:return new H(R);case h.AnnotationType.UNDERLINE:return new lt(R);case h.AnnotationType.SQUIGGLY:return new pt(R);case h.AnnotationType.STRIKEOUT:return new Ct(R);case h.AnnotationType.STAMP:return new kt(R);case h.AnnotationType.FILEATTACHMENT:return new S(R);default:return new v(R)}}}const s=class{constructor(R,{isRenderable:e=!1,ignoreBorder:f=!1,createQuadrilaterals:D=!1}={}){I(this,n,!1);this.isRenderable=e,this.data=R.data,this.layer=R.layer,this.linkService=R.linkService,this.downloadManager=R.downloadManager,this.imageResourcesPath=R.imageResourcesPath,this.renderForms=R.renderForms,this.svgFactory=R.svgFactory,this.annotationStorage=R.annotationStorage,this.enableScripting=R.enableScripting,this.hasJSActions=R.hasJSActions,this._fieldObjects=R.fieldObjects,this.parent=R.parent,e&&(this.container=this._createContainer(f)),D&&this._createQuadrilaterals()}static _hasPopupData({titleObj:R,contentsObj:e,richText:f}){return!!((R==null?void 0:R.str)||(e==null?void 0:e.str)||(f==null?void 0:f.str))}get hasPopupData(){return s._hasPopupData(this.data)}_createContainer(R){const{data:e,parent:{page:f,viewport:D}}=this,j=document.createElement("section");j.setAttribute("data-annotation-id",e.id),this instanceof b||(j.tabIndex=P),j.style.zIndex=this.parent.zIndex++,this.data.popupRef&&j.setAttribute("aria-haspopup","dialog"),e.noRotate&&j.classList.add("norotate");const{pageWidth:V,pageHeight:et,pageX:gt,pageY:wt}=D.rawDims;if(!e.rect||this instanceof p){const{rotation:Ut}=e;return!e.hasOwnCanvas&&Ut!==0&&this.setRotation(Ut,j),j}const{width:Pt,height:zt}=O(e.rect),Mt=h.Util.normalizeRect([e.rect[0],f.view[3]-e.rect[1]+f.view[1],e.rect[2],f.view[3]-e.rect[3]+f.view[1]]);if(!R&&e.borderStyle.width>0){j.style.borderWidth=`${e.borderStyle.width}px`;const Ut=e.borderStyle.horizontalCornerRadius,Vt=e.borderStyle.verticalCornerRadius;if(Ut>0||Vt>0){const Qt=`calc(${Ut}px * var(--scale-factor)) / calc(${Vt}px * var(--scale-factor))`;j.style.borderRadius=Qt}else if(this instanceof a){const Qt=`calc(${Pt}px * var(--scale-factor)) / calc(${zt}px * var(--scale-factor))`;j.style.borderRadius=Qt}switch(e.borderStyle.style){case h.AnnotationBorderStyleType.SOLID:j.style.borderStyle="solid";break;case h.AnnotationBorderStyleType.DASHED:j.style.borderStyle="dashed";break;case h.AnnotationBorderStyleType.BEVELED:(0,h.warn)("Unimplemented border style: beveled");break;case h.AnnotationBorderStyleType.INSET:(0,h.warn)("Unimplemented border style: inset");break;case h.AnnotationBorderStyleType.UNDERLINE:j.style.borderBottomStyle="solid";break}const Kt=e.borderColor||null;Kt?(Z(this,n,!0),j.style.borderColor=h.Util.makeHexColor(Kt[0]|0,Kt[1]|0,Kt[2]|0)):j.style.borderWidth=0}j.style.left=`${100*(Mt[0]-gt)/V}%`,j.style.top=`${100*(Mt[1]-wt)/et}%`;const{rotation:Rt}=e;return e.hasOwnCanvas||Rt===0?(j.style.width=`${100*Pt/V}%`,j.style.height=`${100*zt/et}%`):this.setRotation(Rt,j),j}setRotation(R,e=this.container){if(!this.data.rect)return;const{pageWidth:f,pageHeight:D}=this.parent.viewport.rawDims,{width:j,height:V}=O(this.data.rect);let et,gt;R%180===0?(et=100*j/f,gt=100*V/D):(et=100*V/f,gt=100*j/D),e.style.width=`${et}%`,e.style.height=`${gt}%`,e.setAttribute("data-main-rotation",(360-R)%360)}get _commonActions(){const R=(e,f,D)=>{const j=D.detail[e],V=j[0],et=j.slice(1);D.target.style[f]=G.ColorConverters[`${V}_HTML`](et),this.annotationStorage.setValue(this.data.id,{[f]:G.ColorConverters[`${V}_rgb`](et)})};return(0,h.shadow)(this,"_commonActions",{display:e=>{const{display:f}=e.detail,D=f%2===1;this.container.style.visibility=D?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{noView:D,noPrint:f===1||f===2})},print:e=>{this.annotationStorage.setValue(this.data.id,{noPrint:!e.detail.print})},hidden:e=>{const{hidden:f}=e.detail;this.container.style.visibility=f?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{noPrint:f,noView:f})},focus:e=>{setTimeout(()=>e.target.focus({preventScroll:!1}),0)},userName:e=>{e.target.title=e.detail.userName},readonly:e=>{e.target.disabled=e.detail.readonly},required:e=>{this._setRequired(e.target,e.detail.required)},bgColor:e=>{R("bgColor","backgroundColor",e)},fillColor:e=>{R("fillColor","backgroundColor",e)},fgColor:e=>{R("fgColor","color",e)},textColor:e=>{R("textColor","color",e)},borderColor:e=>{R("borderColor","borderColor",e)},strokeColor:e=>{R("strokeColor","borderColor",e)},rotation:e=>{const f=e.detail.rotation;this.setRotation(f),this.annotationStorage.setValue(this.data.id,{rotation:f})}})}_dispatchEventFromSandbox(R,e){const f=this._commonActions;for(const D of Object.keys(e.detail)){const j=R[D]||f[D];j==null||j(e)}}_setDefaultPropertiesFromJS(R){if(!this.enableScripting)return;const e=this.annotationStorage.getRawValue(this.data.id);if(!e)return;const f=this._commonActions;for(const[D,j]of Object.entries(e)){const V=f[D];if(V){const et={detail:{[D]:j},target:R};V(et),delete e[D]}}}_createQuadrilaterals(){if(!this.container)return;const{quadPoints:R}=this.data;if(!R)return;const[e,f,D,j]=this.data.rect;if(R.length===1){const[,{x:Vt,y:Kt},{x:Qt,y:se}]=R[0];if(D===Vt&&j===Kt&&e===Qt&&f===se)return}const{style:V}=this.container;let et;if(t(this,n)){const{borderColor:Vt,borderWidth:Kt}=V;V.borderWidth=0,et=["url('data:image/svg+xml;utf8,",'<svg xmlns="http://www.w3.org/2000/svg"',' preserveAspectRatio="none" viewBox="0 0 1 1">',`<g fill="transparent" stroke="${Vt}" stroke-width="${Kt}">`],this.container.classList.add("hasBorder")}const gt=D-e,wt=j-f,{svgFactory:Pt}=this,zt=Pt.createElement("svg");zt.classList.add("quadrilateralsContainer"),zt.setAttribute("width",0),zt.setAttribute("height",0);const Mt=Pt.createElement("defs");zt.append(Mt);const Rt=Pt.createElement("clipPath"),Ut=`clippath_${this.data.id}`;Rt.setAttribute("id",Ut),Rt.setAttribute("clipPathUnits","objectBoundingBox"),Mt.append(Rt);for(const[,{x:Vt,y:Kt},{x:Qt,y:se}]of R){const ie=Pt.createElement("rect"),ne=(Qt-e)/gt,oe=(j-Kt)/wt,le=(Vt-Qt)/gt,_i=(Kt-se)/wt;ie.setAttribute("x",ne),ie.setAttribute("y",oe),ie.setAttribute("width",le),ie.setAttribute("height",_i),Rt.append(ie),et==null||et.push(`<rect vector-effect="non-scaling-stroke" x="${ne}" y="${oe}" width="${le}" height="${_i}"/>`)}t(this,n)&&(et.push("</g></svg>')"),V.backgroundImage=et.join("")),this.container.append(zt),this.container.style.clipPath=`url(#${Ut})`}_createPopup(){const{container:R,data:e}=this;R.setAttribute("aria-haspopup","dialog");const f=new p({data:{color:e.color,titleObj:e.titleObj,modificationDate:e.modificationDate,contentsObj:e.contentsObj,richText:e.richText,parentRect:e.rect,borderStyle:0,id:`popup_${e.id}`,rotation:e.rotation},parent:this.parent,elements:[this]});this.parent.div.append(f.render())}render(){(0,h.unreachable)("Abstract method `AnnotationElement.render` called")}_getElementsByName(R,e=null){const f=[];if(this._fieldObjects){const D=this._fieldObjects[R];if(D)for(const{page:j,id:V,exportValues:et}of D){if(j===-1||V===e)continue;const gt=typeof et=="string"?et:null,wt=document.querySelector(`[data-element-id="${V}"]`);if(wt&&!L.has(wt)){(0,h.warn)(`_getElementsByName - element not allowed: ${V}`);continue}f.push({id:V,exportValue:gt,domElement:wt})}return f}for(const D of document.getElementsByName(R)){const{exportValue:j}=D,V=D.getAttribute("data-element-id");V!==e&&(!L.has(D)||f.push({id:V,exportValue:j,domElement:D}))}return f}show(){var R;this.container&&(this.container.hidden=!1),(R=this.popup)==null||R.maybeShow()}hide(){var R;this.container&&(this.container.hidden=!0),(R=this.popup)==null||R.forceHide()}getElementsToTriggerPopup(){return this.container}addHighlightArea(){const R=this.getElementsToTriggerPopup();if(Array.isArray(R))for(const e of R)e.classList.add("highlightArea");else R.classList.add("highlightArea")}_editOnDoubleClick(){const{annotationEditorType:R,data:{id:e}}=this;this.container.addEventListener("dblclick",()=>{var f;(f=this.linkService.eventBus)==null||f.dispatch("switchannotationeditormode",{source:this,mode:R,editId:e})})}};let v=s;n=new WeakMap;class y extends v{constructor(e,f=null){super(e,{isRenderable:!0,ignoreBorder:!!(f!=null&&f.ignoreBorder),createQuadrilaterals:!0});I(this,o);I(this,_);this.isTooltipOnly=e.data.isTooltipOnly}render(){const{data:e,linkService:f}=this,D=document.createElement("a");D.setAttribute("data-element-id",e.id);let j=!1;return e.url?(f.addLinkAttributes(D,e.url,e.newWindow),j=!0):e.action?(this._bindNamedAction(D,e.action),j=!0):e.attachment?(this._bindAttachment(D,e.attachment),j=!0):e.setOCGState?(W(this,_,Ii).call(this,D,e.setOCGState),j=!0):e.dest?(this._bindLink(D,e.dest),j=!0):(e.actions&&(e.actions.Action||e.actions["Mouse Up"]||e.actions["Mouse Down"])&&this.enableScripting&&this.hasJSActions&&(this._bindJSAction(D,e),j=!0),e.resetForm?(this._bindResetFormAction(D,e.resetForm),j=!0):this.isTooltipOnly&&!j&&(this._bindLink(D,""),j=!0)),this.container.classList.add("linkAnnotation"),j&&this.container.append(D),this.container}_bindLink(e,f){e.href=this.linkService.getDestinationHash(f),e.onclick=()=>(f&&this.linkService.goToDestination(f),!1),(f||f==="")&&W(this,o,ce).call(this)}_bindNamedAction(e,f){e.href=this.linkService.getAnchorUrl(""),e.onclick=()=>(this.linkService.executeNamedAction(f),!1),W(this,o,ce).call(this)}_bindAttachment(e,f){e.href=this.linkService.getAnchorUrl(""),e.onclick=()=>{var D;return(D=this.downloadManager)==null||D.openOrDownloadData(this.container,f.content,f.filename),!1},W(this,o,ce).call(this)}_bindJSAction(e,f){e.href=this.linkService.getAnchorUrl("");const D=new Map([["Action","onclick"],["Mouse Up","onmouseup"],["Mouse Down","onmousedown"]]);for(const j of Object.keys(f.actions)){const V=D.get(j);!V||(e[V]=()=>{var et;return(et=this.linkService.eventBus)==null||et.dispatch("dispatcheventinsandbox",{source:this,detail:{id:f.id,name:j}}),!1})}e.onclick||(e.onclick=()=>!1),W(this,o,ce).call(this)}_bindResetFormAction(e,f){const D=e.onclick;if(D||(e.href=this.linkService.getAnchorUrl("")),W(this,o,ce).call(this),!this._fieldObjects){(0,h.warn)('_bindResetFormAction - "resetForm" action not supported, ensure that the `fieldObjects` parameter is provided.'),D||(e.onclick=()=>!1);return}e.onclick=()=>{var zt;D==null||D();const{fields:j,refs:V,include:et}=f,gt=[];if(j.length!==0||V.length!==0){const Mt=new Set(V);for(const Rt of j){const Ut=this._fieldObjects[Rt]||[];for(const{id:Vt}of Ut)Mt.add(Vt)}for(const Rt of Object.values(this._fieldObjects))for(const Ut of Rt)Mt.has(Ut.id)===et&&gt.push(Ut)}else for(const Mt of Object.values(this._fieldObjects))gt.push(...Mt);const wt=this.annotationStorage,Pt=[];for(const Mt of gt){const{id:Rt}=Mt;switch(Pt.push(Rt),Mt.type){case"text":{const Vt=Mt.defaultValue||"";wt.setValue(Rt,{value:Vt});break}case"checkbox":case"radiobutton":{const Vt=Mt.defaultValue===Mt.exportValues;wt.setValue(Rt,{value:Vt});break}case"combobox":case"listbox":{const Vt=Mt.defaultValue||"";wt.setValue(Rt,{value:Vt});break}default:continue}const Ut=document.querySelector(`[data-element-id="${Rt}"]`);if(Ut){if(!L.has(Ut)){(0,h.warn)(`_bindResetFormAction - element not allowed: ${Rt}`);continue}}else continue;Ut.dispatchEvent(new Event("resetform"))}return this.enableScripting&&((zt=this.linkService.eventBus)==null||zt.dispatch("dispatcheventinsandbox",{source:this,detail:{id:"app",ids:Pt,name:"ResetForm"}})),!1}}}o=new WeakSet,ce=function(){this.container.setAttribute("data-internal-link","")},_=new WeakSet,Ii=function(e,f){e.href=this.linkService.getAnchorUrl(""),e.onclick=()=>(this.linkService.executeSetOCGState(f),!1),W(this,o,ce).call(this)};class u extends v{constructor(R){super(R,{isRenderable:!0})}render(){this.container.classList.add("textAnnotation");const R=document.createElement("img");return R.src=this.imageResourcesPath+"annotation-"+this.data.name.toLowerCase()+".svg",R.alt="[{{type}} Annotation]",R.dataset.l10nId="text_annotation_type",R.dataset.l10nArgs=JSON.stringify({type:this.data.name}),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.append(R),this.container}}class b extends v{render(){return this.data.alternativeText&&(this.container.title=this.data.alternativeText),this.container}showElementAndHideCanvas(R){var e;this.data.hasOwnCanvas&&(((e=R.previousSibling)==null?void 0:e.nodeName)==="CANVAS"&&(R.previousSibling.hidden=!0),R.hidden=!1)}_getKeyModifier(R){const{isWin:e,isMac:f}=h.FeatureTest.platform;return e&&R.ctrlKey||f&&R.metaKey}_setEventListener(R,e,f,D,j){f.includes("mouse")?R.addEventListener(f,V=>{var et;(et=this.linkService.eventBus)==null||et.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:D,value:j(V),shift:V.shiftKey,modifier:this._getKeyModifier(V)}})}):R.addEventListener(f,V=>{var et;if(f==="blur"){if(!e.focused||!V.relatedTarget)return;e.focused=!1}else if(f==="focus"){if(e.focused)return;e.focused=!0}!j||(et=this.linkService.eventBus)==null||et.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:D,value:j(V)}})})}_setEventListeners(R,e,f,D){var j,V,et;for(const[gt,wt]of f)(wt==="Action"||((j=this.data.actions)==null?void 0:j[wt]))&&((wt==="Focus"||wt==="Blur")&&(e||(e={focused:!1})),this._setEventListener(R,e,gt,wt,D),wt==="Focus"&&!((V=this.data.actions)!=null&&V.Blur)?this._setEventListener(R,e,"blur","Blur",null):wt==="Blur"&&!((et=this.data.actions)!=null&&et.Focus)&&this._setEventListener(R,e,"focus","Focus",null))}_setBackgroundColor(R){const e=this.data.backgroundColor||null;R.style.backgroundColor=e===null?"transparent":h.Util.makeHexColor(e[0],e[1],e[2])}_setTextStyle(R){const e=["left","center","right"],{fontColor:f}=this.data.defaultAppearanceData,D=this.data.defaultAppearanceData.fontSize||g,j=R.style;let V;const et=2,gt=wt=>Math.round(10*wt)/10;if(this.data.multiLine){const wt=Math.abs(this.data.rect[3]-this.data.rect[1]-et),Pt=Math.round(wt/(h.LINE_FACTOR*D))||1,zt=wt/Pt;V=Math.min(D,gt(zt/h.LINE_FACTOR))}else{const wt=Math.abs(this.data.rect[3]-this.data.rect[1]-et);V=Math.min(D,gt(wt/h.LINE_FACTOR))}j.fontSize=`calc(${V}px * var(--scale-factor))`,j.color=h.Util.makeHexColor(f[0],f[1],f[2]),this.data.textAlignment!==null&&(j.textAlign=e[this.data.textAlignment])}_setRequired(R,e){e?R.setAttribute("required",!0):R.removeAttribute("required"),R.setAttribute("aria-required",e)}}class w extends b{constructor(R){const e=R.renderForms||!R.data.hasAppearance&&!!R.data.fieldValue;super(R,{isRenderable:e})}setPropertyOnSiblings(R,e,f,D){const j=this.annotationStorage;for(const V of this._getElementsByName(R.name,R.id))V.domElement&&(V.domElement[e]=f),j.setValue(V.id,{[D]:f})}render(){var D,j;const R=this.annotationStorage,e=this.data.id;this.container.classList.add("textWidgetAnnotation");let f=null;if(this.renderForms){const V=R.getValue(e,{value:this.data.fieldValue});let et=V.value||"";const gt=R.getValue(e,{charLimit:this.data.maxLen}).charLimit;gt&&et.length>gt&&(et=et.slice(0,gt));let wt=V.formattedValue||((D=this.data.textContent)==null?void 0:D.join(`
`))||null;wt&&this.data.comb&&(wt=wt.replaceAll(/\s+/g,""));const Pt={userValue:et,formattedValue:wt,lastCommittedValue:null,commitKey:1,focused:!1};this.data.multiLine?(f=document.createElement("textarea"),f.textContent=wt!=null?wt:et,this.data.doNotScroll&&(f.style.overflowY="hidden")):(f=document.createElement("input"),f.type="text",f.setAttribute("value",wt!=null?wt:et),this.data.doNotScroll&&(f.style.overflowX="hidden")),this.data.hasOwnCanvas&&(f.hidden=!0),L.add(f),f.setAttribute("data-element-id",e),f.disabled=this.data.readOnly,f.name=this.data.fieldName,f.tabIndex=P,this._setRequired(f,this.data.required),gt&&(f.maxLength=gt),f.addEventListener("input",Mt=>{R.setValue(e,{value:Mt.target.value}),this.setPropertyOnSiblings(f,"value",Mt.target.value,"value"),Pt.formattedValue=null}),f.addEventListener("resetform",Mt=>{var Ut;const Rt=(Ut=this.data.defaultFieldValue)!=null?Ut:"";f.value=Pt.userValue=Rt,Pt.formattedValue=null});let zt=Mt=>{const{formattedValue:Rt}=Pt;Rt!=null&&(Mt.target.value=Rt),Mt.target.scrollLeft=0};if(this.enableScripting&&this.hasJSActions){f.addEventListener("focus",Rt=>{if(Pt.focused)return;const{target:Ut}=Rt;Pt.userValue&&(Ut.value=Pt.userValue),Pt.lastCommittedValue=Ut.value,Pt.commitKey=1,Pt.focused=!0}),f.addEventListener("updatefromsandbox",Rt=>{this.showElementAndHideCanvas(Rt.target);const Ut={value(Vt){var Kt;Pt.userValue=(Kt=Vt.detail.value)!=null?Kt:"",R.setValue(e,{value:Pt.userValue.toString()}),Vt.target.value=Pt.userValue},formattedValue(Vt){const{formattedValue:Kt}=Vt.detail;Pt.formattedValue=Kt,Kt!=null&&Vt.target!==document.activeElement&&(Vt.target.value=Kt),R.setValue(e,{formattedValue:Kt})},selRange(Vt){Vt.target.setSelectionRange(...Vt.detail.selRange)},charLimit:Vt=>{var ie;const{charLimit:Kt}=Vt.detail,{target:Qt}=Vt;if(Kt===0){Qt.removeAttribute("maxLength");return}Qt.setAttribute("maxLength",Kt);let se=Pt.userValue;!se||se.length<=Kt||(se=se.slice(0,Kt),Qt.value=Pt.userValue=se,R.setValue(e,{value:se}),(ie=this.linkService.eventBus)==null||ie.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:se,willCommit:!0,commitKey:1,selStart:Qt.selectionStart,selEnd:Qt.selectionEnd}}))}};this._dispatchEventFromSandbox(Ut,Rt)}),f.addEventListener("keydown",Rt=>{var Kt;Pt.commitKey=1;let Ut=-1;if(Rt.key==="Escape"?Ut=0:Rt.key==="Enter"&&!this.data.multiLine?Ut=2:Rt.key==="Tab"&&(Pt.commitKey=3),Ut===-1)return;const{value:Vt}=Rt.target;Pt.lastCommittedValue!==Vt&&(Pt.lastCommittedValue=Vt,Pt.userValue=Vt,(Kt=this.linkService.eventBus)==null||Kt.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:Vt,willCommit:!0,commitKey:Ut,selStart:Rt.target.selectionStart,selEnd:Rt.target.selectionEnd}}))});const Mt=zt;zt=null,f.addEventListener("blur",Rt=>{var Vt;if(!Pt.focused||!Rt.relatedTarget)return;Pt.focused=!1;const{value:Ut}=Rt.target;Pt.userValue=Ut,Pt.lastCommittedValue!==Ut&&((Vt=this.linkService.eventBus)==null||Vt.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:Ut,willCommit:!0,commitKey:Pt.commitKey,selStart:Rt.target.selectionStart,selEnd:Rt.target.selectionEnd}})),Mt(Rt)}),(j=this.data.actions)!=null&&j.Keystroke&&f.addEventListener("beforeinput",Rt=>{var oe;Pt.lastCommittedValue=null;const{data:Ut,target:Vt}=Rt,{value:Kt,selectionStart:Qt,selectionEnd:se}=Vt;let ie=Qt,ne=se;switch(Rt.inputType){case"deleteWordBackward":{const le=Kt.substring(0,Qt).match(/\w*[^\w]*$/);le&&(ie-=le[0].length);break}case"deleteWordForward":{const le=Kt.substring(Qt).match(/^[^\w]*\w*/);le&&(ne+=le[0].length);break}case"deleteContentBackward":Qt===se&&(ie-=1);break;case"deleteContentForward":Qt===se&&(ne+=1);break}Rt.preventDefault(),(oe=this.linkService.eventBus)==null||oe.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:Kt,change:Ut||"",willCommit:!1,selStart:ie,selEnd:ne}})}),this._setEventListeners(f,Pt,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],Rt=>Rt.target.value)}if(zt&&f.addEventListener("blur",zt),this.data.comb){const Rt=(this.data.rect[2]-this.data.rect[0])/gt;f.classList.add("comb"),f.style.letterSpacing=`calc(${Rt}px * var(--scale-factor) - 1ch)`}}else f=document.createElement("div"),f.textContent=this.data.fieldValue,f.style.verticalAlign="middle",f.style.display="table-cell";return this._setTextStyle(f),this._setBackgroundColor(f),this._setDefaultPropertiesFromJS(f),this.container.append(f),this.container}}class C extends b{constructor(R){super(R,{isRenderable:!!R.data.hasOwnCanvas})}}class A extends b{constructor(R){super(R,{isRenderable:R.renderForms})}render(){const R=this.annotationStorage,e=this.data,f=e.id;let D=R.getValue(f,{value:e.exportValue===e.fieldValue}).value;typeof D=="string"&&(D=D!=="Off",R.setValue(f,{value:D})),this.container.classList.add("buttonWidgetAnnotation","checkBox");const j=document.createElement("input");return L.add(j),j.setAttribute("data-element-id",f),j.disabled=e.readOnly,this._setRequired(j,this.data.required),j.type="checkbox",j.name=e.fieldName,D&&j.setAttribute("checked",!0),j.setAttribute("exportValue",e.exportValue),j.tabIndex=P,j.addEventListener("change",V=>{const{name:et,checked:gt}=V.target;for(const wt of this._getElementsByName(et,f)){const Pt=gt&&wt.exportValue===e.exportValue;wt.domElement&&(wt.domElement.checked=Pt),R.setValue(wt.id,{value:Pt})}R.setValue(f,{value:gt})}),j.addEventListener("resetform",V=>{const et=e.defaultFieldValue||"Off";V.target.checked=et===e.exportValue}),this.enableScripting&&this.hasJSActions&&(j.addEventListener("updatefromsandbox",V=>{const et={value(gt){gt.target.checked=gt.detail.value!=="Off",R.setValue(f,{value:gt.target.checked})}};this._dispatchEventFromSandbox(et,V)}),this._setEventListeners(j,null,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],V=>V.target.checked)),this._setBackgroundColor(j),this._setDefaultPropertiesFromJS(j),this.container.append(j),this.container}}class a extends b{constructor(R){super(R,{isRenderable:R.renderForms})}render(){this.container.classList.add("buttonWidgetAnnotation","radioButton");const R=this.annotationStorage,e=this.data,f=e.id;let D=R.getValue(f,{value:e.fieldValue===e.buttonValue}).value;typeof D=="string"&&(D=D!==e.buttonValue,R.setValue(f,{value:D}));const j=document.createElement("input");if(L.add(j),j.setAttribute("data-element-id",f),j.disabled=e.readOnly,this._setRequired(j,this.data.required),j.type="radio",j.name=e.fieldName,D&&j.setAttribute("checked",!0),j.tabIndex=P,j.addEventListener("change",V=>{const{name:et,checked:gt}=V.target;for(const wt of this._getElementsByName(et,f))R.setValue(wt.id,{value:!1});R.setValue(f,{value:gt})}),j.addEventListener("resetform",V=>{const et=e.defaultFieldValue;V.target.checked=et!=null&&et===e.buttonValue}),this.enableScripting&&this.hasJSActions){const V=e.buttonValue;j.addEventListener("updatefromsandbox",et=>{const gt={value:wt=>{const Pt=V===wt.detail.value;for(const zt of this._getElementsByName(wt.target.name)){const Mt=Pt&&zt.id===f;zt.domElement&&(zt.domElement.checked=Mt),R.setValue(zt.id,{value:Mt})}}};this._dispatchEventFromSandbox(gt,et)}),this._setEventListeners(j,null,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],et=>et.target.checked)}return this._setBackgroundColor(j),this._setDefaultPropertiesFromJS(j),this.container.append(j),this.container}}class l extends y{constructor(R){super(R,{ignoreBorder:R.data.hasAppearance})}render(){const R=super.render();R.classList.add("buttonWidgetAnnotation","pushButton"),this.data.alternativeText&&(R.title=this.data.alternativeText);const e=R.lastChild;return this.enableScripting&&this.hasJSActions&&e&&(this._setDefaultPropertiesFromJS(e),e.addEventListener("updatefromsandbox",f=>{this._dispatchEventFromSandbox({},f)})),R}}class k extends b{constructor(R){super(R,{isRenderable:R.renderForms})}render(){this.container.classList.add("choiceWidgetAnnotation");const R=this.annotationStorage,e=this.data.id,f=R.getValue(e,{value:this.data.fieldValue}),D=document.createElement("select");L.add(D),D.setAttribute("data-element-id",e),D.disabled=this.data.readOnly,this._setRequired(D,this.data.required),D.name=this.data.fieldName,D.tabIndex=P;let j=this.data.combo&&this.data.options.length>0;this.data.combo||(D.size=this.data.options.length,this.data.multiSelect&&(D.multiple=!0)),D.addEventListener("resetform",Pt=>{const zt=this.data.defaultFieldValue;for(const Mt of D.options)Mt.selected=Mt.value===zt});for(const Pt of this.data.options){const zt=document.createElement("option");zt.textContent=Pt.displayValue,zt.value=Pt.exportValue,f.value.includes(Pt.exportValue)&&(zt.setAttribute("selected",!0),j=!1),D.append(zt)}let V=null;if(j){const Pt=document.createElement("option");Pt.value=" ",Pt.setAttribute("hidden",!0),Pt.setAttribute("selected",!0),D.prepend(Pt),V=()=>{Pt.remove(),D.removeEventListener("input",V),V=null},D.addEventListener("input",V)}const et=Pt=>{const zt=Pt?"value":"textContent",{options:Mt,multiple:Rt}=D;return Rt?Array.prototype.filter.call(Mt,Ut=>Ut.selected).map(Ut=>Ut[zt]):Mt.selectedIndex===-1?null:Mt[Mt.selectedIndex][zt]};let gt=et(!1);const wt=Pt=>{const zt=Pt.target.options;return Array.prototype.map.call(zt,Mt=>({displayValue:Mt.textContent,exportValue:Mt.value}))};return this.enableScripting&&this.hasJSActions?(D.addEventListener("updatefromsandbox",Pt=>{const zt={value(Mt){V==null||V();const Rt=Mt.detail.value,Ut=new Set(Array.isArray(Rt)?Rt:[Rt]);for(const Vt of D.options)Vt.selected=Ut.has(Vt.value);R.setValue(e,{value:et(!0)}),gt=et(!1)},multipleSelection(Mt){D.multiple=!0},remove(Mt){const Rt=D.options,Ut=Mt.detail.remove;Rt[Ut].selected=!1,D.remove(Ut),Rt.length>0&&Array.prototype.findIndex.call(Rt,Kt=>Kt.selected)===-1&&(Rt[0].selected=!0),R.setValue(e,{value:et(!0),items:wt(Mt)}),gt=et(!1)},clear(Mt){for(;D.length!==0;)D.remove(0);R.setValue(e,{value:null,items:[]}),gt=et(!1)},insert(Mt){const{index:Rt,displayValue:Ut,exportValue:Vt}=Mt.detail.insert,Kt=D.children[Rt],Qt=document.createElement("option");Qt.textContent=Ut,Qt.value=Vt,Kt?Kt.before(Qt):D.append(Qt),R.setValue(e,{value:et(!0),items:wt(Mt)}),gt=et(!1)},items(Mt){const{items:Rt}=Mt.detail;for(;D.length!==0;)D.remove(0);for(const Ut of Rt){const{displayValue:Vt,exportValue:Kt}=Ut,Qt=document.createElement("option");Qt.textContent=Vt,Qt.value=Kt,D.append(Qt)}D.options.length>0&&(D.options[0].selected=!0),R.setValue(e,{value:et(!0),items:wt(Mt)}),gt=et(!1)},indices(Mt){const Rt=new Set(Mt.detail.indices);for(const Ut of Mt.target.options)Ut.selected=Rt.has(Ut.index);R.setValue(e,{value:et(!0)}),gt=et(!1)},editable(Mt){Mt.target.disabled=!Mt.detail.editable}};this._dispatchEventFromSandbox(zt,Pt)}),D.addEventListener("input",Pt=>{var Mt;const zt=et(!0);R.setValue(e,{value:zt}),Pt.preventDefault(),(Mt=this.linkService.eventBus)==null||Mt.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:gt,changeEx:zt,willCommit:!1,commitKey:1,keyDown:!1}})}),this._setEventListeners(D,null,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"],["input","Action"],["input","Validate"]],Pt=>Pt.target.value)):D.addEventListener("input",function(Pt){R.setValue(e,{value:et(!0)})}),this.data.combo&&this._setTextStyle(D),this._setBackgroundColor(D),this._setDefaultPropertiesFromJS(D),this.container.append(D),this.container}}class p extends v{constructor(R){const{data:e,elements:f}=R;super(R,{isRenderable:v._hasPopupData(e)}),this.elements=f}render(){this.container.classList.add("popupAnnotation");const R=new r({container:this.container,color:this.data.color,titleObj:this.data.titleObj,modificationDate:this.data.modificationDate,contentsObj:this.data.contentsObj,richText:this.data.richText,rect:this.data.rect,parentRect:this.data.parentRect||null,parent:this.parent,elements:this.elements,open:this.data.open}),e=[];for(const f of this.elements)f.popup=R,e.push(f.data.id),f.addHighlightArea();return this.container.setAttribute("aria-controls",e.map(f=>`${h.AnnotationPrefix}${f}`).join(",")),this.container}}class r{constructor({container:R,color:e,elements:f,titleObj:D,modificationDate:j,contentsObj:V,richText:et,parent:gt,rect:wt,parentRect:Pt,open:zt}){I(this,Ht);I(this,jt);I(this,Xt);I(this,$t);I(this,N,null);I(this,tt,W(this,Ht,Li).bind(this));I(this,Q,W(this,$t,oi).bind(this));I(this,nt,W(this,Xt,ai).bind(this));I(this,ct,W(this,jt,Fe).bind(this));I(this,At,null);I(this,dt,null);I(this,Ft,null);I(this,Bt,null);I(this,St,null);I(this,Dt,null);I(this,ft,!1);I(this,K,null);I(this,J,null);I(this,ht,null);I(this,Et,null);I(this,Tt,!1);var Rt;Z(this,dt,R),Z(this,Et,D),Z(this,Ft,V),Z(this,ht,et),Z(this,St,gt),Z(this,At,e),Z(this,J,wt),Z(this,Dt,Pt),Z(this,Bt,f);const Mt=F.PDFDateString.toDateObject(j);Mt&&Z(this,N,gt.l10n.get("annotation_date_string",{date:Mt.toLocaleDateString(),time:Mt.toLocaleTimeString()})),this.trigger=f.flatMap(Ut=>Ut.getElementsToTriggerPopup());for(const Ut of this.trigger)Ut.addEventListener("click",t(this,ct)),Ut.addEventListener("mouseenter",t(this,nt)),Ut.addEventListener("mouseleave",t(this,Q)),Ut.classList.add("popupTriggerArea");for(const Ut of f)(Rt=Ut.container)==null||Rt.addEventListener("keydown",t(this,tt));t(this,dt).hidden=!0,zt&&W(this,jt,Fe).call(this)}render(){if(t(this,K))return;const{page:{view:R},viewport:{rawDims:{pageWidth:e,pageHeight:f,pageX:D,pageY:j}}}=t(this,St),V=Z(this,K,document.createElement("div"));if(V.className="popup",t(this,At)){const ie=V.style.outlineColor=h.Util.makeHexColor(...t(this,At));CSS.supports("background-color","color-mix(in srgb, red 30%, white)")?V.style.backgroundColor=`color-mix(in srgb, ${ie} 30%, white)`:V.style.backgroundColor=h.Util.makeHexColor(...t(this,At).map(oe=>Math.floor(.7*(255-oe)+oe)))}const et=document.createElement("span");et.className="header";const gt=document.createElement("h1");if(et.append(gt),{dir:gt.dir,str:gt.textContent}=t(this,Et),V.append(et),t(this,N)){const ie=document.createElement("span");ie.classList.add("popupDate"),t(this,N).then(ne=>{ie.textContent=ne}),et.append(ie)}const wt=t(this,Ft),Pt=t(this,ht);if((Pt==null?void 0:Pt.str)&&(!(wt!=null&&wt.str)||wt.str===Pt.str))B.XfaLayer.render({xfaHtml:Pt.html,intent:"richText",div:V}),V.lastChild.classList.add("richText","popupContent");else{const ie=this._formatContents(wt);V.append(ie)}let zt=!!t(this,Dt),Mt=zt?t(this,Dt):t(this,J);for(const ie of t(this,Bt))if(!Mt||h.Util.intersect(ie.data.rect,Mt)!==null){Mt=ie.data.rect,zt=!0;break}const Rt=h.Util.normalizeRect([Mt[0],R[3]-Mt[1]+R[1],Mt[2],R[3]-Mt[3]+R[1]]),Ut=5,Vt=zt?Mt[2]-Mt[0]+Ut:0,Kt=Rt[0]+Vt,Qt=Rt[1],{style:se}=t(this,dt);se.left=`${100*(Kt-D)/e}%`,se.top=`${100*(Qt-j)/f}%`,t(this,dt).append(V)}_formatContents({str:R,dir:e}){const f=document.createElement("p");f.classList.add("popupContent"),f.dir=e;const D=R.split(/(?:\r\n?|\n)/);for(let j=0,V=D.length;j<V;++j){const et=D[j];f.append(document.createTextNode(et)),j<V-1&&f.append(document.createElement("br"))}return f}forceHide(){Z(this,Tt,this.isVisible),t(this,Tt)&&(t(this,dt).hidden=!0)}maybeShow(){!t(this,Tt)||(Z(this,Tt,!1),t(this,dt).hidden=!1)}get isVisible(){return t(this,dt).hidden===!1}}N=new WeakMap,tt=new WeakMap,Q=new WeakMap,nt=new WeakMap,ct=new WeakMap,At=new WeakMap,dt=new WeakMap,Ft=new WeakMap,Bt=new WeakMap,St=new WeakMap,Dt=new WeakMap,ft=new WeakMap,K=new WeakMap,J=new WeakMap,ht=new WeakMap,Et=new WeakMap,Tt=new WeakMap,Ht=new WeakSet,Li=function(R){R.altKey||R.shiftKey||R.ctrlKey||R.metaKey||(R.key==="Enter"||R.key==="Escape"&&t(this,ft))&&W(this,jt,Fe).call(this)},jt=new WeakSet,Fe=function(){Z(this,ft,!t(this,ft)),t(this,ft)?(W(this,Xt,ai).call(this),t(this,dt).addEventListener("click",t(this,ct)),t(this,dt).addEventListener("keydown",t(this,tt))):(W(this,$t,oi).call(this),t(this,dt).removeEventListener("click",t(this,ct)),t(this,dt).removeEventListener("keydown",t(this,tt)))},Xt=new WeakSet,ai=function(){t(this,K)||this.render(),this.isVisible?t(this,ft)&&t(this,dt).classList.add("focused"):(t(this,dt).hidden=!1,t(this,dt).style.zIndex=parseInt(t(this,dt).style.zIndex)+1e3)},$t=new WeakSet,oi=function(){t(this,dt).classList.remove("focused"),!(t(this,ft)||!this.isVisible)&&(t(this,dt).hidden=!0,t(this,dt).style.zIndex=parseInt(t(this,dt).style.zIndex)-1e3)};class T extends v{constructor(R){super(R,{isRenderable:!0,ignoreBorder:!0}),this.textContent=R.data.textContent,this.textPosition=R.data.textPosition,this.annotationEditorType=h.AnnotationEditorType.FREETEXT}render(){if(this.container.classList.add("freeTextAnnotation"),this.textContent){const R=document.createElement("div");R.classList.add("annotationTextContent"),R.setAttribute("role","comment");for(const e of this.textContent){const f=document.createElement("span");f.textContent=e,R.append(f)}this.container.append(R)}return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this._editOnDoubleClick(),this.container}}d.FreeTextAnnotationElement=T;class m extends v{constructor(e){super(e,{isRenderable:!0,ignoreBorder:!0});I(this,Y,null)}render(){this.container.classList.add("lineAnnotation");const e=this.data,{width:f,height:D}=O(e.rect),j=this.svgFactory.create(f,D,!0),V=Z(this,Y,this.svgFactory.createElement("svg:line"));return V.setAttribute("x1",e.rect[2]-e.lineCoordinates[0]),V.setAttribute("y1",e.rect[3]-e.lineCoordinates[1]),V.setAttribute("x2",e.rect[2]-e.lineCoordinates[2]),V.setAttribute("y2",e.rect[3]-e.lineCoordinates[3]),V.setAttribute("stroke-width",e.borderStyle.width||1),V.setAttribute("stroke","transparent"),V.setAttribute("fill","transparent"),j.append(V),this.container.append(j),!e.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return t(this,Y)}addHighlightArea(){this.container.classList.add("highlightArea")}}Y=new WeakMap;class U extends v{constructor(e){super(e,{isRenderable:!0,ignoreBorder:!0});I(this,z,null)}render(){this.container.classList.add("squareAnnotation");const e=this.data,{width:f,height:D}=O(e.rect),j=this.svgFactory.create(f,D,!0),V=e.borderStyle.width,et=Z(this,z,this.svgFactory.createElement("svg:rect"));return et.setAttribute("x",V/2),et.setAttribute("y",V/2),et.setAttribute("width",f-V),et.setAttribute("height",D-V),et.setAttribute("stroke-width",V||1),et.setAttribute("stroke","transparent"),et.setAttribute("fill","transparent"),j.append(et),this.container.append(j),!e.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return t(this,z)}addHighlightArea(){this.container.classList.add("highlightArea")}}z=new WeakMap;class X extends v{constructor(e){super(e,{isRenderable:!0,ignoreBorder:!0});I(this,mt,null)}render(){this.container.classList.add("circleAnnotation");const e=this.data,{width:f,height:D}=O(e.rect),j=this.svgFactory.create(f,D,!0),V=e.borderStyle.width,et=Z(this,mt,this.svgFactory.createElement("svg:ellipse"));return et.setAttribute("cx",f/2),et.setAttribute("cy",D/2),et.setAttribute("rx",f/2-V/2),et.setAttribute("ry",D/2-V/2),et.setAttribute("stroke-width",V||1),et.setAttribute("stroke","transparent"),et.setAttribute("fill","transparent"),j.append(et),this.container.append(j),!e.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return t(this,mt)}addHighlightArea(){this.container.classList.add("highlightArea")}}mt=new WeakMap;class E extends v{constructor(e){super(e,{isRenderable:!0,ignoreBorder:!0});I(this,yt,null);this.containerClassName="polylineAnnotation",this.svgElementName="svg:polyline"}render(){this.container.classList.add(this.containerClassName);const e=this.data,{width:f,height:D}=O(e.rect),j=this.svgFactory.create(f,D,!0);let V=[];for(const gt of e.vertices){const wt=gt.x-e.rect[0],Pt=e.rect[3]-gt.y;V.push(wt+","+Pt)}V=V.join(" ");const et=Z(this,yt,this.svgFactory.createElement(this.svgElementName));return et.setAttribute("points",V),et.setAttribute("stroke-width",e.borderStyle.width||1),et.setAttribute("stroke","transparent"),et.setAttribute("fill","transparent"),j.append(et),this.container.append(j),!e.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return t(this,yt)}addHighlightArea(){this.container.classList.add("highlightArea")}}yt=new WeakMap;class $ extends E{constructor(R){super(R),this.containerClassName="polygonAnnotation",this.svgElementName="svg:polygon"}}class it extends v{constructor(R){super(R,{isRenderable:!0,ignoreBorder:!0})}render(){return this.container.classList.add("caretAnnotation"),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container}}class at extends v{constructor(e){super(e,{isRenderable:!0,ignoreBorder:!0});I(this,te,[]);this.containerClassName="inkAnnotation",this.svgElementName="svg:polyline",this.annotationEditorType=h.AnnotationEditorType.INK}render(){this.container.classList.add(this.containerClassName);const e=this.data,{width:f,height:D}=O(e.rect),j=this.svgFactory.create(f,D,!0);for(const V of e.inkLists){let et=[];for(const wt of V){const Pt=wt.x-e.rect[0],zt=e.rect[3]-wt.y;et.push(`${Pt},${zt}`)}et=et.join(" ");const gt=this.svgFactory.createElement(this.svgElementName);t(this,te).push(gt),gt.setAttribute("points",et),gt.setAttribute("stroke-width",e.borderStyle.width||1),gt.setAttribute("stroke","transparent"),gt.setAttribute("fill","transparent"),!e.popupRef&&this.hasPopupData&&this._createPopup(),j.append(gt)}return this.container.append(j),this.container}getElementsToTriggerPopup(){return t(this,te)}addHighlightArea(){this.container.classList.add("highlightArea")}}te=new WeakMap,d.InkAnnotationElement=at;class H extends v{constructor(R){super(R,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("highlightAnnotation"),this.container}}class lt extends v{constructor(R){super(R,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("underlineAnnotation"),this.container}}class pt extends v{constructor(R){super(R,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("squigglyAnnotation"),this.container}}class Ct extends v{constructor(R){super(R,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("strikeoutAnnotation"),this.container}}class kt extends v{constructor(R){super(R,{isRenderable:!0,ignoreBorder:!0})}render(){return this.container.classList.add("stampAnnotation"),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container}}d.StampAnnotationElement=kt;class S extends v{constructor(e){var j;super(e,{isRenderable:!0});I(this,q);I(this,Zt,null);const{filename:f,content:D}=this.data.file;this.filename=(0,F.getFilenameFromUrl)(f,!0),this.content=D,(j=this.linkService.eventBus)==null||j.dispatch("fileattachmentannotation",{source:this,filename:f,content:D})}render(){this.container.classList.add("fileAttachmentAnnotation");const{container:e,data:f}=this;let D;f.hasAppearance||f.fillAlpha===0?D=document.createElement("div"):(D=document.createElement("img"),D.src=`${this.imageResourcesPath}annotation-${/paperclip/i.test(f.name)?"paperclip":"pushpin"}.svg`,f.fillAlpha&&f.fillAlpha<1&&(D.style=`filter: opacity(${Math.round(f.fillAlpha*100)}%);`)),D.addEventListener("dblclick",W(this,q,li).bind(this)),Z(this,Zt,D);const{isMac:j}=h.FeatureTest.platform;return e.addEventListener("keydown",V=>{V.key==="Enter"&&(j?V.metaKey:V.ctrlKey)&&W(this,q,li).call(this)}),!f.popupRef&&this.hasPopupData?this._createPopup():D.classList.add("popupTriggerArea"),e.append(D),e}getElementsToTriggerPopup(){return t(this,Zt)}addHighlightArea(){this.container.classList.add("highlightArea")}}Zt=new WeakMap,q=new WeakSet,li=function(){var e;(e=this.downloadManager)==null||e.openOrDownloadData(this.container,this.content,this.filename)};class i{constructor({div:R,accessibilityManager:e,annotationCanvasMap:f,l10n:D,page:j,viewport:V}){I(this,Nt);I(this,bt);I(this,It,null);I(this,xt,null);I(this,Lt,new Map);this.div=R,Z(this,It,e),Z(this,xt,f),this.l10n=D,this.page=j,this.viewport=V,this.zIndex=0,this.l10n||(this.l10n=ut.NullL10n)}async render(R){const{annotations:e}=R,f=this.div;(0,F.setLayerDimensions)(f,this.viewport);const D=new Map,j={data:null,layer:f,linkService:R.linkService,downloadManager:R.downloadManager,imageResourcesPath:R.imageResourcesPath||"",renderForms:R.renderForms!==!1,svgFactory:new F.DOMSVGFactory,annotationStorage:R.annotationStorage||new ot.AnnotationStorage,enableScripting:R.enableScripting===!0,hasJSActions:R.hasJSActions,fieldObjects:R.fieldObjects,parent:this,elements:null};for(const V of e){if(V.noHTML)continue;const et=V.annotationType===h.AnnotationType.POPUP;if(et){const Pt=D.get(V.id);if(!Pt)continue;j.elements=Pt}else{const{width:Pt,height:zt}=O(V.rect);if(Pt<=0||zt<=0)continue}j.data=V;const gt=x.create(j);if(!gt.isRenderable)continue;if(!et&&V.popupRef){const Pt=D.get(V.popupRef);Pt?Pt.push(gt):D.set(V.popupRef,[gt])}gt.annotationEditorType>0&&t(this,Lt).set(gt.data.id,gt);const wt=gt.render();V.hidden&&(wt.style.visibility="hidden"),W(this,Nt,Oi).call(this,wt,V.id)}W(this,bt,ci).call(this),await this.l10n.translate(f)}update({viewport:R}){const e=this.div;this.viewport=R,(0,F.setLayerDimensions)(e,{rotation:R.rotation}),W(this,bt,ci).call(this),e.hidden=!1}getEditableAnnotations(){return Array.from(t(this,Lt).values())}getEditableAnnotation(R){return t(this,Lt).get(R)}}It=new WeakMap,xt=new WeakMap,Lt=new WeakMap,Nt=new WeakSet,Oi=function(R,e){var D;const f=R.firstChild||R;f.id=`${h.AnnotationPrefix}${e}`,this.div.append(R),(D=t(this,It))==null||D.moveElementInDOM(this.div,R,f,!1)},bt=new WeakSet,ci=function(){if(!t(this,xt))return;const R=this.div;for(const[e,f]of t(this,xt)){const D=R.querySelector(`[data-annotation-id="${e}"]`);if(!D)continue;const{firstChild:j}=D;j?j.nodeName==="CANVAS"?j.replaceWith(f):j.before(f):D.append(f)}t(this,xt).clear()},d.AnnotationLayer=i},(_t,d)=>{Object.defineProperty(d,"__esModule",{value:!0}),d.ColorConverters=void 0;function st(ot){return Math.floor(Math.max(0,Math.min(1,ot))*255).toString(16).padStart(2,"0")}function h(ot){return Math.max(0,Math.min(255,255*ot))}class F{static CMYK_G([G,ut,B,P]){return["G",1-Math.min(1,.3*G+.59*B+.11*ut+P)]}static G_CMYK([G]){return["CMYK",0,0,0,1-G]}static G_RGB([G]){return["RGB",G,G,G]}static G_rgb([G]){return G=h(G),[G,G,G]}static G_HTML([G]){const ut=st(G);return`#${ut}${ut}${ut}`}static RGB_G([G,ut,B]){return["G",.3*G+.59*ut+.11*B]}static RGB_rgb(G){return G.map(h)}static RGB_HTML(G){return`#${G.map(st).join("")}`}static T_HTML(){return"#00000000"}static T_rgb(){return[null]}static CMYK_RGB([G,ut,B,P]){return["RGB",1-Math.min(1,G+P),1-Math.min(1,B+P),1-Math.min(1,ut+P)]}static CMYK_rgb([G,ut,B,P]){return[h(1-Math.min(1,G+P)),h(1-Math.min(1,B+P)),h(1-Math.min(1,ut+P))]}static CMYK_HTML(G){const ut=this.CMYK_RGB(G).slice(1);return this.RGB_HTML(ut)}static RGB_CMYK([G,ut,B]){const P=1-G,g=1-ut,L=1-B,O=Math.min(P,g,L);return["CMYK",P,g,L,O]}}d.ColorConverters=F},(_t,d)=>{Object.defineProperty(d,"__esModule",{value:!0}),d.NullL10n=void 0,d.getL10nFallback=h;const st={of_pages:"of {{pagesCount}}",page_of_pages:"({{pageNumber}} of {{pagesCount}})",document_properties_kb:"{{size_kb}} KB ({{size_b}} bytes)",document_properties_mb:"{{size_mb}} MB ({{size_b}} bytes)",document_properties_date_string:"{{date}}, {{time}}",document_properties_page_size_unit_inches:"in",document_properties_page_size_unit_millimeters:"mm",document_properties_page_size_orientation_portrait:"portrait",document_properties_page_size_orientation_landscape:"landscape",document_properties_page_size_name_a3:"A3",document_properties_page_size_name_a4:"A4",document_properties_page_size_name_letter:"Letter",document_properties_page_size_name_legal:"Legal",document_properties_page_size_dimension_string:"{{width}} \xD7 {{height}} {{unit}} ({{orientation}})",document_properties_page_size_dimension_name_string:"{{width}} \xD7 {{height}} {{unit}} ({{name}}, {{orientation}})",document_properties_linearized_yes:"Yes",document_properties_linearized_no:"No",additional_layers:"Additional Layers",page_landmark:"Page {{page}}",thumb_page_title:"Page {{page}}",thumb_page_canvas:"Thumbnail of Page {{page}}",find_reached_top:"Reached top of document, continued from bottom",find_reached_bottom:"Reached end of document, continued from top","find_match_count[one]":"{{current}} of {{total}} match","find_match_count[other]":"{{current}} of {{total}} matches","find_match_count_limit[one]":"More than {{limit}} match","find_match_count_limit[other]":"More than {{limit}} matches",find_not_found:"Phrase not found",page_scale_width:"Page Width",page_scale_fit:"Page Fit",page_scale_auto:"Automatic Zoom",page_scale_actual:"Actual Size",page_scale_percent:"{{scale}}%",loading_error:"An error occurred while loading the PDF.",invalid_file_error:"Invalid or corrupted PDF file.",missing_file_error:"Missing PDF file.",unexpected_response_error:"Unexpected server response.",rendering_error:"An error occurred while rendering the page.",annotation_date_string:"{{date}}, {{time}}",printing_not_supported:"Warning: Printing is not fully supported by this browser.",printing_not_ready:"Warning: The PDF is not fully loaded for printing.",web_fonts_disabled:"Web fonts are disabled: unable to use embedded PDF fonts.",free_text2_default_content:"Start typing\u2026",editor_free_text2_aria_label:"Text Editor",editor_ink2_aria_label:"Draw Editor",editor_ink_canvas_aria_label:"User-created image",editor_alt_text_button_label:"Alt text",editor_alt_text_edit_button_label:"Edit alt text",editor_alt_text_decorative_tooltip:"Marked as decorative"};st.print_progress_percent="{{progress}}%";function h(G,ut){switch(G){case"find_match_count":G=`find_match_count[${ut.total===1?"one":"other"}]`;break;case"find_match_count_limit":G=`find_match_count_limit[${ut.limit===1?"one":"other"}]`;break}return st[G]||""}function F(G,ut){return ut?G.replaceAll(/\{\{\s*(\w+)\s*\}\}/g,(B,P)=>P in ut?ut[P]:"{{"+P+"}}"):G}const ot={async getLanguage(){return"en-us"},async getDirection(){return"ltr"},async get(G,ut=null,B=h(G,ut)){return F(B,ut)},async translate(G){}};d.NullL10n=ot},(_t,d,st)=>{Object.defineProperty(d,"__esModule",{value:!0}),d.XfaLayer=void 0;var h=st(25);class F{static setupStorage(G,ut,B,P,g){const L=P.getValue(ut,{value:null});switch(B.name){case"textarea":if(L.value!==null&&(G.textContent=L.value),g==="print")break;G.addEventListener("input",O=>{P.setValue(ut,{value:O.target.value})});break;case"input":if(B.attributes.type==="radio"||B.attributes.type==="checkbox"){if(L.value===B.attributes.xfaOn?G.setAttribute("checked",!0):L.value===B.attributes.xfaOff&&G.removeAttribute("checked"),g==="print")break;G.addEventListener("change",O=>{P.setValue(ut,{value:O.target.checked?O.target.getAttribute("xfaOn"):O.target.getAttribute("xfaOff")})})}else{if(L.value!==null&&G.setAttribute("value",L.value),g==="print")break;G.addEventListener("input",O=>{P.setValue(ut,{value:O.target.value})})}break;case"select":if(L.value!==null){G.setAttribute("value",L.value);for(const O of B.children)O.attributes.value===L.value?O.attributes.selected=!0:O.attributes.hasOwnProperty("selected")&&delete O.attributes.selected}G.addEventListener("input",O=>{const x=O.target.options,v=x.selectedIndex===-1?"":x[x.selectedIndex].value;P.setValue(ut,{value:v})});break}}static setAttributes({html:G,element:ut,storage:B=null,intent:P,linkService:g}){const{attributes:L}=ut,O=G instanceof HTMLAnchorElement;L.type==="radio"&&(L.name=`${L.name}-${P}`);for(const[x,v]of Object.entries(L))if(v!=null)switch(x){case"class":v.length&&G.setAttribute(x,v.join(" "));break;case"dataId":break;case"id":G.setAttribute("data-element-id",v);break;case"style":Object.assign(G.style,v);break;case"textContent":G.textContent=v;break;default:(!O||x!=="href"&&x!=="newWindow")&&G.setAttribute(x,v)}O&&g.addLinkAttributes(G,L.href,L.newWindow),B&&L.dataId&&this.setupStorage(G,L.dataId,ut,B)}static render(G){var y;const ut=G.annotationStorage,B=G.linkService,P=G.xfaHtml,g=G.intent||"display",L=document.createElement(P.name);P.attributes&&this.setAttributes({html:L,element:P,intent:g,linkService:B});const O=[[P,-1,L]],x=G.div;if(x.append(L),G.viewport){const u=`matrix(${G.viewport.transform.join(",")})`;x.style.transform=u}g!=="richText"&&x.setAttribute("class","xfaLayer xfaFont");const v=[];for(;O.length>0;){const[u,b,w]=O.at(-1);if(b+1===u.children.length){O.pop();continue}const C=u.children[++O.at(-1)[1]];if(C===null)continue;const{name:A}=C;if(A==="#text"){const l=document.createTextNode(C.value);v.push(l),w.append(l);continue}const a=(y=C==null?void 0:C.attributes)!=null&&y.xmlns?document.createElementNS(C.attributes.xmlns,A):document.createElement(A);if(w.append(a),C.attributes&&this.setAttributes({html:a,element:C,storage:ut,intent:g,linkService:B}),C.children&&C.children.length>0)O.push([C,-1,a]);else if(C.value){const l=document.createTextNode(C.value);h.XfaText.shouldBuildText(A)&&v.push(l),a.append(l)}}for(const u of x.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea"))u.setAttribute("readOnly",!0);return{textDivs:v}}static update(G){const ut=`matrix(${G.viewport.transform.join(",")})`;G.div.style.transform=ut,G.div.hidden=!1}}d.XfaLayer=F},(_t,d,st)=>{var P,g,L,O,x,v,y,u,b,w,C,A,a,l,k,Ni,r,Bi,m,Ui,X,ji,$,hi,at,Hi,lt,di,Ct,Wi,S,Gi,n,zi,o,Xi,_,$i,N,ae,Q,ui,ct,Me,dt,Re,Bt,fe,Dt,fi,K,De,ht,Vi,Tt,pi,Wt,qi,qt,Yi,Gt,gi,rt,Ie,z,pe;Object.defineProperty(d,"__esModule",{value:!0}),d.InkEditor=void 0;var h=st(1),F=st(4),ot=st(29),G=st(6),ut=st(5);const yt=class extends F.AnnotationEditor{constructor(q){super({...q,name:"inkEditor"});I(this,k);I(this,r);I(this,m);I(this,X);I(this,$);I(this,at);I(this,lt);I(this,Ct);I(this,S);I(this,n);I(this,o);I(this,_);I(this,N);I(this,Q);I(this,ct);I(this,dt);I(this,Bt);I(this,Dt);I(this,K);I(this,qt);I(this,Gt);I(this,rt);I(this,z);I(this,P,0);I(this,g,0);I(this,L,this.canvasPointermove.bind(this));I(this,O,this.canvasPointerleave.bind(this));I(this,x,this.canvasPointerup.bind(this));I(this,v,this.canvasPointerdown.bind(this));I(this,y,new Path2D);I(this,u,!1);I(this,b,!1);I(this,w,!1);I(this,C,null);I(this,A,0);I(this,a,0);I(this,l,null);this.color=q.color||null,this.thickness=q.thickness||null,this.opacity=q.opacity||null,this.paths=[],this.bezierPath2D=[],this.allRawPaths=[],this.currentPath=[],this.scaleFactor=1,this.translationX=this.translationY=0,this.x=0,this.y=0,this._willKeepAspectRatio=!0}static initialize(q){F.AnnotationEditor.initialize(q,{strings:["editor_ink_canvas_aria_label","editor_ink2_aria_label"]})}static updateDefaultParams(q,vt){switch(q){case h.AnnotationEditorParamsType.INK_THICKNESS:yt._defaultThickness=vt;break;case h.AnnotationEditorParamsType.INK_COLOR:yt._defaultColor=vt;break;case h.AnnotationEditorParamsType.INK_OPACITY:yt._defaultOpacity=vt/100;break}}updateParams(q,vt){switch(q){case h.AnnotationEditorParamsType.INK_THICKNESS:W(this,k,Ni).call(this,vt);break;case h.AnnotationEditorParamsType.INK_COLOR:W(this,r,Bi).call(this,vt);break;case h.AnnotationEditorParamsType.INK_OPACITY:W(this,m,Ui).call(this,vt);break}}static get defaultPropertiesToUpdate(){return[[h.AnnotationEditorParamsType.INK_THICKNESS,yt._defaultThickness],[h.AnnotationEditorParamsType.INK_COLOR,yt._defaultColor||F.AnnotationEditor._defaultLineColor],[h.AnnotationEditorParamsType.INK_OPACITY,Math.round(yt._defaultOpacity*100)]]}get propertiesToUpdate(){var q;return[[h.AnnotationEditorParamsType.INK_THICKNESS,this.thickness||yt._defaultThickness],[h.AnnotationEditorParamsType.INK_COLOR,this.color||yt._defaultColor||F.AnnotationEditor._defaultLineColor],[h.AnnotationEditorParamsType.INK_OPACITY,Math.round(100*((q=this.opacity)!=null?q:yt._defaultOpacity))]]}rebuild(){!this.parent||(super.rebuild(),this.div!==null&&(this.canvas||(W(this,ct,Me).call(this),W(this,dt,Re).call(this)),this.isAttachedToDOM||(this.parent.add(this),W(this,Bt,fe).call(this)),W(this,z,pe).call(this)))}remove(){this.canvas!==null&&(this.isEmpty()||this.commit(),this.canvas.width=this.canvas.height=0,this.canvas.remove(),this.canvas=null,t(this,C).disconnect(),Z(this,C,null),super.remove())}setParent(q){!this.parent&&q?this._uiManager.removeShouldRescale(this):this.parent&&q===null&&this._uiManager.addShouldRescale(this),super.setParent(q)}onScaleChanging(){const[q,vt]=this.parentDimensions,It=this.width*q,xt=this.height*vt;this.setDimensions(It,xt)}enableEditMode(){t(this,u)||this.canvas===null||(super.enableEditMode(),this._isDraggable=!1,this.canvas.addEventListener("pointerdown",t(this,v)))}disableEditMode(){!this.isInEditMode()||this.canvas===null||(super.disableEditMode(),this._isDraggable=!this.isEmpty(),this.div.classList.remove("editing"),this.canvas.removeEventListener("pointerdown",t(this,v)))}onceAdded(){this._isDraggable=!this.isEmpty()}isEmpty(){return this.paths.length===0||this.paths.length===1&&this.paths[0].length===0}commit(){t(this,u)||(super.commit(),this.isEditing=!1,this.disableEditMode(),this.setInForeground(),Z(this,u,!0),this.div.classList.add("disabled"),W(this,z,pe).call(this,!0),this.makeResizable(),this.parent.addInkEditorIfNeeded(!0),this.moveInDOM(),this.div.focus({preventScroll:!0}))}focusin(q){!this._focusEventsAllowed||(super.focusin(q),this.enableEditMode())}canvasPointerdown(q){q.button!==0||!this.isInEditMode()||t(this,u)||(this.setInForeground(),q.preventDefault(),q.type!=="mouse"&&this.div.focus(),W(this,at,Hi).call(this,q.offsetX,q.offsetY))}canvasPointermove(q){q.preventDefault(),W(this,lt,di).call(this,q.offsetX,q.offsetY)}canvasPointerup(q){q.preventDefault(),W(this,Q,ui).call(this,q)}canvasPointerleave(q){W(this,Q,ui).call(this,q)}get isResizable(){return!this.isEmpty()&&t(this,u)}render(){if(this.div)return this.div;let q,vt;this.width&&(q=this.x,vt=this.y),super.render(),F.AnnotationEditor._l10nPromise.get("editor_ink2_aria_label").then(Jt=>{var bt;return(bt=this.div)==null?void 0:bt.setAttribute("aria-label",Jt)});const[It,xt,Lt,Nt]=W(this,X,ji).call(this);if(this.setAt(It,xt,0,0),this.setDims(Lt,Nt),W(this,ct,Me).call(this),this.width){const[Jt,bt]=this.parentDimensions;this.setAspectRatio(this.width*Jt,this.height*bt),this.setAt(q*Jt,vt*bt,this.width*Jt,this.height*bt),Z(this,w,!0),W(this,Bt,fe).call(this),this.setDims(this.width*Jt,this.height*bt),W(this,N,ae).call(this),this.div.classList.add("disabled")}else this.div.classList.add("editing"),this.enableEditMode();return W(this,dt,Re).call(this),this.div}setDimensions(q,vt){const It=Math.round(q),xt=Math.round(vt);if(t(this,A)===It&&t(this,a)===xt)return;Z(this,A,It),Z(this,a,xt),this.canvas.style.visibility="hidden";const[Lt,Nt]=this.parentDimensions;this.width=q/Lt,this.height=vt/Nt,this.fixAndSetPosition(),t(this,u)&&W(this,Dt,fi).call(this,q,vt),W(this,Bt,fe).call(this),W(this,N,ae).call(this),this.canvas.style.visibility="visible",this.fixDims()}static deserialize(q,vt,It){var j,V,et;if(q instanceof ot.InkAnnotationElement)return null;const xt=super.deserialize(q,vt,It);xt.thickness=q.thickness,xt.color=h.Util.makeHexColor(...q.color),xt.opacity=q.opacity;const[Lt,Nt]=xt.pageDimensions,Jt=xt.width*Lt,bt=xt.height*Nt,Yt=xt.parentScale,Ot=q.thickness/2;Z(xt,u,!0),Z(xt,A,Math.round(Jt)),Z(xt,a,Math.round(bt));const{paths:R,rect:e,rotation:f}=q;for(let{bezier:gt}of R){gt=W(j=yt,Wt,qi).call(j,gt,e,f);const wt=[];xt.paths.push(wt);let Pt=Yt*(gt[0]-Ot),zt=Yt*(gt[1]-Ot);for(let Rt=2,Ut=gt.length;Rt<Ut;Rt+=6){const Vt=Yt*(gt[Rt]-Ot),Kt=Yt*(gt[Rt+1]-Ot),Qt=Yt*(gt[Rt+2]-Ot),se=Yt*(gt[Rt+3]-Ot),ie=Yt*(gt[Rt+4]-Ot),ne=Yt*(gt[Rt+5]-Ot);wt.push([[Pt,zt],[Vt,Kt],[Qt,se],[ie,ne]]),Pt=ie,zt=ne}const Mt=W(this,ht,Vi).call(this,wt);xt.bezierPath2D.push(Mt)}const D=W(V=xt,Gt,gi).call(V);return Z(xt,g,Math.max(F.AnnotationEditor.MIN_SIZE,D[2]-D[0])),Z(xt,P,Math.max(F.AnnotationEditor.MIN_SIZE,D[3]-D[1])),W(et=xt,Dt,fi).call(et,Jt,bt),xt}serialize(){if(this.isEmpty())return null;const q=this.getRect(0,0),vt=F.AnnotationEditor._colorManager.convert(this.ctx.strokeStyle);return{annotationType:h.AnnotationEditorType.INK,color:vt,thickness:this.thickness,opacity:this.opacity,paths:W(this,qt,Yi).call(this,this.scaleFactor/this.parentScale,this.translationX,this.translationY,q),pageIndex:this.pageIndex,rect:q,rotation:this.rotation,structTreeParentId:this._structTreeParentId}}};let B=yt;P=new WeakMap,g=new WeakMap,L=new WeakMap,O=new WeakMap,x=new WeakMap,v=new WeakMap,y=new WeakMap,u=new WeakMap,b=new WeakMap,w=new WeakMap,C=new WeakMap,A=new WeakMap,a=new WeakMap,l=new WeakMap,k=new WeakSet,Ni=function(q){const vt=this.thickness;this.addCommands({cmd:()=>{this.thickness=q,W(this,z,pe).call(this)},undo:()=>{this.thickness=vt,W(this,z,pe).call(this)},mustExec:!0,type:h.AnnotationEditorParamsType.INK_THICKNESS,overwriteIfSameType:!0,keepUndo:!0})},r=new WeakSet,Bi=function(q){const vt=this.color;this.addCommands({cmd:()=>{this.color=q,W(this,N,ae).call(this)},undo:()=>{this.color=vt,W(this,N,ae).call(this)},mustExec:!0,type:h.AnnotationEditorParamsType.INK_COLOR,overwriteIfSameType:!0,keepUndo:!0})},m=new WeakSet,Ui=function(q){q/=100;const vt=this.opacity;this.addCommands({cmd:()=>{this.opacity=q,W(this,N,ae).call(this)},undo:()=>{this.opacity=vt,W(this,N,ae).call(this)},mustExec:!0,type:h.AnnotationEditorParamsType.INK_OPACITY,overwriteIfSameType:!0,keepUndo:!0})},X=new WeakSet,ji=function(){const{parentRotation:q,parentDimensions:[vt,It]}=this;switch(q){case 90:return[0,It,It,vt];case 180:return[vt,It,vt,It];case 270:return[vt,0,It,vt];default:return[0,0,vt,It]}},$=new WeakSet,hi=function(){const{ctx:q,color:vt,opacity:It,thickness:xt,parentScale:Lt,scaleFactor:Nt}=this;q.lineWidth=xt*Lt/Nt,q.lineCap="round",q.lineJoin="round",q.miterLimit=10,q.strokeStyle=`${vt}${(0,ut.opacityToHex)(It)}`},at=new WeakSet,Hi=function(q,vt){var It;this.canvas.addEventListener("contextmenu",G.noContextMenu),this.canvas.addEventListener("pointerleave",t(this,O)),this.canvas.addEventListener("pointermove",t(this,L)),this.canvas.addEventListener("pointerup",t(this,x)),this.canvas.removeEventListener("pointerdown",t(this,v)),this.isEditing=!0,t(this,w)||(Z(this,w,!0),W(this,Bt,fe).call(this),this.thickness||(this.thickness=yt._defaultThickness),this.color||(this.color=yt._defaultColor||F.AnnotationEditor._defaultLineColor),(It=this.opacity)!=null||(this.opacity=yt._defaultOpacity)),this.currentPath.push([q,vt]),Z(this,b,!1),W(this,$,hi).call(this),Z(this,l,()=>{W(this,n,zi).call(this),t(this,l)&&window.requestAnimationFrame(t(this,l))}),window.requestAnimationFrame(t(this,l))},lt=new WeakSet,di=function(q,vt){const[It,xt]=this.currentPath.at(-1);if(this.currentPath.length>1&&q===It&&vt===xt)return;const Lt=this.currentPath;let Nt=t(this,y);if(Lt.push([q,vt]),Z(this,b,!0),Lt.length<=2){Nt.moveTo(...Lt[0]),Nt.lineTo(q,vt);return}Lt.length===3&&(Z(this,y,Nt=new Path2D),Nt.moveTo(...Lt[0])),W(this,o,Xi).call(this,Nt,...Lt.at(-3),...Lt.at(-2),q,vt)},Ct=new WeakSet,Wi=function(){if(this.currentPath.length===0)return;const q=this.currentPath.at(-1);t(this,y).lineTo(...q)},S=new WeakSet,Gi=function(q,vt){Z(this,l,null),q=Math.min(Math.max(q,0),this.canvas.width),vt=Math.min(Math.max(vt,0),this.canvas.height),W(this,lt,di).call(this,q,vt),W(this,Ct,Wi).call(this);let It;if(this.currentPath.length!==1)It=W(this,_,$i).call(this);else{const bt=[q,vt];It=[[bt,bt.slice(),bt.slice(),bt]]}const xt=t(this,y),Lt=this.currentPath;this.currentPath=[],Z(this,y,new Path2D);const Nt=()=>{this.allRawPaths.push(Lt),this.paths.push(It),this.bezierPath2D.push(xt),this.rebuild()},Jt=()=>{this.allRawPaths.pop(),this.paths.pop(),this.bezierPath2D.pop(),this.paths.length===0?this.remove():(this.canvas||(W(this,ct,Me).call(this),W(this,dt,Re).call(this)),W(this,z,pe).call(this))};this.addCommands({cmd:Nt,undo:Jt,mustExec:!0})},n=new WeakSet,zi=function(){if(!t(this,b))return;Z(this,b,!1);const q=Math.ceil(this.thickness*this.parentScale),vt=this.currentPath.slice(-3),It=vt.map(Nt=>Nt[0]),xt=vt.map(Nt=>Nt[1]);Math.min(...It)-q,Math.max(...It)+q,Math.min(...xt)-q,Math.max(...xt)+q;const{ctx:Lt}=this;Lt.save(),Lt.clearRect(0,0,this.canvas.width,this.canvas.height);for(const Nt of this.bezierPath2D)Lt.stroke(Nt);Lt.stroke(t(this,y)),Lt.restore()},o=new WeakSet,Xi=function(q,vt,It,xt,Lt,Nt,Jt){const bt=(vt+xt)/2,Yt=(It+Lt)/2,Ot=(xt+Nt)/2,R=(Lt+Jt)/2;q.bezierCurveTo(bt+2*(xt-bt)/3,Yt+2*(Lt-Yt)/3,Ot+2*(xt-Ot)/3,R+2*(Lt-R)/3,Ot,R)},_=new WeakSet,$i=function(){const q=this.currentPath;if(q.length<=2)return[[q[0],q[0],q.at(-1),q.at(-1)]];const vt=[];let It,[xt,Lt]=q[0];for(It=1;It<q.length-2;It++){const[e,f]=q[It],[D,j]=q[It+1],V=(e+D)/2,et=(f+j)/2,gt=[xt+2*(e-xt)/3,Lt+2*(f-Lt)/3],wt=[V+2*(e-V)/3,et+2*(f-et)/3];vt.push([[xt,Lt],gt,wt,[V,et]]),[xt,Lt]=[V,et]}const[Nt,Jt]=q[It],[bt,Yt]=q[It+1],Ot=[xt+2*(Nt-xt)/3,Lt+2*(Jt-Lt)/3],R=[bt+2*(Nt-bt)/3,Yt+2*(Jt-Yt)/3];return vt.push([[xt,Lt],Ot,R,[bt,Yt]]),vt},N=new WeakSet,ae=function(){if(this.isEmpty()){W(this,K,De).call(this);return}W(this,$,hi).call(this);const{canvas:q,ctx:vt}=this;vt.setTransform(1,0,0,1,0,0),vt.clearRect(0,0,q.width,q.height),W(this,K,De).call(this);for(const It of this.bezierPath2D)vt.stroke(It)},Q=new WeakSet,ui=function(q){this.canvas.removeEventListener("pointerleave",t(this,O)),this.canvas.removeEventListener("pointermove",t(this,L)),this.canvas.removeEventListener("pointerup",t(this,x)),this.canvas.addEventListener("pointerdown",t(this,v)),setTimeout(()=>{this.canvas.removeEventListener("contextmenu",G.noContextMenu)},10),W(this,S,Gi).call(this,q.offsetX,q.offsetY),this.addToAnnotationStorage(),this.setInBackground()},ct=new WeakSet,Me=function(){this.canvas=document.createElement("canvas"),this.canvas.width=this.canvas.height=0,this.canvas.className="inkEditorCanvas",F.AnnotationEditor._l10nPromise.get("editor_ink_canvas_aria_label").then(q=>{var vt;return(vt=this.canvas)==null?void 0:vt.setAttribute("aria-label",q)}),this.div.append(this.canvas),this.ctx=this.canvas.getContext("2d")},dt=new WeakSet,Re=function(){Z(this,C,new ResizeObserver(q=>{const vt=q[0].contentRect;vt.width&&vt.height&&this.setDimensions(vt.width,vt.height)})),t(this,C).observe(this.div)},Bt=new WeakSet,fe=function(){if(!t(this,w))return;const[q,vt]=this.parentDimensions;this.canvas.width=Math.ceil(this.width*q),this.canvas.height=Math.ceil(this.height*vt),W(this,K,De).call(this)},Dt=new WeakSet,fi=function(q,vt){const It=W(this,rt,Ie).call(this),xt=(q-It)/t(this,g),Lt=(vt-It)/t(this,P);this.scaleFactor=Math.min(xt,Lt)},K=new WeakSet,De=function(){const q=W(this,rt,Ie).call(this)/2;this.ctx.setTransform(this.scaleFactor,0,0,this.scaleFactor,this.translationX*this.scaleFactor+q,this.translationY*this.scaleFactor+q)},ht=new WeakSet,Vi=function(q){const vt=new Path2D;for(let It=0,xt=q.length;It<xt;It++){const[Lt,Nt,Jt,bt]=q[It];It===0&&vt.moveTo(...Lt),vt.bezierCurveTo(Nt[0],Nt[1],Jt[0],Jt[1],bt[0],bt[1])}return vt},Tt=new WeakSet,pi=function(q,vt,It){const[xt,Lt,Nt,Jt]=vt;switch(It){case 0:for(let bt=0,Yt=q.length;bt<Yt;bt+=2)q[bt]+=xt,q[bt+1]=Jt-q[bt+1];break;case 90:for(let bt=0,Yt=q.length;bt<Yt;bt+=2){const Ot=q[bt];q[bt]=q[bt+1]+xt,q[bt+1]=Ot+Lt}break;case 180:for(let bt=0,Yt=q.length;bt<Yt;bt+=2)q[bt]=Nt-q[bt],q[bt+1]+=Lt;break;case 270:for(let bt=0,Yt=q.length;bt<Yt;bt+=2){const Ot=q[bt];q[bt]=Nt-q[bt+1],q[bt+1]=Jt-Ot}break;default:throw new Error("Invalid rotation")}return q},Wt=new WeakSet,qi=function(q,vt,It){const[xt,Lt,Nt,Jt]=vt;switch(It){case 0:for(let bt=0,Yt=q.length;bt<Yt;bt+=2)q[bt]-=xt,q[bt+1]=Jt-q[bt+1];break;case 90:for(let bt=0,Yt=q.length;bt<Yt;bt+=2){const Ot=q[bt];q[bt]=q[bt+1]-Lt,q[bt+1]=Ot-xt}break;case 180:for(let bt=0,Yt=q.length;bt<Yt;bt+=2)q[bt]=Nt-q[bt],q[bt+1]-=Lt;break;case 270:for(let bt=0,Yt=q.length;bt<Yt;bt+=2){const Ot=q[bt];q[bt]=Jt-q[bt+1],q[bt+1]=Nt-Ot}break;default:throw new Error("Invalid rotation")}return q},qt=new WeakSet,Yi=function(q,vt,It,xt){var Yt,Ot;const Lt=[],Nt=this.thickness/2,Jt=q*vt+Nt,bt=q*It+Nt;for(const R of this.paths){const e=[],f=[];for(let D=0,j=R.length;D<j;D++){const[V,et,gt,wt]=R[D],Pt=q*V[0]+Jt,zt=q*V[1]+bt,Mt=q*et[0]+Jt,Rt=q*et[1]+bt,Ut=q*gt[0]+Jt,Vt=q*gt[1]+bt,Kt=q*wt[0]+Jt,Qt=q*wt[1]+bt;D===0&&(e.push(Pt,zt),f.push(Pt,zt)),e.push(Mt,Rt,Ut,Vt,Kt,Qt),f.push(Mt,Rt),D===j-1&&f.push(Kt,Qt)}Lt.push({bezier:W(Yt=yt,Tt,pi).call(Yt,e,xt,this.rotation),points:W(Ot=yt,Tt,pi).call(Ot,f,xt,this.rotation)})}return Lt},Gt=new WeakSet,gi=function(){let q=1/0,vt=-1/0,It=1/0,xt=-1/0;for(const Lt of this.paths)for(const[Nt,Jt,bt,Yt]of Lt){const Ot=h.Util.bezierBoundingBox(...Nt,...Jt,...bt,...Yt);q=Math.min(q,Ot[0]),It=Math.min(It,Ot[1]),vt=Math.max(vt,Ot[2]),xt=Math.max(xt,Ot[3])}return[q,It,vt,xt]},rt=new WeakSet,Ie=function(){return t(this,u)?Math.ceil(this.thickness*this.parentScale):0},z=new WeakSet,pe=function(q=!1){if(this.isEmpty())return;if(!t(this,u)){W(this,N,ae).call(this);return}const vt=W(this,Gt,gi).call(this),It=W(this,rt,Ie).call(this);Z(this,g,Math.max(F.AnnotationEditor.MIN_SIZE,vt[2]-vt[0])),Z(this,P,Math.max(F.AnnotationEditor.MIN_SIZE,vt[3]-vt[1]));const xt=Math.ceil(It+t(this,g)*this.scaleFactor),Lt=Math.ceil(It+t(this,P)*this.scaleFactor),[Nt,Jt]=this.parentDimensions;this.width=xt/Nt,this.height=Lt/Jt,this.setAspectRatio(xt,Lt);const bt=this.translationX,Yt=this.translationY;this.translationX=-vt[0],this.translationY=-vt[1],W(this,Bt,fe).call(this),W(this,N,ae).call(this),Z(this,A,xt),Z(this,a,Lt),this.setDims(xt,Lt);const Ot=q?It/this.scaleFactor/2:0;this.translate(bt-this.translationX-Ot,Yt-this.translationY-Ot)},I(B,ht),I(B,Tt),I(B,Wt),ee(B,"_defaultColor",null),ee(B,"_defaultOpacity",1),ee(B,"_defaultThickness",1),ee(B,"_type","ink"),d.InkEditor=B},(_t,d,st)=>{var B,P,g,L,O,x,v,y,u,b,w,ve,A,Se,l,Le,p,mi,T,Ki,U,Ji,E,bi,it,Oe,H,Qi;Object.defineProperty(d,"__esModule",{value:!0}),d.StampEditor=void 0;var h=st(1),F=st(4),ot=st(6),G=st(29);const pt=class extends F.AnnotationEditor{constructor(S){super({...S,name:"stampEditor"});I(this,w);I(this,A);I(this,l);I(this,p);I(this,T);I(this,U);I(this,E);I(this,it);I(this,H);I(this,B,null);I(this,P,null);I(this,g,null);I(this,L,null);I(this,O,null);I(this,x,null);I(this,v,null);I(this,y,null);I(this,u,!1);I(this,b,!1);Z(this,L,S.bitmapUrl),Z(this,O,S.bitmapFile)}static initialize(S){F.AnnotationEditor.initialize(S)}static get supportedTypes(){const S=["apng","avif","bmp","gif","jpeg","png","svg+xml","webp","x-icon"];return(0,h.shadow)(this,"supportedTypes",S.map(i=>`image/${i}`))}static get supportedTypesStr(){return(0,h.shadow)(this,"supportedTypesStr",this.supportedTypes.join(","))}static isHandlingMimeForPasting(S){return this.supportedTypes.includes(S)}static paste(S,i){i.pasteEditor(h.AnnotationEditorType.STAMP,{bitmapFile:S.getAsFile()})}remove(){var S,i;t(this,P)&&(Z(this,B,null),this._uiManager.imageManager.deleteId(t(this,P)),(S=t(this,x))==null||S.remove(),Z(this,x,null),(i=t(this,v))==null||i.disconnect(),Z(this,v,null)),super.remove()}rebuild(){if(!this.parent){t(this,P)&&W(this,l,Le).call(this);return}super.rebuild(),this.div!==null&&(t(this,P)&&W(this,l,Le).call(this),this.isAttachedToDOM||this.parent.add(this))}onceAdded(){this._isDraggable=!0,this.div.focus()}isEmpty(){return!(t(this,g)||t(this,B)||t(this,L)||t(this,O))}get isResizable(){return!0}render(){if(this.div)return this.div;let S,i;if(this.width&&(S=this.x,i=this.y),super.render(),this.div.hidden=!0,t(this,B)?W(this,p,mi).call(this):W(this,l,Le).call(this),this.width){const[n,s]=this.parentDimensions;this.setAt(S*n,i*s,this.width*n,this.height*s)}return this.div}static deserialize(S,i,n){if(S instanceof G.StampAnnotationElement)return null;const s=super.deserialize(S,i,n),{rect:o,bitmapUrl:c,bitmapId:_,isSvg:M,accessibilityData:N}=S;_&&n.imageManager.isValidId(_)?Z(s,P,_):Z(s,L,c),Z(s,u,M);const[tt,Q]=s.pageDimensions;return s.width=(o[2]-o[0])/tt,s.height=(o[3]-o[1])/Q,N&&(s.altTextData=N),s}serialize(S=!1,i=null){if(this.isEmpty())return null;const n={annotationType:h.AnnotationEditorType.STAMP,bitmapId:t(this,P),pageIndex:this.pageIndex,rect:this.getRect(0,0),rotation:this.rotation,isSvg:t(this,u),structTreeParentId:this._structTreeParentId};if(S)return n.bitmapUrl=W(this,it,Oe).call(this,!0),n.accessibilityData=this.altTextData,n;const{decorative:s,altText:o}=this.altTextData;if(!s&&o&&(n.accessibilityData={type:"Figure",alt:o}),i===null)return n;i.stamps||(i.stamps=new Map);const c=t(this,u)?(n.rect[2]-n.rect[0])*(n.rect[3]-n.rect[1]):null;if(!i.stamps.has(t(this,P)))i.stamps.set(t(this,P),{area:c,serialized:n}),n.bitmap=W(this,it,Oe).call(this,!1);else if(t(this,u)){const _=i.stamps.get(t(this,P));c>_.area&&(_.area=c,_.serialized.bitmap.close(),_.serialized.bitmap=W(this,it,Oe).call(this,!1))}return n}};let ut=pt;B=new WeakMap,P=new WeakMap,g=new WeakMap,L=new WeakMap,O=new WeakMap,x=new WeakMap,v=new WeakMap,y=new WeakMap,u=new WeakMap,b=new WeakMap,w=new WeakSet,ve=function(S,i=!1){if(!S){this.remove();return}Z(this,B,S.bitmap),i||(Z(this,P,S.id),Z(this,u,S.isSvg)),W(this,p,mi).call(this)},A=new WeakSet,Se=function(){Z(this,g,null),this._uiManager.enableWaiting(!1),t(this,x)&&this.div.focus()},l=new WeakSet,Le=function(){if(t(this,P)){this._uiManager.enableWaiting(!0),this._uiManager.imageManager.getFromId(t(this,P)).then(i=>W(this,w,ve).call(this,i,!0)).finally(()=>W(this,A,Se).call(this));return}if(t(this,L)){const i=t(this,L);Z(this,L,null),this._uiManager.enableWaiting(!0),Z(this,g,this._uiManager.imageManager.getFromUrl(i).then(n=>W(this,w,ve).call(this,n)).finally(()=>W(this,A,Se).call(this)));return}if(t(this,O)){const i=t(this,O);Z(this,O,null),this._uiManager.enableWaiting(!0),Z(this,g,this._uiManager.imageManager.getFromFile(i).then(n=>W(this,w,ve).call(this,n)).finally(()=>W(this,A,Se).call(this)));return}const S=document.createElement("input");S.type="file",S.accept=pt.supportedTypesStr,Z(this,g,new Promise(i=>{S.addEventListener("change",async()=>{if(!S.files||S.files.length===0)this.remove();else{this._uiManager.enableWaiting(!0);const n=await this._uiManager.imageManager.getFromFile(S.files[0]);W(this,w,ve).call(this,n)}i()}),S.addEventListener("cancel",()=>{this.remove(),i()})}).finally(()=>W(this,A,Se).call(this))),S.click()},p=new WeakSet,mi=function(){const{div:S}=this;let{width:i,height:n}=t(this,B);const[s,o]=this.pageDimensions,c=.75;if(this.width)i=this.width*s,n=this.height*o;else if(i>c*s||n>c*o){const tt=Math.min(c*s/i,c*o/n);i*=tt,n*=tt}const[_,M]=this.parentDimensions;this.setDims(i*_/s,n*M/o),this._uiManager.enableWaiting(!1);const N=Z(this,x,document.createElement("canvas"));S.append(N),S.hidden=!1,W(this,E,bi).call(this,i,n),W(this,H,Qi).call(this),t(this,b)||(this.parent.addUndoableEditor(this),Z(this,b,!0)),this._uiManager._eventBus.dispatch("reporttelemetry",{source:this,details:{type:"editing",subtype:this.editorType,data:{action:"inserted_image"}}}),this.addAltTextButton()},T=new WeakSet,Ki=function(S,i){var c;const[n,s]=this.parentDimensions;this.width=S/n,this.height=i/s,this.setDims(S,i),(c=this._initialOptions)!=null&&c.isCentered?this.center():this.fixAndSetPosition(),this._initialOptions=null,t(this,y)!==null&&clearTimeout(t(this,y)),Z(this,y,setTimeout(()=>{Z(this,y,null),W(this,E,bi).call(this,S,i)},200))},U=new WeakSet,Ji=function(S,i){const{width:n,height:s}=t(this,B);let o=n,c=s,_=t(this,B);for(;o>2*S||c>2*i;){const M=o,N=c;o>2*S&&(o=o>=16384?Math.floor(o/2)-1:Math.ceil(o/2)),c>2*i&&(c=c>=16384?Math.floor(c/2)-1:Math.ceil(c/2));const tt=new OffscreenCanvas(o,c);tt.getContext("2d").drawImage(_,0,0,M,N,0,0,o,c),_=tt.transferToImageBitmap()}return _},E=new WeakSet,bi=function(S,i){S=Math.ceil(S),i=Math.ceil(i);const n=t(this,x);if(!n||n.width===S&&n.height===i)return;n.width=S,n.height=i;const s=t(this,u)?t(this,B):W(this,U,Ji).call(this,S,i),o=n.getContext("2d");o.filter=this._uiManager.hcmFilter,o.drawImage(s,0,0,s.width,s.height,0,0,S,i)},it=new WeakSet,Oe=function(S){if(S){if(t(this,u)){const s=this._uiManager.imageManager.getSvgUrl(t(this,P));if(s)return s}const i=document.createElement("canvas");return{width:i.width,height:i.height}=t(this,B),i.getContext("2d").drawImage(t(this,B),0,0),i.toDataURL()}if(t(this,u)){const[i,n]=this.pageDimensions,s=Math.round(this.width*i*ot.PixelsPerInch.PDF_TO_CSS_UNITS),o=Math.round(this.height*n*ot.PixelsPerInch.PDF_TO_CSS_UNITS),c=new OffscreenCanvas(s,o);return c.getContext("2d").drawImage(t(this,B),0,0,t(this,B).width,t(this,B).height,0,0,s,o),c.transferToImageBitmap()}return structuredClone(t(this,B))},H=new WeakSet,Qi=function(){Z(this,v,new ResizeObserver(S=>{const i=S[0].contentRect;i.width&&i.height&&W(this,T,Ki).call(this,i.width,i.height)})),t(this,v).observe(this.div)},ee(ut,"_type","stamp"),d.StampEditor=ut}],__webpack_module_cache__={};function __w_pdfjs_require__(_t){var d=__webpack_module_cache__[_t];if(d!==void 0)return d.exports;var st=__webpack_module_cache__[_t]={exports:{}};return __webpack_modules__[_t](st,st.exports,__w_pdfjs_require__),st.exports}var __webpack_exports__={};return(()=>{var _t=__webpack_exports__;Object.defineProperty(_t,"__esModule",{value:!0}),Object.defineProperty(_t,"AbortException",{enumerable:!0,get:function(){return d.AbortException}}),Object.defineProperty(_t,"AnnotationEditorLayer",{enumerable:!0,get:function(){return ot.AnnotationEditorLayer}}),Object.defineProperty(_t,"AnnotationEditorParamsType",{enumerable:!0,get:function(){return d.AnnotationEditorParamsType}}),Object.defineProperty(_t,"AnnotationEditorType",{enumerable:!0,get:function(){return d.AnnotationEditorType}}),Object.defineProperty(_t,"AnnotationEditorUIManager",{enumerable:!0,get:function(){return G.AnnotationEditorUIManager}}),Object.defineProperty(_t,"AnnotationLayer",{enumerable:!0,get:function(){return ut.AnnotationLayer}}),Object.defineProperty(_t,"AnnotationMode",{enumerable:!0,get:function(){return d.AnnotationMode}}),Object.defineProperty(_t,"CMapCompressionType",{enumerable:!0,get:function(){return d.CMapCompressionType}}),Object.defineProperty(_t,"DOMSVGFactory",{enumerable:!0,get:function(){return h.DOMSVGFactory}}),Object.defineProperty(_t,"FeatureTest",{enumerable:!0,get:function(){return d.FeatureTest}}),Object.defineProperty(_t,"GlobalWorkerOptions",{enumerable:!0,get:function(){return B.GlobalWorkerOptions}}),Object.defineProperty(_t,"ImageKind",{enumerable:!0,get:function(){return d.ImageKind}}),Object.defineProperty(_t,"InvalidPDFException",{enumerable:!0,get:function(){return d.InvalidPDFException}}),Object.defineProperty(_t,"MissingPDFException",{enumerable:!0,get:function(){return d.MissingPDFException}}),Object.defineProperty(_t,"OPS",{enumerable:!0,get:function(){return d.OPS}}),Object.defineProperty(_t,"PDFDataRangeTransport",{enumerable:!0,get:function(){return st.PDFDataRangeTransport}}),Object.defineProperty(_t,"PDFDateString",{enumerable:!0,get:function(){return h.PDFDateString}}),Object.defineProperty(_t,"PDFWorker",{enumerable:!0,get:function(){return st.PDFWorker}}),Object.defineProperty(_t,"PasswordResponses",{enumerable:!0,get:function(){return d.PasswordResponses}}),Object.defineProperty(_t,"PermissionFlag",{enumerable:!0,get:function(){return d.PermissionFlag}}),Object.defineProperty(_t,"PixelsPerInch",{enumerable:!0,get:function(){return h.PixelsPerInch}}),Object.defineProperty(_t,"PromiseCapability",{enumerable:!0,get:function(){return d.PromiseCapability}}),Object.defineProperty(_t,"RenderingCancelledException",{enumerable:!0,get:function(){return h.RenderingCancelledException}}),Object.defineProperty(_t,"SVGGraphics",{enumerable:!0,get:function(){return st.SVGGraphics}}),Object.defineProperty(_t,"UnexpectedResponseException",{enumerable:!0,get:function(){return d.UnexpectedResponseException}}),Object.defineProperty(_t,"Util",{enumerable:!0,get:function(){return d.Util}}),Object.defineProperty(_t,"VerbosityLevel",{enumerable:!0,get:function(){return d.VerbosityLevel}}),Object.defineProperty(_t,"XfaLayer",{enumerable:!0,get:function(){return P.XfaLayer}}),Object.defineProperty(_t,"build",{enumerable:!0,get:function(){return st.build}}),Object.defineProperty(_t,"createValidAbsoluteUrl",{enumerable:!0,get:function(){return d.createValidAbsoluteUrl}}),Object.defineProperty(_t,"getDocument",{enumerable:!0,get:function(){return st.getDocument}}),Object.defineProperty(_t,"getFilenameFromUrl",{enumerable:!0,get:function(){return h.getFilenameFromUrl}}),Object.defineProperty(_t,"getPdfFilenameFromUrl",{enumerable:!0,get:function(){return h.getPdfFilenameFromUrl}}),Object.defineProperty(_t,"getXfaPageViewport",{enumerable:!0,get:function(){return h.getXfaPageViewport}}),Object.defineProperty(_t,"isDataScheme",{enumerable:!0,get:function(){return h.isDataScheme}}),Object.defineProperty(_t,"isPdfFile",{enumerable:!0,get:function(){return h.isPdfFile}}),Object.defineProperty(_t,"loadScript",{enumerable:!0,get:function(){return h.loadScript}}),Object.defineProperty(_t,"noContextMenu",{enumerable:!0,get:function(){return h.noContextMenu}}),Object.defineProperty(_t,"normalizeUnicode",{enumerable:!0,get:function(){return d.normalizeUnicode}}),Object.defineProperty(_t,"renderTextLayer",{enumerable:!0,get:function(){return F.renderTextLayer}}),Object.defineProperty(_t,"setLayerDimensions",{enumerable:!0,get:function(){return h.setLayerDimensions}}),Object.defineProperty(_t,"shadow",{enumerable:!0,get:function(){return d.shadow}}),Object.defineProperty(_t,"updateTextLayer",{enumerable:!0,get:function(){return F.updateTextLayer}}),Object.defineProperty(_t,"version",{enumerable:!0,get:function(){return st.version}});var d=__w_pdfjs_require__(1),st=__w_pdfjs_require__(2),h=__w_pdfjs_require__(6),F=__w_pdfjs_require__(26),ot=__w_pdfjs_require__(27),G=__w_pdfjs_require__(5),ut=__w_pdfjs_require__(29),B=__w_pdfjs_require__(14),P=__w_pdfjs_require__(32)})(),__webpack_exports__})())})(pdf$2);var pdf=getDefaultExportFromCjs(pdf$2.exports),pdf$1=_mergeNamespaces({__proto__:null,default:pdf},[pdf$2.exports]);export{pdf$1 as p};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
