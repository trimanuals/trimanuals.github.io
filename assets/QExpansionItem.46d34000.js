import{c0 as X,f as z,bh as y,c1 as F,E as W,c2 as Y,j as Z,G as p,r as _,c3 as ee,c4 as te,n as i,N as m,U as ne,o as n,c5 as ae,bX as oe,b9 as k,a7 as ie,bn as le,c6 as ue,aC as ce,a6 as w,a5 as S,J as C,L as de}from"./index.6def9867.js";const u=X({}),se=Object.keys(y);var ge=z({name:"QExpansionItem",props:{...y,...F,...W,icon:String,label:String,labelLines:[Number,String],caption:String,captionLines:[Number,String],dense:Boolean,toggleAriaLabel:String,expandIcon:String,expandedIcon:String,expandIconClass:[Array,String,Object],duration:{},headerInsetLevel:Number,contentInsetLevel:Number,expandSeparator:Boolean,defaultOpened:Boolean,hideExpandIcon:Boolean,expandIconToggle:Boolean,switchToggleSide:Boolean,denseToggle:Boolean,group:String,popup:Boolean,headerStyle:[Array,String,Object],headerClass:[Array,String,Object]},emits:[...Y,"click","afterShow","afterHide"],setup(e,{slots:g,emit:v}){const{proxy:{$q:d}}=Z(),f=p(e,d),a=_(e.modelValue!==null?e.modelValue:e.defaultOpened),h=_(null),b=ee(),{show:A,hide:I,toggle:x}=te({showing:a});let l,c;const B=i(()=>`q-expansion-item q-item-type q-expansion-item--${a.value===!0?"expanded":"collapsed"} q-expansion-item--${e.popup===!0?"popup":"standard"}`),O=i(()=>{if(e.contentInsetLevel===void 0)return null;const t=d.lang.rtl===!0?"Right":"Left";return{["padding"+t]:e.contentInsetLevel*56+"px"}}),s=i(()=>e.disable!==!0&&(e.href!==void 0||e.to!==void 0&&e.to!==null&&e.to!=="")),Q=i(()=>{const t={};return se.forEach(o=>{t[o]=e[o]}),t}),j=i(()=>s.value===!0||e.expandIconToggle!==!0),E=i(()=>e.expandedIcon!==void 0&&a.value===!0?e.expandedIcon:e.expandIcon||d.iconSet.expansionItem[e.denseToggle===!0?"denseIcon":"icon"]),P=i(()=>e.disable!==!0&&(s.value===!0||e.expandIconToggle===!0)),H=i(()=>({expanded:a.value===!0,detailsId:b.value,toggle:x,show:A,hide:I})),T=i(()=>{const t=e.toggleAriaLabel!==void 0?e.toggleAriaLabel:d.lang.label[a.value===!0?"collapse":"expand"](e.label);return{role:"button","aria-expanded":a.value===!0?"true":"false","aria-controls":b.value,"aria-label":t}});m(()=>e.group,t=>{c!==void 0&&c(),t!==void 0&&q()});function N(t){s.value!==!0&&x(t),v("click",t)}function R(t){t.keyCode===13&&L(t,!0)}function L(t,o){o!==!0&&h.value!==null&&h.value.focus(),x(t),de(t)}function D(){v("afterShow")}function G(){v("afterHide")}function q(){l===void 0&&(l=ae()),a.value===!0&&(u[e.group]=l);const t=m(a,r=>{r===!0?u[e.group]=l:u[e.group]===l&&delete u[e.group]}),o=m(()=>u[e.group],(r,J)=>{J===l&&r!==void 0&&r!==l&&I()});c=()=>{t(),o(),u[e.group]===l&&delete u[e.group],c=void 0}}function $(){const t={class:[`q-focusable relative-position cursor-pointer${e.denseToggle===!0&&e.switchToggleSide===!0?" items-end":""}`,e.expandIconClass],side:e.switchToggleSide!==!0,avatar:e.switchToggleSide},o=[n(C,{class:"q-expansion-item__toggle-icon"+(e.expandedIcon===void 0&&a.value===!0?" q-expansion-item__toggle-icon--rotated":""),name:E.value})];return P.value===!0&&(Object.assign(t,{tabindex:0,...T.value,onClick:L,onKeyup:R}),o.unshift(n("div",{ref:h,class:"q-expansion-item__toggle-focus q-icon q-focus-helper q-focus-helper--rounded",tabindex:-1}))),n(S,t,()=>o)}function K(){let t;return g.header!==void 0?t=[].concat(g.header(H.value)):(t=[n(S,()=>[n(w,{lines:e.labelLines},()=>e.label||""),e.caption?n(w,{lines:e.captionLines,caption:!0},()=>e.caption):null])],e.icon&&t[e.switchToggleSide===!0?"push":"unshift"](n(S,{side:e.switchToggleSide===!0,avatar:e.switchToggleSide!==!0},()=>n(C,{name:e.icon})))),e.disable!==!0&&e.hideExpandIcon!==!0&&t[e.switchToggleSide===!0?"unshift":"push"]($()),t}function M(){const t={ref:"item",style:e.headerStyle,class:e.headerClass,dark:f.value,disable:e.disable,dense:e.dense,insetLevel:e.headerInsetLevel};return j.value===!0&&(t.clickable=!0,t.onClick=N,Object.assign(t,s.value===!0?Q.value:T.value)),n(ie,t,K)}function U(){return le(n("div",{key:"e-content",class:"q-expansion-item__content relative-position",style:O.value,id:b.value},ce(g.default)),[[ue,a.value]])}function V(){const t=[M(),n(oe,{duration:e.duration,onShow:D,onHide:G},U)];return e.expandSeparator===!0&&t.push(n(k,{class:"q-expansion-item__border q-expansion-item__border--top absolute-top",dark:f.value}),n(k,{class:"q-expansion-item__border q-expansion-item__border--bottom absolute-bottom",dark:f.value})),t}return e.group!==void 0&&q(),ne(()=>{c!==void 0&&c()}),()=>n("div",{class:B.value},[n("div",{class:"q-expansion-item__container relative-position"},V())])}});export{ge as Q};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
