import{Q as Ot}from"./QField.d0527066.js";import{f as dt,E as Ft,F as Bt,G as Rt,H as Et,n as f,I as Ht,o as g,J as Be,K as Lt,R as Tt,j as je,L as ne,M as Dt,r as E,N as me,O as Pt,P as Nt,S as $t,T as Kt,U as ft,V as G,W as Ke,h as jt,X as vt,i as Qt,l as Ut,k as Wt,Y as Xt,Z as Yt,v as Ne,q as Gt,_ as ke,$ as it,a0 as Jt,a1 as ve,a2 as Zt,a3 as el,a4 as tl,w as at,a5 as ll,a6 as ul,a7 as nl,a8 as ol,a9 as il}from"./index.6def9867.js";const al={xs:8,sm:10,md:14,lg:20,xl:24};var rl=dt({name:"QChip",props:{...Ft,...Bt,dense:Boolean,icon:String,iconRight:String,iconRemove:String,iconSelected:String,label:[String,Number],color:String,textColor:String,modelValue:{type:Boolean,default:!0},selected:{type:Boolean,default:null},square:Boolean,outline:Boolean,clickable:Boolean,removable:Boolean,removeAriaLabel:String,tabindex:[String,Number],disable:Boolean,ripple:{type:[Boolean,Object],default:!0}},emits:["update:modelValue","update:selected","remove","click"],setup(e,{slots:c,emit:a}){const{proxy:{$q:b}}=je(),M=Rt(e,b),i=Et(e,al),F=f(()=>e.selected===!0||e.icon!==void 0),y=f(()=>e.selected===!0?e.iconSelected||b.iconSet.chip.selected:e.icon),h=f(()=>e.iconRemove||b.iconSet.chip.remove),p=f(()=>e.disable===!1&&(e.clickable===!0||e.selected!==null)),r=f(()=>{const d=e.outline===!0&&e.color||e.textColor;return"q-chip row inline no-wrap items-center"+(e.outline===!1&&e.color!==void 0?` bg-${e.color}`:"")+(d?` text-${d} q-chip--colored`:"")+(e.disable===!0?" disabled":"")+(e.dense===!0?" q-chip--dense":"")+(e.outline===!0?" q-chip--outline":"")+(e.selected===!0?" q-chip--selected":"")+(p.value===!0?" q-chip--clickable cursor-pointer non-selectable q-hoverable":"")+(e.square===!0?" q-chip--square":"")+(M.value===!0?" q-chip--dark q-dark":"")}),w=f(()=>{const d=e.disable===!0?{tabindex:-1,"aria-disabled":"true"}:{tabindex:e.tabindex||0},D={...d,role:"button","aria-hidden":"false","aria-label":e.removeAriaLabel||b.lang.label.remove};return{chip:d,remove:D}});function C(d){d.keyCode===13&&k(d)}function k(d){e.disable||(a("update:selected",!e.selected),a("click",d))}function z(d){(d.keyCode===void 0||d.keyCode===13)&&(ne(d),e.disable===!1&&(a("update:modelValue",!1),a("remove")))}function T(){const d=[];p.value===!0&&d.push(g("div",{class:"q-focus-helper"})),F.value===!0&&d.push(g(Be,{class:"q-chip__icon q-chip__icon--left",name:y.value}));const D=e.label!==void 0?[g("div",{class:"ellipsis"},[e.label])]:void 0;return d.push(g("div",{class:"q-chip__content col row no-wrap items-center q-anchor--skip"},Lt(c.default,D))),e.iconRight&&d.push(g(Be,{class:"q-chip__icon q-chip__icon--right",name:e.iconRight})),e.removable===!0&&d.push(g(Be,{class:"q-chip__icon q-chip__icon--remove cursor-pointer",name:h.value,...w.value.remove,onClick:z,onKeyup:z})),d}return()=>{if(e.modelValue===!1)return;const d={class:r.value,style:i.value};return p.value===!0&&Object.assign(d,w.value.chip,{onClick:k,onKeyup:C}),Ht("div",d,T(),"ripple",e.ripple!==!1&&e.disable!==!0,()=>[[Tt,e.ripple]])}}});const K=1e3,cl=["start","center","end","start-force","center-force","end-force"],mt=Array.prototype.filter,sl=window.getComputedStyle(document.body).overflowAnchor===void 0?Dt:function(e,c){e!==null&&(e._qOverflowAnimationFrame!==void 0&&cancelAnimationFrame(e._qOverflowAnimationFrame),e._qOverflowAnimationFrame=requestAnimationFrame(()=>{if(e===null)return;e._qOverflowAnimationFrame=void 0;const a=e.children||[];mt.call(a,M=>M.dataset&&M.dataset.qVsAnchor!==void 0).forEach(M=>{delete M.dataset.qVsAnchor});const b=a[c];b&&b.dataset&&(b.dataset.qVsAnchor="")}))};function Se(e,c){return e+c}function $e(e,c,a,b,M,i,F,y){const h=e===window?document.scrollingElement||document.documentElement:e,p=M===!0?"offsetWidth":"offsetHeight",r={scrollStart:0,scrollViewSize:-F-y,scrollMaxSize:0,offsetStart:-F,offsetEnd:-y};if(M===!0?(e===window?(r.scrollStart=window.pageXOffset||window.scrollX||document.body.scrollLeft||0,r.scrollViewSize+=document.documentElement.clientWidth):(r.scrollStart=h.scrollLeft,r.scrollViewSize+=h.clientWidth),r.scrollMaxSize=h.scrollWidth,i===!0&&(r.scrollStart=(Ke===!0?r.scrollMaxSize-r.scrollViewSize:0)-r.scrollStart)):(e===window?(r.scrollStart=window.pageYOffset||window.scrollY||document.body.scrollTop||0,r.scrollViewSize+=document.documentElement.clientHeight):(r.scrollStart=h.scrollTop,r.scrollViewSize+=h.clientHeight),r.scrollMaxSize=h.scrollHeight),a!==null)for(let w=a.previousElementSibling;w!==null;w=w.previousElementSibling)w.classList.contains("q-virtual-scroll--skip")===!1&&(r.offsetStart+=w[p]);if(b!==null)for(let w=b.nextElementSibling;w!==null;w=w.nextElementSibling)w.classList.contains("q-virtual-scroll--skip")===!1&&(r.offsetEnd+=w[p]);if(c!==e){const w=h.getBoundingClientRect(),C=c.getBoundingClientRect();M===!0?(r.offsetStart+=C.left-w.left,r.offsetEnd-=C.width):(r.offsetStart+=C.top-w.top,r.offsetEnd-=C.height),e!==window&&(r.offsetStart+=r.scrollStart),r.offsetEnd+=r.scrollMaxSize-r.offsetStart}return r}function rt(e,c,a,b){c==="end"&&(c=(e===window?document.body:e)[a===!0?"scrollWidth":"scrollHeight"]),e===window?a===!0?(b===!0&&(c=(Ke===!0?document.body.scrollWidth-document.documentElement.clientWidth:0)-c),window.scrollTo(c,window.pageYOffset||window.scrollY||document.body.scrollTop||0)):window.scrollTo(window.pageXOffset||window.scrollX||document.body.scrollLeft||0,c):a===!0?(b===!0&&(c=(Ke===!0?e.scrollWidth-e.offsetWidth:0)-c),e.scrollLeft=c):e.scrollTop=c}function xe(e,c,a,b){if(a>=b)return 0;const M=c.length,i=Math.floor(a/K),F=Math.floor((b-1)/K)+1;let y=e.slice(i,F).reduce(Se,0);return a%K!==0&&(y-=c.slice(i*K,a).reduce(Se,0)),b%K!==0&&b!==M&&(y-=c.slice(b,F*K).reduce(Se,0)),y}const St={virtualScrollSliceSize:{type:[Number,String],default:10},virtualScrollSliceRatioBefore:{type:[Number,String],default:1},virtualScrollSliceRatioAfter:{type:[Number,String],default:1},virtualScrollItemSize:{type:[Number,String],default:24},virtualScrollStickySizeStart:{type:[Number,String],default:0},virtualScrollStickySizeEnd:{type:[Number,String],default:0},tableColspan:[Number,String]},hl=Object.keys(St),ct={virtualScrollHorizontal:Boolean,onVirtualScroll:Function,...St};function dl({virtualScrollLength:e,getVirtualScrollTarget:c,getVirtualScrollEl:a,virtualScrollItemSizeComputed:b}){const M=je(),{props:i,emit:F,proxy:y}=M,{$q:h}=y;let p,r,w,C=[],k;const z=E(0),T=E(0),d=E({}),D=E(null),W=E(null),L=E(null),_=E({from:0,to:0}),qe=f(()=>i.tableColspan!==void 0?i.tableColspan:100);b===void 0&&(b=f(()=>i.virtualScrollItemSize));const O=f(()=>b.value+";"+i.virtualScrollHorizontal),X=f(()=>O.value+";"+i.virtualScrollSliceRatioBefore+";"+i.virtualScrollSliceRatioAfter);me(X,()=>{j()}),me(O,J);function J(){oe(r,!0)}function he(l){oe(l===void 0?r:l)}function Z(l,o){const v=c();if(v==null||v.nodeType===8)return;const A=$e(v,a(),D.value,W.value,i.virtualScrollHorizontal,h.lang.rtl,i.virtualScrollStickySizeStart,i.virtualScrollStickySizeEnd);w!==A.scrollViewSize&&j(A.scrollViewSize),P(v,A,Math.min(e.value-1,Math.max(0,parseInt(l,10)||0)),0,cl.indexOf(o)!==-1?o:r!==-1&&l>r?"end":"start")}function Ae(){const l=c();if(l==null||l.nodeType===8)return;const o=$e(l,a(),D.value,W.value,i.virtualScrollHorizontal,h.lang.rtl,i.virtualScrollStickySizeStart,i.virtualScrollStickySizeEnd),v=e.value-1,A=o.scrollMaxSize-o.offsetStart-o.offsetEnd-T.value;if(p===o.scrollStart)return;if(o.scrollMaxSize<=0){P(l,o,0,0);return}w!==o.scrollViewSize&&j(o.scrollViewSize),ge(_.value.from);const B=Math.floor(o.scrollMaxSize-Math.max(o.scrollViewSize,o.offsetEnd)-Math.min(k[v],o.scrollViewSize/2));if(B>0&&Math.ceil(o.scrollStart)>=B){P(l,o,v,o.scrollMaxSize-o.offsetEnd-C.reduce(Se,0));return}let V=0,S=o.scrollStart-o.offsetStart,R=S;if(S<=A&&S+o.scrollViewSize>=z.value)S-=z.value,V=_.value.from,R=S;else for(let m=0;S>=C[m]&&V<v;m++)S-=C[m],V+=K;for(;S>0&&V<v;)S-=k[V],S>-o.scrollViewSize?(V++,R=S):R=k[V]+S;P(l,o,V,R)}function P(l,o,v,A,B){const V=typeof B=="string"&&B.indexOf("-force")!==-1,S=V===!0?B.replace("-force",""):B,R=S!==void 0?S:"start";let m=Math.max(0,v-d.value[R]),N=m+d.value.total;N>e.value&&(N=e.value,m=Math.max(0,N-d.value.total)),p=o.scrollStart;const Y=m!==_.value.from||N!==_.value.to;if(Y===!1&&S===void 0){ye(v);return}const{activeElement:pe}=document,Q=L.value;Y===!0&&Q!==null&&Q!==pe&&Q.contains(pe)===!0&&(Q.addEventListener("focusout",ze),setTimeout(()=>{Q!==null&&Q.removeEventListener("focusout",ze)})),sl(Q,v-m);const Ie=S!==void 0?k.slice(m,v).reduce(Se,0):0;if(Y===!0){const ee=N>=_.value.from&&m<=_.value.to?_.value.to:N;_.value={from:m,to:ee},z.value=xe(C,k,0,m),T.value=xe(C,k,N,e.value),requestAnimationFrame(()=>{_.value.to!==N&&p===o.scrollStart&&(_.value={from:_.value.from,to:N},T.value=xe(C,k,N,e.value))})}requestAnimationFrame(()=>{if(p!==o.scrollStart)return;Y===!0&&ge(m);const ee=k.slice(m,v).reduce(Se,0),te=ee+o.offsetStart+z.value,Me=te+k[v];let we=te+A;if(S!==void 0){const Ee=ee-Ie,Ve=o.scrollStart+Ee;we=V!==!0&&Ve<te&&Me<Ve+o.scrollViewSize?Ve:S==="end"?Me-o.scrollViewSize:te-(S==="start"?0:Math.round((o.scrollViewSize-k[v])/2))}p=we,rt(l,we,i.virtualScrollHorizontal,h.lang.rtl),ye(v)})}function ge(l){const o=L.value;if(o){const v=mt.call(o.children,m=>m.classList&&m.classList.contains("q-virtual-scroll--skip")===!1),A=v.length,B=i.virtualScrollHorizontal===!0?m=>m.getBoundingClientRect().width:m=>m.offsetHeight;let V=l,S,R;for(let m=0;m<A;){for(S=B(v[m]),m++;m<A&&v[m].classList.contains("q-virtual-scroll--with-prev")===!0;)S+=B(v[m]),m++;R=S-k[V],R!==0&&(k[V]+=R,C[Math.floor(V/K)]+=R),V++}}}function ze(){L.value!==null&&L.value!==void 0&&L.value.focus()}function oe(l,o){const v=1*b.value;(o===!0||Array.isArray(k)===!1)&&(k=[]);const A=k.length;k.length=e.value;for(let V=e.value-1;V>=A;V--)k[V]=v;const B=Math.floor((e.value-1)/K);C=[];for(let V=0;V<=B;V++){let S=0;const R=Math.min((V+1)*K,e.value);for(let m=V*K;m<R;m++)S+=k[m];C.push(S)}r=-1,p=void 0,z.value=xe(C,k,0,_.value.from),T.value=xe(C,k,_.value.to,e.value),l>=0?(ge(_.value.from),G(()=>{Z(l)})):ie()}function j(l){if(l===void 0&&typeof window!="undefined"){const S=c();S!=null&&S.nodeType!==8&&(l=$e(S,a(),D.value,W.value,i.virtualScrollHorizontal,h.lang.rtl,i.virtualScrollStickySizeStart,i.virtualScrollStickySizeEnd).scrollViewSize)}w=l;const o=parseFloat(i.virtualScrollSliceRatioBefore)||0,v=parseFloat(i.virtualScrollSliceRatioAfter)||0,A=1+o+v,B=l===void 0||l<=0?1:Math.ceil(l/b.value),V=Math.max(1,B,Math.ceil((i.virtualScrollSliceSize>0?i.virtualScrollSliceSize:10)/A));d.value={total:Math.ceil(V*A),start:Math.ceil(V*o),center:Math.ceil(V*(.5+o)),end:Math.ceil(V*(1+o)),view:B}}function Re(l,o){const v=i.virtualScrollHorizontal===!0?"width":"height",A={["--q-virtual-scroll-item-"+v]:b.value+"px"};return[l==="tbody"?g(l,{class:"q-virtual-scroll__padding",key:"before",ref:D},[g("tr",[g("td",{style:{[v]:`${z.value}px`,...A},colspan:qe.value})])]):g(l,{class:"q-virtual-scroll__padding",key:"before",ref:D,style:{[v]:`${z.value}px`,...A}}),g(l,{class:"q-virtual-scroll__content",key:"content",ref:L,tabindex:-1},o.flat()),l==="tbody"?g(l,{class:"q-virtual-scroll__padding",key:"after",ref:W},[g("tr",[g("td",{style:{[v]:`${T.value}px`,...A},colspan:qe.value})])]):g(l,{class:"q-virtual-scroll__padding",key:"after",ref:W,style:{[v]:`${T.value}px`,...A}})]}function ye(l){r!==l&&(i.onVirtualScroll!==void 0&&F("virtualScroll",{index:l,from:_.value.from,to:_.value.to-1,direction:l<r?"decrease":"increase",ref:y}),r=l)}j();const ie=Pt(Ae,h.platform.is.ios===!0?120:35);Nt(()=>{j()});let be=!1;return $t(()=>{be=!0}),Kt(()=>{if(be!==!0)return;const l=c();p!==void 0&&l!==void 0&&l!==null&&l.nodeType!==8?rt(l,p,i.virtualScrollHorizontal,h.lang.rtl):Z(r)}),ft(()=>{ie.cancel()}),Object.assign(y,{scrollTo:Z,reset:J,refresh:he}),{virtualScrollSliceRange:_,virtualScrollSliceSizeComputed:d,setVirtualScrollSize:j,onVirtualScrollEvt:ie,localResetVirtualScroll:oe,padVirtualScroll:Re,scrollTo:Z,reset:J,refresh:he}}const st=e=>["add","add-unique","toggle"].includes(e),fl=".*+?^${}()|[]\\",vl=Object.keys(vt);var gl=dt({name:"QSelect",inheritAttrs:!1,props:{...ct,...jt,...vt,modelValue:{required:!0},multiple:Boolean,displayValue:[String,Number],displayValueHtml:Boolean,dropdownIcon:String,options:{type:Array,default:()=>[]},optionValue:[Function,String],optionLabel:[Function,String],optionDisable:[Function,String],hideSelected:Boolean,hideDropdownIcon:Boolean,fillInput:Boolean,maxValues:[Number,String],optionsDense:Boolean,optionsDark:{type:Boolean,default:null},optionsSelectedClass:String,optionsHtml:Boolean,optionsCover:Boolean,menuShrink:Boolean,menuAnchor:String,menuSelf:String,menuOffset:Array,popupContentClass:String,popupContentStyle:[String,Array,Object],popupNoRouteDismiss:Boolean,useInput:Boolean,useChips:Boolean,newValueMode:{type:String,validator:st},mapOptions:Boolean,emitValue:Boolean,inputDebounce:{type:[Number,String],default:500},inputClass:[Array,String,Object],inputStyle:[Array,String,Object],tabindex:{type:[String,Number],default:0},autocomplete:String,transitionShow:{},transitionHide:{},transitionDuration:{},behavior:{type:String,validator:e=>["default","menu","dialog"].includes(e),default:"default"},virtualScrollItemSize:ct.virtualScrollItemSize.type,onNewValue:Function,onFilter:Function},emits:[...Qt,"add","remove","inputValue","keyup","keypress","keydown","popupShow","popupHide","filterAbort"],setup(e,{slots:c,emit:a}){const{proxy:b}=je(),{$q:M}=b,i=E(!1),F=E(!1),y=E(-1),h=E(""),p=E(!1),r=E(!1);let w=null,C=null,k,z,T,d=null,D,W,L,_;const qe=E(null),O=E(null),X=E(null),J=E(null),he=E(null),Z=Ut(e),Ae=il(tt),P=f(()=>Array.isArray(e.options)?e.options.length:0),ge=f(()=>e.virtualScrollItemSize===void 0?e.optionsDense===!0?24:48:e.virtualScrollItemSize),{virtualScrollSliceRange:ze,virtualScrollSliceSizeComputed:oe,localResetVirtualScroll:j,padVirtualScroll:Re,onVirtualScrollEvt:ye,scrollTo:ie,setVirtualScrollSize:be}=dl({virtualScrollLength:P,getVirtualScrollTarget:bt,getVirtualScrollEl:Ze,virtualScrollItemSizeComputed:ge}),l=Wt(),o=f(()=>{const t=e.mapOptions===!0&&e.multiple!==!0,n=e.modelValue!==void 0&&(e.modelValue!==null||t===!0)?e.multiple===!0&&Array.isArray(e.modelValue)?e.modelValue:[e.modelValue]:[];if(e.mapOptions===!0&&Array.isArray(e.options)===!0){const u=e.mapOptions===!0&&k!==void 0?k:[],s=n.map(q=>yt(q,u));return e.modelValue===null&&t===!0?s.filter(q=>q!==null):s}return n}),v=f(()=>{const t={};return vl.forEach(n=>{const u=e[n];u!==void 0&&(t[n]=u)}),t}),A=f(()=>e.optionsDark===null?l.isDark.value:e.optionsDark),B=f(()=>at(o.value)),V=f(()=>{let t="q-field__input q-placeholder col";return e.hideSelected===!0||o.value.length===0?[t,e.inputClass]:(t+=" q-field__input--padding",e.inputClass===void 0?t:[t,e.inputClass])}),S=f(()=>(e.virtualScrollHorizontal===!0?"q-virtual-scroll--horizontal":"")+(e.popupContentClass?" "+e.popupContentClass:"")),R=f(()=>P.value===0),m=f(()=>o.value.map(t=>$.value(t)).join(", ")),N=f(()=>e.displayValue!==void 0?e.displayValue:m.value),Y=f(()=>e.optionsHtml===!0?()=>!0:t=>t!=null&&t.html===!0),pe=f(()=>e.displayValueHtml===!0||e.displayValue===void 0&&(e.optionsHtml===!0||o.value.some(Y.value))),Q=f(()=>l.focused.value===!0?e.tabindex:-1),Ie=f(()=>{const t={tabindex:e.tabindex,role:"combobox","aria-label":e.label,"aria-readonly":e.readonly===!0?"true":"false","aria-autocomplete":e.useInput===!0?"list":"none","aria-expanded":i.value===!0?"true":"false","aria-controls":`${l.targetUid.value}_lb`};return y.value>=0&&(t["aria-activedescendant"]=`${l.targetUid.value}_${y.value}`),t}),ee=f(()=>({id:`${l.targetUid.value}_lb`,role:"listbox","aria-multiselectable":e.multiple===!0?"true":"false"})),te=f(()=>o.value.map((t,n)=>({index:n,opt:t,html:Y.value(t),selected:!0,removeAtIndex:gt,toggleOption:le,tabindex:Q.value}))),Me=f(()=>{if(P.value===0)return[];const{from:t,to:n}=ze.value;return e.options.slice(t,n).map((u,s)=>{const q=ae.value(u)===!0,x=Te(u)===!0,H=t+s,I={clickable:!0,active:x,activeClass:Ve.value,manualFocus:!0,focused:!1,disable:q,tabindex:-1,dense:e.optionsDense,dark:A.value,role:"option","aria-selected":x===!0?"true":"false",id:`${l.targetUid.value}_${H}`,onClick:()=>{le(u)}};return q!==!0&&(y.value===H&&(I.focused=!0),M.platform.is.desktop===!0&&(I.onMousemove=()=>{i.value===!0&&re(H)})),{index:H,opt:u,html:Y.value(u),label:$.value(u),selected:I.active,focused:I.focused,toggleOption:le,setOptionIndex:re,itemProps:I}})}),we=f(()=>e.dropdownIcon!==void 0?e.dropdownIcon:M.iconSet.arrow.dropdown),Ee=f(()=>e.optionsCover===!1&&e.outlined!==!0&&e.standout!==!0&&e.borderless!==!0&&e.rounded!==!0),Ve=f(()=>e.optionsSelectedClass!==void 0?e.optionsSelectedClass:e.color!==void 0?`text-${e.color}`:""),U=f(()=>Le(e.optionValue,"value")),$=f(()=>Le(e.optionLabel,"label")),ae=f(()=>Le(e.optionDisable,"disable")),_e=f(()=>o.value.map(t=>U.value(t))),ht=f(()=>{const t={onInput:tt,onChange:Ae,onKeydown:Je,onKeyup:Ye,onKeypress:Ge,onFocus:We,onClick(n){z===!0&&ve(n)}};return t.onCompositionstart=t.onCompositionupdate=t.onCompositionend=Ae,t});me(o,t=>{k=t,e.useInput===!0&&e.fillInput===!0&&e.multiple!==!0&&l.innerLoading.value!==!0&&(F.value!==!0&&i.value!==!0||B.value!==!0)&&(T!==!0&&fe(),(F.value===!0||i.value===!0)&&ce(""))},{immediate:!0}),me(()=>e.fillInput,fe),me(i,De),me(P,_t);function Qe(t){return e.emitValue===!0?U.value(t):t}function He(t){if(t!==-1&&t<o.value.length)if(e.multiple===!0){const n=e.modelValue.slice();a("remove",{index:t,value:n.splice(t,1)[0]}),a("update:modelValue",n)}else a("update:modelValue",null)}function gt(t){He(t),l.focus()}function Ue(t,n){const u=Qe(t);if(e.multiple!==!0){e.fillInput===!0&&Ce($.value(t),!0,!0),a("update:modelValue",u);return}if(o.value.length===0){a("add",{index:0,value:u}),a("update:modelValue",e.multiple===!0?[u]:u);return}if(n===!0&&Te(t)===!0||e.maxValues!==void 0&&e.modelValue.length>=e.maxValues)return;const s=e.modelValue.slice();a("add",{index:s.length,value:u}),s.push(u),a("update:modelValue",s)}function le(t,n){if(l.editable.value!==!0||t===void 0||ae.value(t)===!0)return;const u=U.value(t);if(e.multiple!==!0){n!==!0&&(Ce(e.fillInput===!0?$.value(t):"",!0,!0),ue()),O.value!==null&&O.value.focus(),(o.value.length===0||ke(U.value(o.value[0]),u)!==!0)&&a("update:modelValue",e.emitValue===!0?u:t);return}if((z!==!0||p.value===!0)&&l.focus(),We(),o.value.length===0){const x=e.emitValue===!0?u:t;a("add",{index:0,value:x}),a("update:modelValue",e.multiple===!0?[x]:x);return}const s=e.modelValue.slice(),q=_e.value.findIndex(x=>ke(x,u));if(q!==-1)a("remove",{index:q,value:s.splice(q,1)[0]});else{if(e.maxValues!==void 0&&s.length>=e.maxValues)return;const x=e.emitValue===!0?u:t;a("add",{index:s.length,value:x}),s.push(x)}a("update:modelValue",s)}function re(t){if(M.platform.is.desktop!==!0)return;const n=t!==-1&&t<P.value?t:-1;y.value!==n&&(y.value=n)}function Oe(t=1,n){if(i.value===!0){let u=y.value;do u=it(u+t,-1,P.value-1);while(u!==-1&&u!==y.value&&ae.value(e.options[u])===!0);y.value!==u&&(re(u),ie(u),n!==!0&&e.useInput===!0&&e.fillInput===!0&&Fe(u>=0?$.value(e.options[u]):D,!0))}}function yt(t,n){const u=s=>ke(U.value(s),t);return e.options.find(u)||n.find(u)||t}function Le(t,n){const u=t!==void 0?t:n;return typeof u=="function"?u:s=>s!==null&&typeof s=="object"&&u in s?s[u]:s}function Te(t){const n=U.value(t);return _e.value.find(u=>ke(u,n))!==void 0}function We(t){e.useInput===!0&&O.value!==null&&(t===void 0||O.value===t.target&&t.target.value===m.value)&&O.value.select()}function Xe(t){Jt(t,27)===!0&&i.value===!0&&(ve(t),ue(),fe()),a("keyup",t)}function Ye(t){const{value:n}=t.target;if(t.keyCode!==void 0){Xe(t);return}if(t.target.value="",w!==null&&(clearTimeout(w),w=null),C!==null&&(clearTimeout(C),C=null),fe(),typeof n=="string"&&n.length!==0){const u=n.toLocaleLowerCase(),s=x=>{const H=e.options.find(I=>x.value(I).toLocaleLowerCase()===u);return H===void 0?!1:(o.value.indexOf(H)===-1?le(H):ue(),!0)},q=x=>{s(U)!==!0&&(s($)===!0||x===!0||ce(n,!0,()=>q(!0)))};q()}else l.clearValue(t)}function Ge(t){a("keypress",t)}function Je(t){if(a("keydown",t),Zt(t)===!0)return;const n=h.value.length!==0&&(e.newValueMode!==void 0||e.onNewValue!==void 0),u=t.shiftKey!==!0&&e.multiple!==!0&&(y.value!==-1||n===!0);if(t.keyCode===27){Ne(t);return}if(t.keyCode===9&&u===!1){se();return}if(t.target===void 0||t.target.id!==l.targetUid.value||l.editable.value!==!0)return;if(t.keyCode===40&&l.innerLoading.value!==!0&&i.value===!1){ne(t),de();return}if(t.keyCode===8&&(e.useChips===!0||e.clearable===!0)&&e.hideSelected!==!0&&h.value.length===0){e.multiple===!0&&Array.isArray(e.modelValue)===!0?He(e.modelValue.length-1):e.multiple!==!0&&e.modelValue!==null&&a("update:modelValue",null);return}(t.keyCode===35||t.keyCode===36)&&(typeof h.value!="string"||h.value.length===0)&&(ne(t),y.value=-1,Oe(t.keyCode===36?1:-1,e.multiple)),(t.keyCode===33||t.keyCode===34)&&oe.value!==void 0&&(ne(t),y.value=Math.max(-1,Math.min(P.value,y.value+(t.keyCode===33?-1:1)*oe.value.view)),Oe(t.keyCode===33?1:-1,e.multiple)),(t.keyCode===38||t.keyCode===40)&&(ne(t),Oe(t.keyCode===38?-1:1,e.multiple));const s=P.value;if((L===void 0||_<Date.now())&&(L=""),s>0&&e.useInput!==!0&&t.key!==void 0&&t.key.length===1&&t.altKey===!1&&t.ctrlKey===!1&&t.metaKey===!1&&(t.keyCode!==32||L.length!==0)){i.value!==!0&&de(t);const q=t.key.toLocaleLowerCase(),x=L.length===1&&L[0]===q;_=Date.now()+1500,x===!1&&(ne(t),L+=q);const H=new RegExp("^"+L.split("").map(Pe=>fl.indexOf(Pe)!==-1?"\\"+Pe:Pe).join(".*"),"i");let I=y.value;if(x===!0||I<0||H.test($.value(e.options[I]))!==!0)do I=it(I+1,-1,s-1);while(I!==y.value&&(ae.value(e.options[I])===!0||H.test($.value(e.options[I]))!==!0));y.value!==I&&G(()=>{re(I),ie(I),I>=0&&e.useInput===!0&&e.fillInput===!0&&Fe($.value(e.options[I]),!0)});return}if(!(t.keyCode!==13&&(t.keyCode!==32||e.useInput===!0||L!=="")&&(t.keyCode!==9||u===!1))){if(t.keyCode!==9&&ne(t),y.value!==-1&&y.value<s){le(e.options[y.value]);return}if(n===!0){const q=(x,H)=>{if(H){if(st(H)!==!0)return}else H=e.newValueMode;if(Ce("",e.multiple!==!0,!0),x==null)return;(H==="toggle"?le:Ue)(x,H==="add-unique"),e.multiple!==!0&&(O.value!==null&&O.value.focus(),ue())};if(e.onNewValue!==void 0?a("newValue",h.value,q):q(h.value),e.multiple!==!0)return}i.value===!0?se():l.innerLoading.value!==!0&&de()}}function Ze(){return z===!0?he.value:X.value!==null&&X.value.contentEl!==null?X.value.contentEl:void 0}function bt(){return Ze()}function wt(){return e.hideSelected===!0?[]:c["selected-item"]!==void 0?te.value.map(t=>c["selected-item"](t)).slice():c.selected!==void 0?[].concat(c.selected()):e.useChips===!0?te.value.map((t,n)=>g(rl,{key:"option-"+n,removable:l.editable.value===!0&&ae.value(t.opt)!==!0,dense:!0,textColor:e.color,tabindex:Q.value,onRemove(){t.removeAtIndex(n)}},()=>g("span",{class:"ellipsis",[t.html===!0?"innerHTML":"textContent"]:$.value(t.opt)}))):[g("span",{[pe.value===!0?"innerHTML":"textContent"]:N.value})]}function et(){if(R.value===!0)return c["no-option"]!==void 0?c["no-option"]({inputValue:h.value}):void 0;const t=c.option!==void 0?c.option:u=>g(nl,{key:u.index,...u.itemProps},()=>g(ll,()=>g(ul,()=>g("span",{[u.html===!0?"innerHTML":"textContent"]:u.label}))));let n=Re("div",Me.value.map(t));return c["before-options"]!==void 0&&(n=c["before-options"]().concat(n)),ol(c["after-options"],n)}function Vt(t,n){const u=n===!0?{...Ie.value,...l.splitAttrs.attributes.value}:void 0,s={ref:n===!0?O:void 0,key:"i_t",class:V.value,style:e.inputStyle,value:h.value!==void 0?h.value:"",type:"search",...u,id:n===!0?l.targetUid.value:void 0,maxlength:e.maxlength,autocomplete:e.autocomplete,"data-autofocus":t===!0||e.autofocus===!0||void 0,disabled:e.disable===!0,readonly:e.readonly===!0,...ht.value};return t!==!0&&z===!0&&(Array.isArray(s.class)===!0?s.class=[...s.class,"no-pointer-events"]:s.class+=" no-pointer-events"),g("input",s)}function tt(t){w!==null&&(clearTimeout(w),w=null),C!==null&&(clearTimeout(C),C=null),!(t&&t.target&&t.target.qComposing===!0)&&(Fe(t.target.value||""),T=!0,D=h.value,l.focused.value!==!0&&(z!==!0||p.value===!0)&&l.focus(),e.onFilter!==void 0&&(w=setTimeout(()=>{w=null,ce(h.value)},e.inputDebounce)))}function Fe(t,n){h.value!==t&&(h.value=t,n===!0||e.inputDebounce===0||e.inputDebounce==="0"?a("inputValue",t):C=setTimeout(()=>{C=null,a("inputValue",t)},e.inputDebounce))}function Ce(t,n,u){T=u!==!0,e.useInput===!0&&(Fe(t,!0),(n===!0||u!==!0)&&(D=t),n!==!0&&ce(t))}function ce(t,n,u){if(e.onFilter===void 0||n!==!0&&l.focused.value!==!0)return;l.innerLoading.value===!0?a("filterAbort"):(l.innerLoading.value=!0,r.value=!0),t!==""&&e.multiple!==!0&&o.value.length!==0&&T!==!0&&t===$.value(o.value[0])&&(t="");const s=setTimeout(()=>{i.value===!0&&(i.value=!1)},10);d!==null&&clearTimeout(d),d=s,a("filter",t,(q,x)=>{(n===!0||l.focused.value===!0)&&d===s&&(clearTimeout(d),typeof q=="function"&&q(),r.value=!1,G(()=>{l.innerLoading.value=!1,l.editable.value===!0&&(n===!0?i.value===!0&&ue():i.value===!0?De(!0):i.value=!0),typeof x=="function"&&G(()=>{x(b)}),typeof u=="function"&&G(()=>{u(b)})}))},()=>{l.focused.value===!0&&d===s&&(clearTimeout(d),l.innerLoading.value=!1,r.value=!1),i.value===!0&&(i.value=!1)})}function Ct(){return g(el,{ref:X,class:S.value,style:e.popupContentStyle,modelValue:i.value,fit:e.menuShrink!==!0,cover:e.optionsCover===!0&&R.value!==!0&&e.useInput!==!0,anchor:e.menuAnchor,self:e.menuSelf,offset:e.menuOffset,dark:A.value,noParentEvent:!0,noRefocus:!0,noFocus:!0,noRouteDismiss:e.popupNoRouteDismiss,square:Ee.value,transitionShow:e.transitionShow,transitionHide:e.transitionHide,transitionDuration:e.transitionDuration,separateClosePopup:!0,...ee.value,onScrollPassive:ye,onBeforeShow:ut,onBeforeHide:kt,onShow:xt},et)}function kt(t){nt(t),se()}function xt(){be()}function qt(t){ve(t),O.value!==null&&O.value.focus(),p.value=!0,window.scrollTo(window.pageXOffset||window.scrollX||document.body.scrollLeft||0,0)}function At(t){ve(t),G(()=>{p.value=!1})}function zt(){const t=[g(Ot,{class:`col-auto ${l.fieldClass.value}`,...v.value,for:l.targetUid.value,dark:A.value,square:!0,loading:r.value,itemAligned:!1,filled:!0,stackLabel:h.value.length!==0,...l.splitAttrs.listeners.value,onFocus:qt,onBlur:At},{...c,rawControl:()=>l.getControl(!0),before:void 0,after:void 0})];return i.value===!0&&t.push(g("div",{ref:he,class:S.value+" scroll",style:e.popupContentStyle,...ee.value,onClick:Ne,onScrollPassive:ye},et())),g(tl,{ref:J,modelValue:F.value,position:e.useInput===!0?"top":void 0,transitionShow:W,transitionHide:e.transitionHide,transitionDuration:e.transitionDuration,noRouteDismiss:e.popupNoRouteDismiss,onBeforeShow:ut,onBeforeHide:pt,onHide:It,onShow:Mt},()=>g("div",{class:"q-select__dialog"+(A.value===!0?" q-select__dialog--dark q-dark":"")+(p.value===!0?" q-select__dialog--focused":"")},t))}function pt(t){nt(t),J.value!==null&&J.value.__updateRefocusTarget(l.rootRef.value.querySelector(".q-field__native > [tabindex]:last-child")),l.focused.value=!1}function It(t){ue(),l.focused.value===!1&&a("blur",t),fe()}function Mt(){const t=document.activeElement;(t===null||t.id!==l.targetUid.value)&&O.value!==null&&O.value!==t&&O.value.focus(),be()}function se(){F.value!==!0&&(y.value=-1,i.value===!0&&(i.value=!1),l.focused.value===!1&&(d!==null&&(clearTimeout(d),d=null),l.innerLoading.value===!0&&(a("filterAbort"),l.innerLoading.value=!1,r.value=!1)))}function de(t){l.editable.value===!0&&(z===!0?(l.onControlFocusin(t),F.value=!0,G(()=>{l.focus()})):l.focus(),e.onFilter!==void 0?ce(h.value):(R.value!==!0||c["no-option"]!==void 0)&&(i.value=!0))}function ue(){F.value=!1,se()}function fe(){e.useInput===!0&&Ce(e.multiple!==!0&&e.fillInput===!0&&o.value.length!==0&&$.value(o.value[0])||"",!0,!0)}function De(t){let n=-1;if(t===!0){if(o.value.length!==0){const u=U.value(o.value[0]);n=e.options.findIndex(s=>ke(U.value(s),u))}j(n)}re(n)}function _t(t,n){i.value===!0&&l.innerLoading.value===!1&&(j(-1,!0),G(()=>{i.value===!0&&l.innerLoading.value===!1&&(t>n?j():De(!0))}))}function lt(){F.value===!1&&X.value!==null&&X.value.updatePosition()}function ut(t){t!==void 0&&ve(t),a("popupShow",t),l.hasPopupOpen=!0,l.onControlFocusin(t)}function nt(t){t!==void 0&&ve(t),a("popupHide",t),l.hasPopupOpen=!1,l.onControlFocusout(t)}function ot(){z=M.platform.is.mobile!==!0&&e.behavior!=="dialog"?!1:e.behavior!=="menu"&&(e.useInput===!0?c["no-option"]!==void 0||e.onFilter!==void 0||R.value===!1:!0),W=M.platform.is.ios===!0&&z===!0&&e.useInput===!0?"fade":e.transitionShow}return Xt(ot),Yt(lt),ot(),ft(()=>{w!==null&&clearTimeout(w),C!==null&&clearTimeout(C)}),Object.assign(b,{showPopup:de,hidePopup:ue,removeAtIndex:He,add:Ue,toggleOption:le,getOptionIndex:()=>y.value,setOptionIndex:re,moveOptionSelection:Oe,filter:ce,updateMenuPosition:lt,updateInputValue:Ce,isOptionSelected:Te,getEmittingOptionValue:Qe,isOptionDisabled:(...t)=>ae.value.apply(null,t)===!0,getOptionValue:(...t)=>U.value.apply(null,t),getOptionLabel:(...t)=>$.value.apply(null,t)}),Object.assign(l,{innerValue:o,fieldClass:f(()=>`q-select q-field--auto-height q-select--with${e.useInput!==!0?"out":""}-input q-select--with${e.useChips!==!0?"out":""}-chips q-select--${e.multiple===!0?"multiple":"single"}`),inputRef:qe,targetRef:O,hasValue:B,showPopup:de,floatingLabel:f(()=>e.hideSelected!==!0&&B.value===!0||typeof h.value=="number"||h.value.length!==0||at(e.displayValue)),getControlChild:()=>{if(l.editable.value!==!1&&(F.value===!0||R.value!==!0||c["no-option"]!==void 0))return z===!0?zt():Ct();l.hasPopupOpen===!0&&(l.hasPopupOpen=!1)},controlEvents:{onFocusin(t){l.onControlFocusin(t)},onFocusout(t){l.onControlFocusout(t,()=>{fe(),se()})},onClick(t){if(Ne(t),z!==!0&&i.value===!0){se(),O.value!==null&&O.value.focus();return}de(t)}},getControl:t=>{const n=wt(),u=t===!0||F.value!==!0||z!==!0;if(e.useInput===!0)n.push(Vt(t,u));else if(l.editable.value===!0){const q=u===!0?Ie.value:void 0;n.push(g("input",{ref:u===!0?O:void 0,key:"d_t",class:"q-select__focus-target",id:u===!0?l.targetUid.value:void 0,value:N.value,readonly:!0,"data-autofocus":t===!0||e.autofocus===!0||void 0,...q,onKeydown:Je,onKeyup:Xe,onKeypress:Ge})),u===!0&&typeof e.autocomplete=="string"&&e.autocomplete.length!==0&&n.push(g("input",{class:"q-select__autocomplete-input",autocomplete:e.autocomplete,tabindex:-1,onKeyup:Ye}))}if(Z.value!==void 0&&e.disable!==!0&&_e.value.length!==0){const q=_e.value.map(x=>g("option",{value:x,selected:!0}));n.push(g("select",{class:"hidden",name:Z.value,multiple:e.multiple},q))}const s=e.useInput===!0||u!==!0?void 0:l.splitAttrs.attributes.value;return g("div",{class:"q-field__native row items-center",...s,...l.splitAttrs.listeners.value},n)},getInnerAppend:()=>e.loading!==!0&&r.value!==!0&&e.hideDropdownIcon!==!0?[g(Be,{class:"q-select__dropdown-icon"+(i.value===!0?" rotate-180":""),name:we.value})]:null}),Gt(l)}});export{rl as Q,gl as a,dl as b,hl as c,ct as u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUVNlbGVjdC5hZmVjNjI1OC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvY29tcG9uZW50cy9jaGlwL1FDaGlwLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvY29tcG9uZW50cy92aXJ0dWFsLXNjcm9sbC91c2UtdmlydHVhbC1zY3JvbGwuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy9jb21wb25lbnRzL3NlbGVjdC9RU2VsZWN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGgsIGNvbXB1dGVkLCBnZXRDdXJyZW50SW5zdGFuY2UgfSBmcm9tICd2dWUnXG5cbmltcG9ydCBRSWNvbiBmcm9tICcuLi9pY29uL1FJY29uLmpzJ1xuXG5pbXBvcnQgUmlwcGxlIGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMvcmlwcGxlL1JpcHBsZS5qcydcblxuaW1wb3J0IHVzZURhcmssIHsgdXNlRGFya1Byb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvcHJpdmF0ZS51c2UtZGFyay91c2UtZGFyay5qcydcbmltcG9ydCB1c2VTaXplLCB7IHVzZVNpemVQcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3ByaXZhdGUudXNlLXNpemUvdXNlLXNpemUuanMnXG5cbmltcG9ydCB7IGNyZWF0ZUNvbXBvbmVudCB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUuY3JlYXRlL2NyZWF0ZS5qcydcbmltcG9ydCB7IHN0b3BBbmRQcmV2ZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvZXZlbnQvZXZlbnQuanMnXG5pbXBvcnQgeyBoTWVyZ2VTbG90U2FmZWx5LCBoRGlyIH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS5yZW5kZXIvcmVuZGVyLmpzJ1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdFNpemVzID0ge1xuICB4czogOCxcbiAgc206IDEwLFxuICBtZDogMTQsXG4gIGxnOiAyMCxcbiAgeGw6IDI0XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdRQ2hpcCcsXG5cbiAgcHJvcHM6IHtcbiAgICAuLi51c2VEYXJrUHJvcHMsXG4gICAgLi4udXNlU2l6ZVByb3BzLFxuXG4gICAgZGVuc2U6IEJvb2xlYW4sXG5cbiAgICBpY29uOiBTdHJpbmcsXG4gICAgaWNvblJpZ2h0OiBTdHJpbmcsXG4gICAgaWNvblJlbW92ZTogU3RyaW5nLFxuICAgIGljb25TZWxlY3RlZDogU3RyaW5nLFxuICAgIGxhYmVsOiBbIFN0cmluZywgTnVtYmVyIF0sXG5cbiAgICBjb2xvcjogU3RyaW5nLFxuICAgIHRleHRDb2xvcjogU3RyaW5nLFxuXG4gICAgbW9kZWxWYWx1ZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIHNlbGVjdGVkOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogbnVsbFxuICAgIH0sXG5cbiAgICBzcXVhcmU6IEJvb2xlYW4sXG4gICAgb3V0bGluZTogQm9vbGVhbixcbiAgICBjbGlja2FibGU6IEJvb2xlYW4sXG4gICAgcmVtb3ZhYmxlOiBCb29sZWFuLFxuXG4gICAgcmVtb3ZlQXJpYUxhYmVsOiBTdHJpbmcsXG5cbiAgICB0YWJpbmRleDogWyBTdHJpbmcsIE51bWJlciBdLFxuICAgIGRpc2FibGU6IEJvb2xlYW4sXG5cbiAgICByaXBwbGU6IHtcbiAgICAgIHR5cGU6IFsgQm9vbGVhbiwgT2JqZWN0IF0sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfVxuICB9LFxuXG4gIGVtaXRzOiBbICd1cGRhdGU6bW9kZWxWYWx1ZScsICd1cGRhdGU6c2VsZWN0ZWQnLCAncmVtb3ZlJywgJ2NsaWNrJyBdLFxuXG4gIHNldHVwIChwcm9wcywgeyBzbG90cywgZW1pdCB9KSB7XG4gICAgY29uc3QgeyBwcm94eTogeyAkcSB9IH0gPSBnZXRDdXJyZW50SW5zdGFuY2UoKVxuXG4gICAgY29uc3QgaXNEYXJrID0gdXNlRGFyayhwcm9wcywgJHEpXG4gICAgY29uc3Qgc2l6ZVN0eWxlID0gdXNlU2l6ZShwcm9wcywgZGVmYXVsdFNpemVzKVxuXG4gICAgY29uc3QgaGFzTGVmdEljb24gPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5zZWxlY3RlZCA9PT0gdHJ1ZSB8fCBwcm9wcy5pY29uICE9PSB2b2lkIDApXG5cbiAgICBjb25zdCBsZWZ0SWNvbiA9IGNvbXB1dGVkKCgpID0+IChcbiAgICAgIHByb3BzLnNlbGVjdGVkID09PSB0cnVlXG4gICAgICAgID8gcHJvcHMuaWNvblNlbGVjdGVkIHx8ICRxLmljb25TZXQuY2hpcC5zZWxlY3RlZFxuICAgICAgICA6IHByb3BzLmljb25cbiAgICApKVxuXG4gICAgY29uc3QgcmVtb3ZlSWNvbiA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmljb25SZW1vdmUgfHwgJHEuaWNvblNldC5jaGlwLnJlbW92ZSlcblxuICAgIGNvbnN0IGlzQ2xpY2thYmxlID0gY29tcHV0ZWQoKCkgPT5cbiAgICAgIHByb3BzLmRpc2FibGUgPT09IGZhbHNlXG4gICAgICAmJiAocHJvcHMuY2xpY2thYmxlID09PSB0cnVlIHx8IHByb3BzLnNlbGVjdGVkICE9PSBudWxsKVxuICAgIClcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCB0ZXh0ID0gcHJvcHMub3V0bGluZSA9PT0gdHJ1ZVxuICAgICAgICA/IHByb3BzLmNvbG9yIHx8IHByb3BzLnRleHRDb2xvclxuICAgICAgICA6IHByb3BzLnRleHRDb2xvclxuXG4gICAgICByZXR1cm4gJ3EtY2hpcCByb3cgaW5saW5lIG5vLXdyYXAgaXRlbXMtY2VudGVyJ1xuICAgICAgICArIChwcm9wcy5vdXRsaW5lID09PSBmYWxzZSAmJiBwcm9wcy5jb2xvciAhPT0gdm9pZCAwID8gYCBiZy0keyBwcm9wcy5jb2xvciB9YCA6ICcnKVxuICAgICAgICArICh0ZXh0ID8gYCB0ZXh0LSR7IHRleHQgfSBxLWNoaXAtLWNvbG9yZWRgIDogJycpXG4gICAgICAgICsgKHByb3BzLmRpc2FibGUgPT09IHRydWUgPyAnIGRpc2FibGVkJyA6ICcnKVxuICAgICAgICArIChwcm9wcy5kZW5zZSA9PT0gdHJ1ZSA/ICcgcS1jaGlwLS1kZW5zZScgOiAnJylcbiAgICAgICAgKyAocHJvcHMub3V0bGluZSA9PT0gdHJ1ZSA/ICcgcS1jaGlwLS1vdXRsaW5lJyA6ICcnKVxuICAgICAgICArIChwcm9wcy5zZWxlY3RlZCA9PT0gdHJ1ZSA/ICcgcS1jaGlwLS1zZWxlY3RlZCcgOiAnJylcbiAgICAgICAgKyAoaXNDbGlja2FibGUudmFsdWUgPT09IHRydWUgPyAnIHEtY2hpcC0tY2xpY2thYmxlIGN1cnNvci1wb2ludGVyIG5vbi1zZWxlY3RhYmxlIHEtaG92ZXJhYmxlJyA6ICcnKVxuICAgICAgICArIChwcm9wcy5zcXVhcmUgPT09IHRydWUgPyAnIHEtY2hpcC0tc3F1YXJlJyA6ICcnKVxuICAgICAgICArIChpc0RhcmsudmFsdWUgPT09IHRydWUgPyAnIHEtY2hpcC0tZGFyayBxLWRhcmsnIDogJycpXG4gICAgfSlcblxuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBjaGlwID0gcHJvcHMuZGlzYWJsZSA9PT0gdHJ1ZVxuICAgICAgICA/IHsgdGFiaW5kZXg6IC0xLCAnYXJpYS1kaXNhYmxlZCc6ICd0cnVlJyB9XG4gICAgICAgIDogeyB0YWJpbmRleDogcHJvcHMudGFiaW5kZXggfHwgMCB9XG5cbiAgICAgIGNvbnN0IHJlbW92ZSA9IHtcbiAgICAgICAgLi4uY2hpcCxcbiAgICAgICAgcm9sZTogJ2J1dHRvbicsXG4gICAgICAgICdhcmlhLWhpZGRlbic6ICdmYWxzZScsXG4gICAgICAgICdhcmlhLWxhYmVsJzogcHJvcHMucmVtb3ZlQXJpYUxhYmVsIHx8ICRxLmxhbmcubGFiZWwucmVtb3ZlXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7IGNoaXAsIHJlbW92ZSB9XG4gICAgfSlcblxuICAgIGZ1bmN0aW9uIG9uS2V5dXAgKGUpIHtcbiAgICAgIGUua2V5Q29kZSA9PT0gMTMgLyogRU5URVIgKi8gJiYgb25DbGljayhlKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uQ2xpY2sgKGUpIHtcbiAgICAgIGlmICghcHJvcHMuZGlzYWJsZSkge1xuICAgICAgICBlbWl0KCd1cGRhdGU6c2VsZWN0ZWQnLCAhcHJvcHMuc2VsZWN0ZWQpXG4gICAgICAgIGVtaXQoJ2NsaWNrJywgZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvblJlbW92ZSAoZSkge1xuICAgICAgaWYgKGUua2V5Q29kZSA9PT0gdm9pZCAwIHx8IGUua2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgICAgc3RvcEFuZFByZXZlbnQoZSlcbiAgICAgICAgaWYgKHByb3BzLmRpc2FibGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCBmYWxzZSlcbiAgICAgICAgICBlbWl0KCdyZW1vdmUnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q29udGVudCAoKSB7XG4gICAgICBjb25zdCBjaGlsZCA9IFtdXG5cbiAgICAgIGlzQ2xpY2thYmxlLnZhbHVlID09PSB0cnVlICYmIGNoaWxkLnB1c2goXG4gICAgICAgIGgoJ2RpdicsIHsgY2xhc3M6ICdxLWZvY3VzLWhlbHBlcicgfSlcbiAgICAgIClcblxuICAgICAgaGFzTGVmdEljb24udmFsdWUgPT09IHRydWUgJiYgY2hpbGQucHVzaChcbiAgICAgICAgaChRSWNvbiwge1xuICAgICAgICAgIGNsYXNzOiAncS1jaGlwX19pY29uIHEtY2hpcF9faWNvbi0tbGVmdCcsXG4gICAgICAgICAgbmFtZTogbGVmdEljb24udmFsdWVcbiAgICAgICAgfSlcbiAgICAgIClcblxuICAgICAgY29uc3QgbGFiZWwgPSBwcm9wcy5sYWJlbCAhPT0gdm9pZCAwXG4gICAgICAgID8gWyBoKCdkaXYnLCB7IGNsYXNzOiAnZWxsaXBzaXMnIH0sIFsgcHJvcHMubGFiZWwgXSkgXVxuICAgICAgICA6IHZvaWQgMFxuXG4gICAgICBjaGlsZC5wdXNoKFxuICAgICAgICBoKCdkaXYnLCB7XG4gICAgICAgICAgY2xhc3M6ICdxLWNoaXBfX2NvbnRlbnQgY29sIHJvdyBuby13cmFwIGl0ZW1zLWNlbnRlciBxLWFuY2hvci0tc2tpcCdcbiAgICAgICAgfSwgaE1lcmdlU2xvdFNhZmVseShzbG90cy5kZWZhdWx0LCBsYWJlbCkpXG4gICAgICApXG5cbiAgICAgIHByb3BzLmljb25SaWdodCAmJiBjaGlsZC5wdXNoKFxuICAgICAgICBoKFFJY29uLCB7XG4gICAgICAgICAgY2xhc3M6ICdxLWNoaXBfX2ljb24gcS1jaGlwX19pY29uLS1yaWdodCcsXG4gICAgICAgICAgbmFtZTogcHJvcHMuaWNvblJpZ2h0XG4gICAgICAgIH0pXG4gICAgICApXG5cbiAgICAgIHByb3BzLnJlbW92YWJsZSA9PT0gdHJ1ZSAmJiBjaGlsZC5wdXNoKFxuICAgICAgICBoKFFJY29uLCB7XG4gICAgICAgICAgY2xhc3M6ICdxLWNoaXBfX2ljb24gcS1jaGlwX19pY29uLS1yZW1vdmUgY3Vyc29yLXBvaW50ZXInLFxuICAgICAgICAgIG5hbWU6IHJlbW92ZUljb24udmFsdWUsXG4gICAgICAgICAgLi4uYXR0cmlidXRlcy52YWx1ZS5yZW1vdmUsXG4gICAgICAgICAgb25DbGljazogb25SZW1vdmUsXG4gICAgICAgICAgb25LZXl1cDogb25SZW1vdmVcbiAgICAgICAgfSlcbiAgICAgIClcblxuICAgICAgcmV0dXJuIGNoaWxkXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmIChwcm9wcy5tb2RlbFZhbHVlID09PSBmYWxzZSkgcmV0dXJuXG5cbiAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgICBzdHlsZTogc2l6ZVN0eWxlLnZhbHVlXG4gICAgICB9XG5cbiAgICAgIGlzQ2xpY2thYmxlLnZhbHVlID09PSB0cnVlICYmIE9iamVjdC5hc3NpZ24oXG4gICAgICAgIGRhdGEsXG4gICAgICAgIGF0dHJpYnV0ZXMudmFsdWUuY2hpcCxcbiAgICAgICAgeyBvbkNsaWNrLCBvbktleXVwIH1cbiAgICAgIClcblxuICAgICAgcmV0dXJuIGhEaXIoXG4gICAgICAgICdkaXYnLFxuICAgICAgICBkYXRhLFxuICAgICAgICBnZXRDb250ZW50KCksXG4gICAgICAgICdyaXBwbGUnLFxuICAgICAgICBwcm9wcy5yaXBwbGUgIT09IGZhbHNlICYmIHByb3BzLmRpc2FibGUgIT09IHRydWUsXG4gICAgICAgICgpID0+IFsgWyBSaXBwbGUsIHByb3BzLnJpcHBsZSBdIF1cbiAgICAgIClcbiAgICB9XG4gIH1cbn0pXG4iLCJpbXBvcnQgeyBoLCByZWYsIGNvbXB1dGVkLCB3YXRjaCwgb25BY3RpdmF0ZWQsIG9uRGVhY3RpdmF0ZWQsIG9uQmVmb3JlTW91bnQsIG9uQmVmb3JlVW5tb3VudCwgbmV4dFRpY2ssIGdldEN1cnJlbnRJbnN0YW5jZSB9IGZyb20gJ3Z1ZSdcblxuaW1wb3J0IGRlYm91bmNlIGZyb20gJy4uLy4uL3V0aWxzL2RlYm91bmNlL2RlYm91bmNlLmpzJ1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4uLy4uL3V0aWxzL2V2ZW50L2V2ZW50LmpzJ1xuaW1wb3J0IHsgcnRsSGFzU2Nyb2xsQnVnIH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS5ydGwvcnRsLmpzJ1xuXG5jb25zdCBhZ2dCdWNrZXRTaXplID0gMTAwMFxuXG5jb25zdCBzY3JvbGxUb0VkZ2VzID0gW1xuICAnc3RhcnQnLFxuICAnY2VudGVyJyxcbiAgJ2VuZCcsXG4gICdzdGFydC1mb3JjZScsXG4gICdjZW50ZXItZm9yY2UnLFxuICAnZW5kLWZvcmNlJ1xuXVxuXG5jb25zdCBmaWx0ZXJQcm90byA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXJcblxuY29uc3Qgc2V0T3ZlcmZsb3dBbmNob3IgPSBfX1FVQVNBUl9TU1JfXyB8fCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5ib2R5KS5vdmVyZmxvd0FuY2hvciA9PT0gdm9pZCAwXG4gID8gbm9vcFxuICA6IGZ1bmN0aW9uIChjb250ZW50RWwsIGluZGV4KSB7XG4gICAgaWYgKGNvbnRlbnRFbCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGNvbnRlbnRFbC5fcU92ZXJmbG93QW5pbWF0aW9uRnJhbWUgIT09IHZvaWQgMCkge1xuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoY29udGVudEVsLl9xT3ZlcmZsb3dBbmltYXRpb25GcmFtZSlcbiAgICB9XG5cbiAgICBjb250ZW50RWwuX3FPdmVyZmxvd0FuaW1hdGlvbkZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIGlmIChjb250ZW50RWwgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnRFbC5fcU92ZXJmbG93QW5pbWF0aW9uRnJhbWUgPSB2b2lkIDBcbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gY29udGVudEVsLmNoaWxkcmVuIHx8IFtdXG5cbiAgICAgIGZpbHRlclByb3RvXG4gICAgICAgIC5jYWxsKGNoaWxkcmVuLCBlbCA9PiBlbC5kYXRhc2V0ICYmIGVsLmRhdGFzZXQucVZzQW5jaG9yICE9PSB2b2lkIDApXG4gICAgICAgIC5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgICBkZWxldGUgZWwuZGF0YXNldC5xVnNBbmNob3JcbiAgICAgICAgfSlcblxuICAgICAgY29uc3QgZWwgPSBjaGlsZHJlblsgaW5kZXggXVxuXG4gICAgICBpZiAoZWwgJiYgZWwuZGF0YXNldCkge1xuICAgICAgICBlbC5kYXRhc2V0LnFWc0FuY2hvciA9ICcnXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG5mdW5jdGlvbiBzdW1GbiAoYWNjLCBoKSB7XG4gIHJldHVybiBhY2MgKyBoXG59XG5cbmZ1bmN0aW9uIGdldFNjcm9sbERldGFpbHMgKFxuICBwYXJlbnQsXG4gIGNoaWxkLFxuICBiZWZvcmVSZWYsXG4gIGFmdGVyUmVmLFxuICBob3Jpem9udGFsLFxuICBydGwsXG4gIHN0aWNreVN0YXJ0LFxuICBzdGlja3lFbmRcbikge1xuICBjb25zdFxuICAgIHBhcmVudENhbGMgPSBwYXJlbnQgPT09IHdpbmRvdyA/IGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IDogcGFyZW50LFxuICAgIHByb3BFbFNpemUgPSBob3Jpem9udGFsID09PSB0cnVlID8gJ29mZnNldFdpZHRoJyA6ICdvZmZzZXRIZWlnaHQnLFxuICAgIGRldGFpbHMgPSB7XG4gICAgICBzY3JvbGxTdGFydDogMCxcbiAgICAgIHNjcm9sbFZpZXdTaXplOiAtc3RpY2t5U3RhcnQgLSBzdGlja3lFbmQsXG4gICAgICBzY3JvbGxNYXhTaXplOiAwLFxuICAgICAgb2Zmc2V0U3RhcnQ6IC1zdGlja3lTdGFydCxcbiAgICAgIG9mZnNldEVuZDogLXN0aWNreUVuZFxuICAgIH1cblxuICBpZiAoaG9yaXpvbnRhbCA9PT0gdHJ1ZSkge1xuICAgIGlmIChwYXJlbnQgPT09IHdpbmRvdykge1xuICAgICAgZGV0YWlscy5zY3JvbGxTdGFydCA9IHdpbmRvdy5wYWdlWE9mZnNldCB8fCB3aW5kb3cuc2Nyb2xsWCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQgfHwgMFxuICAgICAgZGV0YWlscy5zY3JvbGxWaWV3U2l6ZSArPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGhcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBkZXRhaWxzLnNjcm9sbFN0YXJ0ID0gcGFyZW50Q2FsYy5zY3JvbGxMZWZ0XG4gICAgICBkZXRhaWxzLnNjcm9sbFZpZXdTaXplICs9IHBhcmVudENhbGMuY2xpZW50V2lkdGhcbiAgICB9XG4gICAgZGV0YWlscy5zY3JvbGxNYXhTaXplID0gcGFyZW50Q2FsYy5zY3JvbGxXaWR0aFxuXG4gICAgaWYgKHJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgZGV0YWlscy5zY3JvbGxTdGFydCA9IChydGxIYXNTY3JvbGxCdWcgPT09IHRydWUgPyBkZXRhaWxzLnNjcm9sbE1heFNpemUgLSBkZXRhaWxzLnNjcm9sbFZpZXdTaXplIDogMCkgLSBkZXRhaWxzLnNjcm9sbFN0YXJ0XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIGlmIChwYXJlbnQgPT09IHdpbmRvdykge1xuICAgICAgZGV0YWlscy5zY3JvbGxTdGFydCA9IHdpbmRvdy5wYWdlWU9mZnNldCB8fCB3aW5kb3cuc2Nyb2xsWSB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCB8fCAwXG4gICAgICBkZXRhaWxzLnNjcm9sbFZpZXdTaXplICs9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHRcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBkZXRhaWxzLnNjcm9sbFN0YXJ0ID0gcGFyZW50Q2FsYy5zY3JvbGxUb3BcbiAgICAgIGRldGFpbHMuc2Nyb2xsVmlld1NpemUgKz0gcGFyZW50Q2FsYy5jbGllbnRIZWlnaHRcbiAgICB9XG4gICAgZGV0YWlscy5zY3JvbGxNYXhTaXplID0gcGFyZW50Q2FsYy5zY3JvbGxIZWlnaHRcbiAgfVxuXG4gIGlmIChiZWZvcmVSZWYgIT09IG51bGwpIHtcbiAgICBmb3IgKGxldCBlbCA9IGJlZm9yZVJlZi5wcmV2aW91c0VsZW1lbnRTaWJsaW5nOyBlbCAhPT0gbnVsbDsgZWwgPSBlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgICBpZiAoZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdxLXZpcnR1YWwtc2Nyb2xsLS1za2lwJykgPT09IGZhbHNlKSB7XG4gICAgICAgIGRldGFpbHMub2Zmc2V0U3RhcnQgKz0gZWxbIHByb3BFbFNpemUgXVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChhZnRlclJlZiAhPT0gbnVsbCkge1xuICAgIGZvciAobGV0IGVsID0gYWZ0ZXJSZWYubmV4dEVsZW1lbnRTaWJsaW5nOyBlbCAhPT0gbnVsbDsgZWwgPSBlbC5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICAgIGlmIChlbC5jbGFzc0xpc3QuY29udGFpbnMoJ3EtdmlydHVhbC1zY3JvbGwtLXNraXAnKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZGV0YWlscy5vZmZzZXRFbmQgKz0gZWxbIHByb3BFbFNpemUgXVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChjaGlsZCAhPT0gcGFyZW50KSB7XG4gICAgY29uc3RcbiAgICAgIHBhcmVudFJlY3QgPSBwYXJlbnRDYWxjLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgY2hpbGRSZWN0ID0gY2hpbGQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcblxuICAgIGlmIChob3Jpem9udGFsID09PSB0cnVlKSB7XG4gICAgICBkZXRhaWxzLm9mZnNldFN0YXJ0ICs9IGNoaWxkUmVjdC5sZWZ0IC0gcGFyZW50UmVjdC5sZWZ0XG4gICAgICBkZXRhaWxzLm9mZnNldEVuZCAtPSBjaGlsZFJlY3Qud2lkdGhcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBkZXRhaWxzLm9mZnNldFN0YXJ0ICs9IGNoaWxkUmVjdC50b3AgLSBwYXJlbnRSZWN0LnRvcFxuICAgICAgZGV0YWlscy5vZmZzZXRFbmQgLT0gY2hpbGRSZWN0LmhlaWdodFxuICAgIH1cblxuICAgIGlmIChwYXJlbnQgIT09IHdpbmRvdykge1xuICAgICAgZGV0YWlscy5vZmZzZXRTdGFydCArPSBkZXRhaWxzLnNjcm9sbFN0YXJ0XG4gICAgfVxuICAgIGRldGFpbHMub2Zmc2V0RW5kICs9IGRldGFpbHMuc2Nyb2xsTWF4U2l6ZSAtIGRldGFpbHMub2Zmc2V0U3RhcnRcbiAgfVxuXG4gIHJldHVybiBkZXRhaWxzXG59XG5cbmZ1bmN0aW9uIHNldFNjcm9sbCAocGFyZW50LCBzY3JvbGwsIGhvcml6b250YWwsIHJ0bCkge1xuICBpZiAoc2Nyb2xsID09PSAnZW5kJykge1xuICAgIHNjcm9sbCA9IChwYXJlbnQgPT09IHdpbmRvdyA/IGRvY3VtZW50LmJvZHkgOiBwYXJlbnQpW1xuICAgICAgaG9yaXpvbnRhbCA9PT0gdHJ1ZSA/ICdzY3JvbGxXaWR0aCcgOiAnc2Nyb2xsSGVpZ2h0J1xuICAgIF1cbiAgfVxuXG4gIGlmIChwYXJlbnQgPT09IHdpbmRvdykge1xuICAgIGlmIChob3Jpem9udGFsID09PSB0cnVlKSB7XG4gICAgICBpZiAocnRsID09PSB0cnVlKSB7XG4gICAgICAgIHNjcm9sbCA9IChydGxIYXNTY3JvbGxCdWcgPT09IHRydWUgPyBkb2N1bWVudC5ib2R5LnNjcm9sbFdpZHRoIC0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoIDogMCkgLSBzY3JvbGxcbiAgICAgIH1cbiAgICAgIHdpbmRvdy5zY3JvbGxUbyhzY3JvbGwsIHdpbmRvdy5wYWdlWU9mZnNldCB8fCB3aW5kb3cuc2Nyb2xsWSB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCB8fCAwKVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHdpbmRvdy5zY3JvbGxUbyh3aW5kb3cucGFnZVhPZmZzZXQgfHwgd2luZG93LnNjcm9sbFggfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0IHx8IDAsIHNjcm9sbClcbiAgICB9XG4gIH1cbiAgZWxzZSBpZiAoaG9yaXpvbnRhbCA9PT0gdHJ1ZSkge1xuICAgIGlmIChydGwgPT09IHRydWUpIHtcbiAgICAgIHNjcm9sbCA9IChydGxIYXNTY3JvbGxCdWcgPT09IHRydWUgPyBwYXJlbnQuc2Nyb2xsV2lkdGggLSBwYXJlbnQub2Zmc2V0V2lkdGggOiAwKSAtIHNjcm9sbFxuICAgIH1cbiAgICBwYXJlbnQuc2Nyb2xsTGVmdCA9IHNjcm9sbFxuICB9XG4gIGVsc2Uge1xuICAgIHBhcmVudC5zY3JvbGxUb3AgPSBzY3JvbGxcbiAgfVxufVxuXG5mdW5jdGlvbiBzdW1TaXplIChzaXplQWdnLCBzaXplLCBmcm9tLCB0bykge1xuICBpZiAoZnJvbSA+PSB0bykgeyByZXR1cm4gMCB9XG5cbiAgY29uc3RcbiAgICBsYXN0VG8gPSBzaXplLmxlbmd0aCxcbiAgICBmcm9tQWdnID0gTWF0aC5mbG9vcihmcm9tIC8gYWdnQnVja2V0U2l6ZSksXG4gICAgdG9BZ2cgPSBNYXRoLmZsb29yKCh0byAtIDEpIC8gYWdnQnVja2V0U2l6ZSkgKyAxXG5cbiAgbGV0IHRvdGFsID0gc2l6ZUFnZy5zbGljZShmcm9tQWdnLCB0b0FnZykucmVkdWNlKHN1bUZuLCAwKVxuXG4gIGlmIChmcm9tICUgYWdnQnVja2V0U2l6ZSAhPT0gMCkge1xuICAgIHRvdGFsIC09IHNpemUuc2xpY2UoZnJvbUFnZyAqIGFnZ0J1Y2tldFNpemUsIGZyb20pLnJlZHVjZShzdW1GbiwgMClcbiAgfVxuICBpZiAodG8gJSBhZ2dCdWNrZXRTaXplICE9PSAwICYmIHRvICE9PSBsYXN0VG8pIHtcbiAgICB0b3RhbCAtPSBzaXplLnNsaWNlKHRvLCB0b0FnZyAqIGFnZ0J1Y2tldFNpemUpLnJlZHVjZShzdW1GbiwgMClcbiAgfVxuXG4gIHJldHVybiB0b3RhbFxufVxuXG5jb25zdCBjb21tb25WaXJ0U2Nyb2xsUHJvcHMgPSB7XG4gIHZpcnR1YWxTY3JvbGxTbGljZVNpemU6IHtcbiAgICB0eXBlOiBbIE51bWJlciwgU3RyaW5nIF0sXG4gICAgZGVmYXVsdDogMTBcbiAgfSxcblxuICB2aXJ0dWFsU2Nyb2xsU2xpY2VSYXRpb0JlZm9yZToge1xuICAgIHR5cGU6IFsgTnVtYmVyLCBTdHJpbmcgXSxcbiAgICBkZWZhdWx0OiAxXG4gIH0sXG5cbiAgdmlydHVhbFNjcm9sbFNsaWNlUmF0aW9BZnRlcjoge1xuICAgIHR5cGU6IFsgTnVtYmVyLCBTdHJpbmcgXSxcbiAgICBkZWZhdWx0OiAxXG4gIH0sXG5cbiAgdmlydHVhbFNjcm9sbEl0ZW1TaXplOiB7XG4gICAgdHlwZTogWyBOdW1iZXIsIFN0cmluZyBdLFxuICAgIGRlZmF1bHQ6IDI0XG4gIH0sXG5cbiAgdmlydHVhbFNjcm9sbFN0aWNreVNpemVTdGFydDoge1xuICAgIHR5cGU6IFsgTnVtYmVyLCBTdHJpbmcgXSxcbiAgICBkZWZhdWx0OiAwXG4gIH0sXG5cbiAgdmlydHVhbFNjcm9sbFN0aWNreVNpemVFbmQ6IHtcbiAgICB0eXBlOiBbIE51bWJlciwgU3RyaW5nIF0sXG4gICAgZGVmYXVsdDogMFxuICB9LFxuXG4gIHRhYmxlQ29sc3BhbjogWyBOdW1iZXIsIFN0cmluZyBdXG59XG5cbmV4cG9ydCBjb25zdCBjb21tb25WaXJ0U2Nyb2xsUHJvcHNMaXN0ID0gT2JqZWN0LmtleXMoY29tbW9uVmlydFNjcm9sbFByb3BzKVxuXG5leHBvcnQgY29uc3QgdXNlVmlydHVhbFNjcm9sbFByb3BzID0ge1xuICB2aXJ0dWFsU2Nyb2xsSG9yaXpvbnRhbDogQm9vbGVhbixcbiAgb25WaXJ0dWFsU2Nyb2xsOiBGdW5jdGlvbixcbiAgLi4uY29tbW9uVmlydFNjcm9sbFByb3BzXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VWaXJ0dWFsU2Nyb2xsICh7XG4gIHZpcnR1YWxTY3JvbGxMZW5ndGgsIGdldFZpcnR1YWxTY3JvbGxUYXJnZXQsIGdldFZpcnR1YWxTY3JvbGxFbCxcbiAgdmlydHVhbFNjcm9sbEl0ZW1TaXplQ29tcHV0ZWQgLy8gb3B0aW9uYWxcbn0pIHtcbiAgY29uc3Qgdm0gPSBnZXRDdXJyZW50SW5zdGFuY2UoKVxuXG4gIGNvbnN0IHsgcHJvcHMsIGVtaXQsIHByb3h5IH0gPSB2bVxuICBjb25zdCB7ICRxIH0gPSBwcm94eVxuXG4gIGxldCBwcmV2U2Nyb2xsU3RhcnQsIHByZXZUb0luZGV4LCBsb2NhbFNjcm9sbFZpZXdTaXplLCB2aXJ0dWFsU2Nyb2xsU2l6ZXNBZ2cgPSBbXSwgdmlydHVhbFNjcm9sbFNpemVzXG5cbiAgY29uc3QgdmlydHVhbFNjcm9sbFBhZGRpbmdCZWZvcmUgPSByZWYoMClcbiAgY29uc3QgdmlydHVhbFNjcm9sbFBhZGRpbmdBZnRlciA9IHJlZigwKVxuICBjb25zdCB2aXJ0dWFsU2Nyb2xsU2xpY2VTaXplQ29tcHV0ZWQgPSByZWYoe30pXG5cbiAgY29uc3QgYmVmb3JlUmVmID0gcmVmKG51bGwpXG4gIGNvbnN0IGFmdGVyUmVmID0gcmVmKG51bGwpXG4gIGNvbnN0IGNvbnRlbnRSZWYgPSByZWYobnVsbClcblxuICBjb25zdCB2aXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZSA9IHJlZih7IGZyb206IDAsIHRvOiAwIH0pXG5cbiAgY29uc3QgY29sc3BhbkF0dHIgPSBjb21wdXRlZCgoKSA9PiAocHJvcHMudGFibGVDb2xzcGFuICE9PSB2b2lkIDAgPyBwcm9wcy50YWJsZUNvbHNwYW4gOiAxMDApKVxuXG4gIGlmICh2aXJ0dWFsU2Nyb2xsSXRlbVNpemVDb21wdXRlZCA9PT0gdm9pZCAwKSB7XG4gICAgdmlydHVhbFNjcm9sbEl0ZW1TaXplQ29tcHV0ZWQgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy52aXJ0dWFsU2Nyb2xsSXRlbVNpemUpXG4gIH1cblxuICBjb25zdCBuZWVkc1Jlc2V0ID0gY29tcHV0ZWQoKCkgPT4gdmlydHVhbFNjcm9sbEl0ZW1TaXplQ29tcHV0ZWQudmFsdWUgKyAnOycgKyBwcm9wcy52aXJ0dWFsU2Nyb2xsSG9yaXpvbnRhbClcblxuICBjb25zdCBuZWVkc1NsaWNlUmVjYWxjID0gY29tcHV0ZWQoKCkgPT5cbiAgICBuZWVkc1Jlc2V0LnZhbHVlICsgJzsnICsgcHJvcHMudmlydHVhbFNjcm9sbFNsaWNlUmF0aW9CZWZvcmUgKyAnOycgKyBwcm9wcy52aXJ0dWFsU2Nyb2xsU2xpY2VSYXRpb0FmdGVyXG4gIClcblxuICB3YXRjaChuZWVkc1NsaWNlUmVjYWxjLCAoKSA9PiB7IHNldFZpcnR1YWxTY3JvbGxTaXplKCkgfSlcbiAgd2F0Y2gobmVlZHNSZXNldCwgcmVzZXQpXG5cbiAgZnVuY3Rpb24gcmVzZXQgKCkge1xuICAgIGxvY2FsUmVzZXRWaXJ0dWFsU2Nyb2xsKHByZXZUb0luZGV4LCB0cnVlKVxuICB9XG5cbiAgZnVuY3Rpb24gcmVmcmVzaCAodG9JbmRleCkge1xuICAgIGxvY2FsUmVzZXRWaXJ0dWFsU2Nyb2xsKHRvSW5kZXggPT09IHZvaWQgMCA/IHByZXZUb0luZGV4IDogdG9JbmRleClcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjcm9sbFRvICh0b0luZGV4LCBlZGdlKSB7XG4gICAgY29uc3Qgc2Nyb2xsRWwgPSBnZXRWaXJ0dWFsU2Nyb2xsVGFyZ2V0KClcblxuICAgIGlmIChzY3JvbGxFbCA9PT0gdm9pZCAwIHx8IHNjcm9sbEVsID09PSBudWxsIHx8IHNjcm9sbEVsLm5vZGVUeXBlID09PSA4KSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBzY3JvbGxEZXRhaWxzID0gZ2V0U2Nyb2xsRGV0YWlscyhcbiAgICAgIHNjcm9sbEVsLFxuICAgICAgZ2V0VmlydHVhbFNjcm9sbEVsKCksXG4gICAgICBiZWZvcmVSZWYudmFsdWUsXG4gICAgICBhZnRlclJlZi52YWx1ZSxcbiAgICAgIHByb3BzLnZpcnR1YWxTY3JvbGxIb3Jpem9udGFsLFxuICAgICAgJHEubGFuZy5ydGwsXG4gICAgICBwcm9wcy52aXJ0dWFsU2Nyb2xsU3RpY2t5U2l6ZVN0YXJ0LFxuICAgICAgcHJvcHMudmlydHVhbFNjcm9sbFN0aWNreVNpemVFbmRcbiAgICApXG5cbiAgICBsb2NhbFNjcm9sbFZpZXdTaXplICE9PSBzY3JvbGxEZXRhaWxzLnNjcm9sbFZpZXdTaXplICYmIHNldFZpcnR1YWxTY3JvbGxTaXplKHNjcm9sbERldGFpbHMuc2Nyb2xsVmlld1NpemUpXG5cbiAgICBzZXRWaXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZShcbiAgICAgIHNjcm9sbEVsLFxuICAgICAgc2Nyb2xsRGV0YWlscyxcbiAgICAgIE1hdGgubWluKHZpcnR1YWxTY3JvbGxMZW5ndGgudmFsdWUgLSAxLCBNYXRoLm1heCgwLCBwYXJzZUludCh0b0luZGV4LCAxMCkgfHwgMCkpLFxuICAgICAgMCxcbiAgICAgIHNjcm9sbFRvRWRnZXMuaW5kZXhPZihlZGdlKSAhPT0gLTEgPyBlZGdlIDogKHByZXZUb0luZGV4ICE9PSAtMSAmJiB0b0luZGV4ID4gcHJldlRvSW5kZXggPyAnZW5kJyA6ICdzdGFydCcpXG4gICAgKVxuICB9XG5cbiAgZnVuY3Rpb24gbG9jYWxPblZpcnR1YWxTY3JvbGxFdnQgKCkge1xuICAgIGNvbnN0IHNjcm9sbEVsID0gZ2V0VmlydHVhbFNjcm9sbFRhcmdldCgpXG5cbiAgICBpZiAoc2Nyb2xsRWwgPT09IHZvaWQgMCB8fCBzY3JvbGxFbCA9PT0gbnVsbCB8fCBzY3JvbGxFbC5ub2RlVHlwZSA9PT0gOCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3RcbiAgICAgIHNjcm9sbERldGFpbHMgPSBnZXRTY3JvbGxEZXRhaWxzKFxuICAgICAgICBzY3JvbGxFbCxcbiAgICAgICAgZ2V0VmlydHVhbFNjcm9sbEVsKCksXG4gICAgICAgIGJlZm9yZVJlZi52YWx1ZSxcbiAgICAgICAgYWZ0ZXJSZWYudmFsdWUsXG4gICAgICAgIHByb3BzLnZpcnR1YWxTY3JvbGxIb3Jpem9udGFsLFxuICAgICAgICAkcS5sYW5nLnJ0bCxcbiAgICAgICAgcHJvcHMudmlydHVhbFNjcm9sbFN0aWNreVNpemVTdGFydCxcbiAgICAgICAgcHJvcHMudmlydHVhbFNjcm9sbFN0aWNreVNpemVFbmRcbiAgICAgICksXG4gICAgICBsaXN0TGFzdEluZGV4ID0gdmlydHVhbFNjcm9sbExlbmd0aC52YWx1ZSAtIDEsXG4gICAgICBsaXN0RW5kT2Zmc2V0ID0gc2Nyb2xsRGV0YWlscy5zY3JvbGxNYXhTaXplIC0gc2Nyb2xsRGV0YWlscy5vZmZzZXRTdGFydCAtIHNjcm9sbERldGFpbHMub2Zmc2V0RW5kIC0gdmlydHVhbFNjcm9sbFBhZGRpbmdBZnRlci52YWx1ZVxuXG4gICAgaWYgKHByZXZTY3JvbGxTdGFydCA9PT0gc2Nyb2xsRGV0YWlscy5zY3JvbGxTdGFydCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHNjcm9sbERldGFpbHMuc2Nyb2xsTWF4U2l6ZSA8PSAwKSB7XG4gICAgICBzZXRWaXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZShzY3JvbGxFbCwgc2Nyb2xsRGV0YWlscywgMCwgMClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxvY2FsU2Nyb2xsVmlld1NpemUgIT09IHNjcm9sbERldGFpbHMuc2Nyb2xsVmlld1NpemUgJiYgc2V0VmlydHVhbFNjcm9sbFNpemUoc2Nyb2xsRGV0YWlscy5zY3JvbGxWaWV3U2l6ZSlcblxuICAgIHVwZGF0ZVZpcnR1YWxTY3JvbGxTaXplcyh2aXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZS52YWx1ZS5mcm9tKVxuXG4gICAgY29uc3Qgc2Nyb2xsTWF4U3RhcnQgPSBNYXRoLmZsb29yKHNjcm9sbERldGFpbHMuc2Nyb2xsTWF4U2l6ZVxuICAgICAgLSBNYXRoLm1heChzY3JvbGxEZXRhaWxzLnNjcm9sbFZpZXdTaXplLCBzY3JvbGxEZXRhaWxzLm9mZnNldEVuZClcbiAgICAgIC0gTWF0aC5taW4odmlydHVhbFNjcm9sbFNpemVzWyBsaXN0TGFzdEluZGV4IF0sIHNjcm9sbERldGFpbHMuc2Nyb2xsVmlld1NpemUgLyAyKSlcblxuICAgIGlmIChzY3JvbGxNYXhTdGFydCA+IDAgJiYgTWF0aC5jZWlsKHNjcm9sbERldGFpbHMuc2Nyb2xsU3RhcnQpID49IHNjcm9sbE1heFN0YXJ0KSB7XG4gICAgICBzZXRWaXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZShcbiAgICAgICAgc2Nyb2xsRWwsXG4gICAgICAgIHNjcm9sbERldGFpbHMsXG4gICAgICAgIGxpc3RMYXN0SW5kZXgsXG4gICAgICAgIHNjcm9sbERldGFpbHMuc2Nyb2xsTWF4U2l6ZSAtIHNjcm9sbERldGFpbHMub2Zmc2V0RW5kIC0gdmlydHVhbFNjcm9sbFNpemVzQWdnLnJlZHVjZShzdW1GbiwgMClcbiAgICAgIClcblxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgbGV0XG4gICAgICB0b0luZGV4ID0gMCxcbiAgICAgIGxpc3RPZmZzZXQgPSBzY3JvbGxEZXRhaWxzLnNjcm9sbFN0YXJ0IC0gc2Nyb2xsRGV0YWlscy5vZmZzZXRTdGFydCxcbiAgICAgIG9mZnNldCA9IGxpc3RPZmZzZXRcblxuICAgIGlmIChsaXN0T2Zmc2V0IDw9IGxpc3RFbmRPZmZzZXQgJiYgbGlzdE9mZnNldCArIHNjcm9sbERldGFpbHMuc2Nyb2xsVmlld1NpemUgPj0gdmlydHVhbFNjcm9sbFBhZGRpbmdCZWZvcmUudmFsdWUpIHtcbiAgICAgIGxpc3RPZmZzZXQgLT0gdmlydHVhbFNjcm9sbFBhZGRpbmdCZWZvcmUudmFsdWVcbiAgICAgIHRvSW5kZXggPSB2aXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZS52YWx1ZS5mcm9tXG4gICAgICBvZmZzZXQgPSBsaXN0T2Zmc2V0XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGxpc3RPZmZzZXQgPj0gdmlydHVhbFNjcm9sbFNpemVzQWdnWyBqIF0gJiYgdG9JbmRleCA8IGxpc3RMYXN0SW5kZXg7IGorKykge1xuICAgICAgICBsaXN0T2Zmc2V0IC09IHZpcnR1YWxTY3JvbGxTaXplc0FnZ1sgaiBdXG4gICAgICAgIHRvSW5kZXggKz0gYWdnQnVja2V0U2l6ZVxuICAgICAgfVxuICAgIH1cblxuICAgIHdoaWxlIChsaXN0T2Zmc2V0ID4gMCAmJiB0b0luZGV4IDwgbGlzdExhc3RJbmRleCkge1xuICAgICAgbGlzdE9mZnNldCAtPSB2aXJ0dWFsU2Nyb2xsU2l6ZXNbIHRvSW5kZXggXVxuICAgICAgaWYgKGxpc3RPZmZzZXQgPiAtc2Nyb2xsRGV0YWlscy5zY3JvbGxWaWV3U2l6ZSkge1xuICAgICAgICB0b0luZGV4KytcbiAgICAgICAgb2Zmc2V0ID0gbGlzdE9mZnNldFxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG9mZnNldCA9IHZpcnR1YWxTY3JvbGxTaXplc1sgdG9JbmRleCBdICsgbGlzdE9mZnNldFxuICAgICAgfVxuICAgIH1cblxuICAgIHNldFZpcnR1YWxTY3JvbGxTbGljZVJhbmdlKFxuICAgICAgc2Nyb2xsRWwsXG4gICAgICBzY3JvbGxEZXRhaWxzLFxuICAgICAgdG9JbmRleCxcbiAgICAgIG9mZnNldFxuICAgIClcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFZpcnR1YWxTY3JvbGxTbGljZVJhbmdlIChzY3JvbGxFbCwgc2Nyb2xsRGV0YWlscywgdG9JbmRleCwgb2Zmc2V0LCBhbGlnbikge1xuICAgIGNvbnN0IGFsaWduRm9yY2UgPSB0eXBlb2YgYWxpZ24gPT09ICdzdHJpbmcnICYmIGFsaWduLmluZGV4T2YoJy1mb3JjZScpICE9PSAtMVxuICAgIGNvbnN0IGFsaWduRW5kID0gYWxpZ25Gb3JjZSA9PT0gdHJ1ZSA/IGFsaWduLnJlcGxhY2UoJy1mb3JjZScsICcnKSA6IGFsaWduXG4gICAgY29uc3QgYWxpZ25SYW5nZSA9IGFsaWduRW5kICE9PSB2b2lkIDAgPyBhbGlnbkVuZCA6ICdzdGFydCdcblxuICAgIGxldFxuICAgICAgZnJvbSA9IE1hdGgubWF4KDAsIHRvSW5kZXggLSB2aXJ0dWFsU2Nyb2xsU2xpY2VTaXplQ29tcHV0ZWQudmFsdWVbIGFsaWduUmFuZ2UgXSksXG4gICAgICB0byA9IGZyb20gKyB2aXJ0dWFsU2Nyb2xsU2xpY2VTaXplQ29tcHV0ZWQudmFsdWUudG90YWxcblxuICAgIGlmICh0byA+IHZpcnR1YWxTY3JvbGxMZW5ndGgudmFsdWUpIHtcbiAgICAgIHRvID0gdmlydHVhbFNjcm9sbExlbmd0aC52YWx1ZVxuICAgICAgZnJvbSA9IE1hdGgubWF4KDAsIHRvIC0gdmlydHVhbFNjcm9sbFNsaWNlU2l6ZUNvbXB1dGVkLnZhbHVlLnRvdGFsKVxuICAgIH1cblxuICAgIHByZXZTY3JvbGxTdGFydCA9IHNjcm9sbERldGFpbHMuc2Nyb2xsU3RhcnRcblxuICAgIGNvbnN0IHJhbmdlQ2hhbmdlZCA9IGZyb20gIT09IHZpcnR1YWxTY3JvbGxTbGljZVJhbmdlLnZhbHVlLmZyb20gfHwgdG8gIT09IHZpcnR1YWxTY3JvbGxTbGljZVJhbmdlLnZhbHVlLnRvXG5cbiAgICBpZiAocmFuZ2VDaGFuZ2VkID09PSBmYWxzZSAmJiBhbGlnbkVuZCA9PT0gdm9pZCAwKSB7XG4gICAgICBlbWl0U2Nyb2xsKHRvSW5kZXgpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCB7IGFjdGl2ZUVsZW1lbnQgfSA9IGRvY3VtZW50XG4gICAgY29uc3QgY29udGVudEVsID0gY29udGVudFJlZi52YWx1ZVxuICAgIGlmIChcbiAgICAgIHJhbmdlQ2hhbmdlZCA9PT0gdHJ1ZVxuICAgICAgJiYgY29udGVudEVsICE9PSBudWxsXG4gICAgICAmJiBjb250ZW50RWwgIT09IGFjdGl2ZUVsZW1lbnRcbiAgICAgICYmIGNvbnRlbnRFbC5jb250YWlucyhhY3RpdmVFbGVtZW50KSA9PT0gdHJ1ZVxuICAgICkge1xuICAgICAgY29udGVudEVsLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3Vzb3V0Jywgb25CbHVyUmVmb2N1c0ZuKVxuXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY29udGVudEVsICE9PSBudWxsICYmIGNvbnRlbnRFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1c291dCcsIG9uQmx1clJlZm9jdXNGbilcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgc2V0T3ZlcmZsb3dBbmNob3IoY29udGVudEVsLCB0b0luZGV4IC0gZnJvbSlcblxuICAgIGNvbnN0IHNpemVCZWZvcmUgPSBhbGlnbkVuZCAhPT0gdm9pZCAwID8gdmlydHVhbFNjcm9sbFNpemVzLnNsaWNlKGZyb20sIHRvSW5kZXgpLnJlZHVjZShzdW1GbiwgMCkgOiAwXG5cbiAgICBpZiAocmFuZ2VDaGFuZ2VkID09PSB0cnVlKSB7XG4gICAgICAvLyB2dWUga2V5IG1hdGNoaW5nIGFsZ29yaXRobSB3b3JrcyBvbmx5IGlmXG4gICAgICAvLyB0aGUgYXJyYXkgb2YgVk5vZGVzIGNoYW5nZXMgb24gb25seSBvbmUgb2YgdGhlIGVuZHNcbiAgICAgIC8vIHNvIHdlIGZpcnN0IGNoYW5nZSBvbmUgZW5kIGFuZCB0aGVuIHRoZSBvdGhlclxuXG4gICAgICBjb25zdCB0ZW1wVG8gPSB0byA+PSB2aXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZS52YWx1ZS5mcm9tICYmIGZyb20gPD0gdmlydHVhbFNjcm9sbFNsaWNlUmFuZ2UudmFsdWUudG9cbiAgICAgICAgPyB2aXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZS52YWx1ZS50b1xuICAgICAgICA6IHRvXG5cbiAgICAgIHZpcnR1YWxTY3JvbGxTbGljZVJhbmdlLnZhbHVlID0geyBmcm9tLCB0bzogdGVtcFRvIH1cbiAgICAgIHZpcnR1YWxTY3JvbGxQYWRkaW5nQmVmb3JlLnZhbHVlID0gc3VtU2l6ZSh2aXJ0dWFsU2Nyb2xsU2l6ZXNBZ2csIHZpcnR1YWxTY3JvbGxTaXplcywgMCwgZnJvbSlcbiAgICAgIHZpcnR1YWxTY3JvbGxQYWRkaW5nQWZ0ZXIudmFsdWUgPSBzdW1TaXplKHZpcnR1YWxTY3JvbGxTaXplc0FnZywgdmlydHVhbFNjcm9sbFNpemVzLCB0bywgdmlydHVhbFNjcm9sbExlbmd0aC52YWx1ZSlcblxuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgaWYgKHZpcnR1YWxTY3JvbGxTbGljZVJhbmdlLnZhbHVlLnRvICE9PSB0byAmJiBwcmV2U2Nyb2xsU3RhcnQgPT09IHNjcm9sbERldGFpbHMuc2Nyb2xsU3RhcnQpIHtcbiAgICAgICAgICB2aXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZS52YWx1ZSA9IHsgZnJvbTogdmlydHVhbFNjcm9sbFNsaWNlUmFuZ2UudmFsdWUuZnJvbSwgdG8gfVxuICAgICAgICAgIHZpcnR1YWxTY3JvbGxQYWRkaW5nQWZ0ZXIudmFsdWUgPSBzdW1TaXplKHZpcnR1YWxTY3JvbGxTaXplc0FnZywgdmlydHVhbFNjcm9sbFNpemVzLCB0bywgdmlydHVhbFNjcm9sbExlbmd0aC52YWx1ZSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgLy8gaWYgdGhlIHNjcm9sbCB3YXMgY2hhbmdlZCBnaXZlIHVwXG4gICAgICAvLyAoYW5vdGhlciBjYWxsIHRvIHNldFZpcnR1YWxTY3JvbGxTbGljZVJhbmdlIGJlZm9yZSBhbmltYXRpb24gZnJhbWUpXG4gICAgICBpZiAocHJldlNjcm9sbFN0YXJ0ICE9PSBzY3JvbGxEZXRhaWxzLnNjcm9sbFN0YXJ0KSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAocmFuZ2VDaGFuZ2VkID09PSB0cnVlKSB7XG4gICAgICAgIHVwZGF0ZVZpcnR1YWxTY3JvbGxTaXplcyhmcm9tKVxuICAgICAgfVxuXG4gICAgICBjb25zdFxuICAgICAgICBzaXplQWZ0ZXIgPSB2aXJ0dWFsU2Nyb2xsU2l6ZXMuc2xpY2UoZnJvbSwgdG9JbmRleCkucmVkdWNlKHN1bUZuLCAwKSxcbiAgICAgICAgcG9zU3RhcnQgPSBzaXplQWZ0ZXIgKyBzY3JvbGxEZXRhaWxzLm9mZnNldFN0YXJ0ICsgdmlydHVhbFNjcm9sbFBhZGRpbmdCZWZvcmUudmFsdWUsXG4gICAgICAgIHBvc0VuZCA9IHBvc1N0YXJ0ICsgdmlydHVhbFNjcm9sbFNpemVzWyB0b0luZGV4IF1cblxuICAgICAgbGV0IHNjcm9sbFBvc2l0aW9uID0gcG9zU3RhcnQgKyBvZmZzZXRcblxuICAgICAgaWYgKGFsaWduRW5kICE9PSB2b2lkIDApIHtcbiAgICAgICAgY29uc3Qgc2l6ZURpZmYgPSBzaXplQWZ0ZXIgLSBzaXplQmVmb3JlXG4gICAgICAgIGNvbnN0IHNjcm9sbFN0YXJ0ID0gc2Nyb2xsRGV0YWlscy5zY3JvbGxTdGFydCArIHNpemVEaWZmXG5cbiAgICAgICAgc2Nyb2xsUG9zaXRpb24gPSBhbGlnbkZvcmNlICE9PSB0cnVlICYmIHNjcm9sbFN0YXJ0IDwgcG9zU3RhcnQgJiYgcG9zRW5kIDwgc2Nyb2xsU3RhcnQgKyBzY3JvbGxEZXRhaWxzLnNjcm9sbFZpZXdTaXplXG4gICAgICAgICAgPyBzY3JvbGxTdGFydFxuICAgICAgICAgIDogKFxuICAgICAgICAgICAgICBhbGlnbkVuZCA9PT0gJ2VuZCdcbiAgICAgICAgICAgICAgICA/IHBvc0VuZCAtIHNjcm9sbERldGFpbHMuc2Nyb2xsVmlld1NpemVcbiAgICAgICAgICAgICAgICA6IHBvc1N0YXJ0IC0gKGFsaWduRW5kID09PSAnc3RhcnQnID8gMCA6IE1hdGgucm91bmQoKHNjcm9sbERldGFpbHMuc2Nyb2xsVmlld1NpemUgLSB2aXJ0dWFsU2Nyb2xsU2l6ZXNbIHRvSW5kZXggXSkgLyAyKSlcbiAgICAgICAgICAgIClcbiAgICAgIH1cblxuICAgICAgcHJldlNjcm9sbFN0YXJ0ID0gc2Nyb2xsUG9zaXRpb25cblxuICAgICAgc2V0U2Nyb2xsKFxuICAgICAgICBzY3JvbGxFbCxcbiAgICAgICAgc2Nyb2xsUG9zaXRpb24sXG4gICAgICAgIHByb3BzLnZpcnR1YWxTY3JvbGxIb3Jpem9udGFsLFxuICAgICAgICAkcS5sYW5nLnJ0bFxuICAgICAgKVxuXG4gICAgICBlbWl0U2Nyb2xsKHRvSW5kZXgpXG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVZpcnR1YWxTY3JvbGxTaXplcyAoZnJvbSkge1xuICAgIGNvbnN0IGNvbnRlbnRFbCA9IGNvbnRlbnRSZWYudmFsdWVcblxuICAgIGlmIChjb250ZW50RWwpIHtcbiAgICAgIGNvbnN0XG4gICAgICAgIGNoaWxkcmVuID0gZmlsdGVyUHJvdG8uY2FsbChcbiAgICAgICAgICBjb250ZW50RWwuY2hpbGRyZW4sXG4gICAgICAgICAgZWwgPT4gZWwuY2xhc3NMaXN0ICYmIGVsLmNsYXNzTGlzdC5jb250YWlucygncS12aXJ0dWFsLXNjcm9sbC0tc2tpcCcpID09PSBmYWxzZVxuICAgICAgICApLFxuICAgICAgICBjaGlsZHJlbkxlbmd0aCA9IGNoaWxkcmVuLmxlbmd0aCxcbiAgICAgICAgc2l6ZUZuID0gcHJvcHMudmlydHVhbFNjcm9sbEhvcml6b250YWwgPT09IHRydWVcbiAgICAgICAgICA/IGVsID0+IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoXG4gICAgICAgICAgOiBlbCA9PiBlbC5vZmZzZXRIZWlnaHRcblxuICAgICAgbGV0XG4gICAgICAgIGluZGV4ID0gZnJvbSxcbiAgICAgICAgc2l6ZSwgZGlmZlxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOykge1xuICAgICAgICBzaXplID0gc2l6ZUZuKGNoaWxkcmVuWyBpIF0pXG4gICAgICAgIGkrK1xuXG4gICAgICAgIHdoaWxlIChpIDwgY2hpbGRyZW5MZW5ndGggJiYgY2hpbGRyZW5bIGkgXS5jbGFzc0xpc3QuY29udGFpbnMoJ3EtdmlydHVhbC1zY3JvbGwtLXdpdGgtcHJldicpID09PSB0cnVlKSB7XG4gICAgICAgICAgc2l6ZSArPSBzaXplRm4oY2hpbGRyZW5bIGkgXSlcbiAgICAgICAgICBpKytcbiAgICAgICAgfVxuXG4gICAgICAgIGRpZmYgPSBzaXplIC0gdmlydHVhbFNjcm9sbFNpemVzWyBpbmRleCBdXG5cbiAgICAgICAgaWYgKGRpZmYgIT09IDApIHtcbiAgICAgICAgICB2aXJ0dWFsU2Nyb2xsU2l6ZXNbIGluZGV4IF0gKz0gZGlmZlxuICAgICAgICAgIHZpcnR1YWxTY3JvbGxTaXplc0FnZ1sgTWF0aC5mbG9vcihpbmRleCAvIGFnZ0J1Y2tldFNpemUpIF0gKz0gZGlmZlxuICAgICAgICB9XG5cbiAgICAgICAgaW5kZXgrK1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQmx1clJlZm9jdXNGbiAoKSB7XG4gICAgY29udGVudFJlZi52YWx1ZSAhPT0gbnVsbCAmJiBjb250ZW50UmVmLnZhbHVlICE9PSB2b2lkIDAgJiYgY29udGVudFJlZi52YWx1ZS5mb2N1cygpXG4gIH1cblxuICBmdW5jdGlvbiBsb2NhbFJlc2V0VmlydHVhbFNjcm9sbCAodG9JbmRleCwgZnVsbFJlc2V0KSB7XG4gICAgY29uc3QgZGVmYXVsdFNpemUgPSAxICogdmlydHVhbFNjcm9sbEl0ZW1TaXplQ29tcHV0ZWQudmFsdWVcblxuICAgIGlmIChmdWxsUmVzZXQgPT09IHRydWUgfHwgQXJyYXkuaXNBcnJheSh2aXJ0dWFsU2Nyb2xsU2l6ZXMpID09PSBmYWxzZSkge1xuICAgICAgdmlydHVhbFNjcm9sbFNpemVzID0gW11cbiAgICB9XG5cbiAgICBjb25zdCBvbGRWaXJ0dWFsU2Nyb2xsU2l6ZXNMZW5ndGggPSB2aXJ0dWFsU2Nyb2xsU2l6ZXMubGVuZ3RoXG5cbiAgICB2aXJ0dWFsU2Nyb2xsU2l6ZXMubGVuZ3RoID0gdmlydHVhbFNjcm9sbExlbmd0aC52YWx1ZVxuXG4gICAgZm9yIChsZXQgaSA9IHZpcnR1YWxTY3JvbGxMZW5ndGgudmFsdWUgLSAxOyBpID49IG9sZFZpcnR1YWxTY3JvbGxTaXplc0xlbmd0aDsgaS0tKSB7XG4gICAgICB2aXJ0dWFsU2Nyb2xsU2l6ZXNbIGkgXSA9IGRlZmF1bHRTaXplXG4gICAgfVxuXG4gICAgY29uc3Qgak1heCA9IE1hdGguZmxvb3IoKHZpcnR1YWxTY3JvbGxMZW5ndGgudmFsdWUgLSAxKSAvIGFnZ0J1Y2tldFNpemUpXG4gICAgdmlydHVhbFNjcm9sbFNpemVzQWdnID0gW11cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8PSBqTWF4OyBqKyspIHtcbiAgICAgIGxldCBzaXplID0gMFxuICAgICAgY29uc3QgaU1heCA9IE1hdGgubWluKChqICsgMSkgKiBhZ2dCdWNrZXRTaXplLCB2aXJ0dWFsU2Nyb2xsTGVuZ3RoLnZhbHVlKVxuICAgICAgZm9yIChsZXQgaSA9IGogKiBhZ2dCdWNrZXRTaXplOyBpIDwgaU1heDsgaSsrKSB7XG4gICAgICAgIHNpemUgKz0gdmlydHVhbFNjcm9sbFNpemVzWyBpIF1cbiAgICAgIH1cbiAgICAgIHZpcnR1YWxTY3JvbGxTaXplc0FnZy5wdXNoKHNpemUpXG4gICAgfVxuXG4gICAgcHJldlRvSW5kZXggPSAtMVxuICAgIHByZXZTY3JvbGxTdGFydCA9IHZvaWQgMFxuXG4gICAgdmlydHVhbFNjcm9sbFBhZGRpbmdCZWZvcmUudmFsdWUgPSBzdW1TaXplKHZpcnR1YWxTY3JvbGxTaXplc0FnZywgdmlydHVhbFNjcm9sbFNpemVzLCAwLCB2aXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZS52YWx1ZS5mcm9tKVxuICAgIHZpcnR1YWxTY3JvbGxQYWRkaW5nQWZ0ZXIudmFsdWUgPSBzdW1TaXplKHZpcnR1YWxTY3JvbGxTaXplc0FnZywgdmlydHVhbFNjcm9sbFNpemVzLCB2aXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZS52YWx1ZS50bywgdmlydHVhbFNjcm9sbExlbmd0aC52YWx1ZSlcblxuICAgIGlmICh0b0luZGV4ID49IDApIHtcbiAgICAgIHVwZGF0ZVZpcnR1YWxTY3JvbGxTaXplcyh2aXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZS52YWx1ZS5mcm9tKVxuICAgICAgbmV4dFRpY2soKCkgPT4geyBzY3JvbGxUbyh0b0luZGV4KSB9KVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIG9uVmlydHVhbFNjcm9sbEV2dCgpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0VmlydHVhbFNjcm9sbFNpemUgKHNjcm9sbFZpZXdTaXplKSB7XG4gICAgaWYgKHNjcm9sbFZpZXdTaXplID09PSB2b2lkIDAgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0IHNjcm9sbEVsID0gZ2V0VmlydHVhbFNjcm9sbFRhcmdldCgpXG5cbiAgICAgIGlmIChzY3JvbGxFbCAhPT0gdm9pZCAwICYmIHNjcm9sbEVsICE9PSBudWxsICYmIHNjcm9sbEVsLm5vZGVUeXBlICE9PSA4KSB7XG4gICAgICAgIHNjcm9sbFZpZXdTaXplID0gZ2V0U2Nyb2xsRGV0YWlscyhcbiAgICAgICAgICBzY3JvbGxFbCxcbiAgICAgICAgICBnZXRWaXJ0dWFsU2Nyb2xsRWwoKSxcbiAgICAgICAgICBiZWZvcmVSZWYudmFsdWUsXG4gICAgICAgICAgYWZ0ZXJSZWYudmFsdWUsXG4gICAgICAgICAgcHJvcHMudmlydHVhbFNjcm9sbEhvcml6b250YWwsXG4gICAgICAgICAgJHEubGFuZy5ydGwsXG4gICAgICAgICAgcHJvcHMudmlydHVhbFNjcm9sbFN0aWNreVNpemVTdGFydCxcbiAgICAgICAgICBwcm9wcy52aXJ0dWFsU2Nyb2xsU3RpY2t5U2l6ZUVuZFxuICAgICAgICApLnNjcm9sbFZpZXdTaXplXG4gICAgICB9XG4gICAgfVxuXG4gICAgbG9jYWxTY3JvbGxWaWV3U2l6ZSA9IHNjcm9sbFZpZXdTaXplXG5cbiAgICBjb25zdCB2aXJ0dWFsU2Nyb2xsU2xpY2VSYXRpb0JlZm9yZSA9IHBhcnNlRmxvYXQocHJvcHMudmlydHVhbFNjcm9sbFNsaWNlUmF0aW9CZWZvcmUpIHx8IDBcbiAgICBjb25zdCB2aXJ0dWFsU2Nyb2xsU2xpY2VSYXRpb0FmdGVyID0gcGFyc2VGbG9hdChwcm9wcy52aXJ0dWFsU2Nyb2xsU2xpY2VSYXRpb0FmdGVyKSB8fCAwXG4gICAgY29uc3QgbXVsdGlwbGllciA9IDEgKyB2aXJ0dWFsU2Nyb2xsU2xpY2VSYXRpb0JlZm9yZSArIHZpcnR1YWxTY3JvbGxTbGljZVJhdGlvQWZ0ZXJcbiAgICBjb25zdCB2aWV3ID0gc2Nyb2xsVmlld1NpemUgPT09IHZvaWQgMCB8fCBzY3JvbGxWaWV3U2l6ZSA8PSAwXG4gICAgICA/IDFcbiAgICAgIDogTWF0aC5jZWlsKHNjcm9sbFZpZXdTaXplIC8gdmlydHVhbFNjcm9sbEl0ZW1TaXplQ29tcHV0ZWQudmFsdWUpXG5cbiAgICBjb25zdCBiYXNlU2l6ZSA9IE1hdGgubWF4KFxuICAgICAgMSxcbiAgICAgIHZpZXcsXG4gICAgICBNYXRoLmNlaWwoKHByb3BzLnZpcnR1YWxTY3JvbGxTbGljZVNpemUgPiAwID8gcHJvcHMudmlydHVhbFNjcm9sbFNsaWNlU2l6ZSA6IDEwKSAvIG11bHRpcGxpZXIpXG4gICAgKVxuXG4gICAgdmlydHVhbFNjcm9sbFNsaWNlU2l6ZUNvbXB1dGVkLnZhbHVlID0ge1xuICAgICAgdG90YWw6IE1hdGguY2VpbChiYXNlU2l6ZSAqIG11bHRpcGxpZXIpLFxuICAgICAgc3RhcnQ6IE1hdGguY2VpbChiYXNlU2l6ZSAqIHZpcnR1YWxTY3JvbGxTbGljZVJhdGlvQmVmb3JlKSxcbiAgICAgIGNlbnRlcjogTWF0aC5jZWlsKGJhc2VTaXplICogKDAuNSArIHZpcnR1YWxTY3JvbGxTbGljZVJhdGlvQmVmb3JlKSksXG4gICAgICBlbmQ6IE1hdGguY2VpbChiYXNlU2l6ZSAqICgxICsgdmlydHVhbFNjcm9sbFNsaWNlUmF0aW9CZWZvcmUpKSxcbiAgICAgIHZpZXdcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYWRWaXJ0dWFsU2Nyb2xsICh0YWcsIGNvbnRlbnQpIHtcbiAgICBjb25zdCBwYWRkaW5nU2l6ZSA9IHByb3BzLnZpcnR1YWxTY3JvbGxIb3Jpem9udGFsID09PSB0cnVlID8gJ3dpZHRoJyA6ICdoZWlnaHQnXG4gICAgY29uc3Qgc3R5bGUgPSB7XG4gICAgICBbICctLXEtdmlydHVhbC1zY3JvbGwtaXRlbS0nICsgcGFkZGluZ1NpemUgXTogdmlydHVhbFNjcm9sbEl0ZW1TaXplQ29tcHV0ZWQudmFsdWUgKyAncHgnXG4gICAgfVxuXG4gICAgcmV0dXJuIFtcbiAgICAgIHRhZyA9PT0gJ3Rib2R5J1xuICAgICAgICA/IGgodGFnLCB7XG4gICAgICAgICAgY2xhc3M6ICdxLXZpcnR1YWwtc2Nyb2xsX19wYWRkaW5nJyxcbiAgICAgICAgICBrZXk6ICdiZWZvcmUnLFxuICAgICAgICAgIHJlZjogYmVmb3JlUmVmXG4gICAgICAgIH0sIFtcbiAgICAgICAgICBoKCd0cicsIFtcbiAgICAgICAgICAgIGgoJ3RkJywge1xuICAgICAgICAgICAgICBzdHlsZTogeyBbIHBhZGRpbmdTaXplIF06IGAkeyB2aXJ0dWFsU2Nyb2xsUGFkZGluZ0JlZm9yZS52YWx1ZSB9cHhgLCAuLi5zdHlsZSB9LFxuICAgICAgICAgICAgICBjb2xzcGFuOiBjb2xzcGFuQXR0ci52YWx1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgICA6IGgodGFnLCB7XG4gICAgICAgICAgY2xhc3M6ICdxLXZpcnR1YWwtc2Nyb2xsX19wYWRkaW5nJyxcbiAgICAgICAgICBrZXk6ICdiZWZvcmUnLFxuICAgICAgICAgIHJlZjogYmVmb3JlUmVmLFxuICAgICAgICAgIHN0eWxlOiB7IFsgcGFkZGluZ1NpemUgXTogYCR7IHZpcnR1YWxTY3JvbGxQYWRkaW5nQmVmb3JlLnZhbHVlIH1weGAsIC4uLnN0eWxlIH1cbiAgICAgICAgfSksXG5cbiAgICAgIGgodGFnLCB7XG4gICAgICAgIGNsYXNzOiAncS12aXJ0dWFsLXNjcm9sbF9fY29udGVudCcsXG4gICAgICAgIGtleTogJ2NvbnRlbnQnLFxuICAgICAgICByZWY6IGNvbnRlbnRSZWYsXG4gICAgICAgIHRhYmluZGV4OiAtMVxuICAgICAgfSwgY29udGVudC5mbGF0KCkpLFxuXG4gICAgICB0YWcgPT09ICd0Ym9keSdcbiAgICAgICAgPyBoKHRhZywge1xuICAgICAgICAgIGNsYXNzOiAncS12aXJ0dWFsLXNjcm9sbF9fcGFkZGluZycsXG4gICAgICAgICAga2V5OiAnYWZ0ZXInLFxuICAgICAgICAgIHJlZjogYWZ0ZXJSZWZcbiAgICAgICAgfSwgW1xuICAgICAgICAgIGgoJ3RyJywgW1xuICAgICAgICAgICAgaCgndGQnLCB7XG4gICAgICAgICAgICAgIHN0eWxlOiB7IFsgcGFkZGluZ1NpemUgXTogYCR7IHZpcnR1YWxTY3JvbGxQYWRkaW5nQWZ0ZXIudmFsdWUgfXB4YCwgLi4uc3R5bGUgfSxcbiAgICAgICAgICAgICAgY29sc3BhbjogY29sc3BhbkF0dHIudmFsdWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgICAgICAgOiBoKHRhZywge1xuICAgICAgICAgIGNsYXNzOiAncS12aXJ0dWFsLXNjcm9sbF9fcGFkZGluZycsXG4gICAgICAgICAga2V5OiAnYWZ0ZXInLFxuICAgICAgICAgIHJlZjogYWZ0ZXJSZWYsXG4gICAgICAgICAgc3R5bGU6IHsgWyBwYWRkaW5nU2l6ZSBdOiBgJHsgdmlydHVhbFNjcm9sbFBhZGRpbmdBZnRlci52YWx1ZSB9cHhgLCAuLi5zdHlsZSB9XG4gICAgICAgIH0pXG4gICAgXVxuICB9XG5cbiAgZnVuY3Rpb24gZW1pdFNjcm9sbCAoaW5kZXgpIHtcbiAgICBpZiAocHJldlRvSW5kZXggIT09IGluZGV4KSB7XG4gICAgICBwcm9wcy5vblZpcnR1YWxTY3JvbGwgIT09IHZvaWQgMCAmJiBlbWl0KCd2aXJ0dWFsU2Nyb2xsJywge1xuICAgICAgICBpbmRleCxcbiAgICAgICAgZnJvbTogdmlydHVhbFNjcm9sbFNsaWNlUmFuZ2UudmFsdWUuZnJvbSxcbiAgICAgICAgdG86IHZpcnR1YWxTY3JvbGxTbGljZVJhbmdlLnZhbHVlLnRvIC0gMSxcbiAgICAgICAgZGlyZWN0aW9uOiBpbmRleCA8IHByZXZUb0luZGV4ID8gJ2RlY3JlYXNlJyA6ICdpbmNyZWFzZScsXG4gICAgICAgIHJlZjogcHJveHlcbiAgICAgIH0pXG5cbiAgICAgIHByZXZUb0luZGV4ID0gaW5kZXhcbiAgICB9XG4gIH1cblxuICBzZXRWaXJ0dWFsU2Nyb2xsU2l6ZSgpXG4gIGNvbnN0IG9uVmlydHVhbFNjcm9sbEV2dCA9IGRlYm91bmNlKFxuICAgIGxvY2FsT25WaXJ0dWFsU2Nyb2xsRXZ0LFxuICAgICRxLnBsYXRmb3JtLmlzLmlvcyA9PT0gdHJ1ZSA/IDEyMCA6IDM1XG4gIClcblxuICBvbkJlZm9yZU1vdW50KCgpID0+IHtcbiAgICBzZXRWaXJ0dWFsU2Nyb2xsU2l6ZSgpXG4gIH0pXG5cbiAgbGV0IHNob3VsZEFjdGl2YXRlID0gZmFsc2VcblxuICBvbkRlYWN0aXZhdGVkKCgpID0+IHtcbiAgICBzaG91bGRBY3RpdmF0ZSA9IHRydWVcbiAgfSlcblxuICBvbkFjdGl2YXRlZCgoKSA9PiB7XG4gICAgaWYgKHNob3VsZEFjdGl2YXRlICE9PSB0cnVlKSByZXR1cm5cblxuICAgIGNvbnN0IHNjcm9sbEVsID0gZ2V0VmlydHVhbFNjcm9sbFRhcmdldCgpXG5cbiAgICBpZiAocHJldlNjcm9sbFN0YXJ0ICE9PSB2b2lkIDAgJiYgc2Nyb2xsRWwgIT09IHZvaWQgMCAmJiBzY3JvbGxFbCAhPT0gbnVsbCAmJiBzY3JvbGxFbC5ub2RlVHlwZSAhPT0gOCkge1xuICAgICAgc2V0U2Nyb2xsKFxuICAgICAgICBzY3JvbGxFbCxcbiAgICAgICAgcHJldlNjcm9sbFN0YXJ0LFxuICAgICAgICBwcm9wcy52aXJ0dWFsU2Nyb2xsSG9yaXpvbnRhbCxcbiAgICAgICAgJHEubGFuZy5ydGxcbiAgICAgIClcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBzY3JvbGxUbyhwcmV2VG9JbmRleClcbiAgICB9XG4gIH0pXG5cbiAgX19RVUFTQVJfU1NSX18gfHwgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICBvblZpcnR1YWxTY3JvbGxFdnQuY2FuY2VsKClcbiAgfSlcblxuICAvLyBleHBvc2UgcHVibGljIG1ldGhvZHNcbiAgT2JqZWN0LmFzc2lnbihwcm94eSwgeyBzY3JvbGxUbywgcmVzZXQsIHJlZnJlc2ggfSlcblxuICByZXR1cm4ge1xuICAgIHZpcnR1YWxTY3JvbGxTbGljZVJhbmdlLFxuICAgIHZpcnR1YWxTY3JvbGxTbGljZVNpemVDb21wdXRlZCxcblxuICAgIHNldFZpcnR1YWxTY3JvbGxTaXplLFxuICAgIG9uVmlydHVhbFNjcm9sbEV2dCxcbiAgICBsb2NhbFJlc2V0VmlydHVhbFNjcm9sbCxcbiAgICBwYWRWaXJ0dWFsU2Nyb2xsLFxuXG4gICAgc2Nyb2xsVG8sXG4gICAgcmVzZXQsXG4gICAgcmVmcmVzaFxuICB9XG59XG4iLCJpbXBvcnQgeyBoLCByZWYsIGNvbXB1dGVkLCB3YXRjaCwgb25CZWZvcmVVcGRhdGUsIG9uVXBkYXRlZCwgb25CZWZvcmVVbm1vdW50LCBuZXh0VGljaywgZ2V0Q3VycmVudEluc3RhbmNlIH0gZnJvbSAndnVlJ1xuXG5pbXBvcnQgUUZpZWxkIGZyb20gJy4uL2ZpZWxkL1FGaWVsZC5qcydcbmltcG9ydCBRSWNvbiBmcm9tICcuLi9pY29uL1FJY29uLmpzJ1xuaW1wb3J0IFFDaGlwIGZyb20gJy4uL2NoaXAvUUNoaXAuanMnXG5cbmltcG9ydCBRSXRlbSBmcm9tICcuLi9pdGVtL1FJdGVtLmpzJ1xuaW1wb3J0IFFJdGVtU2VjdGlvbiBmcm9tICcuLi9pdGVtL1FJdGVtU2VjdGlvbi5qcydcbmltcG9ydCBRSXRlbUxhYmVsIGZyb20gJy4uL2l0ZW0vUUl0ZW1MYWJlbC5qcydcblxuaW1wb3J0IFFNZW51IGZyb20gJy4uL21lbnUvUU1lbnUuanMnXG5pbXBvcnQgUURpYWxvZyBmcm9tICcuLi9kaWFsb2cvUURpYWxvZy5qcydcblxuaW1wb3J0IHVzZUZpZWxkLCB7IHVzZUZpZWxkU3RhdGUsIHVzZUZpZWxkUHJvcHMsIHVzZUZpZWxkRW1pdHMsIGZpZWxkVmFsdWVJc0ZpbGxlZCB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3ByaXZhdGUudXNlLWZpZWxkL3VzZS1maWVsZC5qcydcbmltcG9ydCB7IHVzZVZpcnR1YWxTY3JvbGwsIHVzZVZpcnR1YWxTY3JvbGxQcm9wcyB9IGZyb20gJy4uL3ZpcnR1YWwtc2Nyb2xsL3VzZS12aXJ0dWFsLXNjcm9sbC5qcydcbmltcG9ydCB7IHVzZUZvcm1Qcm9wcywgdXNlRm9ybUlucHV0TmFtZUF0dHIgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy91c2UtZm9ybS9wcml2YXRlLnVzZS1mb3JtLmpzJ1xuaW1wb3J0IHVzZUtleUNvbXBvc2l0aW9uIGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3ByaXZhdGUudXNlLWtleS1jb21wb3NpdGlvbi91c2Uta2V5LWNvbXBvc2l0aW9uLmpzJ1xuXG5pbXBvcnQgeyBjcmVhdGVDb21wb25lbnQgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlLmNyZWF0ZS9jcmVhdGUuanMnXG5pbXBvcnQgeyBpc0RlZXBFcXVhbCB9IGZyb20gJy4uLy4uL3V0aWxzL2lzL2lzLmpzJ1xuaW1wb3J0IHsgc3RvcCwgcHJldmVudCwgc3RvcEFuZFByZXZlbnQgfSBmcm9tICcuLi8uLi91dGlscy9ldmVudC9ldmVudC5qcydcbmltcG9ydCB7IG5vcm1hbGl6ZVRvSW50ZXJ2YWwgfSBmcm9tICcuLi8uLi91dGlscy9mb3JtYXQvZm9ybWF0LmpzJ1xuaW1wb3J0IHsgc2hvdWxkSWdub3JlS2V5LCBpc0tleUNvZGUgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlLmtleWJvYXJkL2tleS1jb21wb3NpdGlvbi5qcydcbmltcG9ydCB7IGhNZXJnZVNsb3QgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlLnJlbmRlci9yZW5kZXIuanMnXG5cbmNvbnN0IHZhbGlkYXRlTmV3VmFsdWVNb2RlID0gdiA9PiBbICdhZGQnLCAnYWRkLXVuaXF1ZScsICd0b2dnbGUnIF0uaW5jbHVkZXModilcbmNvbnN0IHJlRXNjYXBlTGlzdCA9ICcuKis/XiR7fSgpfFtdXFxcXCdcbmNvbnN0IGZpZWxkUHJvcHNMaXN0ID0gT2JqZWN0LmtleXModXNlRmllbGRQcm9wcylcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29tcG9uZW50KHtcbiAgbmFtZTogJ1FTZWxlY3QnLFxuXG4gIGluaGVyaXRBdHRyczogZmFsc2UsXG5cbiAgcHJvcHM6IHtcbiAgICAuLi51c2VWaXJ0dWFsU2Nyb2xsUHJvcHMsXG4gICAgLi4udXNlRm9ybVByb3BzLFxuICAgIC4uLnVzZUZpZWxkUHJvcHMsXG5cbiAgICAvLyBvdmVycmlkZSBvZiB1c2VGaWVsZFByb3BzID4gbW9kZWxWYWx1ZVxuICAgIG1vZGVsVmFsdWU6IHtcbiAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgfSxcblxuICAgIG11bHRpcGxlOiBCb29sZWFuLFxuXG4gICAgZGlzcGxheVZhbHVlOiBbIFN0cmluZywgTnVtYmVyIF0sXG4gICAgZGlzcGxheVZhbHVlSHRtbDogQm9vbGVhbixcbiAgICBkcm9wZG93bkljb246IFN0cmluZyxcblxuICAgIG9wdGlvbnM6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgZGVmYXVsdDogKCkgPT4gW11cbiAgICB9LFxuXG4gICAgb3B0aW9uVmFsdWU6IFsgRnVuY3Rpb24sIFN0cmluZyBdLFxuICAgIG9wdGlvbkxhYmVsOiBbIEZ1bmN0aW9uLCBTdHJpbmcgXSxcbiAgICBvcHRpb25EaXNhYmxlOiBbIEZ1bmN0aW9uLCBTdHJpbmcgXSxcblxuICAgIGhpZGVTZWxlY3RlZDogQm9vbGVhbixcbiAgICBoaWRlRHJvcGRvd25JY29uOiBCb29sZWFuLFxuICAgIGZpbGxJbnB1dDogQm9vbGVhbixcblxuICAgIG1heFZhbHVlczogWyBOdW1iZXIsIFN0cmluZyBdLFxuXG4gICAgb3B0aW9uc0RlbnNlOiBCb29sZWFuLFxuICAgIG9wdGlvbnNEYXJrOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogbnVsbFxuICAgIH0sXG4gICAgb3B0aW9uc1NlbGVjdGVkQ2xhc3M6IFN0cmluZyxcbiAgICBvcHRpb25zSHRtbDogQm9vbGVhbixcblxuICAgIG9wdGlvbnNDb3ZlcjogQm9vbGVhbixcblxuICAgIG1lbnVTaHJpbms6IEJvb2xlYW4sXG4gICAgbWVudUFuY2hvcjogU3RyaW5nLFxuICAgIG1lbnVTZWxmOiBTdHJpbmcsXG4gICAgbWVudU9mZnNldDogQXJyYXksXG5cbiAgICBwb3B1cENvbnRlbnRDbGFzczogU3RyaW5nLFxuICAgIHBvcHVwQ29udGVudFN0eWxlOiBbIFN0cmluZywgQXJyYXksIE9iamVjdCBdLFxuICAgIHBvcHVwTm9Sb3V0ZURpc21pc3M6IEJvb2xlYW4sXG5cbiAgICB1c2VJbnB1dDogQm9vbGVhbixcbiAgICB1c2VDaGlwczogQm9vbGVhbixcblxuICAgIG5ld1ZhbHVlTW9kZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgdmFsaWRhdG9yOiB2YWxpZGF0ZU5ld1ZhbHVlTW9kZVxuICAgIH0sXG5cbiAgICBtYXBPcHRpb25zOiBCb29sZWFuLFxuICAgIGVtaXRWYWx1ZTogQm9vbGVhbixcblxuICAgIGlucHV0RGVib3VuY2U6IHtcbiAgICAgIHR5cGU6IFsgTnVtYmVyLCBTdHJpbmcgXSxcbiAgICAgIGRlZmF1bHQ6IDUwMFxuICAgIH0sXG5cbiAgICBpbnB1dENsYXNzOiBbIEFycmF5LCBTdHJpbmcsIE9iamVjdCBdLFxuICAgIGlucHV0U3R5bGU6IFsgQXJyYXksIFN0cmluZywgT2JqZWN0IF0sXG5cbiAgICB0YWJpbmRleDoge1xuICAgICAgdHlwZTogWyBTdHJpbmcsIE51bWJlciBdLFxuICAgICAgZGVmYXVsdDogMFxuICAgIH0sXG5cbiAgICBhdXRvY29tcGxldGU6IFN0cmluZyxcblxuICAgIHRyYW5zaXRpb25TaG93OiB7fSxcbiAgICB0cmFuc2l0aW9uSGlkZToge30sXG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uOiB7fSxcblxuICAgIGJlaGF2aW9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICB2YWxpZGF0b3I6IHYgPT4gWyAnZGVmYXVsdCcsICdtZW51JywgJ2RpYWxvZycgXS5pbmNsdWRlcyh2KSxcbiAgICAgIGRlZmF1bHQ6ICdkZWZhdWx0J1xuICAgIH0sXG5cbiAgICAvLyBvdmVycmlkZSBvZiB1c2VWaXJ0dWFsU2Nyb2xsUHJvcHMgPiB2aXJ0dWFsU2Nyb2xsSXRlbVNpemUgKG5vIGRlZmF1bHQpXG4gICAgdmlydHVhbFNjcm9sbEl0ZW1TaXplOiB1c2VWaXJ0dWFsU2Nyb2xsUHJvcHMudmlydHVhbFNjcm9sbEl0ZW1TaXplLnR5cGUsXG5cbiAgICBvbk5ld1ZhbHVlOiBGdW5jdGlvbixcbiAgICBvbkZpbHRlcjogRnVuY3Rpb25cbiAgfSxcblxuICBlbWl0czogW1xuICAgIC4uLnVzZUZpZWxkRW1pdHMsXG4gICAgJ2FkZCcsICdyZW1vdmUnLCAnaW5wdXRWYWx1ZScsXG4gICAgJ2tleXVwJywgJ2tleXByZXNzJywgJ2tleWRvd24nLFxuICAgICdwb3B1cFNob3cnLCAncG9wdXBIaWRlJyxcbiAgICAnZmlsdGVyQWJvcnQnXG4gIF0sXG5cbiAgc2V0dXAgKHByb3BzLCB7IHNsb3RzLCBlbWl0IH0pIHtcbiAgICBjb25zdCB7IHByb3h5IH0gPSBnZXRDdXJyZW50SW5zdGFuY2UoKVxuICAgIGNvbnN0IHsgJHEgfSA9IHByb3h5XG5cbiAgICBjb25zdCBtZW51ID0gcmVmKGZhbHNlKVxuICAgIGNvbnN0IGRpYWxvZyA9IHJlZihmYWxzZSlcbiAgICBjb25zdCBvcHRpb25JbmRleCA9IHJlZigtMSlcbiAgICBjb25zdCBpbnB1dFZhbHVlID0gcmVmKCcnKVxuICAgIGNvbnN0IGRpYWxvZ0ZpZWxkRm9jdXNlZCA9IHJlZihmYWxzZSlcbiAgICBjb25zdCBpbm5lckxvYWRpbmdJbmRpY2F0b3IgPSByZWYoZmFsc2UpXG5cbiAgICBsZXQgZmlsdGVyVGltZXIgPSBudWxsLCBpbnB1dFZhbHVlVGltZXIgPSBudWxsLFxuICAgICAgaW5uZXJWYWx1ZUNhY2hlLFxuICAgICAgaGFzRGlhbG9nLCB1c2VySW5wdXRWYWx1ZSwgZmlsdGVySWQgPSBudWxsLCBkZWZhdWx0SW5wdXRWYWx1ZSxcbiAgICAgIHRyYW5zaXRpb25TaG93Q29tcHV0ZWQsIHNlYXJjaEJ1ZmZlciwgc2VhcmNoQnVmZmVyRXhwXG5cbiAgICBjb25zdCBpbnB1dFJlZiA9IHJlZihudWxsKVxuICAgIGNvbnN0IHRhcmdldFJlZiA9IHJlZihudWxsKVxuICAgIGNvbnN0IG1lbnVSZWYgPSByZWYobnVsbClcbiAgICBjb25zdCBkaWFsb2dSZWYgPSByZWYobnVsbClcbiAgICBjb25zdCBtZW51Q29udGVudFJlZiA9IHJlZihudWxsKVxuXG4gICAgY29uc3QgbmFtZVByb3AgPSB1c2VGb3JtSW5wdXROYW1lQXR0cihwcm9wcylcblxuICAgIGNvbnN0IG9uQ29tcG9zaXRpb24gPSB1c2VLZXlDb21wb3NpdGlvbihvbklucHV0KVxuXG4gICAgY29uc3QgdmlydHVhbFNjcm9sbExlbmd0aCA9IGNvbXB1dGVkKCgpID0+IChcbiAgICAgIEFycmF5LmlzQXJyYXkocHJvcHMub3B0aW9ucylcbiAgICAgICAgPyBwcm9wcy5vcHRpb25zLmxlbmd0aFxuICAgICAgICA6IDBcbiAgICApKVxuXG4gICAgY29uc3QgdmlydHVhbFNjcm9sbEl0ZW1TaXplQ29tcHV0ZWQgPSBjb21wdXRlZCgoKSA9PiAoXG4gICAgICBwcm9wcy52aXJ0dWFsU2Nyb2xsSXRlbVNpemUgPT09IHZvaWQgMFxuICAgICAgICA/IChwcm9wcy5vcHRpb25zRGVuc2UgPT09IHRydWUgPyAyNCA6IDQ4KVxuICAgICAgICA6IHByb3BzLnZpcnR1YWxTY3JvbGxJdGVtU2l6ZVxuICAgICkpXG5cbiAgICBjb25zdCB7XG4gICAgICB2aXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZSxcbiAgICAgIHZpcnR1YWxTY3JvbGxTbGljZVNpemVDb21wdXRlZCxcbiAgICAgIGxvY2FsUmVzZXRWaXJ0dWFsU2Nyb2xsLFxuICAgICAgcGFkVmlydHVhbFNjcm9sbCxcbiAgICAgIG9uVmlydHVhbFNjcm9sbEV2dCxcbiAgICAgIHNjcm9sbFRvLFxuICAgICAgc2V0VmlydHVhbFNjcm9sbFNpemVcbiAgICB9ID0gdXNlVmlydHVhbFNjcm9sbCh7XG4gICAgICB2aXJ0dWFsU2Nyb2xsTGVuZ3RoLCBnZXRWaXJ0dWFsU2Nyb2xsVGFyZ2V0LCBnZXRWaXJ0dWFsU2Nyb2xsRWwsXG4gICAgICB2aXJ0dWFsU2Nyb2xsSXRlbVNpemVDb21wdXRlZFxuICAgIH0pXG5cbiAgICBjb25zdCBzdGF0ZSA9IHVzZUZpZWxkU3RhdGUoKVxuXG4gICAgY29uc3QgaW5uZXJWYWx1ZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0XG4gICAgICAgIG1hcE51bGwgPSBwcm9wcy5tYXBPcHRpb25zID09PSB0cnVlICYmIHByb3BzLm11bHRpcGxlICE9PSB0cnVlLFxuICAgICAgICB2YWwgPSBwcm9wcy5tb2RlbFZhbHVlICE9PSB2b2lkIDAgJiYgKHByb3BzLm1vZGVsVmFsdWUgIT09IG51bGwgfHwgbWFwTnVsbCA9PT0gdHJ1ZSlcbiAgICAgICAgICA/IChwcm9wcy5tdWx0aXBsZSA9PT0gdHJ1ZSAmJiBBcnJheS5pc0FycmF5KHByb3BzLm1vZGVsVmFsdWUpID8gcHJvcHMubW9kZWxWYWx1ZSA6IFsgcHJvcHMubW9kZWxWYWx1ZSBdKVxuICAgICAgICAgIDogW11cblxuICAgICAgaWYgKHByb3BzLm1hcE9wdGlvbnMgPT09IHRydWUgJiYgQXJyYXkuaXNBcnJheShwcm9wcy5vcHRpb25zKSA9PT0gdHJ1ZSkge1xuICAgICAgICBjb25zdCBjYWNoZSA9IHByb3BzLm1hcE9wdGlvbnMgPT09IHRydWUgJiYgaW5uZXJWYWx1ZUNhY2hlICE9PSB2b2lkIDBcbiAgICAgICAgICA/IGlubmVyVmFsdWVDYWNoZVxuICAgICAgICAgIDogW11cbiAgICAgICAgY29uc3QgdmFsdWVzID0gdmFsLm1hcCh2ID0+IGdldE9wdGlvbih2LCBjYWNoZSkpXG5cbiAgICAgICAgcmV0dXJuIHByb3BzLm1vZGVsVmFsdWUgPT09IG51bGwgJiYgbWFwTnVsbCA9PT0gdHJ1ZVxuICAgICAgICAgID8gdmFsdWVzLmZpbHRlcih2ID0+IHYgIT09IG51bGwpXG4gICAgICAgICAgOiB2YWx1ZXNcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbFxuICAgIH0pXG5cbiAgICBjb25zdCBpbm5lckZpZWxkUHJvcHMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBhY2MgPSB7fVxuICAgICAgZmllbGRQcm9wc0xpc3QuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBjb25zdCB2YWwgPSBwcm9wc1sga2V5IF1cbiAgICAgICAgaWYgKHZhbCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgYWNjWyBrZXkgXSA9IHZhbFxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgcmV0dXJuIGFjY1xuICAgIH0pXG5cbiAgICBjb25zdCBpc09wdGlvbnNEYXJrID0gY29tcHV0ZWQoKCkgPT4gKFxuICAgICAgcHJvcHMub3B0aW9uc0RhcmsgPT09IG51bGxcbiAgICAgICAgPyBzdGF0ZS5pc0RhcmsudmFsdWVcbiAgICAgICAgOiBwcm9wcy5vcHRpb25zRGFya1xuICAgICkpXG5cbiAgICBjb25zdCBoYXNWYWx1ZSA9IGNvbXB1dGVkKCgpID0+IGZpZWxkVmFsdWVJc0ZpbGxlZChpbm5lclZhbHVlLnZhbHVlKSlcblxuICAgIGNvbnN0IGNvbXB1dGVkSW5wdXRDbGFzcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGxldCBjbHMgPSAncS1maWVsZF9faW5wdXQgcS1wbGFjZWhvbGRlciBjb2wnXG5cbiAgICAgIGlmIChwcm9wcy5oaWRlU2VsZWN0ZWQgPT09IHRydWUgfHwgaW5uZXJWYWx1ZS52YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFsgY2xzLCBwcm9wcy5pbnB1dENsYXNzIF1cbiAgICAgIH1cblxuICAgICAgY2xzICs9ICcgcS1maWVsZF9faW5wdXQtLXBhZGRpbmcnXG5cbiAgICAgIHJldHVybiBwcm9wcy5pbnB1dENsYXNzID09PSB2b2lkIDBcbiAgICAgICAgPyBjbHNcbiAgICAgICAgOiBbIGNscywgcHJvcHMuaW5wdXRDbGFzcyBdXG4gICAgfSlcblxuICAgIGNvbnN0IG1lbnVDb250ZW50Q2xhc3MgPSBjb21wdXRlZCgoKSA9PlxuICAgICAgKHByb3BzLnZpcnR1YWxTY3JvbGxIb3Jpem9udGFsID09PSB0cnVlID8gJ3EtdmlydHVhbC1zY3JvbGwtLWhvcml6b250YWwnIDogJycpXG4gICAgICArIChwcm9wcy5wb3B1cENvbnRlbnRDbGFzcyA/ICcgJyArIHByb3BzLnBvcHVwQ29udGVudENsYXNzIDogJycpXG4gICAgKVxuXG4gICAgY29uc3Qgbm9PcHRpb25zID0gY29tcHV0ZWQoKCkgPT4gdmlydHVhbFNjcm9sbExlbmd0aC52YWx1ZSA9PT0gMClcblxuICAgIGNvbnN0IHNlbGVjdGVkU3RyaW5nID0gY29tcHV0ZWQoKCkgPT5cbiAgICAgIGlubmVyVmFsdWUudmFsdWVcbiAgICAgICAgLm1hcChvcHQgPT4gZ2V0T3B0aW9uTGFiZWwudmFsdWUob3B0KSlcbiAgICAgICAgLmpvaW4oJywgJylcbiAgICApXG5cbiAgICBjb25zdCBhcmlhQ3VycmVudFZhbHVlID0gY29tcHV0ZWQoKCkgPT4gKHByb3BzLmRpc3BsYXlWYWx1ZSAhPT0gdm9pZCAwXG4gICAgICA/IHByb3BzLmRpc3BsYXlWYWx1ZVxuICAgICAgOiBzZWxlY3RlZFN0cmluZy52YWx1ZVxuICAgICkpXG5cbiAgICBjb25zdCBuZWVkc0h0bWxGbiA9IGNvbXB1dGVkKCgpID0+IChcbiAgICAgIHByb3BzLm9wdGlvbnNIdG1sID09PSB0cnVlXG4gICAgICAgID8gKCkgPT4gdHJ1ZVxuICAgICAgICA6IG9wdCA9PiBvcHQgIT09IHZvaWQgMCAmJiBvcHQgIT09IG51bGwgJiYgb3B0Lmh0bWwgPT09IHRydWVcbiAgICApKVxuXG4gICAgY29uc3QgdmFsdWVBc0h0bWwgPSBjb21wdXRlZCgoKSA9PiAoXG4gICAgICBwcm9wcy5kaXNwbGF5VmFsdWVIdG1sID09PSB0cnVlIHx8IChcbiAgICAgICAgcHJvcHMuZGlzcGxheVZhbHVlID09PSB2b2lkIDAgJiYgKFxuICAgICAgICAgIHByb3BzLm9wdGlvbnNIdG1sID09PSB0cnVlXG4gICAgICAgICAgfHwgaW5uZXJWYWx1ZS52YWx1ZS5zb21lKG5lZWRzSHRtbEZuLnZhbHVlKVxuICAgICAgICApXG4gICAgICApXG4gICAgKSlcblxuICAgIGNvbnN0IHRhYmluZGV4ID0gY29tcHV0ZWQoKCkgPT4gKHN0YXRlLmZvY3VzZWQudmFsdWUgPT09IHRydWUgPyBwcm9wcy50YWJpbmRleCA6IC0xKSlcblxuICAgIGNvbnN0IGNvbWJvYm94QXR0cnMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBhdHRycyA9IHtcbiAgICAgICAgdGFiaW5kZXg6IHByb3BzLnRhYmluZGV4LFxuICAgICAgICByb2xlOiAnY29tYm9ib3gnLFxuICAgICAgICAnYXJpYS1sYWJlbCc6IHByb3BzLmxhYmVsLFxuICAgICAgICAnYXJpYS1yZWFkb25seSc6IHByb3BzLnJlYWRvbmx5ID09PSB0cnVlID8gJ3RydWUnIDogJ2ZhbHNlJyxcbiAgICAgICAgJ2FyaWEtYXV0b2NvbXBsZXRlJzogcHJvcHMudXNlSW5wdXQgPT09IHRydWUgPyAnbGlzdCcgOiAnbm9uZScsXG4gICAgICAgICdhcmlhLWV4cGFuZGVkJzogbWVudS52YWx1ZSA9PT0gdHJ1ZSA/ICd0cnVlJyA6ICdmYWxzZScsXG4gICAgICAgICdhcmlhLWNvbnRyb2xzJzogYCR7IHN0YXRlLnRhcmdldFVpZC52YWx1ZSB9X2xiYFxuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9uSW5kZXgudmFsdWUgPj0gMCkge1xuICAgICAgICBhdHRyc1sgJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcgXSA9IGAkeyBzdGF0ZS50YXJnZXRVaWQudmFsdWUgfV8keyBvcHRpb25JbmRleC52YWx1ZSB9YFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXR0cnNcbiAgICB9KVxuXG4gICAgY29uc3QgbGlzdGJveEF0dHJzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICAgIGlkOiBgJHsgc3RhdGUudGFyZ2V0VWlkLnZhbHVlIH1fbGJgLFxuICAgICAgcm9sZTogJ2xpc3Rib3gnLFxuICAgICAgJ2FyaWEtbXVsdGlzZWxlY3RhYmxlJzogcHJvcHMubXVsdGlwbGUgPT09IHRydWUgPyAndHJ1ZScgOiAnZmFsc2UnXG4gICAgfSkpXG5cbiAgICBjb25zdCBzZWxlY3RlZFNjb3BlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIGlubmVyVmFsdWUudmFsdWUubWFwKChvcHQsIGkpID0+ICh7XG4gICAgICAgIGluZGV4OiBpLFxuICAgICAgICBvcHQsXG4gICAgICAgIGh0bWw6IG5lZWRzSHRtbEZuLnZhbHVlKG9wdCksXG4gICAgICAgIHNlbGVjdGVkOiB0cnVlLFxuICAgICAgICByZW1vdmVBdEluZGV4OiByZW1vdmVBdEluZGV4QW5kRm9jdXMsXG4gICAgICAgIHRvZ2dsZU9wdGlvbixcbiAgICAgICAgdGFiaW5kZXg6IHRhYmluZGV4LnZhbHVlXG4gICAgICB9KSlcbiAgICB9KVxuXG4gICAgY29uc3Qgb3B0aW9uU2NvcGUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAodmlydHVhbFNjcm9sbExlbmd0aC52YWx1ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gW11cbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBmcm9tLCB0byB9ID0gdmlydHVhbFNjcm9sbFNsaWNlUmFuZ2UudmFsdWVcblxuICAgICAgcmV0dXJuIHByb3BzLm9wdGlvbnMuc2xpY2UoZnJvbSwgdG8pLm1hcCgob3B0LCBpKSA9PiB7XG4gICAgICAgIGNvbnN0IGRpc2FibGUgPSBpc09wdGlvbkRpc2FibGVkLnZhbHVlKG9wdCkgPT09IHRydWVcbiAgICAgICAgY29uc3QgYWN0aXZlID0gaXNPcHRpb25TZWxlY3RlZChvcHQpID09PSB0cnVlXG4gICAgICAgIGNvbnN0IGluZGV4ID0gZnJvbSArIGlcblxuICAgICAgICBjb25zdCBpdGVtUHJvcHMgPSB7XG4gICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgIGFjdGl2ZSxcbiAgICAgICAgICBhY3RpdmVDbGFzczogY29tcHV0ZWRPcHRpb25zU2VsZWN0ZWRDbGFzcy52YWx1ZSxcbiAgICAgICAgICBtYW51YWxGb2N1czogdHJ1ZSxcbiAgICAgICAgICBmb2N1c2VkOiBmYWxzZSxcbiAgICAgICAgICBkaXNhYmxlLFxuICAgICAgICAgIHRhYmluZGV4OiAtMSxcbiAgICAgICAgICBkZW5zZTogcHJvcHMub3B0aW9uc0RlbnNlLFxuICAgICAgICAgIGRhcms6IGlzT3B0aW9uc0RhcmsudmFsdWUsXG4gICAgICAgICAgcm9sZTogJ29wdGlvbicsXG4gICAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiBhY3RpdmUgPT09IHRydWUgPyAndHJ1ZScgOiAnZmFsc2UnLFxuICAgICAgICAgIGlkOiBgJHsgc3RhdGUudGFyZ2V0VWlkLnZhbHVlIH1fJHsgaW5kZXggfWAsXG4gICAgICAgICAgb25DbGljazogKCkgPT4geyB0b2dnbGVPcHRpb24ob3B0KSB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGlzYWJsZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgIG9wdGlvbkluZGV4LnZhbHVlID09PSBpbmRleCAmJiAoaXRlbVByb3BzLmZvY3VzZWQgPSB0cnVlKVxuXG4gICAgICAgICAgaWYgKCRxLnBsYXRmb3JtLmlzLmRlc2t0b3AgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGl0ZW1Qcm9wcy5vbk1vdXNlbW92ZSA9ICgpID0+IHsgbWVudS52YWx1ZSA9PT0gdHJ1ZSAmJiBzZXRPcHRpb25JbmRleChpbmRleCkgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgb3B0LFxuICAgICAgICAgIGh0bWw6IG5lZWRzSHRtbEZuLnZhbHVlKG9wdCksXG4gICAgICAgICAgbGFiZWw6IGdldE9wdGlvbkxhYmVsLnZhbHVlKG9wdCksXG4gICAgICAgICAgc2VsZWN0ZWQ6IGl0ZW1Qcm9wcy5hY3RpdmUsXG4gICAgICAgICAgZm9jdXNlZDogaXRlbVByb3BzLmZvY3VzZWQsXG4gICAgICAgICAgdG9nZ2xlT3B0aW9uLFxuICAgICAgICAgIHNldE9wdGlvbkluZGV4LFxuICAgICAgICAgIGl0ZW1Qcm9wc1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBjb25zdCBkcm9wZG93bkFycm93SWNvbiA9IGNvbXB1dGVkKCgpID0+IChcbiAgICAgIHByb3BzLmRyb3Bkb3duSWNvbiAhPT0gdm9pZCAwXG4gICAgICAgID8gcHJvcHMuZHJvcGRvd25JY29uXG4gICAgICAgIDogJHEuaWNvblNldC5hcnJvdy5kcm9wZG93blxuICAgICkpXG5cbiAgICBjb25zdCBzcXVhcmVkTWVudSA9IGNvbXB1dGVkKCgpID0+XG4gICAgICBwcm9wcy5vcHRpb25zQ292ZXIgPT09IGZhbHNlXG4gICAgICAmJiBwcm9wcy5vdXRsaW5lZCAhPT0gdHJ1ZVxuICAgICAgJiYgcHJvcHMuc3RhbmRvdXQgIT09IHRydWVcbiAgICAgICYmIHByb3BzLmJvcmRlcmxlc3MgIT09IHRydWVcbiAgICAgICYmIHByb3BzLnJvdW5kZWQgIT09IHRydWVcbiAgICApXG5cbiAgICBjb25zdCBjb21wdXRlZE9wdGlvbnNTZWxlY3RlZENsYXNzID0gY29tcHV0ZWQoKCkgPT4gKFxuICAgICAgcHJvcHMub3B0aW9uc1NlbGVjdGVkQ2xhc3MgIT09IHZvaWQgMFxuICAgICAgICA/IHByb3BzLm9wdGlvbnNTZWxlY3RlZENsYXNzXG4gICAgICAgIDogKHByb3BzLmNvbG9yICE9PSB2b2lkIDAgPyBgdGV4dC0keyBwcm9wcy5jb2xvciB9YCA6ICcnKVxuICAgICkpXG5cbiAgICAvLyByZXR1cm5zIG1ldGhvZCB0byBnZXQgdmFsdWUgb2YgYW4gb3B0aW9uO1xuICAgIC8vIHRha2VzIGludG8gYWNjb3VudCAnb3B0aW9uLXZhbHVlJyBwcm9wXG4gICAgY29uc3QgZ2V0T3B0aW9uVmFsdWUgPSBjb21wdXRlZCgoKSA9PiBnZXRQcm9wVmFsdWVGbihwcm9wcy5vcHRpb25WYWx1ZSwgJ3ZhbHVlJykpXG5cbiAgICAvLyByZXR1cm5zIG1ldGhvZCB0byBnZXQgbGFiZWwgb2YgYW4gb3B0aW9uO1xuICAgIC8vIHRha2VzIGludG8gYWNjb3VudCAnb3B0aW9uLWxhYmVsJyBwcm9wXG4gICAgY29uc3QgZ2V0T3B0aW9uTGFiZWwgPSBjb21wdXRlZCgoKSA9PiBnZXRQcm9wVmFsdWVGbihwcm9wcy5vcHRpb25MYWJlbCwgJ2xhYmVsJykpXG5cbiAgICAvLyByZXR1cm5zIG1ldGhvZCB0byB0ZWxsIGlmIGFuIG9wdGlvbiBpcyBkaXNhYmxlZDtcbiAgICAvLyB0YWtlcyBpbnRvIGFjY291bnQgJ29wdGlvbi1kaXNhYmxlJyBwcm9wXG4gICAgY29uc3QgaXNPcHRpb25EaXNhYmxlZCA9IGNvbXB1dGVkKCgpID0+IGdldFByb3BWYWx1ZUZuKHByb3BzLm9wdGlvbkRpc2FibGUsICdkaXNhYmxlJykpXG5cbiAgICBjb25zdCBpbm5lck9wdGlvbnNWYWx1ZSA9IGNvbXB1dGVkKCgpID0+IGlubmVyVmFsdWUudmFsdWUubWFwKG9wdCA9PiBnZXRPcHRpb25WYWx1ZS52YWx1ZShvcHQpKSlcblxuICAgIGNvbnN0IGlucHV0Q29udHJvbEV2ZW50cyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IGV2dCA9IHtcbiAgICAgICAgb25JbnB1dCxcbiAgICAgICAgLy8gU2FmYXJpIDwgMTAuMiAmIFVJV2ViVmlldyBkb2Vzbid0IGZpcmUgY29tcG9zaXRpb25lbmQgd2hlblxuICAgICAgICAvLyBzd2l0Y2hpbmcgZm9jdXMgYmVmb3JlIGNvbmZpcm1pbmcgY29tcG9zaXRpb24gY2hvaWNlXG4gICAgICAgIC8vIHRoaXMgYWxzbyBmaXhlcyB0aGUgaXNzdWUgd2hlcmUgc29tZSBicm93c2VycyBlLmcuIGlPUyBDaHJvbWVcbiAgICAgICAgLy8gZmlyZXMgXCJjaGFuZ2VcIiBpbnN0ZWFkIG9mIFwiaW5wdXRcIiBvbiBhdXRvY29tcGxldGUuXG4gICAgICAgIG9uQ2hhbmdlOiBvbkNvbXBvc2l0aW9uLFxuICAgICAgICBvbktleWRvd246IG9uVGFyZ2V0S2V5ZG93bixcbiAgICAgICAgb25LZXl1cDogb25UYXJnZXRBdXRvY29tcGxldGUsXG4gICAgICAgIG9uS2V5cHJlc3M6IG9uVGFyZ2V0S2V5cHJlc3MsXG4gICAgICAgIG9uRm9jdXM6IHNlbGVjdElucHV0VGV4dCxcbiAgICAgICAgb25DbGljayAoZSkgeyBoYXNEaWFsb2cgPT09IHRydWUgJiYgc3RvcChlKSB9XG4gICAgICB9XG5cbiAgICAgIGV2dC5vbkNvbXBvc2l0aW9uc3RhcnQgPSBldnQub25Db21wb3NpdGlvbnVwZGF0ZSA9IGV2dC5vbkNvbXBvc2l0aW9uZW5kID0gb25Db21wb3NpdGlvblxuXG4gICAgICByZXR1cm4gZXZ0XG4gICAgfSlcblxuICAgIHdhdGNoKGlubmVyVmFsdWUsIHZhbCA9PiB7XG4gICAgICBpbm5lclZhbHVlQ2FjaGUgPSB2YWxcblxuICAgICAgaWYgKFxuICAgICAgICBwcm9wcy51c2VJbnB1dCA9PT0gdHJ1ZVxuICAgICAgICAmJiBwcm9wcy5maWxsSW5wdXQgPT09IHRydWVcbiAgICAgICAgJiYgcHJvcHMubXVsdGlwbGUgIT09IHRydWVcbiAgICAgICAgLy8gUHJldmVudCByZS1lbnRlcmluZyBpbiBmaWx0ZXIgd2hpbGUgZmlsdGVyaW5nXG4gICAgICAgIC8vIEFsc28gcHJldmVudCBjbGVhcmluZyBpbnB1dFZhbHVlIHdoaWxlIGZpbHRlcmluZ1xuICAgICAgICAmJiBzdGF0ZS5pbm5lckxvYWRpbmcudmFsdWUgIT09IHRydWVcbiAgICAgICAgJiYgKChkaWFsb2cudmFsdWUgIT09IHRydWUgJiYgbWVudS52YWx1ZSAhPT0gdHJ1ZSkgfHwgaGFzVmFsdWUudmFsdWUgIT09IHRydWUpXG4gICAgICApIHtcbiAgICAgICAgdXNlcklucHV0VmFsdWUgIT09IHRydWUgJiYgcmVzZXRJbnB1dFZhbHVlKClcbiAgICAgICAgaWYgKGRpYWxvZy52YWx1ZSA9PT0gdHJ1ZSB8fCBtZW51LnZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgICAgZmlsdGVyKCcnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgeyBpbW1lZGlhdGU6IHRydWUgfSlcblxuICAgIHdhdGNoKCgpID0+IHByb3BzLmZpbGxJbnB1dCwgcmVzZXRJbnB1dFZhbHVlKVxuXG4gICAgd2F0Y2gobWVudSwgdXBkYXRlTWVudSlcblxuICAgIHdhdGNoKHZpcnR1YWxTY3JvbGxMZW5ndGgsIHJlcmVuZGVyTWVudSlcblxuICAgIGZ1bmN0aW9uIGdldEVtaXR0aW5nT3B0aW9uVmFsdWUgKG9wdCkge1xuICAgICAgcmV0dXJuIHByb3BzLmVtaXRWYWx1ZSA9PT0gdHJ1ZVxuICAgICAgICA/IGdldE9wdGlvblZhbHVlLnZhbHVlKG9wdClcbiAgICAgICAgOiBvcHRcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVBdEluZGV4IChpbmRleCkge1xuICAgICAgaWYgKGluZGV4ICE9PSAtMSAmJiBpbmRleCA8IGlubmVyVmFsdWUudmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIGlmIChwcm9wcy5tdWx0aXBsZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNvbnN0IG1vZGVsID0gcHJvcHMubW9kZWxWYWx1ZS5zbGljZSgpXG4gICAgICAgICAgZW1pdCgncmVtb3ZlJywgeyBpbmRleCwgdmFsdWU6IG1vZGVsLnNwbGljZShpbmRleCwgMSlbIDAgXSB9KVxuICAgICAgICAgIGVtaXQoJ3VwZGF0ZTptb2RlbFZhbHVlJywgbW9kZWwpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCBudWxsKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlQXRJbmRleEFuZEZvY3VzIChpbmRleCkge1xuICAgICAgcmVtb3ZlQXRJbmRleChpbmRleClcbiAgICAgIHN0YXRlLmZvY3VzKClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGQgKG9wdCwgdW5pcXVlKSB7XG4gICAgICBjb25zdCB2YWwgPSBnZXRFbWl0dGluZ09wdGlvblZhbHVlKG9wdClcblxuICAgICAgaWYgKHByb3BzLm11bHRpcGxlICE9PSB0cnVlKSB7XG4gICAgICAgIHByb3BzLmZpbGxJbnB1dCA9PT0gdHJ1ZSAmJiB1cGRhdGVJbnB1dFZhbHVlKFxuICAgICAgICAgIGdldE9wdGlvbkxhYmVsLnZhbHVlKG9wdCksXG4gICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICB0cnVlXG4gICAgICAgIClcblxuICAgICAgICBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIHZhbClcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmIChpbm5lclZhbHVlLnZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBlbWl0KCdhZGQnLCB7IGluZGV4OiAwLCB2YWx1ZTogdmFsIH0pXG4gICAgICAgIGVtaXQoJ3VwZGF0ZTptb2RlbFZhbHVlJywgcHJvcHMubXVsdGlwbGUgPT09IHRydWUgPyBbIHZhbCBdIDogdmFsKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKHVuaXF1ZSA9PT0gdHJ1ZSAmJiBpc09wdGlvblNlbGVjdGVkKG9wdCkgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9wcy5tYXhWYWx1ZXMgIT09IHZvaWQgMCAmJiBwcm9wcy5tb2RlbFZhbHVlLmxlbmd0aCA+PSBwcm9wcy5tYXhWYWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG1vZGVsID0gcHJvcHMubW9kZWxWYWx1ZS5zbGljZSgpXG5cbiAgICAgIGVtaXQoJ2FkZCcsIHsgaW5kZXg6IG1vZGVsLmxlbmd0aCwgdmFsdWU6IHZhbCB9KVxuICAgICAgbW9kZWwucHVzaCh2YWwpXG4gICAgICBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIG1vZGVsKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvZ2dsZU9wdGlvbiAob3B0LCBrZWVwT3Blbikge1xuICAgICAgaWYgKHN0YXRlLmVkaXRhYmxlLnZhbHVlICE9PSB0cnVlIHx8IG9wdCA9PT0gdm9pZCAwIHx8IGlzT3B0aW9uRGlzYWJsZWQudmFsdWUob3B0KSA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgY29uc3Qgb3B0VmFsdWUgPSBnZXRPcHRpb25WYWx1ZS52YWx1ZShvcHQpXG5cbiAgICAgIGlmIChwcm9wcy5tdWx0aXBsZSAhPT0gdHJ1ZSkge1xuICAgICAgICBpZiAoa2VlcE9wZW4gIT09IHRydWUpIHtcbiAgICAgICAgICB1cGRhdGVJbnB1dFZhbHVlKFxuICAgICAgICAgICAgcHJvcHMuZmlsbElucHV0ID09PSB0cnVlID8gZ2V0T3B0aW9uTGFiZWwudmFsdWUob3B0KSA6ICcnLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgICApXG5cbiAgICAgICAgICBoaWRlUG9wdXAoKVxuICAgICAgICB9XG5cbiAgICAgICAgdGFyZ2V0UmVmLnZhbHVlICE9PSBudWxsICYmIHRhcmdldFJlZi52YWx1ZS5mb2N1cygpXG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIGlubmVyVmFsdWUudmFsdWUubGVuZ3RoID09PSAwXG4gICAgICAgICAgfHwgaXNEZWVwRXF1YWwoZ2V0T3B0aW9uVmFsdWUudmFsdWUoaW5uZXJWYWx1ZS52YWx1ZVsgMCBdKSwgb3B0VmFsdWUpICE9PSB0cnVlXG4gICAgICAgICkge1xuICAgICAgICAgIGVtaXQoJ3VwZGF0ZTptb2RlbFZhbHVlJywgcHJvcHMuZW1pdFZhbHVlID09PSB0cnVlID8gb3B0VmFsdWUgOiBvcHQpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIChoYXNEaWFsb2cgIT09IHRydWUgfHwgZGlhbG9nRmllbGRGb2N1c2VkLnZhbHVlID09PSB0cnVlKSAmJiBzdGF0ZS5mb2N1cygpXG5cbiAgICAgIHNlbGVjdElucHV0VGV4dCgpXG5cbiAgICAgIGlmIChpbm5lclZhbHVlLnZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjb25zdCB2YWwgPSBwcm9wcy5lbWl0VmFsdWUgPT09IHRydWUgPyBvcHRWYWx1ZSA6IG9wdFxuICAgICAgICBlbWl0KCdhZGQnLCB7IGluZGV4OiAwLCB2YWx1ZTogdmFsIH0pXG4gICAgICAgIGVtaXQoJ3VwZGF0ZTptb2RlbFZhbHVlJywgcHJvcHMubXVsdGlwbGUgPT09IHRydWUgPyBbIHZhbCBdIDogdmFsKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgY29uc3RcbiAgICAgICAgbW9kZWwgPSBwcm9wcy5tb2RlbFZhbHVlLnNsaWNlKCksXG4gICAgICAgIGluZGV4ID0gaW5uZXJPcHRpb25zVmFsdWUudmFsdWUuZmluZEluZGV4KHYgPT4gaXNEZWVwRXF1YWwodiwgb3B0VmFsdWUpKVxuXG4gICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgIGVtaXQoJ3JlbW92ZScsIHsgaW5kZXgsIHZhbHVlOiBtb2RlbC5zcGxpY2UoaW5kZXgsIDEpWyAwIF0gfSlcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAocHJvcHMubWF4VmFsdWVzICE9PSB2b2lkIDAgJiYgbW9kZWwubGVuZ3RoID49IHByb3BzLm1heFZhbHVlcykge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdmFsID0gcHJvcHMuZW1pdFZhbHVlID09PSB0cnVlID8gb3B0VmFsdWUgOiBvcHRcblxuICAgICAgICBlbWl0KCdhZGQnLCB7IGluZGV4OiBtb2RlbC5sZW5ndGgsIHZhbHVlOiB2YWwgfSlcbiAgICAgICAgbW9kZWwucHVzaCh2YWwpXG4gICAgICB9XG5cbiAgICAgIGVtaXQoJ3VwZGF0ZTptb2RlbFZhbHVlJywgbW9kZWwpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T3B0aW9uSW5kZXggKGluZGV4KSB7XG4gICAgICBpZiAoJHEucGxhdGZvcm0uaXMuZGVza3RvcCAhPT0gdHJ1ZSkgcmV0dXJuXG5cbiAgICAgIGNvbnN0IHZhbCA9IGluZGV4ICE9PSAtMSAmJiBpbmRleCA8IHZpcnR1YWxTY3JvbGxMZW5ndGgudmFsdWVcbiAgICAgICAgPyBpbmRleFxuICAgICAgICA6IC0xXG5cbiAgICAgIGlmIChvcHRpb25JbmRleC52YWx1ZSAhPT0gdmFsKSB7XG4gICAgICAgIG9wdGlvbkluZGV4LnZhbHVlID0gdmFsXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW92ZU9wdGlvblNlbGVjdGlvbiAob2Zmc2V0ID0gMSwgc2tpcElucHV0VmFsdWUpIHtcbiAgICAgIGlmIChtZW51LnZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgIGxldCBpbmRleCA9IG9wdGlvbkluZGV4LnZhbHVlXG4gICAgICAgIGRvIHtcbiAgICAgICAgICBpbmRleCA9IG5vcm1hbGl6ZVRvSW50ZXJ2YWwoXG4gICAgICAgICAgICBpbmRleCArIG9mZnNldCxcbiAgICAgICAgICAgIC0xLFxuICAgICAgICAgICAgdmlydHVhbFNjcm9sbExlbmd0aC52YWx1ZSAtIDFcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGluZGV4ICE9PSAtMSAmJiBpbmRleCAhPT0gb3B0aW9uSW5kZXgudmFsdWUgJiYgaXNPcHRpb25EaXNhYmxlZC52YWx1ZShwcm9wcy5vcHRpb25zWyBpbmRleCBdKSA9PT0gdHJ1ZSlcblxuICAgICAgICBpZiAob3B0aW9uSW5kZXgudmFsdWUgIT09IGluZGV4KSB7XG4gICAgICAgICAgc2V0T3B0aW9uSW5kZXgoaW5kZXgpXG4gICAgICAgICAgc2Nyb2xsVG8oaW5kZXgpXG5cbiAgICAgICAgICBpZiAoc2tpcElucHV0VmFsdWUgIT09IHRydWUgJiYgcHJvcHMudXNlSW5wdXQgPT09IHRydWUgJiYgcHJvcHMuZmlsbElucHV0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBzZXRJbnB1dFZhbHVlKFxuICAgICAgICAgICAgICBpbmRleCA+PSAwXG4gICAgICAgICAgICAgICAgPyBnZXRPcHRpb25MYWJlbC52YWx1ZShwcm9wcy5vcHRpb25zWyBpbmRleCBdKVxuICAgICAgICAgICAgICAgIDogZGVmYXVsdElucHV0VmFsdWUsXG4gICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRPcHRpb24gKHZhbHVlLCB2YWx1ZUNhY2hlKSB7XG4gICAgICBjb25zdCBmbiA9IG9wdCA9PiBpc0RlZXBFcXVhbChnZXRPcHRpb25WYWx1ZS52YWx1ZShvcHQpLCB2YWx1ZSlcbiAgICAgIHJldHVybiBwcm9wcy5vcHRpb25zLmZpbmQoZm4pIHx8IHZhbHVlQ2FjaGUuZmluZChmbikgfHwgdmFsdWVcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQcm9wVmFsdWVGbiAocHJvcFZhbHVlLCBkZWZhdWx0VmFsKSB7XG4gICAgICBjb25zdCB2YWwgPSBwcm9wVmFsdWUgIT09IHZvaWQgMFxuICAgICAgICA/IHByb3BWYWx1ZVxuICAgICAgICA6IGRlZmF1bHRWYWxcblxuICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyB2YWxcbiAgICAgICAgOiBvcHQgPT4gKG9wdCAhPT0gbnVsbCAmJiB0eXBlb2Ygb3B0ID09PSAnb2JqZWN0JyAmJiB2YWwgaW4gb3B0ID8gb3B0WyB2YWwgXSA6IG9wdClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc09wdGlvblNlbGVjdGVkIChvcHQpIHtcbiAgICAgIGNvbnN0IHZhbCA9IGdldE9wdGlvblZhbHVlLnZhbHVlKG9wdClcbiAgICAgIHJldHVybiBpbm5lck9wdGlvbnNWYWx1ZS52YWx1ZS5maW5kKHYgPT4gaXNEZWVwRXF1YWwodiwgdmFsKSkgIT09IHZvaWQgMFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNlbGVjdElucHV0VGV4dCAoZSkge1xuICAgICAgaWYgKFxuICAgICAgICBwcm9wcy51c2VJbnB1dCA9PT0gdHJ1ZVxuICAgICAgICAmJiB0YXJnZXRSZWYudmFsdWUgIT09IG51bGxcbiAgICAgICAgJiYgKGUgPT09IHZvaWQgMCB8fCAodGFyZ2V0UmVmLnZhbHVlID09PSBlLnRhcmdldCAmJiBlLnRhcmdldC52YWx1ZSA9PT0gc2VsZWN0ZWRTdHJpbmcudmFsdWUpKVxuICAgICAgKSB7XG4gICAgICAgIHRhcmdldFJlZi52YWx1ZS5zZWxlY3QoKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uVGFyZ2V0S2V5dXAgKGUpIHtcbiAgICAgIC8vIGlmIEVTQyBhbmQgd2UgaGF2ZSBhbiBvcGVuZWQgbWVudVxuICAgICAgLy8gdGhlbiBzdG9wIHByb3BhZ2F0aW9uIChtaWdodCBiZSBjYXVnaHQgYnkgYSBRRGlhbG9nXG4gICAgICAvLyBhbmQgc28gaXQgd2lsbCBhbHNvIGNsb3NlIHRoZSBRRGlhbG9nLCB3aGljaCBpcyB3cm9uZylcbiAgICAgIGlmIChpc0tleUNvZGUoZSwgMjcpID09PSB0cnVlICYmIG1lbnUudmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgc3RvcChlKVxuICAgICAgICAvLyBvbiBFU0Mgd2UgbmVlZCB0byBjbG9zZSB0aGUgZGlhbG9nIGFsc29cbiAgICAgICAgaGlkZVBvcHVwKClcbiAgICAgICAgcmVzZXRJbnB1dFZhbHVlKClcbiAgICAgIH1cblxuICAgICAgZW1pdCgna2V5dXAnLCBlKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uVGFyZ2V0QXV0b2NvbXBsZXRlIChlKSB7XG4gICAgICBjb25zdCB7IHZhbHVlIH0gPSBlLnRhcmdldFxuXG4gICAgICBpZiAoZS5rZXlDb2RlICE9PSB2b2lkIDApIHtcbiAgICAgICAgb25UYXJnZXRLZXl1cChlKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgZS50YXJnZXQudmFsdWUgPSAnJ1xuXG4gICAgICBpZiAoZmlsdGVyVGltZXIgIT09IG51bGwpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGZpbHRlclRpbWVyKVxuICAgICAgICBmaWx0ZXJUaW1lciA9IG51bGxcbiAgICAgIH1cbiAgICAgIGlmIChpbnB1dFZhbHVlVGltZXIgIT09IG51bGwpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGlucHV0VmFsdWVUaW1lcilcbiAgICAgICAgaW5wdXRWYWx1ZVRpbWVyID0gbnVsbFxuICAgICAgfVxuXG4gICAgICByZXNldElucHV0VmFsdWUoKVxuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgY29uc3QgbmVlZGxlID0gdmFsdWUudG9Mb2NhbGVMb3dlckNhc2UoKVxuICAgICAgICBjb25zdCBmaW5kRm4gPSBleHRyYWN0Rm4gPT4ge1xuICAgICAgICAgIGNvbnN0IG9wdGlvbiA9IHByb3BzLm9wdGlvbnMuZmluZChvcHQgPT4gZXh0cmFjdEZuLnZhbHVlKG9wdCkudG9Mb2NhbGVMb3dlckNhc2UoKSA9PT0gbmVlZGxlKVxuXG4gICAgICAgICAgaWYgKG9wdGlvbiA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaW5uZXJWYWx1ZS52YWx1ZS5pbmRleE9mKG9wdGlvbikgPT09IC0xKSB7XG4gICAgICAgICAgICB0b2dnbGVPcHRpb24ob3B0aW9uKVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhpZGVQb3B1cCgpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmaWxsRm4gPSBhZnRlckZpbHRlciA9PiB7XG4gICAgICAgICAgaWYgKGZpbmRGbihnZXRPcHRpb25WYWx1ZSkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZmluZEZuKGdldE9wdGlvbkxhYmVsKSA9PT0gdHJ1ZSB8fCBhZnRlckZpbHRlciA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZmlsdGVyKHZhbHVlLCB0cnVlLCAoKSA9PiBmaWxsRm4odHJ1ZSkpXG4gICAgICAgIH1cblxuICAgICAgICBmaWxsRm4oKVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHN0YXRlLmNsZWFyVmFsdWUoZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvblRhcmdldEtleXByZXNzIChlKSB7XG4gICAgICBlbWl0KCdrZXlwcmVzcycsIGUpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25UYXJnZXRLZXlkb3duIChlKSB7XG4gICAgICBlbWl0KCdrZXlkb3duJywgZSlcblxuICAgICAgaWYgKHNob3VsZElnbm9yZUtleShlKSA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgY29uc3QgbmV3VmFsdWVNb2RlVmFsaWQgPSBpbnB1dFZhbHVlLnZhbHVlLmxlbmd0aCAhPT0gMFxuICAgICAgICAmJiAocHJvcHMubmV3VmFsdWVNb2RlICE9PSB2b2lkIDAgfHwgcHJvcHMub25OZXdWYWx1ZSAhPT0gdm9pZCAwKVxuXG4gICAgICBjb25zdCB0YWJTaG91bGRTZWxlY3QgPSBlLnNoaWZ0S2V5ICE9PSB0cnVlXG4gICAgICAgICYmIHByb3BzLm11bHRpcGxlICE9PSB0cnVlXG4gICAgICAgICYmIChvcHRpb25JbmRleC52YWx1ZSAhPT0gLTEgfHwgbmV3VmFsdWVNb2RlVmFsaWQgPT09IHRydWUpXG5cbiAgICAgIC8vIGVzY2FwZVxuICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMjcpIHtcbiAgICAgICAgcHJldmVudChlKSAvLyBwcmV2ZW50IGNsZWFyaW5nIHRoZSBpbnB1dFZhbHVlXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvLyB0YWJcbiAgICAgIGlmIChlLmtleUNvZGUgPT09IDkgJiYgdGFiU2hvdWxkU2VsZWN0ID09PSBmYWxzZSkge1xuICAgICAgICBjbG9zZU1lbnUoKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBlLnRhcmdldCA9PT0gdm9pZCAwXG4gICAgICAgIHx8IGUudGFyZ2V0LmlkICE9PSBzdGF0ZS50YXJnZXRVaWQudmFsdWVcbiAgICAgICAgfHwgc3RhdGUuZWRpdGFibGUudmFsdWUgIT09IHRydWVcbiAgICAgICkgcmV0dXJuXG5cbiAgICAgIC8vIGRvd25cbiAgICAgIGlmIChcbiAgICAgICAgZS5rZXlDb2RlID09PSA0MFxuICAgICAgICAmJiBzdGF0ZS5pbm5lckxvYWRpbmcudmFsdWUgIT09IHRydWVcbiAgICAgICAgJiYgbWVudS52YWx1ZSA9PT0gZmFsc2VcbiAgICAgICkge1xuICAgICAgICBzdG9wQW5kUHJldmVudChlKVxuICAgICAgICBzaG93UG9wdXAoKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgLy8gYmFja3NwYWNlXG4gICAgICBpZiAoXG4gICAgICAgIGUua2V5Q29kZSA9PT0gOFxuICAgICAgICAmJiAoXG4gICAgICAgICAgcHJvcHMudXNlQ2hpcHMgPT09IHRydWVcbiAgICAgICAgICB8fCBwcm9wcy5jbGVhcmFibGUgPT09IHRydWVcbiAgICAgICAgKVxuICAgICAgICAmJiBwcm9wcy5oaWRlU2VsZWN0ZWQgIT09IHRydWVcbiAgICAgICAgJiYgaW5wdXRWYWx1ZS52YWx1ZS5sZW5ndGggPT09IDBcbiAgICAgICkge1xuICAgICAgICBpZiAocHJvcHMubXVsdGlwbGUgPT09IHRydWUgJiYgQXJyYXkuaXNBcnJheShwcm9wcy5tb2RlbFZhbHVlKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJlbW92ZUF0SW5kZXgocHJvcHMubW9kZWxWYWx1ZS5sZW5ndGggLSAxKVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHByb3BzLm11bHRpcGxlICE9PSB0cnVlICYmIHByb3BzLm1vZGVsVmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIG51bGwpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIC8vIGhvbWUsIGVuZCAtIDM2LCAzNVxuICAgICAgaWYgKFxuICAgICAgICAoZS5rZXlDb2RlID09PSAzNSB8fCBlLmtleUNvZGUgPT09IDM2KVxuICAgICAgICAmJiAodHlwZW9mIGlucHV0VmFsdWUudmFsdWUgIT09ICdzdHJpbmcnIHx8IGlucHV0VmFsdWUudmFsdWUubGVuZ3RoID09PSAwKVxuICAgICAgKSB7XG4gICAgICAgIHN0b3BBbmRQcmV2ZW50KGUpXG4gICAgICAgIG9wdGlvbkluZGV4LnZhbHVlID0gLTFcbiAgICAgICAgbW92ZU9wdGlvblNlbGVjdGlvbihlLmtleUNvZGUgPT09IDM2ID8gMSA6IC0xLCBwcm9wcy5tdWx0aXBsZSlcbiAgICAgIH1cblxuICAgICAgLy8gcGcgdXAsIHBnIGRvd24gLSAzMywgMzRcbiAgICAgIGlmIChcbiAgICAgICAgKGUua2V5Q29kZSA9PT0gMzMgfHwgZS5rZXlDb2RlID09PSAzNClcbiAgICAgICAgJiYgdmlydHVhbFNjcm9sbFNsaWNlU2l6ZUNvbXB1dGVkLnZhbHVlICE9PSB2b2lkIDBcbiAgICAgICkge1xuICAgICAgICBzdG9wQW5kUHJldmVudChlKVxuICAgICAgICBvcHRpb25JbmRleC52YWx1ZSA9IE1hdGgubWF4KFxuICAgICAgICAgIC0xLFxuICAgICAgICAgIE1hdGgubWluKFxuICAgICAgICAgICAgdmlydHVhbFNjcm9sbExlbmd0aC52YWx1ZSxcbiAgICAgICAgICAgIG9wdGlvbkluZGV4LnZhbHVlICsgKGUua2V5Q29kZSA9PT0gMzMgPyAtMSA6IDEpICogdmlydHVhbFNjcm9sbFNsaWNlU2l6ZUNvbXB1dGVkLnZhbHVlLnZpZXdcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICAgbW92ZU9wdGlvblNlbGVjdGlvbihlLmtleUNvZGUgPT09IDMzID8gMSA6IC0xLCBwcm9wcy5tdWx0aXBsZSlcbiAgICAgIH1cblxuICAgICAgLy8gdXAsIGRvd25cbiAgICAgIGlmIChlLmtleUNvZGUgPT09IDM4IHx8IGUua2V5Q29kZSA9PT0gNDApIHtcbiAgICAgICAgc3RvcEFuZFByZXZlbnQoZSlcbiAgICAgICAgbW92ZU9wdGlvblNlbGVjdGlvbihlLmtleUNvZGUgPT09IDM4ID8gLTEgOiAxLCBwcm9wcy5tdWx0aXBsZSlcbiAgICAgIH1cblxuICAgICAgY29uc3Qgb3B0aW9uc0xlbmd0aCA9IHZpcnR1YWxTY3JvbGxMZW5ndGgudmFsdWVcblxuICAgICAgLy8gY2xlYXIgc2VhcmNoIGJ1ZmZlciBpZiBleHBpcmVkXG4gICAgICBpZiAoc2VhcmNoQnVmZmVyID09PSB2b2lkIDAgfHwgc2VhcmNoQnVmZmVyRXhwIDwgRGF0ZS5ub3coKSkge1xuICAgICAgICBzZWFyY2hCdWZmZXIgPSAnJ1xuICAgICAgfVxuXG4gICAgICAvLyBrZXlib2FyZCBzZWFyY2ggd2hlbiBub3QgaGF2aW5nIHVzZS1pbnB1dFxuICAgICAgaWYgKFxuICAgICAgICBvcHRpb25zTGVuZ3RoID4gMFxuICAgICAgICAmJiBwcm9wcy51c2VJbnB1dCAhPT0gdHJ1ZVxuICAgICAgICAmJiBlLmtleSAhPT0gdm9pZCAwXG4gICAgICAgICYmIGUua2V5Lmxlbmd0aCA9PT0gMSAvLyBwcmludGFibGUgY2hhclxuICAgICAgICAmJiBlLmFsdEtleSA9PT0gZmFsc2UgLy8gbm90IGtiZCBzaG9ydGN1dFxuICAgICAgICAmJiBlLmN0cmxLZXkgPT09IGZhbHNlIC8vIG5vdCBrYmQgc2hvcnRjdXRcbiAgICAgICAgJiYgZS5tZXRhS2V5ID09PSBmYWxzZSAvLyBub3Qga2JkIHNob3J0Y3V0LCBlc3BlY2lhbGx5IG9uIG1hY09TIHdpdGggQ29tbWFuZCBrZXlcbiAgICAgICAgJiYgKGUua2V5Q29kZSAhPT0gMzIgfHwgc2VhcmNoQnVmZmVyLmxlbmd0aCAhPT0gMCkgLy8gc3BhY2UgaW4gbWlkZGxlIG9mIHNlYXJjaFxuICAgICAgKSB7XG4gICAgICAgIG1lbnUudmFsdWUgIT09IHRydWUgJiYgc2hvd1BvcHVwKGUpXG5cbiAgICAgICAgY29uc3RcbiAgICAgICAgICBjaGFyID0gZS5rZXkudG9Mb2NhbGVMb3dlckNhc2UoKSxcbiAgICAgICAgICBrZXlSZXBlYXQgPSBzZWFyY2hCdWZmZXIubGVuZ3RoID09PSAxICYmIHNlYXJjaEJ1ZmZlclsgMCBdID09PSBjaGFyXG5cbiAgICAgICAgc2VhcmNoQnVmZmVyRXhwID0gRGF0ZS5ub3coKSArIDE1MDBcbiAgICAgICAgaWYgKGtleVJlcGVhdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBzdG9wQW5kUHJldmVudChlKVxuICAgICAgICAgIHNlYXJjaEJ1ZmZlciArPSBjaGFyXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzZWFyY2hSZSA9IG5ldyBSZWdFeHAoJ14nICsgc2VhcmNoQnVmZmVyLnNwbGl0KCcnKS5tYXAobCA9PiAocmVFc2NhcGVMaXN0LmluZGV4T2YobCkgIT09IC0xID8gJ1xcXFwnICsgbCA6IGwpKS5qb2luKCcuKicpLCAnaScpXG5cbiAgICAgICAgbGV0IGluZGV4ID0gb3B0aW9uSW5kZXgudmFsdWVcblxuICAgICAgICBpZiAoa2V5UmVwZWF0ID09PSB0cnVlIHx8IGluZGV4IDwgMCB8fCBzZWFyY2hSZS50ZXN0KGdldE9wdGlvbkxhYmVsLnZhbHVlKHByb3BzLm9wdGlvbnNbIGluZGV4IF0pKSAhPT0gdHJ1ZSkge1xuICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIGluZGV4ID0gbm9ybWFsaXplVG9JbnRlcnZhbChpbmRleCArIDEsIC0xLCBvcHRpb25zTGVuZ3RoIC0gMSlcbiAgICAgICAgICB9XG4gICAgICAgICAgd2hpbGUgKGluZGV4ICE9PSBvcHRpb25JbmRleC52YWx1ZSAmJiAoXG4gICAgICAgICAgICBpc09wdGlvbkRpc2FibGVkLnZhbHVlKHByb3BzLm9wdGlvbnNbIGluZGV4IF0pID09PSB0cnVlXG4gICAgICAgICAgICB8fCBzZWFyY2hSZS50ZXN0KGdldE9wdGlvbkxhYmVsLnZhbHVlKHByb3BzLm9wdGlvbnNbIGluZGV4IF0pKSAhPT0gdHJ1ZVxuICAgICAgICAgICkpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9uSW5kZXgudmFsdWUgIT09IGluZGV4KSB7XG4gICAgICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgc2V0T3B0aW9uSW5kZXgoaW5kZXgpXG4gICAgICAgICAgICBzY3JvbGxUbyhpbmRleClcblxuICAgICAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgcHJvcHMudXNlSW5wdXQgPT09IHRydWUgJiYgcHJvcHMuZmlsbElucHV0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgIHNldElucHV0VmFsdWUoZ2V0T3B0aW9uTGFiZWwudmFsdWUocHJvcHMub3B0aW9uc1sgaW5kZXggXSksIHRydWUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvLyBlbnRlciwgc3BhY2UgKHdoZW4gbm90IHVzaW5nIHVzZS1pbnB1dCBhbmQgbm90IGluIHNlYXJjaCksIG9yIHRhYiAod2hlbiBub3QgdXNpbmcgbXVsdGlwbGUgYW5kIG9wdGlvbiBzZWxlY3RlZClcbiAgICAgIC8vIHNhbWUgdGFyZ2V0IGlzIGNoZWNrZWQgYWJvdmVcbiAgICAgIGlmIChcbiAgICAgICAgZS5rZXlDb2RlICE9PSAxM1xuICAgICAgICAmJiAoZS5rZXlDb2RlICE9PSAzMiB8fCBwcm9wcy51c2VJbnB1dCA9PT0gdHJ1ZSB8fCBzZWFyY2hCdWZmZXIgIT09ICcnKVxuICAgICAgICAmJiAoZS5rZXlDb2RlICE9PSA5IHx8IHRhYlNob3VsZFNlbGVjdCA9PT0gZmFsc2UpXG4gICAgICApIHJldHVyblxuXG4gICAgICBlLmtleUNvZGUgIT09IDkgJiYgc3RvcEFuZFByZXZlbnQoZSlcblxuICAgICAgaWYgKG9wdGlvbkluZGV4LnZhbHVlICE9PSAtMSAmJiBvcHRpb25JbmRleC52YWx1ZSA8IG9wdGlvbnNMZW5ndGgpIHtcbiAgICAgICAgdG9nZ2xlT3B0aW9uKHByb3BzLm9wdGlvbnNbIG9wdGlvbkluZGV4LnZhbHVlIF0pXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAobmV3VmFsdWVNb2RlVmFsaWQgPT09IHRydWUpIHtcbiAgICAgICAgY29uc3QgZG9uZSA9ICh2YWwsIG1vZGUpID0+IHtcbiAgICAgICAgICBpZiAobW9kZSkge1xuICAgICAgICAgICAgaWYgKHZhbGlkYXRlTmV3VmFsdWVNb2RlKG1vZGUpICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG1vZGUgPSBwcm9wcy5uZXdWYWx1ZU1vZGVcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB1cGRhdGVJbnB1dFZhbHVlKCcnLCBwcm9wcy5tdWx0aXBsZSAhPT0gdHJ1ZSwgdHJ1ZSlcblxuICAgICAgICAgIGlmICh2YWwgPT09IHZvaWQgMCB8fCB2YWwgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGZuID0gbW9kZSA9PT0gJ3RvZ2dsZScgPyB0b2dnbGVPcHRpb24gOiBhZGRcbiAgICAgICAgICBmbih2YWwsIG1vZGUgPT09ICdhZGQtdW5pcXVlJylcblxuICAgICAgICAgIGlmIChwcm9wcy5tdWx0aXBsZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgdGFyZ2V0UmVmLnZhbHVlICE9PSBudWxsICYmIHRhcmdldFJlZi52YWx1ZS5mb2N1cygpXG4gICAgICAgICAgICBoaWRlUG9wdXAoKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm9wcy5vbk5ld1ZhbHVlICE9PSB2b2lkIDApIHtcbiAgICAgICAgICBlbWl0KCduZXdWYWx1ZScsIGlucHV0VmFsdWUudmFsdWUsIGRvbmUpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZG9uZShpbnB1dFZhbHVlLnZhbHVlKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb3BzLm11bHRpcGxlICE9PSB0cnVlKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lbnUudmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgY2xvc2VNZW51KClcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHN0YXRlLmlubmVyTG9hZGluZy52YWx1ZSAhPT0gdHJ1ZSkge1xuICAgICAgICBzaG93UG9wdXAoKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFZpcnR1YWxTY3JvbGxFbCAoKSB7XG4gICAgICByZXR1cm4gaGFzRGlhbG9nID09PSB0cnVlXG4gICAgICAgID8gbWVudUNvbnRlbnRSZWYudmFsdWVcbiAgICAgICAgOiAoXG4gICAgICAgICAgICBtZW51UmVmLnZhbHVlICE9PSBudWxsICYmIG1lbnVSZWYudmFsdWUuY29udGVudEVsICE9PSBudWxsXG4gICAgICAgICAgICAgID8gbWVudVJlZi52YWx1ZS5jb250ZW50RWxcbiAgICAgICAgICAgICAgOiB2b2lkIDBcbiAgICAgICAgICApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0VmlydHVhbFNjcm9sbFRhcmdldCAoKSB7XG4gICAgICByZXR1cm4gZ2V0VmlydHVhbFNjcm9sbEVsKClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZWxlY3Rpb24gKCkge1xuICAgICAgaWYgKHByb3BzLmhpZGVTZWxlY3RlZCA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gW11cbiAgICAgIH1cblxuICAgICAgaWYgKHNsb3RzWyAnc2VsZWN0ZWQtaXRlbScgXSAhPT0gdm9pZCAwKSB7XG4gICAgICAgIHJldHVybiBzZWxlY3RlZFNjb3BlLnZhbHVlLm1hcChzY29wZSA9PiBzbG90c1sgJ3NlbGVjdGVkLWl0ZW0nIF0oc2NvcGUpKS5zbGljZSgpXG4gICAgICB9XG5cbiAgICAgIGlmIChzbG90cy5zZWxlY3RlZCAhPT0gdm9pZCAwKSB7XG4gICAgICAgIHJldHVybiBbXS5jb25jYXQoc2xvdHMuc2VsZWN0ZWQoKSlcbiAgICAgIH1cblxuICAgICAgaWYgKHByb3BzLnVzZUNoaXBzID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBzZWxlY3RlZFNjb3BlLnZhbHVlLm1hcCgoc2NvcGUsIGkpID0+IGgoUUNoaXAsIHtcbiAgICAgICAgICBrZXk6ICdvcHRpb24tJyArIGksXG4gICAgICAgICAgcmVtb3ZhYmxlOiBzdGF0ZS5lZGl0YWJsZS52YWx1ZSA9PT0gdHJ1ZSAmJiBpc09wdGlvbkRpc2FibGVkLnZhbHVlKHNjb3BlLm9wdCkgIT09IHRydWUsXG4gICAgICAgICAgZGVuc2U6IHRydWUsXG4gICAgICAgICAgdGV4dENvbG9yOiBwcm9wcy5jb2xvcixcbiAgICAgICAgICB0YWJpbmRleDogdGFiaW5kZXgudmFsdWUsXG4gICAgICAgICAgb25SZW1vdmUgKCkgeyBzY29wZS5yZW1vdmVBdEluZGV4KGkpIH1cbiAgICAgICAgfSwgKCkgPT4gaCgnc3BhbicsIHtcbiAgICAgICAgICBjbGFzczogJ2VsbGlwc2lzJyxcbiAgICAgICAgICBbIHNjb3BlLmh0bWwgPT09IHRydWUgPyAnaW5uZXJIVE1MJyA6ICd0ZXh0Q29udGVudCcgXTogZ2V0T3B0aW9uTGFiZWwudmFsdWUoc2NvcGUub3B0KVxuICAgICAgICB9KSkpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbXG4gICAgICAgIGgoJ3NwYW4nLCB7XG4gICAgICAgICAgWyB2YWx1ZUFzSHRtbC52YWx1ZSA9PT0gdHJ1ZSA/ICdpbm5lckhUTUwnIDogJ3RleHRDb250ZW50JyBdOiBhcmlhQ3VycmVudFZhbHVlLnZhbHVlXG4gICAgICAgIH0pXG4gICAgICBdXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QWxsT3B0aW9ucyAoKSB7XG4gICAgICBpZiAobm9PcHRpb25zLnZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBzbG90c1sgJ25vLW9wdGlvbicgXSAhPT0gdm9pZCAwXG4gICAgICAgICAgPyBzbG90c1sgJ25vLW9wdGlvbicgXSh7IGlucHV0VmFsdWU6IGlucHV0VmFsdWUudmFsdWUgfSlcbiAgICAgICAgICA6IHZvaWQgMFxuICAgICAgfVxuXG4gICAgICBjb25zdCBmbiA9IHNsb3RzLm9wdGlvbiAhPT0gdm9pZCAwXG4gICAgICAgID8gc2xvdHMub3B0aW9uXG4gICAgICAgIDogc2NvcGUgPT4ge1xuICAgICAgICAgIHJldHVybiBoKFFJdGVtLCB7XG4gICAgICAgICAgICBrZXk6IHNjb3BlLmluZGV4LFxuICAgICAgICAgICAgLi4uc2NvcGUuaXRlbVByb3BzXG4gICAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGgoXG4gICAgICAgICAgICAgIFFJdGVtU2VjdGlvbixcbiAgICAgICAgICAgICAgKCkgPT4gaChcbiAgICAgICAgICAgICAgICBRSXRlbUxhYmVsLFxuICAgICAgICAgICAgICAgICgpID0+IGgoJ3NwYW4nLCB7XG4gICAgICAgICAgICAgICAgICBbIHNjb3BlLmh0bWwgPT09IHRydWUgPyAnaW5uZXJIVE1MJyA6ICd0ZXh0Q29udGVudCcgXTogc2NvcGUubGFiZWxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICBsZXQgb3B0aW9ucyA9IHBhZFZpcnR1YWxTY3JvbGwoJ2RpdicsIG9wdGlvblNjb3BlLnZhbHVlLm1hcChmbikpXG5cbiAgICAgIGlmIChzbG90c1sgJ2JlZm9yZS1vcHRpb25zJyBdICE9PSB2b2lkIDApIHtcbiAgICAgICAgb3B0aW9ucyA9IHNsb3RzWyAnYmVmb3JlLW9wdGlvbnMnIF0oKS5jb25jYXQob3B0aW9ucylcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhNZXJnZVNsb3Qoc2xvdHNbICdhZnRlci1vcHRpb25zJyBdLCBvcHRpb25zKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldElucHV0IChmcm9tRGlhbG9nLCBpc1RhcmdldCkge1xuICAgICAgY29uc3QgYXR0cnMgPSBpc1RhcmdldCA9PT0gdHJ1ZSA/IHsgLi4uY29tYm9ib3hBdHRycy52YWx1ZSwgLi4uc3RhdGUuc3BsaXRBdHRycy5hdHRyaWJ1dGVzLnZhbHVlIH0gOiB2b2lkIDBcblxuICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgcmVmOiBpc1RhcmdldCA9PT0gdHJ1ZSA/IHRhcmdldFJlZiA6IHZvaWQgMCxcbiAgICAgICAga2V5OiAnaV90JyxcbiAgICAgICAgY2xhc3M6IGNvbXB1dGVkSW5wdXRDbGFzcy52YWx1ZSxcbiAgICAgICAgc3R5bGU6IHByb3BzLmlucHV0U3R5bGUsXG4gICAgICAgIHZhbHVlOiBpbnB1dFZhbHVlLnZhbHVlICE9PSB2b2lkIDAgPyBpbnB1dFZhbHVlLnZhbHVlIDogJycsXG4gICAgICAgIC8vIHJlcXVpcmVkIGZvciBBbmRyb2lkIGluIG9yZGVyIHRvIHNob3cgRU5URVIga2V5IHdoZW4gaW4gZm9ybVxuICAgICAgICB0eXBlOiAnc2VhcmNoJyxcbiAgICAgICAgLi4uYXR0cnMsXG4gICAgICAgIGlkOiBpc1RhcmdldCA9PT0gdHJ1ZSA/IHN0YXRlLnRhcmdldFVpZC52YWx1ZSA6IHZvaWQgMCxcbiAgICAgICAgbWF4bGVuZ3RoOiBwcm9wcy5tYXhsZW5ndGgsXG4gICAgICAgIGF1dG9jb21wbGV0ZTogcHJvcHMuYXV0b2NvbXBsZXRlLFxuICAgICAgICAnZGF0YS1hdXRvZm9jdXMnOiBmcm9tRGlhbG9nID09PSB0cnVlIHx8IHByb3BzLmF1dG9mb2N1cyA9PT0gdHJ1ZSB8fCB2b2lkIDAsXG4gICAgICAgIGRpc2FibGVkOiBwcm9wcy5kaXNhYmxlID09PSB0cnVlLFxuICAgICAgICByZWFkb25seTogcHJvcHMucmVhZG9ubHkgPT09IHRydWUsXG4gICAgICAgIC4uLmlucHV0Q29udHJvbEV2ZW50cy52YWx1ZVxuICAgICAgfVxuXG4gICAgICBpZiAoZnJvbURpYWxvZyAhPT0gdHJ1ZSAmJiBoYXNEaWFsb2cgPT09IHRydWUpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YS5jbGFzcykgPT09IHRydWUpIHtcbiAgICAgICAgICBkYXRhLmNsYXNzID0gWyAuLi5kYXRhLmNsYXNzLCAnbm8tcG9pbnRlci1ldmVudHMnIF1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkYXRhLmNsYXNzICs9ICcgbm8tcG9pbnRlci1ldmVudHMnXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2lucHV0JywgZGF0YSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbklucHV0IChlKSB7XG4gICAgICBpZiAoZmlsdGVyVGltZXIgIT09IG51bGwpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGZpbHRlclRpbWVyKVxuICAgICAgICBmaWx0ZXJUaW1lciA9IG51bGxcbiAgICAgIH1cbiAgICAgIGlmIChpbnB1dFZhbHVlVGltZXIgIT09IG51bGwpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGlucHV0VmFsdWVUaW1lcilcbiAgICAgICAgaW5wdXRWYWx1ZVRpbWVyID0gbnVsbFxuICAgICAgfVxuXG4gICAgICBpZiAoZSAmJiBlLnRhcmdldCAmJiBlLnRhcmdldC5xQ29tcG9zaW5nID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBzZXRJbnB1dFZhbHVlKGUudGFyZ2V0LnZhbHVlIHx8ICcnKVxuICAgICAgLy8gbWFyayBpdCBoZXJlIGFzIHVzZXIgaW5wdXQgc28gdGhhdCBpZiB1cGRhdGVJbnB1dFZhbHVlIGlzIGNhbGxlZFxuICAgICAgLy8gYmVmb3JlIGZpbHRlciBpcyBjYWxsZWQgdGhlIGluZGljYXRvciBpcyByZXNldFxuICAgICAgdXNlcklucHV0VmFsdWUgPSB0cnVlXG4gICAgICBkZWZhdWx0SW5wdXRWYWx1ZSA9IGlucHV0VmFsdWUudmFsdWVcblxuICAgICAgaWYgKFxuICAgICAgICBzdGF0ZS5mb2N1c2VkLnZhbHVlICE9PSB0cnVlXG4gICAgICAgICYmIChoYXNEaWFsb2cgIT09IHRydWUgfHwgZGlhbG9nRmllbGRGb2N1c2VkLnZhbHVlID09PSB0cnVlKVxuICAgICAgKSB7XG4gICAgICAgIHN0YXRlLmZvY3VzKClcbiAgICAgIH1cblxuICAgICAgaWYgKHByb3BzLm9uRmlsdGVyICE9PSB2b2lkIDApIHtcbiAgICAgICAgZmlsdGVyVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBmaWx0ZXJUaW1lciA9IG51bGxcbiAgICAgICAgICBmaWx0ZXIoaW5wdXRWYWx1ZS52YWx1ZSlcbiAgICAgICAgfSwgcHJvcHMuaW5wdXREZWJvdW5jZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRJbnB1dFZhbHVlICh2YWwsIGVtaXRJbW1lZGlhdGVseSkge1xuICAgICAgaWYgKGlucHV0VmFsdWUudmFsdWUgIT09IHZhbCkge1xuICAgICAgICBpbnB1dFZhbHVlLnZhbHVlID0gdmFsXG5cbiAgICAgICAgaWYgKGVtaXRJbW1lZGlhdGVseSA9PT0gdHJ1ZSB8fCBwcm9wcy5pbnB1dERlYm91bmNlID09PSAwIHx8IHByb3BzLmlucHV0RGVib3VuY2UgPT09ICcwJykge1xuICAgICAgICAgIGVtaXQoJ2lucHV0VmFsdWUnLCB2YWwpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaW5wdXRWYWx1ZVRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpbnB1dFZhbHVlVGltZXIgPSBudWxsXG4gICAgICAgICAgICBlbWl0KCdpbnB1dFZhbHVlJywgdmFsKVxuICAgICAgICAgIH0sIHByb3BzLmlucHV0RGVib3VuY2UpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVJbnB1dFZhbHVlICh2YWwsIG5vRmlsdGVyaW5nLCBpbnRlcm5hbCkge1xuICAgICAgdXNlcklucHV0VmFsdWUgPSBpbnRlcm5hbCAhPT0gdHJ1ZVxuXG4gICAgICBpZiAocHJvcHMudXNlSW5wdXQgPT09IHRydWUpIHtcbiAgICAgICAgc2V0SW5wdXRWYWx1ZSh2YWwsIHRydWUpXG5cbiAgICAgICAgaWYgKG5vRmlsdGVyaW5nID09PSB0cnVlIHx8IGludGVybmFsICE9PSB0cnVlKSB7XG4gICAgICAgICAgZGVmYXVsdElucHV0VmFsdWUgPSB2YWxcbiAgICAgICAgfVxuXG4gICAgICAgIG5vRmlsdGVyaW5nICE9PSB0cnVlICYmIGZpbHRlcih2YWwpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmlsdGVyICh2YWwsIGtlZXBDbG9zZWQsIGFmdGVyVXBkYXRlRm4pIHtcbiAgICAgIGlmIChwcm9wcy5vbkZpbHRlciA9PT0gdm9pZCAwIHx8IChrZWVwQ2xvc2VkICE9PSB0cnVlICYmIHN0YXRlLmZvY3VzZWQudmFsdWUgIT09IHRydWUpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUuaW5uZXJMb2FkaW5nLnZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgIGVtaXQoJ2ZpbHRlckFib3J0JylcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzdGF0ZS5pbm5lckxvYWRpbmcudmFsdWUgPSB0cnVlXG4gICAgICAgIGlubmVyTG9hZGluZ0luZGljYXRvci52YWx1ZSA9IHRydWVcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICB2YWwgIT09ICcnXG4gICAgICAgICYmIHByb3BzLm11bHRpcGxlICE9PSB0cnVlXG4gICAgICAgICYmIGlubmVyVmFsdWUudmFsdWUubGVuZ3RoICE9PSAwXG4gICAgICAgICYmIHVzZXJJbnB1dFZhbHVlICE9PSB0cnVlXG4gICAgICAgICYmIHZhbCA9PT0gZ2V0T3B0aW9uTGFiZWwudmFsdWUoaW5uZXJWYWx1ZS52YWx1ZVsgMCBdKVxuICAgICAgKSB7XG4gICAgICAgIHZhbCA9ICcnXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGxvY2FsRmlsdGVySWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgbWVudS52YWx1ZSA9PT0gdHJ1ZSAmJiAobWVudS52YWx1ZSA9IGZhbHNlKVxuICAgICAgfSwgMTApXG5cbiAgICAgIGZpbHRlcklkICE9PSBudWxsICYmIGNsZWFyVGltZW91dChmaWx0ZXJJZClcbiAgICAgIGZpbHRlcklkID0gbG9jYWxGaWx0ZXJJZFxuXG4gICAgICBlbWl0KFxuICAgICAgICAnZmlsdGVyJyxcbiAgICAgICAgdmFsLFxuICAgICAgICAoZm4sIGFmdGVyRm4pID0+IHtcbiAgICAgICAgICBpZiAoKGtlZXBDbG9zZWQgPT09IHRydWUgfHwgc3RhdGUuZm9jdXNlZC52YWx1ZSA9PT0gdHJ1ZSkgJiYgZmlsdGVySWQgPT09IGxvY2FsRmlsdGVySWQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChmaWx0ZXJJZClcblxuICAgICAgICAgICAgdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nICYmIGZuKClcblxuICAgICAgICAgICAgLy8gaGlkZSBpbmRpY2F0b3IgdG8gYWxsb3cgYXJyb3cgdG8gYW5pbWF0ZVxuICAgICAgICAgICAgaW5uZXJMb2FkaW5nSW5kaWNhdG9yLnZhbHVlID0gZmFsc2VcblxuICAgICAgICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgICBzdGF0ZS5pbm5lckxvYWRpbmcudmFsdWUgPSBmYWxzZVxuXG4gICAgICAgICAgICAgIGlmIChzdGF0ZS5lZGl0YWJsZS52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChrZWVwQ2xvc2VkID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICBtZW51LnZhbHVlID09PSB0cnVlICYmIGhpZGVQb3B1cCgpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1lbnUudmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgIHVwZGF0ZU1lbnUodHJ1ZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICBtZW51LnZhbHVlID0gdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHR5cGVvZiBhZnRlckZuID09PSAnZnVuY3Rpb24nICYmIG5leHRUaWNrKCgpID0+IHsgYWZ0ZXJGbihwcm94eSkgfSlcbiAgICAgICAgICAgICAgdHlwZW9mIGFmdGVyVXBkYXRlRm4gPT09ICdmdW5jdGlvbicgJiYgbmV4dFRpY2soKCkgPT4geyBhZnRlclVwZGF0ZUZuKHByb3h5KSB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICBpZiAoc3RhdGUuZm9jdXNlZC52YWx1ZSA9PT0gdHJ1ZSAmJiBmaWx0ZXJJZCA9PT0gbG9jYWxGaWx0ZXJJZCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGZpbHRlcklkKVxuICAgICAgICAgICAgc3RhdGUuaW5uZXJMb2FkaW5nLnZhbHVlID0gZmFsc2VcbiAgICAgICAgICAgIGlubmVyTG9hZGluZ0luZGljYXRvci52YWx1ZSA9IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICAgIG1lbnUudmFsdWUgPT09IHRydWUgJiYgKG1lbnUudmFsdWUgPSBmYWxzZSlcbiAgICAgICAgfVxuICAgICAgKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldE1lbnUgKCkge1xuICAgICAgcmV0dXJuIGgoUU1lbnUsIHtcbiAgICAgICAgcmVmOiBtZW51UmVmLFxuICAgICAgICBjbGFzczogbWVudUNvbnRlbnRDbGFzcy52YWx1ZSxcbiAgICAgICAgc3R5bGU6IHByb3BzLnBvcHVwQ29udGVudFN0eWxlLFxuICAgICAgICBtb2RlbFZhbHVlOiBtZW51LnZhbHVlLFxuICAgICAgICBmaXQ6IHByb3BzLm1lbnVTaHJpbmsgIT09IHRydWUsXG4gICAgICAgIGNvdmVyOiBwcm9wcy5vcHRpb25zQ292ZXIgPT09IHRydWUgJiYgbm9PcHRpb25zLnZhbHVlICE9PSB0cnVlICYmIHByb3BzLnVzZUlucHV0ICE9PSB0cnVlLFxuICAgICAgICBhbmNob3I6IHByb3BzLm1lbnVBbmNob3IsXG4gICAgICAgIHNlbGY6IHByb3BzLm1lbnVTZWxmLFxuICAgICAgICBvZmZzZXQ6IHByb3BzLm1lbnVPZmZzZXQsXG4gICAgICAgIGRhcms6IGlzT3B0aW9uc0RhcmsudmFsdWUsXG4gICAgICAgIG5vUGFyZW50RXZlbnQ6IHRydWUsXG4gICAgICAgIG5vUmVmb2N1czogdHJ1ZSxcbiAgICAgICAgbm9Gb2N1czogdHJ1ZSxcbiAgICAgICAgbm9Sb3V0ZURpc21pc3M6IHByb3BzLnBvcHVwTm9Sb3V0ZURpc21pc3MsXG4gICAgICAgIHNxdWFyZTogc3F1YXJlZE1lbnUudmFsdWUsXG4gICAgICAgIHRyYW5zaXRpb25TaG93OiBwcm9wcy50cmFuc2l0aW9uU2hvdyxcbiAgICAgICAgdHJhbnNpdGlvbkhpZGU6IHByb3BzLnRyYW5zaXRpb25IaWRlLFxuICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb246IHByb3BzLnRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgICAgc2VwYXJhdGVDbG9zZVBvcHVwOiB0cnVlLFxuICAgICAgICAuLi5saXN0Ym94QXR0cnMudmFsdWUsXG4gICAgICAgIG9uU2Nyb2xsUGFzc2l2ZTogb25WaXJ0dWFsU2Nyb2xsRXZ0LFxuICAgICAgICBvbkJlZm9yZVNob3c6IG9uQ29udHJvbFBvcHVwU2hvdyxcbiAgICAgICAgb25CZWZvcmVIaWRlOiBvbk1lbnVCZWZvcmVIaWRlLFxuICAgICAgICBvblNob3c6IG9uTWVudVNob3dcbiAgICAgIH0sIGdldEFsbE9wdGlvbnMpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25NZW51QmVmb3JlSGlkZSAoZSkge1xuICAgICAgb25Db250cm9sUG9wdXBIaWRlKGUpXG4gICAgICBjbG9zZU1lbnUoKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uTWVudVNob3cgKCkge1xuICAgICAgc2V0VmlydHVhbFNjcm9sbFNpemUoKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uRGlhbG9nRmllbGRGb2N1cyAoZSkge1xuICAgICAgc3RvcChlKVxuICAgICAgdGFyZ2V0UmVmLnZhbHVlICE9PSBudWxsICYmIHRhcmdldFJlZi52YWx1ZS5mb2N1cygpXG4gICAgICBkaWFsb2dGaWVsZEZvY3VzZWQudmFsdWUgPSB0cnVlXG4gICAgICB3aW5kb3cuc2Nyb2xsVG8od2luZG93LnBhZ2VYT2Zmc2V0IHx8IHdpbmRvdy5zY3JvbGxYIHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCB8fCAwLCAwKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uRGlhbG9nRmllbGRCbHVyIChlKSB7XG4gICAgICBzdG9wKGUpXG4gICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIGRpYWxvZ0ZpZWxkRm9jdXNlZC52YWx1ZSA9IGZhbHNlXG4gICAgICB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERpYWxvZyAoKSB7XG4gICAgICBjb25zdCBjb250ZW50ID0gW1xuICAgICAgICBoKFFGaWVsZCwge1xuICAgICAgICAgIGNsYXNzOiBgY29sLWF1dG8gJHsgc3RhdGUuZmllbGRDbGFzcy52YWx1ZSB9YCxcbiAgICAgICAgICAuLi5pbm5lckZpZWxkUHJvcHMudmFsdWUsXG4gICAgICAgICAgZm9yOiBzdGF0ZS50YXJnZXRVaWQudmFsdWUsXG4gICAgICAgICAgZGFyazogaXNPcHRpb25zRGFyay52YWx1ZSxcbiAgICAgICAgICBzcXVhcmU6IHRydWUsXG4gICAgICAgICAgbG9hZGluZzogaW5uZXJMb2FkaW5nSW5kaWNhdG9yLnZhbHVlLFxuICAgICAgICAgIGl0ZW1BbGlnbmVkOiBmYWxzZSxcbiAgICAgICAgICBmaWxsZWQ6IHRydWUsXG4gICAgICAgICAgc3RhY2tMYWJlbDogaW5wdXRWYWx1ZS52YWx1ZS5sZW5ndGggIT09IDAsXG4gICAgICAgICAgLi4uc3RhdGUuc3BsaXRBdHRycy5saXN0ZW5lcnMudmFsdWUsXG4gICAgICAgICAgb25Gb2N1czogb25EaWFsb2dGaWVsZEZvY3VzLFxuICAgICAgICAgIG9uQmx1cjogb25EaWFsb2dGaWVsZEJsdXJcbiAgICAgICAgfSwge1xuICAgICAgICAgIC4uLnNsb3RzLFxuICAgICAgICAgIHJhd0NvbnRyb2w6ICgpID0+IHN0YXRlLmdldENvbnRyb2wodHJ1ZSksXG4gICAgICAgICAgYmVmb3JlOiB2b2lkIDAsXG4gICAgICAgICAgYWZ0ZXI6IHZvaWQgMFxuICAgICAgICB9KVxuICAgICAgXVxuXG4gICAgICBtZW51LnZhbHVlID09PSB0cnVlICYmIGNvbnRlbnQucHVzaChcbiAgICAgICAgaCgnZGl2Jywge1xuICAgICAgICAgIHJlZjogbWVudUNvbnRlbnRSZWYsXG4gICAgICAgICAgY2xhc3M6IG1lbnVDb250ZW50Q2xhc3MudmFsdWUgKyAnIHNjcm9sbCcsXG4gICAgICAgICAgc3R5bGU6IHByb3BzLnBvcHVwQ29udGVudFN0eWxlLFxuICAgICAgICAgIC4uLmxpc3Rib3hBdHRycy52YWx1ZSxcbiAgICAgICAgICBvbkNsaWNrOiBwcmV2ZW50LFxuICAgICAgICAgIG9uU2Nyb2xsUGFzc2l2ZTogb25WaXJ0dWFsU2Nyb2xsRXZ0XG4gICAgICAgIH0sIGdldEFsbE9wdGlvbnMoKSlcbiAgICAgIClcblxuICAgICAgcmV0dXJuIGgoUURpYWxvZywge1xuICAgICAgICByZWY6IGRpYWxvZ1JlZixcbiAgICAgICAgbW9kZWxWYWx1ZTogZGlhbG9nLnZhbHVlLFxuICAgICAgICBwb3NpdGlvbjogcHJvcHMudXNlSW5wdXQgPT09IHRydWUgPyAndG9wJyA6IHZvaWQgMCxcbiAgICAgICAgdHJhbnNpdGlvblNob3c6IHRyYW5zaXRpb25TaG93Q29tcHV0ZWQsXG4gICAgICAgIHRyYW5zaXRpb25IaWRlOiBwcm9wcy50cmFuc2l0aW9uSGlkZSxcbiAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiBwcm9wcy50cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICAgIG5vUm91dGVEaXNtaXNzOiBwcm9wcy5wb3B1cE5vUm91dGVEaXNtaXNzLFxuICAgICAgICBvbkJlZm9yZVNob3c6IG9uQ29udHJvbFBvcHVwU2hvdyxcbiAgICAgICAgb25CZWZvcmVIaWRlOiBvbkRpYWxvZ0JlZm9yZUhpZGUsXG4gICAgICAgIG9uSGlkZTogb25EaWFsb2dIaWRlLFxuICAgICAgICBvblNob3c6IG9uRGlhbG9nU2hvd1xuICAgICAgfSwgKCkgPT4gaCgnZGl2Jywge1xuICAgICAgICBjbGFzczogJ3Etc2VsZWN0X19kaWFsb2cnXG4gICAgICAgICAgKyAoaXNPcHRpb25zRGFyay52YWx1ZSA9PT0gdHJ1ZSA/ICcgcS1zZWxlY3RfX2RpYWxvZy0tZGFyayBxLWRhcmsnIDogJycpXG4gICAgICAgICAgKyAoZGlhbG9nRmllbGRGb2N1c2VkLnZhbHVlID09PSB0cnVlID8gJyBxLXNlbGVjdF9fZGlhbG9nLS1mb2N1c2VkJyA6ICcnKVxuICAgICAgfSwgY29udGVudCkpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25EaWFsb2dCZWZvcmVIaWRlIChlKSB7XG4gICAgICBvbkNvbnRyb2xQb3B1cEhpZGUoZSlcblxuICAgICAgaWYgKGRpYWxvZ1JlZi52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICBkaWFsb2dSZWYudmFsdWUuX191cGRhdGVSZWZvY3VzVGFyZ2V0KFxuICAgICAgICAgIHN0YXRlLnJvb3RSZWYudmFsdWUucXVlcnlTZWxlY3RvcignLnEtZmllbGRfX25hdGl2ZSA+IFt0YWJpbmRleF06bGFzdC1jaGlsZCcpXG4gICAgICAgIClcbiAgICAgIH1cblxuICAgICAgc3RhdGUuZm9jdXNlZC52YWx1ZSA9IGZhbHNlXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25EaWFsb2dIaWRlIChlKSB7XG4gICAgICBoaWRlUG9wdXAoKVxuICAgICAgc3RhdGUuZm9jdXNlZC52YWx1ZSA9PT0gZmFsc2UgJiYgZW1pdCgnYmx1cicsIGUpXG4gICAgICByZXNldElucHV0VmFsdWUoKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uRGlhbG9nU2hvdyAoKSB7XG4gICAgICBjb25zdCBlbCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRcbiAgICAgIGlmIChcbiAgICAgICAgKGVsID09PSBudWxsIHx8IGVsLmlkICE9PSBzdGF0ZS50YXJnZXRVaWQudmFsdWUpXG4gICAgICAgICYmIHRhcmdldFJlZi52YWx1ZSAhPT0gbnVsbFxuICAgICAgICAmJiB0YXJnZXRSZWYudmFsdWUgIT09IGVsXG4gICAgICApIHtcbiAgICAgICAgdGFyZ2V0UmVmLnZhbHVlLmZvY3VzKClcbiAgICAgIH1cblxuICAgICAgc2V0VmlydHVhbFNjcm9sbFNpemUoKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb3NlTWVudSAoKSB7XG4gICAgICBpZiAoZGlhbG9nLnZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBvcHRpb25JbmRleC52YWx1ZSA9IC0xXG5cbiAgICAgIGlmIChtZW51LnZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgIG1lbnUudmFsdWUgPSBmYWxzZVxuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUuZm9jdXNlZC52YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgaWYgKGZpbHRlcklkICE9PSBudWxsKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KGZpbHRlcklkKVxuICAgICAgICAgIGZpbHRlcklkID0gbnVsbFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXRlLmlubmVyTG9hZGluZy52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGVtaXQoJ2ZpbHRlckFib3J0JylcbiAgICAgICAgICBzdGF0ZS5pbm5lckxvYWRpbmcudmFsdWUgPSBmYWxzZVxuICAgICAgICAgIGlubmVyTG9hZGluZ0luZGljYXRvci52YWx1ZSA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzaG93UG9wdXAgKGUpIHtcbiAgICAgIGlmIChzdGF0ZS5lZGl0YWJsZS52YWx1ZSAhPT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKGhhc0RpYWxvZyA9PT0gdHJ1ZSkge1xuICAgICAgICBzdGF0ZS5vbkNvbnRyb2xGb2N1c2luKGUpXG4gICAgICAgIGRpYWxvZy52YWx1ZSA9IHRydWVcbiAgICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgIHN0YXRlLmZvY3VzKClcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzdGF0ZS5mb2N1cygpXG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9wcy5vbkZpbHRlciAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGZpbHRlcihpbnB1dFZhbHVlLnZhbHVlKVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAobm9PcHRpb25zLnZhbHVlICE9PSB0cnVlIHx8IHNsb3RzWyAnbm8tb3B0aW9uJyBdICE9PSB2b2lkIDApIHtcbiAgICAgICAgbWVudS52YWx1ZSA9IHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoaWRlUG9wdXAgKCkge1xuICAgICAgZGlhbG9nLnZhbHVlID0gZmFsc2VcbiAgICAgIGNsb3NlTWVudSgpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzZXRJbnB1dFZhbHVlICgpIHtcbiAgICAgIHByb3BzLnVzZUlucHV0ID09PSB0cnVlICYmIHVwZGF0ZUlucHV0VmFsdWUoXG4gICAgICAgIHByb3BzLm11bHRpcGxlICE9PSB0cnVlICYmIHByb3BzLmZpbGxJbnB1dCA9PT0gdHJ1ZSAmJiBpbm5lclZhbHVlLnZhbHVlLmxlbmd0aCAhPT0gMFxuICAgICAgICAgID8gZ2V0T3B0aW9uTGFiZWwudmFsdWUoaW5uZXJWYWx1ZS52YWx1ZVsgMCBdKSB8fCAnJ1xuICAgICAgICAgIDogJycsXG4gICAgICAgIHRydWUsXG4gICAgICAgIHRydWVcbiAgICAgIClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVNZW51IChzaG93KSB7XG4gICAgICBsZXQgb3B0aW9uSW5kZXggPSAtMVxuXG4gICAgICBpZiAoc2hvdyA9PT0gdHJ1ZSkge1xuICAgICAgICBpZiAoaW5uZXJWYWx1ZS52YWx1ZS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICBjb25zdCB2YWwgPSBnZXRPcHRpb25WYWx1ZS52YWx1ZShpbm5lclZhbHVlLnZhbHVlWyAwIF0pXG4gICAgICAgICAgb3B0aW9uSW5kZXggPSBwcm9wcy5vcHRpb25zLmZpbmRJbmRleCh2ID0+IGlzRGVlcEVxdWFsKGdldE9wdGlvblZhbHVlLnZhbHVlKHYpLCB2YWwpKVxuICAgICAgICB9XG5cbiAgICAgICAgbG9jYWxSZXNldFZpcnR1YWxTY3JvbGwob3B0aW9uSW5kZXgpXG4gICAgICB9XG5cbiAgICAgIHNldE9wdGlvbkluZGV4KG9wdGlvbkluZGV4KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlcmVuZGVyTWVudSAobmV3TGVuZ3RoLCBvbGRMZW5ndGgpIHtcbiAgICAgIGlmIChtZW51LnZhbHVlID09PSB0cnVlICYmIHN0YXRlLmlubmVyTG9hZGluZy52YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgbG9jYWxSZXNldFZpcnR1YWxTY3JvbGwoLTEsIHRydWUpXG5cbiAgICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgIGlmIChtZW51LnZhbHVlID09PSB0cnVlICYmIHN0YXRlLmlubmVyTG9hZGluZy52YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmIChuZXdMZW5ndGggPiBvbGRMZW5ndGgpIHtcbiAgICAgICAgICAgICAgbG9jYWxSZXNldFZpcnR1YWxTY3JvbGwoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIHVwZGF0ZU1lbnUodHJ1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlTWVudVBvc2l0aW9uICgpIHtcbiAgICAgIGlmIChkaWFsb2cudmFsdWUgPT09IGZhbHNlICYmIG1lbnVSZWYudmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgbWVudVJlZi52YWx1ZS51cGRhdGVQb3NpdGlvbigpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25Db250cm9sUG9wdXBTaG93IChlKSB7XG4gICAgICBlICE9PSB2b2lkIDAgJiYgc3RvcChlKVxuICAgICAgZW1pdCgncG9wdXBTaG93JywgZSlcbiAgICAgIHN0YXRlLmhhc1BvcHVwT3BlbiA9IHRydWVcbiAgICAgIHN0YXRlLm9uQ29udHJvbEZvY3VzaW4oZSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkNvbnRyb2xQb3B1cEhpZGUgKGUpIHtcbiAgICAgIGUgIT09IHZvaWQgMCAmJiBzdG9wKGUpXG4gICAgICBlbWl0KCdwb3B1cEhpZGUnLCBlKVxuICAgICAgc3RhdGUuaGFzUG9wdXBPcGVuID0gZmFsc2VcbiAgICAgIHN0YXRlLm9uQ29udHJvbEZvY3Vzb3V0KGUpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlUHJlU3RhdGUgKCkge1xuICAgICAgaGFzRGlhbG9nID0gJHEucGxhdGZvcm0uaXMubW9iaWxlICE9PSB0cnVlICYmIHByb3BzLmJlaGF2aW9yICE9PSAnZGlhbG9nJ1xuICAgICAgICA/IGZhbHNlXG4gICAgICAgIDogcHJvcHMuYmVoYXZpb3IgIT09ICdtZW51JyAmJiAoXG4gICAgICAgICAgcHJvcHMudXNlSW5wdXQgPT09IHRydWVcbiAgICAgICAgICAgID8gc2xvdHNbICduby1vcHRpb24nIF0gIT09IHZvaWQgMCB8fCBwcm9wcy5vbkZpbHRlciAhPT0gdm9pZCAwIHx8IG5vT3B0aW9ucy52YWx1ZSA9PT0gZmFsc2VcbiAgICAgICAgICAgIDogdHJ1ZVxuICAgICAgICApXG5cbiAgICAgIHRyYW5zaXRpb25TaG93Q29tcHV0ZWQgPSAkcS5wbGF0Zm9ybS5pcy5pb3MgPT09IHRydWUgJiYgaGFzRGlhbG9nID09PSB0cnVlICYmIHByb3BzLnVzZUlucHV0ID09PSB0cnVlXG4gICAgICAgID8gJ2ZhZGUnXG4gICAgICAgIDogcHJvcHMudHJhbnNpdGlvblNob3dcbiAgICB9XG5cbiAgICBvbkJlZm9yZVVwZGF0ZSh1cGRhdGVQcmVTdGF0ZSlcbiAgICBvblVwZGF0ZWQodXBkYXRlTWVudVBvc2l0aW9uKVxuXG4gICAgdXBkYXRlUHJlU3RhdGUoKVxuXG4gICAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICAgIGZpbHRlclRpbWVyICE9PSBudWxsICYmIGNsZWFyVGltZW91dChmaWx0ZXJUaW1lcilcbiAgICAgIGlucHV0VmFsdWVUaW1lciAhPT0gbnVsbCAmJiBjbGVhclRpbWVvdXQoaW5wdXRWYWx1ZVRpbWVyKVxuICAgIH0pXG5cbiAgICAvLyBleHBvc2UgcHVibGljIG1ldGhvZHNcbiAgICBPYmplY3QuYXNzaWduKHByb3h5LCB7XG4gICAgICBzaG93UG9wdXAsIGhpZGVQb3B1cCxcbiAgICAgIHJlbW92ZUF0SW5kZXgsIGFkZCwgdG9nZ2xlT3B0aW9uLFxuICAgICAgZ2V0T3B0aW9uSW5kZXg6ICgpID0+IG9wdGlvbkluZGV4LnZhbHVlLFxuICAgICAgc2V0T3B0aW9uSW5kZXgsIG1vdmVPcHRpb25TZWxlY3Rpb24sXG4gICAgICBmaWx0ZXIsIHVwZGF0ZU1lbnVQb3NpdGlvbiwgdXBkYXRlSW5wdXRWYWx1ZSxcbiAgICAgIGlzT3B0aW9uU2VsZWN0ZWQsXG4gICAgICBnZXRFbWl0dGluZ09wdGlvblZhbHVlLFxuICAgICAgaXNPcHRpb25EaXNhYmxlZDogKC4uLmFyZ3MpID0+IGlzT3B0aW9uRGlzYWJsZWQudmFsdWUuYXBwbHkobnVsbCwgYXJncykgPT09IHRydWUsXG4gICAgICBnZXRPcHRpb25WYWx1ZTogKC4uLmFyZ3MpID0+IGdldE9wdGlvblZhbHVlLnZhbHVlLmFwcGx5KG51bGwsIGFyZ3MpLFxuICAgICAgZ2V0T3B0aW9uTGFiZWw6ICguLi5hcmdzKSA9PiBnZXRPcHRpb25MYWJlbC52YWx1ZS5hcHBseShudWxsLCBhcmdzKVxuICAgIH0pXG5cbiAgICBPYmplY3QuYXNzaWduKHN0YXRlLCB7XG4gICAgICBpbm5lclZhbHVlLFxuXG4gICAgICBmaWVsZENsYXNzOiBjb21wdXRlZCgoKSA9PlxuICAgICAgICBgcS1zZWxlY3QgcS1maWVsZC0tYXV0by1oZWlnaHQgcS1zZWxlY3QtLXdpdGgkeyBwcm9wcy51c2VJbnB1dCAhPT0gdHJ1ZSA/ICdvdXQnIDogJycgfS1pbnB1dGBcbiAgICAgICAgKyBgIHEtc2VsZWN0LS13aXRoJHsgcHJvcHMudXNlQ2hpcHMgIT09IHRydWUgPyAnb3V0JyA6ICcnIH0tY2hpcHNgXG4gICAgICAgICsgYCBxLXNlbGVjdC0tJHsgcHJvcHMubXVsdGlwbGUgPT09IHRydWUgPyAnbXVsdGlwbGUnIDogJ3NpbmdsZScgfWBcbiAgICAgICksXG5cbiAgICAgIGlucHV0UmVmLFxuICAgICAgdGFyZ2V0UmVmLFxuICAgICAgaGFzVmFsdWUsXG4gICAgICBzaG93UG9wdXAsXG5cbiAgICAgIGZsb2F0aW5nTGFiZWw6IGNvbXB1dGVkKCgpID0+XG4gICAgICAgIChwcm9wcy5oaWRlU2VsZWN0ZWQgIT09IHRydWUgJiYgaGFzVmFsdWUudmFsdWUgPT09IHRydWUpXG4gICAgICAgIHx8IHR5cGVvZiBpbnB1dFZhbHVlLnZhbHVlID09PSAnbnVtYmVyJ1xuICAgICAgICB8fCBpbnB1dFZhbHVlLnZhbHVlLmxlbmd0aCAhPT0gMFxuICAgICAgICB8fCBmaWVsZFZhbHVlSXNGaWxsZWQocHJvcHMuZGlzcGxheVZhbHVlKVxuICAgICAgKSxcblxuICAgICAgZ2V0Q29udHJvbENoaWxkOiAoKSA9PiB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBzdGF0ZS5lZGl0YWJsZS52YWx1ZSAhPT0gZmFsc2UgJiYgKFxuICAgICAgICAgICAgZGlhbG9nLnZhbHVlID09PSB0cnVlIC8vIGRpYWxvZyBhbHdheXMgaGFzIG1lbnUgZGlzcGxheWVkLCBzbyBuZWVkIHRvIHJlbmRlciBpdFxuICAgICAgICAgICAgfHwgbm9PcHRpb25zLnZhbHVlICE9PSB0cnVlXG4gICAgICAgICAgICB8fCBzbG90c1sgJ25vLW9wdGlvbicgXSAhPT0gdm9pZCAwXG4gICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gaGFzRGlhbG9nID09PSB0cnVlID8gZ2V0RGlhbG9nKCkgOiBnZXRNZW51KClcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzdGF0ZS5oYXNQb3B1cE9wZW4gPT09IHRydWUpIHtcbiAgICAgICAgICAvLyBleHBsaWNpdGx5IHNldCBpdCBvdGhlcndpc2UgVEFCIHdpbGwgbm90IGJsdXIgY29tcG9uZW50XG4gICAgICAgICAgc3RhdGUuaGFzUG9wdXBPcGVuID0gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgY29udHJvbEV2ZW50czoge1xuICAgICAgICBvbkZvY3VzaW4gKGUpIHsgc3RhdGUub25Db250cm9sRm9jdXNpbihlKSB9LFxuICAgICAgICBvbkZvY3Vzb3V0IChlKSB7XG4gICAgICAgICAgc3RhdGUub25Db250cm9sRm9jdXNvdXQoZSwgKCkgPT4ge1xuICAgICAgICAgICAgcmVzZXRJbnB1dFZhbHVlKClcbiAgICAgICAgICAgIGNsb3NlTWVudSgpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSxcbiAgICAgICAgb25DbGljayAoZSkge1xuICAgICAgICAgIC8vIGxhYmVsIGZyb20gUUZpZWxkIHdpbGwgcHJvcGFnYXRlIGNsaWNrIG9uIHRoZSBpbnB1dFxuICAgICAgICAgIHByZXZlbnQoZSlcblxuICAgICAgICAgIGlmIChoYXNEaWFsb2cgIT09IHRydWUgJiYgbWVudS52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY2xvc2VNZW51KClcbiAgICAgICAgICAgIHRhcmdldFJlZi52YWx1ZSAhPT0gbnVsbCAmJiB0YXJnZXRSZWYudmFsdWUuZm9jdXMoKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2hvd1BvcHVwKGUpXG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIGdldENvbnRyb2w6IGZyb21EaWFsb2cgPT4ge1xuICAgICAgICBjb25zdCBjaGlsZCA9IGdldFNlbGVjdGlvbigpXG4gICAgICAgIGNvbnN0IGlzVGFyZ2V0ID0gZnJvbURpYWxvZyA9PT0gdHJ1ZSB8fCBkaWFsb2cudmFsdWUgIT09IHRydWUgfHwgaGFzRGlhbG9nICE9PSB0cnVlXG5cbiAgICAgICAgaWYgKHByb3BzLnVzZUlucHV0ID09PSB0cnVlKSB7XG4gICAgICAgICAgY2hpbGQucHVzaChnZXRJbnB1dChmcm9tRGlhbG9nLCBpc1RhcmdldCkpXG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhlcmUgY2FuIGJlIG9ubHkgb25lICh3aGVuIGRpYWxvZyBpcyBvcGVuZWQgdGhlIGNvbnRyb2wgaW4gZGlhbG9nIHNob3VsZCBiZSB0YXJnZXQpXG4gICAgICAgIGVsc2UgaWYgKHN0YXRlLmVkaXRhYmxlLnZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgICAgY29uc3QgYXR0cnMgPSBpc1RhcmdldCA9PT0gdHJ1ZSA/IGNvbWJvYm94QXR0cnMudmFsdWUgOiB2b2lkIDBcblxuICAgICAgICAgIGNoaWxkLnB1c2goXG4gICAgICAgICAgICBoKCdpbnB1dCcsIHtcbiAgICAgICAgICAgICAgcmVmOiBpc1RhcmdldCA9PT0gdHJ1ZSA/IHRhcmdldFJlZiA6IHZvaWQgMCxcbiAgICAgICAgICAgICAga2V5OiAnZF90JyxcbiAgICAgICAgICAgICAgY2xhc3M6ICdxLXNlbGVjdF9fZm9jdXMtdGFyZ2V0JyxcbiAgICAgICAgICAgICAgaWQ6IGlzVGFyZ2V0ID09PSB0cnVlID8gc3RhdGUudGFyZ2V0VWlkLnZhbHVlIDogdm9pZCAwLFxuICAgICAgICAgICAgICB2YWx1ZTogYXJpYUN1cnJlbnRWYWx1ZS52YWx1ZSxcbiAgICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICAgICdkYXRhLWF1dG9mb2N1cyc6IGZyb21EaWFsb2cgPT09IHRydWUgfHwgcHJvcHMuYXV0b2ZvY3VzID09PSB0cnVlIHx8IHZvaWQgMCxcbiAgICAgICAgICAgICAgLi4uYXR0cnMsXG4gICAgICAgICAgICAgIG9uS2V5ZG93bjogb25UYXJnZXRLZXlkb3duLFxuICAgICAgICAgICAgICBvbktleXVwOiBvblRhcmdldEtleXVwLFxuICAgICAgICAgICAgICBvbktleXByZXNzOiBvblRhcmdldEtleXByZXNzXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIClcblxuICAgICAgICAgIGlmIChpc1RhcmdldCA9PT0gdHJ1ZSAmJiB0eXBlb2YgcHJvcHMuYXV0b2NvbXBsZXRlID09PSAnc3RyaW5nJyAmJiBwcm9wcy5hdXRvY29tcGxldGUubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBjaGlsZC5wdXNoKFxuICAgICAgICAgICAgICBoKCdpbnB1dCcsIHtcbiAgICAgICAgICAgICAgICBjbGFzczogJ3Etc2VsZWN0X19hdXRvY29tcGxldGUtaW5wdXQnLFxuICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0ZTogcHJvcHMuYXV0b2NvbXBsZXRlLFxuICAgICAgICAgICAgICAgIHRhYmluZGV4OiAtMSxcbiAgICAgICAgICAgICAgICBvbktleXVwOiBvblRhcmdldEF1dG9jb21wbGV0ZVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuYW1lUHJvcC52YWx1ZSAhPT0gdm9pZCAwICYmIHByb3BzLmRpc2FibGUgIT09IHRydWUgJiYgaW5uZXJPcHRpb25zVmFsdWUudmFsdWUubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgY29uc3Qgb3B0cyA9IGlubmVyT3B0aW9uc1ZhbHVlLnZhbHVlLm1hcCh2YWx1ZSA9PiBoKCdvcHRpb24nLCB7IHZhbHVlLCBzZWxlY3RlZDogdHJ1ZSB9KSlcblxuICAgICAgICAgIGNoaWxkLnB1c2goXG4gICAgICAgICAgICBoKCdzZWxlY3QnLCB7XG4gICAgICAgICAgICAgIGNsYXNzOiAnaGlkZGVuJyxcbiAgICAgICAgICAgICAgbmFtZTogbmFtZVByb3AudmFsdWUsXG4gICAgICAgICAgICAgIG11bHRpcGxlOiBwcm9wcy5tdWx0aXBsZVxuICAgICAgICAgICAgfSwgb3B0cylcbiAgICAgICAgICApXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhdHRycyA9IHByb3BzLnVzZUlucHV0ID09PSB0cnVlIHx8IGlzVGFyZ2V0ICE9PSB0cnVlID8gdm9pZCAwIDogc3RhdGUuc3BsaXRBdHRycy5hdHRyaWJ1dGVzLnZhbHVlXG5cbiAgICAgICAgcmV0dXJuIGgoJ2RpdicsIHtcbiAgICAgICAgICBjbGFzczogJ3EtZmllbGRfX25hdGl2ZSByb3cgaXRlbXMtY2VudGVyJyxcbiAgICAgICAgICAuLi5hdHRycyxcbiAgICAgICAgICAuLi5zdGF0ZS5zcGxpdEF0dHJzLmxpc3RlbmVycy52YWx1ZVxuICAgICAgICB9LCBjaGlsZClcbiAgICAgIH0sXG5cbiAgICAgIGdldElubmVyQXBwZW5kOiAoKSA9PiAoXG4gICAgICAgIHByb3BzLmxvYWRpbmcgIT09IHRydWUgJiYgaW5uZXJMb2FkaW5nSW5kaWNhdG9yLnZhbHVlICE9PSB0cnVlICYmIHByb3BzLmhpZGVEcm9wZG93bkljb24gIT09IHRydWVcbiAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgaChRSWNvbiwge1xuICAgICAgICAgICAgICAgIGNsYXNzOiAncS1zZWxlY3RfX2Ryb3Bkb3duLWljb24nICsgKG1lbnUudmFsdWUgPT09IHRydWUgPyAnIHJvdGF0ZS0xODAnIDogJycpLFxuICAgICAgICAgICAgICAgIG5hbWU6IGRyb3Bkb3duQXJyb3dJY29uLnZhbHVlXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBdXG4gICAgICAgICAgOiBudWxsXG4gICAgICApXG4gICAgfSlcblxuICAgIHJldHVybiB1c2VGaWVsZChzdGF0ZSlcbiAgfVxufSlcbiJdLCJuYW1lcyI6WyJkZWZhdWx0U2l6ZXMiLCJRQ2hpcCIsImNyZWF0ZUNvbXBvbmVudCIsInVzZURhcmtQcm9wcyIsInVzZVNpemVQcm9wcyIsInByb3BzIiwic2xvdHMiLCJlbWl0IiwiJHEiLCJnZXRDdXJyZW50SW5zdGFuY2UiLCJpc0RhcmsiLCJ1c2VEYXJrIiwic2l6ZVN0eWxlIiwidXNlU2l6ZSIsImhhc0xlZnRJY29uIiwiY29tcHV0ZWQiLCJsZWZ0SWNvbiIsInJlbW92ZUljb24iLCJpc0NsaWNrYWJsZSIsImNsYXNzZXMiLCJ0ZXh0IiwiYXR0cmlidXRlcyIsImNoaXAiLCJyZW1vdmUiLCJvbktleXVwIiwiZSIsIm9uQ2xpY2siLCJvblJlbW92ZSIsInN0b3BBbmRQcmV2ZW50IiwiZ2V0Q29udGVudCIsImNoaWxkIiwiaCIsIlFJY29uIiwibGFiZWwiLCJoTWVyZ2VTbG90U2FmZWx5IiwiZGF0YSIsImhEaXIiLCJSaXBwbGUiLCJhZ2dCdWNrZXRTaXplIiwic2Nyb2xsVG9FZGdlcyIsImZpbHRlclByb3RvIiwic2V0T3ZlcmZsb3dBbmNob3IiLCJub29wIiwiY29udGVudEVsIiwiaW5kZXgiLCJjaGlsZHJlbiIsImVsIiwic3VtRm4iLCJhY2MiLCJnZXRTY3JvbGxEZXRhaWxzIiwicGFyZW50IiwiYmVmb3JlUmVmIiwiYWZ0ZXJSZWYiLCJob3Jpem9udGFsIiwicnRsIiwic3RpY2t5U3RhcnQiLCJzdGlja3lFbmQiLCJwYXJlbnRDYWxjIiwicHJvcEVsU2l6ZSIsImRldGFpbHMiLCJydGxIYXNTY3JvbGxCdWciLCJwYXJlbnRSZWN0IiwiY2hpbGRSZWN0Iiwic2V0U2Nyb2xsIiwic2Nyb2xsIiwic3VtU2l6ZSIsInNpemVBZ2ciLCJzaXplIiwiZnJvbSIsInRvIiwibGFzdFRvIiwiZnJvbUFnZyIsInRvQWdnIiwidG90YWwiLCJjb21tb25WaXJ0U2Nyb2xsUHJvcHMiLCJjb21tb25WaXJ0U2Nyb2xsUHJvcHNMaXN0IiwidXNlVmlydHVhbFNjcm9sbFByb3BzIiwidXNlVmlydHVhbFNjcm9sbCIsInZpcnR1YWxTY3JvbGxMZW5ndGgiLCJnZXRWaXJ0dWFsU2Nyb2xsVGFyZ2V0IiwiZ2V0VmlydHVhbFNjcm9sbEVsIiwidmlydHVhbFNjcm9sbEl0ZW1TaXplQ29tcHV0ZWQiLCJ2bSIsInByb3h5IiwicHJldlNjcm9sbFN0YXJ0IiwicHJldlRvSW5kZXgiLCJsb2NhbFNjcm9sbFZpZXdTaXplIiwidmlydHVhbFNjcm9sbFNpemVzQWdnIiwidmlydHVhbFNjcm9sbFNpemVzIiwidmlydHVhbFNjcm9sbFBhZGRpbmdCZWZvcmUiLCJyZWYiLCJ2aXJ0dWFsU2Nyb2xsUGFkZGluZ0FmdGVyIiwidmlydHVhbFNjcm9sbFNsaWNlU2l6ZUNvbXB1dGVkIiwiY29udGVudFJlZiIsInZpcnR1YWxTY3JvbGxTbGljZVJhbmdlIiwiY29sc3BhbkF0dHIiLCJuZWVkc1Jlc2V0IiwibmVlZHNTbGljZVJlY2FsYyIsIndhdGNoIiwic2V0VmlydHVhbFNjcm9sbFNpemUiLCJyZXNldCIsImxvY2FsUmVzZXRWaXJ0dWFsU2Nyb2xsIiwicmVmcmVzaCIsInRvSW5kZXgiLCJzY3JvbGxUbyIsImVkZ2UiLCJzY3JvbGxFbCIsInNjcm9sbERldGFpbHMiLCJzZXRWaXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZSIsImxvY2FsT25WaXJ0dWFsU2Nyb2xsRXZ0IiwibGlzdExhc3RJbmRleCIsImxpc3RFbmRPZmZzZXQiLCJ1cGRhdGVWaXJ0dWFsU2Nyb2xsU2l6ZXMiLCJzY3JvbGxNYXhTdGFydCIsImxpc3RPZmZzZXQiLCJvZmZzZXQiLCJqIiwiYWxpZ24iLCJhbGlnbkZvcmNlIiwiYWxpZ25FbmQiLCJhbGlnblJhbmdlIiwicmFuZ2VDaGFuZ2VkIiwiZW1pdFNjcm9sbCIsImFjdGl2ZUVsZW1lbnQiLCJvbkJsdXJSZWZvY3VzRm4iLCJzaXplQmVmb3JlIiwidGVtcFRvIiwic2l6ZUFmdGVyIiwicG9zU3RhcnQiLCJwb3NFbmQiLCJzY3JvbGxQb3NpdGlvbiIsInNpemVEaWZmIiwic2Nyb2xsU3RhcnQiLCJjaGlsZHJlbkxlbmd0aCIsInNpemVGbiIsImRpZmYiLCJpIiwiZnVsbFJlc2V0IiwiZGVmYXVsdFNpemUiLCJvbGRWaXJ0dWFsU2Nyb2xsU2l6ZXNMZW5ndGgiLCJqTWF4IiwiaU1heCIsIm5leHRUaWNrIiwib25WaXJ0dWFsU2Nyb2xsRXZ0Iiwic2Nyb2xsVmlld1NpemUiLCJ2aXJ0dWFsU2Nyb2xsU2xpY2VSYXRpb0JlZm9yZSIsInZpcnR1YWxTY3JvbGxTbGljZVJhdGlvQWZ0ZXIiLCJtdWx0aXBsaWVyIiwidmlldyIsImJhc2VTaXplIiwicGFkVmlydHVhbFNjcm9sbCIsInRhZyIsImNvbnRlbnQiLCJwYWRkaW5nU2l6ZSIsInN0eWxlIiwiZGVib3VuY2UiLCJvbkJlZm9yZU1vdW50Iiwic2hvdWxkQWN0aXZhdGUiLCJvbkRlYWN0aXZhdGVkIiwib25BY3RpdmF0ZWQiLCJvbkJlZm9yZVVubW91bnQiLCJ2YWxpZGF0ZU5ld1ZhbHVlTW9kZSIsInYiLCJyZUVzY2FwZUxpc3QiLCJmaWVsZFByb3BzTGlzdCIsInVzZUZpZWxkUHJvcHMiLCJRU2VsZWN0IiwidXNlRm9ybVByb3BzIiwidXNlRmllbGRFbWl0cyIsIm1lbnUiLCJkaWFsb2ciLCJvcHRpb25JbmRleCIsImlucHV0VmFsdWUiLCJkaWFsb2dGaWVsZEZvY3VzZWQiLCJpbm5lckxvYWRpbmdJbmRpY2F0b3IiLCJmaWx0ZXJUaW1lciIsImlucHV0VmFsdWVUaW1lciIsImlubmVyVmFsdWVDYWNoZSIsImhhc0RpYWxvZyIsInVzZXJJbnB1dFZhbHVlIiwiZmlsdGVySWQiLCJkZWZhdWx0SW5wdXRWYWx1ZSIsInRyYW5zaXRpb25TaG93Q29tcHV0ZWQiLCJzZWFyY2hCdWZmZXIiLCJzZWFyY2hCdWZmZXJFeHAiLCJpbnB1dFJlZiIsInRhcmdldFJlZiIsIm1lbnVSZWYiLCJkaWFsb2dSZWYiLCJtZW51Q29udGVudFJlZiIsIm5hbWVQcm9wIiwidXNlRm9ybUlucHV0TmFtZUF0dHIiLCJvbkNvbXBvc2l0aW9uIiwidXNlS2V5Q29tcG9zaXRpb24iLCJvbklucHV0Iiwic3RhdGUiLCJ1c2VGaWVsZFN0YXRlIiwiaW5uZXJWYWx1ZSIsIm1hcE51bGwiLCJ2YWwiLCJjYWNoZSIsInZhbHVlcyIsImdldE9wdGlvbiIsImlubmVyRmllbGRQcm9wcyIsImtleSIsImlzT3B0aW9uc0RhcmsiLCJoYXNWYWx1ZSIsImZpZWxkVmFsdWVJc0ZpbGxlZCIsImNvbXB1dGVkSW5wdXRDbGFzcyIsImNscyIsIm1lbnVDb250ZW50Q2xhc3MiLCJub09wdGlvbnMiLCJzZWxlY3RlZFN0cmluZyIsIm9wdCIsImdldE9wdGlvbkxhYmVsIiwiYXJpYUN1cnJlbnRWYWx1ZSIsIm5lZWRzSHRtbEZuIiwidmFsdWVBc0h0bWwiLCJ0YWJpbmRleCIsImNvbWJvYm94QXR0cnMiLCJhdHRycyIsImxpc3Rib3hBdHRycyIsInNlbGVjdGVkU2NvcGUiLCJyZW1vdmVBdEluZGV4QW5kRm9jdXMiLCJ0b2dnbGVPcHRpb24iLCJvcHRpb25TY29wZSIsImRpc2FibGUiLCJpc09wdGlvbkRpc2FibGVkIiwiYWN0aXZlIiwiaXNPcHRpb25TZWxlY3RlZCIsIml0ZW1Qcm9wcyIsImNvbXB1dGVkT3B0aW9uc1NlbGVjdGVkQ2xhc3MiLCJzZXRPcHRpb25JbmRleCIsImRyb3Bkb3duQXJyb3dJY29uIiwic3F1YXJlZE1lbnUiLCJnZXRPcHRpb25WYWx1ZSIsImdldFByb3BWYWx1ZUZuIiwiaW5uZXJPcHRpb25zVmFsdWUiLCJpbnB1dENvbnRyb2xFdmVudHMiLCJldnQiLCJvblRhcmdldEtleWRvd24iLCJvblRhcmdldEF1dG9jb21wbGV0ZSIsIm9uVGFyZ2V0S2V5cHJlc3MiLCJzZWxlY3RJbnB1dFRleHQiLCJzdG9wIiwicmVzZXRJbnB1dFZhbHVlIiwiZmlsdGVyIiwidXBkYXRlTWVudSIsInJlcmVuZGVyTWVudSIsImdldEVtaXR0aW5nT3B0aW9uVmFsdWUiLCJyZW1vdmVBdEluZGV4IiwibW9kZWwiLCJhZGQiLCJ1bmlxdWUiLCJ1cGRhdGVJbnB1dFZhbHVlIiwia2VlcE9wZW4iLCJvcHRWYWx1ZSIsImhpZGVQb3B1cCIsImlzRGVlcEVxdWFsIiwibW92ZU9wdGlvblNlbGVjdGlvbiIsInNraXBJbnB1dFZhbHVlIiwibm9ybWFsaXplVG9JbnRlcnZhbCIsInNldElucHV0VmFsdWUiLCJ2YWx1ZSIsInZhbHVlQ2FjaGUiLCJmbiIsInByb3BWYWx1ZSIsImRlZmF1bHRWYWwiLCJvblRhcmdldEtleXVwIiwiaXNLZXlDb2RlIiwibmVlZGxlIiwiZmluZEZuIiwiZXh0cmFjdEZuIiwib3B0aW9uIiwiZmlsbEZuIiwiYWZ0ZXJGaWx0ZXIiLCJzaG91bGRJZ25vcmVLZXkiLCJuZXdWYWx1ZU1vZGVWYWxpZCIsInRhYlNob3VsZFNlbGVjdCIsInByZXZlbnQiLCJjbG9zZU1lbnUiLCJzaG93UG9wdXAiLCJvcHRpb25zTGVuZ3RoIiwiY2hhciIsImtleVJlcGVhdCIsInNlYXJjaFJlIiwibCIsImRvbmUiLCJtb2RlIiwiZ2V0U2VsZWN0aW9uIiwic2NvcGUiLCJnZXRBbGxPcHRpb25zIiwiUUl0ZW0iLCJRSXRlbVNlY3Rpb24iLCJRSXRlbUxhYmVsIiwib3B0aW9ucyIsImhNZXJnZVNsb3QiLCJnZXRJbnB1dCIsImZyb21EaWFsb2ciLCJpc1RhcmdldCIsImVtaXRJbW1lZGlhdGVseSIsIm5vRmlsdGVyaW5nIiwiaW50ZXJuYWwiLCJrZWVwQ2xvc2VkIiwiYWZ0ZXJVcGRhdGVGbiIsImxvY2FsRmlsdGVySWQiLCJhZnRlckZuIiwiZ2V0TWVudSIsIlFNZW51Iiwib25Db250cm9sUG9wdXBTaG93Iiwib25NZW51QmVmb3JlSGlkZSIsIm9uTWVudVNob3ciLCJvbkNvbnRyb2xQb3B1cEhpZGUiLCJvbkRpYWxvZ0ZpZWxkRm9jdXMiLCJvbkRpYWxvZ0ZpZWxkQmx1ciIsImdldERpYWxvZyIsIlFGaWVsZCIsIlFEaWFsb2ciLCJvbkRpYWxvZ0JlZm9yZUhpZGUiLCJvbkRpYWxvZ0hpZGUiLCJvbkRpYWxvZ1Nob3ciLCJzaG93IiwibmV3TGVuZ3RoIiwib2xkTGVuZ3RoIiwidXBkYXRlTWVudVBvc2l0aW9uIiwidXBkYXRlUHJlU3RhdGUiLCJvbkJlZm9yZVVwZGF0ZSIsIm9uVXBkYXRlZCIsImFyZ3MiLCJvcHRzIiwidXNlRmllbGQiXSwibWFwcGluZ3MiOiJ5YkFhTyxNQUFNQSxHQUFlLENBQzFCLEdBQUksRUFDSixHQUFJLEdBQ0osR0FBSSxHQUNKLEdBQUksR0FDSixHQUFJLEVBQ04sRUFFQSxJQUFBQyxHQUFlQyxHQUFnQixDQUM3QixLQUFNLFFBRU4sTUFBTyxDQUNMLEdBQUdDLEdBQ0gsR0FBR0MsR0FFSCxNQUFPLFFBRVAsS0FBTSxPQUNOLFVBQVcsT0FDWCxXQUFZLE9BQ1osYUFBYyxPQUNkLE1BQU8sQ0FBRSxPQUFRLE1BQVEsRUFFekIsTUFBTyxPQUNQLFVBQVcsT0FFWCxXQUFZLENBQ1YsS0FB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
