import{f as Y,g as Z,h as ee,i as te,j as le,k as ae,r as h,l as ne,m as ue,n as u,o,p as ie,q as oe,v as se,w as V,x as re,Q as x,y as S,z as P,A,B as Q,C as _,D as N}from"./index.6def9867.js";import{Q as de,a as O}from"./QSelect.afec6258.js";import{u as ce,a as pe,b as fe}from"./use-file.bda887f0.js";import{Q as j}from"./QField.d0527066.js";var I=Y({name:"QFile",inheritAttrs:!1,props:{...Z,...ee,...ce,modelValue:[File,FileList,Array],append:Boolean,useChips:Boolean,displayValue:[String,Number],tabindex:{type:[String,Number],default:0},counterLabel:Function,inputClass:[Array,String,Object],inputStyle:[Array,String,Object]},emits:[...te,...pe],setup(e,{slots:r,emit:k,attrs:q}){const{proxy:m}=le(),i=ae(),s=h(null),v=h(!1),D=ne(e),{pickFiles:E,onDragover:z,onDragleave:B,processFiles:L,getDndNode:w}=fe({editable:i.editable,dnd:v,getFileInput:F,addFilesToQueue:C}),R=ue(e),l=u(()=>Object(e.modelValue)===e.modelValue?"length"in e.modelValue?Array.from(e.modelValue):[e.modelValue]:[]),g=u(()=>V(l.value)),U=u(()=>l.value.map(t=>t.name).join(", ")),y=u(()=>re(l.value.reduce((t,a)=>t+a.size,0))),T=u(()=>({totalSize:y.value,filesNumber:l.value.length,maxFiles:e.maxFiles})),$=u(()=>({tabindex:-1,type:"file",title:"",accept:e.accept,capture:e.capture,name:D.value,...q,id:i.targetUid.value,disabled:i.editable.value!==!0})),K=u(()=>"q-file q-field--auto-height"+(v.value===!0?" q-file--dnd":"")),b=u(()=>e.multiple===!0&&e.append===!0);function c(t){const a=l.value.slice();a.splice(t,1),p(a)}function G(t){const a=l.value.indexOf(t);a!==-1&&c(a)}function p(t){k("update:modelValue",e.multiple===!0?t:t[0])}function H(t){t.keyCode===13&&se(t)}function J(t){(t.keyCode===13||t.keyCode===32)&&E(t)}function F(){return s.value}function C(t,a){const n=L(t,a,l.value,b.value),f=F();f!=null&&(f.value=""),n!==void 0&&((e.multiple===!0?e.modelValue&&n.every(X=>l.value.includes(X)):e.modelValue===n[0])||p(b.value===!0?l.value.concat(n):n))}function d(){return[o("input",{class:[e.inputClass,"q-file__filler"],style:e.inputStyle})]}function M(){if(r.file!==void 0)return l.value.length===0?d():l.value.map((a,n)=>r.file({index:n,file:a,ref:this}));if(r.selected!==void 0)return l.value.length===0?d():r.selected({files:l.value,ref:this});if(e.useChips===!0)return l.value.length===0?d():l.value.map((a,n)=>o(de,{key:"file-"+n,removable:i.editable.value,dense:!0,textColor:e.color,tabindex:e.tabindex,onRemove:()=>{c(n)}},()=>o("span",{class:"ellipsis",textContent:a.name})));const t=e.displayValue!==void 0?e.displayValue:U.value;return t.length!==0?[o("div",{class:e.inputClass,style:e.inputStyle,textContent:t})]:d()}function W(){const t={ref:s,...$.value,...R.value,class:"q-field__input fit absolute-full cursor-pointer",onChange:C};return e.multiple===!0&&(t.multiple=!0),o("input",t)}return Object.assign(i,{fieldClass:K,emitValue:p,hasValue:g,inputRef:s,innerValue:l,floatingLabel:u(()=>g.value===!0||V(e.displayValue)),computedCounter:u(()=>{if(e.counterLabel!==void 0)return e.counterLabel(T.value);const t=e.maxFiles;return`${l.value.length}${t!==void 0?" / "+t:""} (${y.value})`}),getControlChild:()=>w("file"),getControl:()=>{const t={ref:i.targetRef,class:"q-field__native row items-center cursor-pointer",tabindex:e.tabindex};return i.editable.value===!0&&Object.assign(t,{onDragover:z,onDragleave:B,onKeydown:H,onKeyup:J}),o("div",t,[W()].concat(M()))}}),Object.assign(m,{removeAtIndex:c,removeFile:G,getNativeElement:()=>s.value}),ie(m,"nativeEl",()=>s.value),oe(i)}});x.props["no-caps"]={type:x.props["no-caps"],default:{}.VUE_APP_NO_CAPS};S.props["no-caps"]={type:S.props["no-caps"],default:{}.VUE_APP_NO_CAPS};P.props["no-caps"]={type:P.props["no-caps"],default:{}.VUE_APP_NO_CAPS};A.props.outlined={type:A.props.outlined,default:!0};O.props.outlined={type:O.props.outlined,default:!0};I.props.outlined={type:I.props.outlined,default:!0};j.props.outlined={type:j.props.outlined,default:!0};Q.props.color={type:Q.props.color,default:"accent"};_.props.color={type:_.props.color,default:"accent"};N.props.color={type:N.props.color,default:"accent"};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
